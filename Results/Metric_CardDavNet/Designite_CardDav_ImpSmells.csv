Implementation smell,Namespace,Class,File,Method,Description
Long Method,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The method has 357 lines of code.
Long Method,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The method has 101 lines of code.
Long Method,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The method has 126 lines of code.
Complex Method,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,AddressTypeToString,Cyclomatic complexity of the method is 9
Complex Method,CardDav.Card,PhoneNumber,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\PhoneNumber.cs,Parse,Cyclomatic complexity of the method is 15
Complex Method,CardDav.Card,PhoneNumber,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\PhoneNumber.cs,PhoneTypeToString,Cyclomatic complexity of the method is 16
Complex Method,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,QuotedReadToDelimiter,Cyclomatic complexity of the method is 8
Complex Method,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,Cyclomatic complexity of the method is 9
Complex Method,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,Cyclomatic complexity of the method is 12
Long Parameter List,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,DeliveryAddress,The method has 9 parameters. Parameters: item' addressType' postOfficeAddress' extendedAddress' street' locality' region' postalCode' country
Long Parameter List,CardDav.Card,DeliveryAddressCollection,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddressCollection.cs,Add,The method has 8 parameters. Parameters: type' postOfficeAddress' extendedAddress' street' locality' region' postalCode' country
Long Parameter List,CardDav.Card,Name,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\Name.cs,Name,The method has 5 parameters. Parameters: lastName' firstName' additionalNames' honorificPrefix' honorificSuffix
Long Statement,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,GetVCard,The length of the statement  "                if (status.Equals("200") || status.Equals("207") || status.Equals("204") || status.Equals("201") || status.ToLower().Equals("ok")) " is 130.
Long Statement,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,Delete,The length of the statement  "                if (status.Equals("200") || status.Equals("207") || status.Equals("204") ||  status.Equals("201") || status.ToLower().Equals("ok")) " is 131.
Long Statement,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,Add,The length of the statement  "                if (status.Equals("200") || status.Equals("207") || status.Equals("204") || status.Equals("201") || status.ToLower().Equals("ok")) " is 130.
Long Statement,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,Update,The length of the statement  "                if (status.Equals("200") || status.Equals("207") || status.Equals("204") || status.Equals("201") || status.ToLower().Equals("ok")) " is 130.
Long Statement,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,Query,The length of the statement  "                //request.Headers.Add("Authorization"' "Basic " + Convert.ToBase64String(Encoding.Default.GetBytes(this.authentication))); " is 122.
Long Statement,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,SimplifyResponse,The length of the statement  "                if (!String.IsNullOrEmpty(contentType) && !String.IsNullOrEmpty(href) && (contentType.IndexOf("vcard") > -1 || href.IndexOf("vcf") > -1)) " is 137.
Long Statement,CardDav.Card,DeliveryAddressCollection,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddressCollection.cs,Add,The length of the statement  "            m_pCollection.Add(new DeliveryAddress(item'type'postOfficeAddress'extendedAddress'street'locality'region'postalCode'country)); " is 126.
Long Statement,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,DateTimeToRfc2822,The length of the statement  "            return dateTime.ToString("ddd' dd MMM yyyy HH':'mm':'ss "'System.Globalization.DateTimeFormatInfo.InvariantInfo) + dateTime.ToString("zzz").Replace(":"'""); " is 156.
Long Statement,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The length of the statement  "             *      month-name      =       "Jan" / "Feb" / "Mar" / "Apr" / "May" / "Jun" / "Jul" / "Aug" / "Sep" / "Oct" / "Nov" / "Dec" " is 124.
Long Statement,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The length of the statement  "                return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime(); " is 134.
Long Statement,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,CreateMessageID,The length of the statement  "			return "<" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + "@" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + ">"; " is 139.
Long Statement,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,EncodedWord,The length of the statement  "                            retVal.Append(Encoding.GetEncoding(match.Groups["charset"].Value).GetString(Net.FromBase64(Encoding.Default.GetBytes(match.Groups["value"].Value)))); " is 149.
Long Statement,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,Phrase,The length of the statement  "                            return Encoding.GetEncoding(m.Groups["charset"].Value).GetString(Net.FromBase64(Encoding.Default.GetBytes(m.Groups["value"].Value))); " is 133.
Complex Conditional,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,GetVCard,The conditional expression  "status.Equals("200") || status.Equals("207") || status.Equals("204") || status.Equals("201") || status.ToLower().Equals("ok")"  is complex.
Complex Conditional,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,Delete,The conditional expression  "status.Equals("200") || status.Equals("207") || status.Equals("204") ||  status.Equals("201") || status.ToLower().Equals("ok")"  is complex.
Complex Conditional,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,Add,The conditional expression  "status.Equals("200") || status.Equals("207") || status.Equals("204") || status.Equals("201") || status.ToLower().Equals("ok")"  is complex.
Complex Conditional,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,Update,The conditional expression  "status.Equals("200") || status.Equals("207") || status.Equals("204") || status.Equals("201") || status.ToLower().Equals("ok")"  is complex.
Complex Conditional,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,SimplifyResponse,The conditional expression  "!String.IsNullOrEmpty(contentType) && !String.IsNullOrEmpty(href) && (contentType.IndexOf("vcard") > -1 || href.IndexOf("vcf") > -1)"  is complex.
Complex Conditional,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,ToFirstChar,The conditional expression  "peekChar == ' ' || peekChar == '\t' || peekChar == '\r' || peekChar == '\n'"  is complex.
Complex Conditional,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,IsAlpha,The conditional expression  "(c >= 65 && c <= 90) || (c >= 97 && c <= 122)"  is complex.
Complex Conditional,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,IsAttributeChar,The conditional expression  "c == ' ' || c == '*' || c == '\'' || c == '%'"  is complex.
Magic Number,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,Query,The following statement contains a magic number: if(this.authentication != null)              {                  request.UserAgent = UserAgent + Version;                  request.Method = method;                  request.PreAuthenticate = true;                  //request.Headers.Add("Authorization"' "Basic " + Convert.ToBase64String(Encoding.Default.GetBytes(this.authentication)));                  request.Credentials = new NetworkCredential(this.username' this.password);                    if (contentType != null)                  {                      request.ContentType = contentType;                  }                    if (content != null)                  {                      byte[] contentBytes = Encoding.UTF8.GetBytes(content);                      request.ContentLength = contentBytes.Length;                      Stream requestStream = request.GetRequestStream();                      requestStream.Write(contentBytes' 0' contentBytes.Length);                      requestStream.Close();                  }                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();                    queryResponse.Add("status"' response.StatusCode.ToString());                    Stream responseStream = response.GetResponseStream();                    byte[] buffer = new byte[2048];                    StringBuilder responseBuilder = new StringBuilder();                    int amountRead = 0;                    amountRead = responseStream.Read(buffer' 0' 2048);                    while (amountRead > 0)                  {                      string tempString = Encoding.UTF8.GetString(buffer' 0' amountRead);                      responseBuilder.Append(tempString);                        amountRead = responseStream.Read(buffer' 0' 2048);                  }                    queryResponse.Add("response"' responseBuilder.ToString());              }              else              {                  throw new HTTPException("No authentication information provided");              }
Magic Number,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,Query,The following statement contains a magic number: if(this.authentication != null)              {                  request.UserAgent = UserAgent + Version;                  request.Method = method;                  request.PreAuthenticate = true;                  //request.Headers.Add("Authorization"' "Basic " + Convert.ToBase64String(Encoding.Default.GetBytes(this.authentication)));                  request.Credentials = new NetworkCredential(this.username' this.password);                    if (contentType != null)                  {                      request.ContentType = contentType;                  }                    if (content != null)                  {                      byte[] contentBytes = Encoding.UTF8.GetBytes(content);                      request.ContentLength = contentBytes.Length;                      Stream requestStream = request.GetRequestStream();                      requestStream.Write(contentBytes' 0' contentBytes.Length);                      requestStream.Close();                  }                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();                    queryResponse.Add("status"' response.StatusCode.ToString());                    Stream responseStream = response.GetResponseStream();                    byte[] buffer = new byte[2048];                    StringBuilder responseBuilder = new StringBuilder();                    int amountRead = 0;                    amountRead = responseStream.Read(buffer' 0' 2048);                    while (amountRead > 0)                  {                      string tempString = Encoding.UTF8.GetString(buffer' 0' amountRead);                      responseBuilder.Append(tempString);                        amountRead = responseStream.Read(buffer' 0' 2048);                  }                    queryResponse.Add("response"' responseBuilder.ToString());              }              else              {                  throw new HTTPException("No authentication information provided");              }
Magic Number,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,Query,The following statement contains a magic number: if(this.authentication != null)              {                  request.UserAgent = UserAgent + Version;                  request.Method = method;                  request.PreAuthenticate = true;                  //request.Headers.Add("Authorization"' "Basic " + Convert.ToBase64String(Encoding.Default.GetBytes(this.authentication)));                  request.Credentials = new NetworkCredential(this.username' this.password);                    if (contentType != null)                  {                      request.ContentType = contentType;                  }                    if (content != null)                  {                      byte[] contentBytes = Encoding.UTF8.GetBytes(content);                      request.ContentLength = contentBytes.Length;                      Stream requestStream = request.GetRequestStream();                      requestStream.Write(contentBytes' 0' contentBytes.Length);                      requestStream.Close();                  }                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();                    queryResponse.Add("status"' response.StatusCode.ToString());                    Stream responseStream = response.GetResponseStream();                    byte[] buffer = new byte[2048];                    StringBuilder responseBuilder = new StringBuilder();                    int amountRead = 0;                    amountRead = responseStream.Read(buffer' 0' 2048);                    while (amountRead > 0)                  {                      string tempString = Encoding.UTF8.GetString(buffer' 0' amountRead);                      responseBuilder.Append(tempString);                        amountRead = responseStream.Read(buffer' 0' 2048);                  }                    queryResponse.Add("response"' responseBuilder.ToString());              }              else              {                  throw new HTTPException("No authentication information provided");              }
Magic Number,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,GenerateVCardId,The following statement contains a magic number: for (int i = 0; i <= 25; i++)              {                  if (i == 8 || i == 17)                  {                      id += "-";                  }                  else                  {                      int randomCharacter = random.Next(0' vCardIdChars.Length - 1);                      id += vCardIdChars[randomCharacter];                  }              }
Magic Number,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,GenerateVCardId,The following statement contains a magic number: for (int i = 0; i <= 25; i++)              {                  if (i == 8 || i == 17)                  {                      id += "-";                  }                  else                  {                      int randomCharacter = random.Next(0' vCardIdChars.Length - 1);                      id += vCardIdChars[randomCharacter];                  }              }
Magic Number,CardDav,Client,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Client.cs,GenerateVCardId,The following statement contains a magic number: for (int i = 0; i <= 25; i++)              {                  if (i == 8 || i == 17)                  {                      id += "-";                  }                  else                  {                      int randomCharacter = random.Next(0' vCardIdChars.Length - 1);                      id += vCardIdChars[randomCharacter];                  }              }
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,DeliveryAddress,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\DeliveryAddress.cs,Parse,The following statement contains a magic number: return new DeliveryAddress(                  item'                  type'                  items.Length >= 1 ? items[0] : ""'                  items.Length >= 2 ? items[1] : ""'                  items.Length >= 3 ? items[2] : ""'                  items.Length >= 4 ? items[3] : ""'                  items.Length >= 5 ? items[4] : ""'                  items.Length >= 6 ? items[5] : ""'                  items.Length >= 7 ? items[6] : ""              );
Magic Number,CardDav.Card,Item,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\Item.cs,FoldData,The following statement contains a magic number: if(data.Length > 76){                  int startPosition       = 0;                  int lastPossibleFoldPos = -1;                  StringBuilder retVal = new StringBuilder();                  for(int i=0;i<data.Length;i++){                      char c = data[i];                      // We have possible fold point                      if(c == ' ' || c == '\t'){                          lastPossibleFoldPos = i;                      }                        // End of data reached                      if(i == (data.Length - 1)){                          retVal.Append(data.Substring(startPosition));                      }                      // We need to fold                      else if((i - startPosition) >= 76){                          // There wasn't any good fold point(word is bigger than line)' just fold from current position.                          if(lastPossibleFoldPos == -1){                              lastPossibleFoldPos = i;                          }                                                retVal.Append(data.Substring(startPosition'lastPossibleFoldPos - startPosition) + "\r\n\t");                            i = lastPossibleFoldPos;                          lastPossibleFoldPos = -1;                          startPosition       = i;                      }                  }                    return retVal.ToString();              }              else{                  return data;              }
Magic Number,CardDav.Card,Item,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\Item.cs,FoldData,The following statement contains a magic number: if(data.Length > 76){                  int startPosition       = 0;                  int lastPossibleFoldPos = -1;                  StringBuilder retVal = new StringBuilder();                  for(int i=0;i<data.Length;i++){                      char c = data[i];                      // We have possible fold point                      if(c == ' ' || c == '\t'){                          lastPossibleFoldPos = i;                      }                        // End of data reached                      if(i == (data.Length - 1)){                          retVal.Append(data.Substring(startPosition));                      }                      // We need to fold                      else if((i - startPosition) >= 76){                          // There wasn't any good fold point(word is bigger than line)' just fold from current position.                          if(lastPossibleFoldPos == -1){                              lastPossibleFoldPos = i;                          }                                                retVal.Append(data.Substring(startPosition'lastPossibleFoldPos - startPosition) + "\r\n\t");                            i = lastPossibleFoldPos;                          lastPossibleFoldPos = -1;                          startPosition       = i;                      }                  }                    return retVal.ToString();              }              else{                  return data;              }
Magic Number,CardDav.Card,Name,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 2){                  name.m_FirstName = items[1];              }
Magic Number,CardDav.Card,Name,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 3){                  name.m_AdditionalNames = items[2];              }
Magic Number,CardDav.Card,Name,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 3){                  name.m_AdditionalNames = items[2];              }
Magic Number,CardDav.Card,Name,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 4){                  name.m_HonorificPrefix = items[3];              }
Magic Number,CardDav.Card,Name,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 4){                  name.m_HonorificPrefix = items[3];              }
Magic Number,CardDav.Card,Name,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 5){                  name.m_HonorificSuffix = items[4];              }
Magic Number,CardDav.Card,Name,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\Name.cs,Parse,The following statement contains a magic number: if(items.Length >= 5){                  name.m_HonorificSuffix = items[4];              }
Magic Number,CardDav.Card,vCard,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\vCard.cs,ParseStrings,The following statement contains a magic number: while(line != null && line.ToUpper() != "END:VCARD"){                  StringBuilder item = new StringBuilder();                  item.Append(line);                  // Get next line' see if item continues (folded line).                  line = fileStrings[lineCount++];                  while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){                      item.Append(line.Substring(1));                      line = fileStrings[lineCount++];                  }                    string[] name_value = item.ToString().Split(new char[]{':'}'2);                    // Item syntax: name[*(;parameter)]:value                  string[] name_params = name_value[0].Split(new char[]{';'}'2);                  string   name        = name_params[0];                  string   parameters  = "";                  if(name_params.Length == 2){                      parameters = name_params[1];                  }                  string value = "";                  if(name_value.Length == 2){                      value = name_value[1];                  }                  m_pItems.Add(name'parameters'value);              }
Magic Number,CardDav.Card,vCard,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\vCard.cs,ParseStrings,The following statement contains a magic number: while(line != null && line.ToUpper() != "END:VCARD"){                  StringBuilder item = new StringBuilder();                  item.Append(line);                  // Get next line' see if item continues (folded line).                  line = fileStrings[lineCount++];                  while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){                      item.Append(line.Substring(1));                      line = fileStrings[lineCount++];                  }                    string[] name_value = item.ToString().Split(new char[]{':'}'2);                    // Item syntax: name[*(;parameter)]:value                  string[] name_params = name_value[0].Split(new char[]{';'}'2);                  string   name        = name_params[0];                  string   parameters  = "";                  if(name_params.Length == 2){                      parameters = name_params[1];                  }                  string value = "";                  if(name_value.Length == 2){                      value = name_value[1];                  }                  m_pItems.Add(name'parameters'value);              }
Magic Number,CardDav.Card,vCard,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\vCard.cs,ParseStrings,The following statement contains a magic number: while(line != null && line.ToUpper() != "END:VCARD"){                  StringBuilder item = new StringBuilder();                  item.Append(line);                  // Get next line' see if item continues (folded line).                  line = fileStrings[lineCount++];                  while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){                      item.Append(line.Substring(1));                      line = fileStrings[lineCount++];                  }                    string[] name_value = item.ToString().Split(new char[]{':'}'2);                    // Item syntax: name[*(;parameter)]:value                  string[] name_params = name_value[0].Split(new char[]{';'}'2);                  string   name        = name_params[0];                  string   parameters  = "";                  if(name_params.Length == 2){                      parameters = name_params[1];                  }                  string value = "";                  if(name_value.Length == 2){                      value = name_value[1];                  }                  m_pItems.Add(name'parameters'value);              }
Magic Number,CardDav.Card,vCard,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Card\vCard.cs,ParseStrings,The following statement contains a magic number: while(line != null && line.ToUpper() != "END:VCARD"){                  StringBuilder item = new StringBuilder();                  item.Append(line);                  // Get next line' see if item continues (folded line).                  line = fileStrings[lineCount++];                  while(line != null && (line.StartsWith("\t") || line.StartsWith(" "))){                      item.Append(line.Substring(1));                      line = fileStrings[lineCount++];                  }                    string[] name_value = item.ToString().Split(new char[]{':'}'2);                    // Item syntax: name[*(;parameter)]:value                  string[] name_params = name_value[0].Split(new char[]{';'}'2);                  string   name        = name_params[0];                  string   parameters  = "";                  if(name_params.Length == 2){                      parameters = name_params[1];                  }                  string value = "";                  if(name_value.Length == 2){                      value = name_value[1];                  }                  m_pItems.Add(name'parameters'value);              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,ParseRfc2822DateTime,The following statement contains a magic number: try{                  MimeReader r = new MimeReader(value);                  string v = r.Atom();                  // Skip optional [ day-of-week "'" ] and read "day".                  if(v.Length == 3){                      r.Char(true);                      v = r.Atom();                  }                  int day    = Convert.ToInt32(v);                  v = r.Atom().ToLower();                  int month  = 1;                  if(v == "jan"){                      month  = 1;                  }                  else if(v == "feb"){                      month  = 2;                  }                  else if(v == "mar"){                      month  = 3;                  }                  else if(v == "apr"){                      month  = 4;                  }                  else if(v == "may"){                      month  = 5;                  }                  else if(v == "jun"){                      month  = 6;                  }                  else if(v == "jul"){                      month  = 7;                  }                  else if(v == "aug"){                      month  = 8;                  }                  else if(v == "sep"){                      month  = 9;                  }                  else if(v == "oct"){                      month  = 10;                  }                  else if(v == "nov"){                      month  = 11;                  }                  else if(v == "dec"){                      month  = 12;                  }                  else{                      throw new ArgumentException("Invalid month-name value '" + value + "'.");                  }                  int year   = Convert.ToInt32(r.Atom());                  int hour   = Convert.ToInt32(r.Atom());                  r.Char(true);                  int minute = Convert.ToInt32(r.Atom());                  int second = 0;                  // We have optional "second".                  if(r.Peek(true) == ':'){                      r.Char(true);                      second = Convert.ToInt32(r.Atom());                  }                  int timeZoneMinutes = 0;                  v = r.Atom();                  // Time zone missing. Not RFC syntax' but some servers will send such dates.                  if(v == null){                      // Just consider time zone as 0(GMT).                  }                  // We have RFC 2822 date. For example: +2000.                  else if(v[0] == '+' || v[0] == '-'){                      if(v[0] == '+'){                          timeZoneMinutes = (Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                      else{                          timeZoneMinutes = -(Convert.ToInt32(v.Substring(1'2)) * 60 + Convert.ToInt32(v.Substring(3'2)));                      }                  }                  // We have RFC 822 date with abbrevated time zone name. For example: GMT.                  else{                      v = v.ToUpper();                        #region time zones                        // Alpha Time Zone (military).                      if(v == "A"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Australian Central Daylight Time.                      else if(v == "ACDT"){                          timeZoneMinutes = ((10 * 60) + 30);                      }                      // Australian Central Standard Time.                      else if(v == "ACST"){                          timeZoneMinutes = ((09 * 60) + 30);                      }                      // Atlantic Daylight Time.                      else if(v == "ADT"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Australian Eastern Daylight Time.                      else if(v == "AEDT"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Australian Eastern Standard Time.                      else if(v == "AEST"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Alaska Daylight Time.                      else if(v == "AKDT"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Alaska Standard Time.                      else if(v == "AKST"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Atlantic Standard Time.                      else if(v == "AST"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Australian Western Daylight Time.                      else if(v == "AWDT"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Australian Western Standard Time.                      else if(v == "AWST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // Bravo Time Zone (millitary).                      else if(v == "B"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // British Summer Time.                      else if(v == "BST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Charlie Time Zone (millitary).                      else if(v == "C"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Central Daylight Time.                      else if(v == "CDT"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Central European Daylight Time.                      else if(v == "CEDT"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Summer Time.                      else if(v == "CEST"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Central European Time.                      else if(v == "CET"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Central Standard Time.                      else if(v == "CST"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Christmas Island Time.                      else if(v == "CXT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Delta Time Zone (military).                      else if(v == "D"){                          timeZoneMinutes = ((04 * 60) + 00);                      }                      // Echo Time Zone (military).                      else if(v == "E"){                          timeZoneMinutes = ((05 * 60) + 00);                      }                      // Eastern Daylight Time.                      else if(v == "EDT"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Eastern European Daylight Time.                      else if(v == "EEDT"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Summer Time.                      else if(v == "EEST"){                          timeZoneMinutes = ((03 * 60) + 00);                      }                      // Eastern European Time.                      else if(v == "EET"){                          timeZoneMinutes = ((02 * 60) + 00);                      }                      // Eastern Standard Time.                      else if(v == "EST"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Foxtrot Time Zone (military).                      else if(v == "F"){                          timeZoneMinutes = (06 * 60 + 00);                      }                      // Golf Time Zone (military).                      else if(v == "G"){                          timeZoneMinutes = ((07 * 60) + 00);                      }                      // Greenwich Mean Time.                      else if(v == "GMT"){                          timeZoneMinutes = 0000;                      }                      // Hotel Time Zone (military).                      else if(v == "H"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // India Time Zone (military).                      else if(v == "I"){                          timeZoneMinutes = ((09 * 60) + 00);                      }                      // Irish Summer Time.                      else if(v == "IST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Kilo Time Zone (millitary).                      else if(v == "K"){                          timeZoneMinutes = ((10 * 60) + 00);                      }                      // Lima Time Zone (millitary).                      else if(v == "L"){                          timeZoneMinutes = ((11 * 60) + 00);                      }                      // Mike Time Zone (millitary).                      else if(v == "M"){                          timeZoneMinutes = ((12 * 60) + 00);                      }                      // Mountain Daylight Time.                      else if(v == "MDT"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                      // Mountain Standard Time.                      else if(v == "MST"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // November Time Zone (military).                      else if(v == "N"){                          timeZoneMinutes = -((01 * 60) + 00);                      }                      // Newfoundland Daylight Time.                      else if(v == "NDT"){                          timeZoneMinutes = -((02 * 60) + 30);                      }                      // Norfolk (Island) Time.                      else if(v == "NFT"){                          timeZoneMinutes = ((11 * 60) + 30);                      }                      // Newfoundland Standard Time.                      else if(v == "NST"){                          timeZoneMinutes = -((03 * 60) + 30);                      }                      // Oscar Time Zone (military).                      else if(v == "O"){                          timeZoneMinutes = -((02 * 60) + 00);                      }                      // Papa Time Zone (military).                      else if(v == "P"){                          timeZoneMinutes = -((03 * 60) + 00);                      }                      // Pacific Daylight Time.                      else if(v == "PDT"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Pacific Standard Time.                      else if(v == "PST"){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Quebec Time Zone (military).                      else if(v == "Q"){                          timeZoneMinutes = -((04 * 60) + 00);                      }                      // Romeo Time Zone (military).                      else if(v == "R"){                          timeZoneMinutes = -((05 * 60) + 00);                      }                      // Sierra Time Zone (military).                      else if(v == "S"){                          timeZoneMinutes = -((06 * 60) + 00);                      }                       // Tango Time Zone (military).                      else if(v == "T"){                          timeZoneMinutes = -((07 * 60) + 00);                      }                      // Uniform Time Zone (military).                      else if(v == ""){                          timeZoneMinutes = -((08 * 60) + 00);                      }                      // Coordinated Universal Time.                      else if(v == "UTC"){                          timeZoneMinutes = 0000;                      }                      // Victor Time Zone (militray).                      else if(v == "V"){                          timeZoneMinutes = -((09 * 60) + 00);                      }                      // Whiskey Time Zone (military).                      else if(v == "W"){                          timeZoneMinutes = -((10 * 60) + 00);                      }                      // Western European Daylight Time.                      else if(v == "WEDT"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Summer Time.                      else if(v == "WEST"){                          timeZoneMinutes = ((01 * 60) + 00);                      }                      // Western European Time.                      else if(v == "WET"){                          timeZoneMinutes = 0000;                      }                      // Western Standard Time.                      else if(v == "WST"){                          timeZoneMinutes = ((08 * 60) + 00);                      }                      // X-ray Time Zone (military).                      else if(v == "X"){                          timeZoneMinutes = -((11 * 60) + 00);                      }                      // Yankee Time Zone (military).                      else if(v == "Y"){                          timeZoneMinutes = -((12 * 60) + 00);                      }                      // Zulu Time Zone (military).                      else if(v == "Z"){                          timeZoneMinutes = 0000;                      }                        #endregion                  }                                            // Convert time to UTC and then back to local.                  DateTime timeUTC = new DateTime(year'month'day'hour'minute'second).AddMinutes(-(timeZoneMinutes));                  return new DateTime(timeUTC.Year'timeUTC.Month'timeUTC.Day'timeUTC.Hour'timeUTC.Minute'timeUTC.Second'DateTimeKind.Utc).ToLocalTime();              }              catch(Exception x){                  string dymmy = x.Message;                  throw new ArgumentException("Argumnet 'value' value '" + value + "' is not valid RFC 822/2822 date-time string.");              }
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,CreateMessageID,The following statement contains a magic number: return "<" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + "@" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + ">";
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,CreateMessageID,The following statement contains a magic number: return "<" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + "@" + Guid.NewGuid().ToString().Replace("-"'"").Substring(16) + ">";
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,QuotedPrintableDecode,The following statement contains a magic number: while(b > -1){  				// Encoded 8-bit byte(=XX) or soft line break(=CRLF)  				if(b == '='){  					byte[] buffer = new byte[2];  					int nCount = msSourceStream.Read(buffer'0'2);  					if(nCount == 2){  						// Soft line break' line splitted' just skip CRLF  						if(buffer[0] == '\r' && buffer[1] == '\n'){  						}  						// This must be encoded 8-bit byte  						else{  							try{  								msRetVal.Write(Net.FromHex(buffer)'0'1);  							}  							catch{  								// Illegal value after =' just leave it as is  								msRetVal.WriteByte((byte)'=');  								msRetVal.Write(buffer'0'2);  							}  						}  					}  					// Illegal =' just leave as it is  					else{  						msRetVal.Write(buffer'0'nCount);  					}  				}  				// Just write back all other bytes  				else{  					msRetVal.WriteByte((byte)b);  				}    				// Read next byte  				b = msSourceStream.ReadByte();  			}
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,QuotedPrintableDecode,The following statement contains a magic number: while(b > -1){  				// Encoded 8-bit byte(=XX) or soft line break(=CRLF)  				if(b == '='){  					byte[] buffer = new byte[2];  					int nCount = msSourceStream.Read(buffer'0'2);  					if(nCount == 2){  						// Soft line break' line splitted' just skip CRLF  						if(buffer[0] == '\r' && buffer[1] == '\n'){  						}  						// This must be encoded 8-bit byte  						else{  							try{  								msRetVal.Write(Net.FromHex(buffer)'0'1);  							}  							catch{  								// Illegal value after =' just leave it as is  								msRetVal.WriteByte((byte)'=');  								msRetVal.Write(buffer'0'2);  							}  						}  					}  					// Illegal =' just leave as it is  					else{  						msRetVal.Write(buffer'0'nCount);  					}  				}  				// Just write back all other bytes  				else{  					msRetVal.WriteByte((byte)b);  				}    				// Read next byte  				b = msSourceStream.ReadByte();  			}
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,QuotedPrintableDecode,The following statement contains a magic number: while(b > -1){  				// Encoded 8-bit byte(=XX) or soft line break(=CRLF)  				if(b == '='){  					byte[] buffer = new byte[2];  					int nCount = msSourceStream.Read(buffer'0'2);  					if(nCount == 2){  						// Soft line break' line splitted' just skip CRLF  						if(buffer[0] == '\r' && buffer[1] == '\n'){  						}  						// This must be encoded 8-bit byte  						else{  							try{  								msRetVal.Write(Net.FromHex(buffer)'0'1);  							}  							catch{  								// Illegal value after =' just leave it as is  								msRetVal.WriteByte((byte)'=');  								msRetVal.Write(buffer'0'2);  							}  						}  					}  					// Illegal =' just leave as it is  					else{  						msRetVal.Write(buffer'0'nCount);  					}  				}  				// Just write back all other bytes  				else{  					msRetVal.WriteByte((byte)b);  				}    				// Read next byte  				b = msSourceStream.ReadByte();  			}
Magic Number,CardDav.Utils.MIME,Mimes,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Mimes.cs,QuotedPrintableDecode,The following statement contains a magic number: while(b > -1){  				// Encoded 8-bit byte(=XX) or soft line break(=CRLF)  				if(b == '='){  					byte[] buffer = new byte[2];  					int nCount = msSourceStream.Read(buffer'0'2);  					if(nCount == 2){  						// Soft line break' line splitted' just skip CRLF  						if(buffer[0] == '\r' && buffer[1] == '\n'){  						}  						// This must be encoded 8-bit byte  						else{  							try{  								msRetVal.Write(Net.FromHex(buffer)'0'1);  							}  							catch{  								// Illegal value after =' just leave it as is  								msRetVal.WriteByte((byte)'=');  								msRetVal.Write(buffer'0'2);  							}  						}  					}  					// Illegal =' just leave as it is  					else{  						msRetVal.Write(buffer'0'nCount);  					}  				}  				// Just write back all other bytes  				else{  					msRetVal.WriteByte((byte)b);  				}    				// Read next byte  				b = msSourceStream.ReadByte();  			}
Magic Number,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,IsAlpha,The following statement contains a magic number: if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)){                  return true;              }              else{                  return false;              }
Magic Number,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,IsAlpha,The following statement contains a magic number: if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)){                  return true;              }              else{                  return false;              }
Magic Number,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,IsAlpha,The following statement contains a magic number: if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)){                  return true;              }              else{                  return false;              }
Magic Number,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,IsAlpha,The following statement contains a magic number: if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)){                  return true;              }              else{                  return false;              }
Magic Number,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,IsToken,The following statement contains a magic number: if(c <= 31 || c == 127){                  return false;              }              else if(c == ' '){                  return false;              }              else{                  foreach(char tsC in tspecials){                      if(tsC == c){                          return false;                      }                  }              }
Magic Number,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,IsToken,The following statement contains a magic number: if(c <= 31 || c == 127){                  return false;              }              else if(c == ' '){                  return false;              }              else{                  foreach(char tsC in tspecials){                      if(tsC == c){                          return false;                      }                  }              }
Magic Number,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,IsAttributeChar,The following statement contains a magic number: if(c <= 31 || c > 127){                  return false;              }              else if(c == ' ' || c == '*' || c == '\'' || c == '%'){                  return false;              }              else{                  foreach(char cS in tspecials){                      if(c == cS){                          return false;                      }                  }              }
Magic Number,CardDav.Utils.MIME,MimeReader,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\MIME\MimeReader.cs,IsAttributeChar,The following statement contains a magic number: if(c <= 31 || c > 127){                  return false;              }              else if(c == ' ' || c == '*' || c == '\'' || c == '%'){                  return false;              }              else{                  foreach(char cS in tspecials){                      if(c == cS){                          return false;                      }                  }              }
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,StreamCopy,The following statement contains a magic number: if(blockSize < 1024){                  throw new ArgumentException("Argument 'blockSize' value must be >= 1024.");              }
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsMulticastAddress,The following statement contains a magic number: if(ip.IsIPv6Multicast){                  return true;              }              else if(ip.AddressFamily == AddressFamily.InterNetwork){                  byte[] bytes = ip.GetAddressBytes();                  if(bytes[0] >= 224 && bytes[0] <= 239){                      return true;                  }              }
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsMulticastAddress,The following statement contains a magic number: if(ip.IsIPv6Multicast){                  return true;              }              else if(ip.AddressFamily == AddressFamily.InterNetwork){                  byte[] bytes = ip.GetAddressBytes();                  if(bytes[0] >= 224 && bytes[0] <= 239){                      return true;                  }              }
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsPrivateIP,The following statement contains a magic number: if(ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork){  				byte[] ipBytes = ip.GetAddressBytes();    				/* Private IPs:  					First Octet = 192 AND Second Octet = 168 (Example: 192.168.X.X)   					First Octet = 172 AND (Second Octet >= 16 AND Second Octet <= 31) (Example: 172.16.X.X - 172.31.X.X)  					First Octet = 10 (Example: 10.X.X.X)  					First Octet = 169 AND Second Octet = 254 (Example: 169.254.X.X)    				*/    				if(ipBytes[0] == 192 && ipBytes[1] == 168){  					return true;  				}  				if(ipBytes[0] == 172 && ipBytes[1] >= 16 && ipBytes[1] <= 31){  					return true;  				}  				if(ipBytes[0] == 10){  					return true;  				}  				if(ipBytes[0] == 169 && ipBytes[1] == 254){  					return true;  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,IsAscii,The following statement contains a magic number: foreach(char c in value){  				if((int)c > 127){   					return false;  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: if(hexData.Length < 2 || (hexData.Length / (double)2 != Math.Floor(hexData.Length / (double)2))){  				throw new Exception("Illegal hex data' hex data must be in two bytes pairs' for example: 0F'FF'A3'... .");  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: if(hexData.Length < 2 || (hexData.Length / (double)2 != Math.Floor(hexData.Length / (double)2))){  				throw new Exception("Illegal hex data' hex data must be in two bytes pairs' for example: 0F'FF'A3'... .");  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: if(hexData.Length < 2 || (hexData.Length / (double)2 != Math.Floor(hexData.Length / (double)2))){  				throw new Exception("Illegal hex data' hex data must be in two bytes pairs' for example: 0F'FF'A3'... .");  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: MemoryStream retVal = new MemoryStream(hexData.Length / 2);
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,FromHex,The following statement contains a magic number: for(int i=0;i<hexData.Length;i+=2){  				byte[] hexPairInDecimal = new byte[2];  				// We need to convert hex char to decimal number' for example F = 15  				for(int h=0;h<2;h++){  					if(((char)hexData[i + h]) == '0'){  						hexPairInDecimal[h] = 0;  					}  					else if(((char)hexData[i + h]) == '1'){  						hexPairInDecimal[h] = 1;  					}  					else if(((char)hexData[i + h]) == '2'){  						hexPairInDecimal[h] = 2;  					}  					else if(((char)hexData[i + h]) == '3'){  						hexPairInDecimal[h] = 3;  					}  					else if(((char)hexData[i + h]) == '4'){  						hexPairInDecimal[h] = 4;  					}  					else if(((char)hexData[i + h]) == '5'){  						hexPairInDecimal[h] = 5;  					}  					else if(((char)hexData[i + h]) == '6'){  						hexPairInDecimal[h] = 6;  					}  					else if(((char)hexData[i + h]) == '7'){  						hexPairInDecimal[h] = 7;  					}  					else if(((char)hexData[i + h]) == '8'){  						hexPairInDecimal[h] = 8;  					}  					else if(((char)hexData[i + h]) == '9'){  						hexPairInDecimal[h] = 9;  					}  					else if(((char)hexData[i + h]) == 'A' || ((char)hexData[i + h]) == 'a'){  						hexPairInDecimal[h] = 10;  					}  					else if(((char)hexData[i + h]) == 'B' || ((char)hexData[i + h]) == 'b'){  						hexPairInDecimal[h] = 11;  					}  					else if(((char)hexData[i + h]) == 'C' || ((char)hexData[i + h]) == 'c'){  						hexPairInDecimal[h] = 12;  					}  					else if(((char)hexData[i + h]) == 'D' || ((char)hexData[i + h]) == 'd'){  						hexPairInDecimal[h] = 13;  					}  					else if(((char)hexData[i + h]) == 'E' || ((char)hexData[i + h]) == 'e'){  						hexPairInDecimal[h] = 14;  					}  					else if(((char)hexData[i + h]) == 'F' || ((char)hexData[i + h]) == 'f'){  						hexPairInDecimal[h] = 15;  					}  				}    				// Join hex 4 bit(left hex cahr) + 4bit(right hex char) in bytes 8 it  				retVal.WriteByte((byte)((hexPairInDecimal[0] << 4) | hexPairInDecimal[1]));  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: if(base64Chars != null && base64Chars.Length != 64){  				throw new Exception("There must be 64 chars in base64Chars char array !");  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: byte[] base64LoockUpTable = new byte[64];
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<64;i++){  				base64LoockUpTable[i] = (byte)base64Chars[i];  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: int encodedDataLength = (int)Math.Ceiling((data.Length * 8) / (double)6);
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: int encodedDataLength = (int)Math.Ceiling((data.Length * 8) / (double)6);
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: if(padd && (encodedDataLength / (double)4 != Math.Ceiling(encodedDataLength / (double)4))){  				encodedDataLength += (int)(Math.Ceiling(encodedDataLength / (double)4) * 4) - encodedDataLength;  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: if(padd && (encodedDataLength / (double)4 != Math.Ceiling(encodedDataLength / (double)4))){  				encodedDataLength += (int)(Math.Ceiling(encodedDataLength / (double)4) * 4) - encodedDataLength;  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: if(padd && (encodedDataLength / (double)4 != Math.Ceiling(encodedDataLength / (double)4))){  				encodedDataLength += (int)(Math.Ceiling(encodedDataLength / (double)4) * 4) - encodedDataLength;  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: if(padd && (encodedDataLength / (double)4 != Math.Ceiling(encodedDataLength / (double)4))){  				encodedDataLength += (int)(Math.Ceiling(encodedDataLength / (double)4) * 4) - encodedDataLength;  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: if(encodedDataLength > 76){  				numberOfLineBreaks = (int)Math.Ceiling(encodedDataLength / (double)76) - 1;  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: if(encodedDataLength > 76){  				numberOfLineBreaks = (int)Math.Ceiling(encodedDataLength / (double)76) - 1;  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: byte[] retVal = new byte[encodedDataLength + (numberOfLineBreaks * 2)];
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64EncodeEx,The following statement contains a magic number: for(int i=0;i<data.Length;i+=3){  				// Do line splitting  				if(lineBytes >= 76){  					retVal[position + 0] = (byte)'\r';  					retVal[position + 1] = (byte)'\n';					  					position += 2;  					lineBytes = 0;  				}    				// Full 3 bytes data block  				if((data.Length - i) >= 3){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2 | data[i + 2] >> 6];  					retVal[position + 3] = base64LoockUpTable[data[i + 2] & 0x3F];  					position += 4;  					lineBytes += 4;  				}  				// 2 bytes data block' left (last block)  				else if((data.Length - i) == 2){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4 | data[i + 1] >> 4];  					retVal[position + 2] = base64LoockUpTable[(data[i + 1] & 0xF) << 2];					  					if(padd){  						retVal[position + 3] = (byte)'=';  					}  				}  				// 1 bytes data block' left (last block)  				else if((data.Length - i) == 1){  					retVal[position + 0] = base64LoockUpTable[data[i + 0] >> 2];  					retVal[position + 1] = base64LoockUpTable[(data[i + 0] & 0x3) << 4];					  					if(padd){  						retVal[position + 2] = (byte)'=';  						retVal[position + 3] = (byte)'=';  					}  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: if(base64Chars != null && base64Chars.Length != 64){  				throw new Exception("There must be 64 chars in base64Chars char array !");  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodeTable = new byte[128];
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<128;i++){  				int mappingIndex = -1;  				for(int bc=0;bc<base64Chars.Length;bc++){  					if(i == base64Chars[bc]){  						mappingIndex = bc;  						break;  					}  				}    				if(mappingIndex > -1){  					decodeTable[i] = (byte)mappingIndex;  				}  				else{  					decodeTable[i] = 0xFF;  				}  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedDataBuffer  = new byte[((base64Data.Length * 6) / 8) + 4];
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedDataBuffer  = new byte[((base64Data.Length * 6) / 8) + 4];
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedDataBuffer  = new byte[((base64Data.Length * 6) / 8) + 4];
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: byte[] decodedBlock       = new byte[3];
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: byte[] base64Block        = new byte[4];
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
Magic Number,CardDav.Utils,Net,C:\repos\Metric_CardDavNet\Net 4.0\CardDav\Utils\Net.cs,Base64DecodeEx,The following statement contains a magic number: for(int i=0;i<base64Data.Length;i++){  				byte b = base64Data[i];    				// Read 4 byte base64 block and process it 			  				// Any characters outside of the base64 alphabet are to be ignored in base64-encoded data.    				// Padding char  				if(b == '='){  					base64Block[nByteInBase64Block] = 0xFF;  				}  				else{  					byte decodeByte = decodeTable[b & 0x7F];  					if(decodeByte != 0xFF){  						base64Block[nByteInBase64Block] = decodeByte;  						nByteInBase64Block++;  					}  				}                    /* Check if we can decode some bytes.                    * We must have full 4 byte base64 block or reached at the end of data.                   */                  int encodedBytesCount = -1;                  // We have full 4 byte base64 block                  if(nByteInBase64Block == 4){                      encodedBytesCount = 3;                  }                  // We have reached at the end of base64 data' there may be some bytes left                  else if(i == base64Data.Length - 1){                      // Invalid value' we can't have only 6 bit' just skip                       if(nByteInBase64Block == 1){                          encodedBytesCount = 0;                      }                      // There is 1 byte in two base64 bytes (6 + 2 bit)                      else if(nByteInBase64Block == 2){                          encodedBytesCount = 1;                      }                      // There are 2 bytes in two base64 bytes ([6 + 2]'[4 + 4] bit)                      else if(nByteInBase64Block == 3){                          encodedBytesCount = 2;                      }                  }                    // We have some bytes available to decode' decode them                  if(encodedBytesCount > -1){                      decodedDataBuffer[decodedBytesCount + 0] = (byte)((int)base64Block[0] << 2         | (int)base64Block[1] >> 4);  					decodedDataBuffer[decodedBytesCount + 1] = (byte)(((int)base64Block[1] & 0xF) << 4 | (int)base64Block[2] >> 2);  					decodedDataBuffer[decodedBytesCount + 2] = (byte)(((int)base64Block[2] & 0x3) << 6 | (int)base64Block[3] >> 0);                        // Increase decoded bytes count  					decodedBytesCount += encodedBytesCount;                        // Reset this block' reade next if there is any  					nByteInBase64Block = 0;                  }  			}
