Implementation smell,Namespace,Class,File,Method,Description
Long Method,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The method has 131 lines of code.
Long Method,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The method has 250 lines of code.
Long Method,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,Calculate,The method has 111 lines of code.
Long Method,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The method has 148 lines of code.
Long Method,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The method has 307 lines of code.
Complex Method,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,Calculate,Cyclomatic complexity of the method is 8
Complex Method,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,CheckStorageEngines,Cyclomatic complexity of the method is 12
Complex Method,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,Cyclomatic complexity of the method is 20
Complex Method,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,Cyclomatic complexity of the method is 27
Long Statement,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,Ok_Click,The length of the statement  "                MessageBox.Show(this.Server.LastError' "Error connecting to server"' MessageBoxButtons.OK' MessageBoxIcon.Error' MessageBoxDefaultButton.Button1' 0); " is 149.
Long Statement,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormLogOn)); " is 129.
Long Statement,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormMain)); " is 128.
Long Statement,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The length of the statement  "            this.results.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 143.
Long Statement,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The length of the statement  "            this.close.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The length of the statement  "            this.progessBarMain.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 152.
Long Statement,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The length of the statement  "                sql = "SELECT ENGINE' SUM(DATA_LENGTH)' COUNT(ENGINE) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND ENGINE IS NOT NULL GROUP BY ENGINE ORDER BY ENGINE ASC"; " is 203.
Long Statement,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The length of the statement  "                sql = "SELECT COUNT(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND Data_free > 0 AND NOT ENGINE = 'MEMORY'"; " is 166.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,Calculate,The length of the statement  "                this.PrintMessage(Status.Info' "MySQL Tuner " + Assembly.GetExecutingAssembly().GetName().Version.ToString(3) + " - Peter Chapman <peter@conglomo.co.nz>"); " is 155.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,Calculate,The length of the statement  "                this.PrintMessage(Status.Info' "Performing tests on " + this.Server.Host + ":" + this.Server.Port + " at " + DateTime.Now.ToString(Settings.Culture.DateTimeFormat.FullDateTimePattern' Settings.Culture)); " is 203.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,Calculate,The length of the statement  "                this.PrintMessage(Status.Info' "Scan Completed at " + DateTime.Now.ToString(Settings.Culture.DateTimeFormat.FullDateTimePattern' Settings.Culture)); " is 148.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,ValidateMySqlVersion,The length of the statement  "                this.PrintMessage(Status.Fail' "Your MySQL version " + this.Server.Variables["version"] + " is EOL software!  Upgrade soon!"); " is 126.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,CheckStorageEngines,The length of the statement  "            if (this.Server.Variables.ContainsKey("have_federated_engine") && this.Server.Variables["have_federated_engine"] == "YES") " is 122.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,CheckStorageEngines,The length of the statement  "                this.PrintMessage(Status.Info' "Data in " + engineStatistic.Key + " tables: " + DisplayBytesRounded(engineStatistic.Value) + " (Tables: " + this.Server.EngineCount[engineStatistic.Key] + ")"); " is 192.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,CheckStorageEngines,The length of the statement  "            if (!this.Server.EngineStatistics.ContainsKey("InnoDB") && this.Server.Variables.ContainsKey("have_innodb") && this.Server.Variables["have_innodb"] == "YES") " is 157.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,CheckStorageEngines,The length of the statement  "            if (!this.Server.EngineStatistics.ContainsKey("BerkeleyDB") && this.Server.Variables.ContainsKey("have_bdb") && this.Server.Variables["have_bdb"] == "YES") " is 155.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,CheckStorageEngines,The length of the statement  "            if (!this.Server.EngineStatistics.ContainsKey("ISAM") && this.Server.Variables.ContainsKey("have_isam") && this.Server.Variables["have_isam"] == "YES") " is 151.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,SecurityRecommendations,The length of the statement  "            string sql = "SELECT CONCAT(user' '@'' host) AS `username` FROM mysql.user WHERE " + passwordColumnName + " = '' OR " + passwordColumnName + " IS NULL ORDER BY `username`"; " is 172.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("per_thread_buffers"' Convert.ToInt64(this.Server.Variables["read_buffer_size"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["read_rnd_buffer_size"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["sort_buffer_size"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["thread_stack"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["join_buffer_size"]' Settings.Culture)); " is 438.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("per_thread_buffers"' Convert.ToInt64(this.Server.Variables["record_buffer"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["record_rnd_buffer"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["sort_buffer"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["thread_stack"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["join_buffer_size"]' Settings.Culture)); " is 427.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("total_per_thread_buffers"' Convert.ToInt64(this.Calculations["per_thread_buffers"]' Settings.Culture) * Convert.ToInt64(this.Server.Variables["max_connections"]' Settings.Culture)); " is 204.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("max_total_per_thread_buffers"' Convert.ToInt64(this.Calculations["per_thread_buffers"]' Settings.Culture) * Convert.ToInt64(this.Server.Status["Max_used_connections"]' Settings.Culture)); " is 210.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("max_tmp_table_size"' (Convert.ToInt64(this.Server.Variables["tmp_table_size"]' Settings.Culture) > Convert.ToInt64(this.Server.Variables["max_heap_table_size"]' Settings.Culture)) ? Convert.ToInt64(this.Server.Variables["max_heap_table_size"]' Settings.Culture) : Convert.ToInt64(this.Server.Variables["tmp_table_size"]' Settings.Culture)); " is 363.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("server_buffers"' Convert.ToInt64(this.Server.Variables["key_buffer_size"]' Settings.Culture) + Convert.ToInt64(this.Calculations["max_tmp_table_size"]' Settings.Culture)); " is 194.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations["server_buffers"] += this.Server.Variables.ContainsKey("innodb_buffer_pool_size") ? Convert.ToInt64(this.Server.Variables["innodb_buffer_pool_size"]' Settings.Culture) : 0; " is 190.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations["server_buffers"] += this.Server.Variables.ContainsKey("innodb_additional_mem_pool_size") ? Convert.ToInt64(this.Server.Variables["innodb_additional_mem_pool_size"]' Settings.Culture) : 0; " is 206.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations["server_buffers"] += this.Server.Variables.ContainsKey("innodb_log_buffer_size") ? Convert.ToInt64(this.Server.Variables["innodb_log_buffer_size"]' Settings.Culture) : 0; " is 188.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations["server_buffers"] += this.Server.Variables.ContainsKey("query_cache_size") ? Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) : 0; " is 176.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("max_used_memory"' this.Calculations["server_buffers"] + this.Calculations["max_total_per_thread_buffers"]); " is 130.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("total_possible_used_memory"' this.Calculations["server_buffers"] + this.Calculations["total_per_thread_buffers"]); " is 137.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("pct_physical_memory"' Convert.ToInt64((Convert.ToUInt64(this.Calculations["total_possible_used_memory"]' Settings.Culture) * 100) / this.Server.PhysicalMemory' Settings.Culture)); " is 202.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("pct_slow_queries"' (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Slow_queries"]' Settings.Culture) / Convert.ToDouble(this.Server.Status["Questions"]' Settings.Culture)) * 100D)); " is 213.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("pct_connections_used"' (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Max_used_connections"]' Settings.Culture) / Convert.ToDouble(this.Server.Variables["max_connections"]' Settings.Culture)) * 100D)); " is 234.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations["pct_connections_used"] = (this.Calculations["pct_connections_used"] > 100) ? 100 : this.Calculations["pct_connections_used"]; " is 144.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("pct_key_buffer_used"' (long)Math.Ceiling(1 - ((Convert.ToDouble(this.Server.Status["Key_blocks_unused"]' Settings.Culture) * Convert.ToDouble(this.Server.Variables["key_cache_block_size"]' Settings.Culture)) / Convert.ToDouble(this.Server.Variables["key_buffer_size"]' Settings.Culture))) * 100); " is 319.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("pct_keys_from_mem"' 100 - (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Key_reads"]' Settings.Culture) / Convert.ToDouble(this.Server.Status["Key_read_requests"]' Settings.Culture)) * 100D)); " is 225.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("query_cache_efficiency"' (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Qcache_hits"]' Settings.Culture) / (Convert.ToDouble(this.Server.Status["Com_select"]' Settings.Culture) + Convert.ToDouble(this.Server.Status["Qcache_hits"]' Settings.Culture))) * 100D)); " is 293.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                    this.Calculations.Add("pct_query_cache_used"' 100 - (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Qcache_free_memory"]' Settings.Culture) / Convert.ToDouble(this.Server.Variables["query_cache_size"]' Settings.Culture)) * 100)); " is 238.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                    this.Calculations.Add("query_cache_prunes_per_day"' Convert.ToInt64(this.Server.Status["Qcache_lowmem_prunes"]' Settings.Culture) / (long)Math.Ceiling(Convert.ToInt64(this.Server.Status["Uptime"]' Settings.Culture) / 86400D)); " is 226.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("total_sorts"' Convert.ToInt64(this.Server.Status["Sort_scan"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Sort_range"]' Settings.Culture)); " is 175.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("pct_temp_sort_table"' (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Sort_merge_passes"]' Settings.Culture) / Convert.ToDouble(this.Calculations["total_sorts"]' Settings.Culture)) * 100D)); " is 222.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("joins_without_indexes"' Convert.ToInt64(this.Server.Status["Select_range_check"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Select_full_join"]' Settings.Culture)); " is 200.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("joins_without_indexes_per_day"' this.Calculations["joins_without_indexes"] / (long)Math.Ceiling(Convert.ToInt64(this.Server.Status["Uptime"]' Settings.Culture) / 86400D)); " is 194.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                    this.Calculations.Add("pct_temp_disk"' (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) / (Convert.ToDouble(this.Server.Status["Created_tmp_tables"]' Settings.Culture) + Convert.ToDouble(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture))) * 100D)); " is 316.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("table_cache_hit_rate"' Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture) * 100 / Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture)); " is 195.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("pct_files_open"' Convert.ToInt64(this.Server.Status["Open_files"]' Settings.Culture) * 100 / Convert.ToInt64(this.Server.Variables["open_files_limit"]' Settings.Culture)); " is 194.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                    this.Calculations.Add("pct_table_locks_immediate"' Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture) * 100 / (Convert.ToInt64(this.Server.Status["Table_locks_waited"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture))); " is 298.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "            this.Calculations.Add("thread_cache_hit_rate"' 100 - (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Threads_created"]' Settings.Culture) / Convert.ToDouble(this.Server.Status["Connections"]' Settings.Culture)) * 100D)); " is 229.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("pct_aborted_connections"' (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Aborted_connects"]' Settings.Culture) / Convert.ToDouble(this.Server.Status["Connections"]' Settings.Culture)) * 100D)); " is 226.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("total_writes"' Convert.ToInt64(this.Server.Status["Com_delete"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_insert"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_update"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_replace"]' Settings.Culture)); " is 318.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                    this.Calculations.Add("pct_reads"' (long)Math.Ceiling((Convert.ToDouble(this.Calculations["total_reads"]) / Convert.ToDouble(this.Calculations["total_reads"] + this.Calculations["total_writes"])) * 100D)); " is 205.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The length of the statement  "                this.Calculations.Add("innodb_log_size_pct"' Convert.ToInt64(this.Server.Variables["innodb_log_file_size"]' Settings.Culture) * 100 / Convert.ToInt64(this.Server.Variables["innodb_buffer_pool_size"]' Settings.Culture)); " is 219.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                qps = Convert.ToInt64(this.Server.Status["Questions"]' Settings.Culture) / Convert.ToInt64(this.Server.Status["Uptime"]' Settings.Culture); " is 139.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "            this.PrintMessage(Status.Info' "Up for: " + PrettyUptime(Convert.ToInt64(this.Server.Status["Uptime"]' Settings.Culture)) + " (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Questions"]' Settings.Culture)) + " q [" + DisplayRounded(qps) + " qps]' " + DisplayRounded(Convert.ToInt64(this.Server.Status["Connections"]' Settings.Culture)) + " conn' TX: " + DisplayRounded(Convert.ToInt64(this.Server.Status["Bytes_sent"]' Settings.Culture)) + "' RX: " + DisplayRounded(Convert.ToInt64(this.Server.Status["Bytes_received"]' Settings.Culture)) + ")"); " is 554.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "            this.PrintMessage(Status.Info' "Reads / Writes: " + this.Calculations["pct_reads"] + "% / " + this.Calculations["pct_writes"] + "%"); " is 133.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "            this.PrintMessage(Status.Info' "Total buffers: " + DisplayBytes(this.Calculations["server_buffers"]) + " global + " + DisplayBytes(this.Calculations["per_thread_buffers"]) + " per thread (" + this.Server.Variables["max_connections"] + " max threads)"); " is 252.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.PrintMessage(Status.Fail' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)"); " is 204.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.PrintMessage(Status.Fail' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)"); " is 204.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.PrintMessage(Status.Pass' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)"); " is 204.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.PrintMessage(Status.Fail' "Slow queries: " + this.Calculations["pct_slow_queries"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Slow_queries"]' Settings.Culture)) + "/" + DisplayRounded(Convert.ToInt64(this.Server.Status["Questions"]' Settings.Culture)) + ")"); " is 282.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.PrintMessage(Status.Pass' "Slow queries: " + this.Calculations["pct_slow_queries"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Slow_queries"]' Settings.Culture)) + "/" + DisplayRounded(Convert.ToInt64(this.Server.Status["Questions"]' Settings.Culture)) + ")"); " is 282.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.PrintMessage(Status.Fail' "Highest connection usage: " + this.Calculations["pct_connections_used"] + "%  (" + this.Server.Status["Max_used_connections"] + "/" + this.Server.Variables["max_connections"] + ")"); " is 214.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.PrintMessage(Status.Pass' "Highest usage of available connections: " + this.Calculations["pct_connections_used"] + "% (" + this.Server.Status["Max_used_connections"] + "/" + this.Server.Variables["max_connections"] + ")"); " is 227.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                if (Convert.ToInt64(this.Server.Variables["key_buffer_size"]' Settings.Culture) < this.Calculations["total_myisam_indexes"] && this.Calculations["pct_keys_from_mem"] < 95) " is 171.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Fail' "Key buffer size / total MyISAM indexes: " + DisplayBytes(Convert.ToInt64(this.Server.Variables["key_buffer_size"]' Settings.Culture)) + "/" + DisplayBytes(this.Calculations["total_myisam_indexes"])); " is 231.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Pass' "Key buffer size / total MyISAM indexes: " + DisplayBytes(Convert.ToInt64(this.Server.Variables["key_buffer_size"]' Settings.Culture)) + "/" + DisplayBytes(this.Calculations["total_myisam_indexes"])); " is 231.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                        this.PrintMessage(Status.Fail' "Key buffer hit rate: " + this.Calculations["pct_keys_from_mem"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_read_requests"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_reads"]' Settings.Culture)) + " reads)"); " is 310.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                        this.PrintMessage(Status.Pass' "Key buffer hit rate: " + this.Calculations["pct_keys_from_mem"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_read_requests"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_reads"]' Settings.Culture)) + " reads)"); " is 310.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Fail' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)"); " is 386.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.VariablesToAdjust.Add("query_cache_limit (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_limit"]' Settings.Culture)) + "' or use smaller result sets)"); " is 187.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Pass' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)"); " is 386.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                        this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ") [see warning above]"); " is 177.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                        this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ")"); " is 157.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.PrintMessage(Status.Fail' "Sorts requiring temporary tables: " + this.Calculations["pct_temp_sort_table"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Sort_merge_passes"]' Settings.Culture)) + " temp sorts / " + DisplayRounded(this.Calculations["total_sorts"]) + " sorts)"); " is 295.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.VariablesToAdjust.Add("sort_buffer_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["sort_buffer_size"]' Settings.Culture)) + ")"); " is 157.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.VariablesToAdjust.Add("read_rnd_buffer_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["read_rnd_buffer_size"]' Settings.Culture)) + ")"); " is 165.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.PrintMessage(Status.Pass' "Sorts requiring temporary tables: " + this.Calculations["pct_temp_sort_table"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Sort_merge_passes"]' Settings.Culture)) + " temp sorts / " + DisplayRounded(this.Calculations["total_sorts"]) + " sorts)"); " is 295.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                this.VariablesToAdjust.Add("join_buffer_size (> " + DisplayBytes(Convert.ToInt64(this.Server.Variables["join_buffer_size"]' Settings.Culture)) + "' or always use indexes with joins)"); " is 184.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)"); " is 418.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.VariablesToAdjust.Add("tmp_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["tmp_table_size"]' Settings.Culture)) + ")"); " is 153.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.VariablesToAdjust.Add("max_heap_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["max_heap_table_size"]' Settings.Culture)) + ")"); " is 163.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)"); " is 418.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Pass' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)"); " is 418.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Fail' "Thread cache hit rate: " + this.Calculations["thread_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Threads_created"]' Settings.Culture)) + " created / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Connections"]' Settings.Culture)) + " connections)"); " is 323.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Pass' "Thread cache hit rate: " + this.Calculations["thread_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Threads_created"]' Settings.Culture)) + " created / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Connections"]' Settings.Culture)) + " connections)"); " is 323.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Fail' "Table cache hit rate: " + this.Calculations["table_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture)) + " open / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture)) + " opened)"); " is 311.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Pass' "Table cache hit rate: " + this.Calculations["table_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture)) + " open / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture)) + " opened)"); " is 311.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Fail' "Open file limit used: " + this.Calculations["pct_files_open"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_files"]' Settings.Culture)) + "/" + DisplayRounded(Convert.ToInt64(this.Server.Variables["open_files_limit"]' Settings.Culture)) + ")"); " is 296.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Pass' "Open file limit used: " + this.Calculations["pct_files_open"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_files"]' Settings.Culture)) + "/" + DisplayRounded(Convert.ToInt64(this.Server.Variables["open_files_limit"]' Settings.Culture)) + ")"); " is 296.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Fail' "Table locks acquired immediately: " + this.Calculations["pct_table_locks_immediate"] + "%"); " is 124.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Pass' "Table locks acquired immediately: " + this.Calculations["pct_table_locks_immediate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture)) + " immediate / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Table_locks_waited"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture)) + " locks)"); " is 428.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "            else if (this.Server.Variables["concurrent_insert"] != "ON" && this.Server.Variables["concurrent_insert"] != "AUTO" && this.Server.Variables["concurrent_insert"] != "ALWAYS" && Convert.ToInt64(this.Server.Variables["concurrent_insert"]' Settings.Culture) == 0) " is 260.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "            if (this.Server.Variables.ContainsKey("have_innodb") && this.Server.Variables["have_innodb"] == "YES" && this.Server.EngineStatistics.ContainsKey("InnoDB")) " is 156.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                if (Convert.ToInt64(this.Server.Variables["innodb_buffer_pool_size"]' Settings.Culture) > this.Server.EngineStatistics["InnoDB"]) " is 129.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Pass' "InnoDB data size / buffer pool: " + DisplayBytes(this.Server.EngineStatistics["InnoDB"]) + "/" + DisplayBytes(Convert.ToInt64(this.Server.Variables["innodb_buffer_pool_size"]' Settings.Culture))); " is 228.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.PrintMessage(Status.Fail' "InnoDB data size / buffer pool: " + DisplayBytes(this.Server.EngineStatistics["InnoDB"]) + "/" + DisplayBytes(Convert.ToInt64(this.Server.Variables["innodb_buffer_pool_size"]' Settings.Culture))); " is 228.
Long Statement,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The length of the statement  "                    this.VariablesToAdjust.Add("innodb_buffer_pool_size (>= " + DisplayBytesRounded(this.Server.EngineStatistics["InnoDB"]) + ")"); " is 127.
Complex Conditional,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The conditional expression  "this.Server.Variables["concurrent_insert"] != "ON" && this.Server.Variables["concurrent_insert"] != "AUTO" && this.Server.Variables["concurrent_insert"] != "ALWAYS" && Convert.ToInt64(this.Server.Variables["concurrent_insert"]' Settings.Culture) == 0"  is complex.
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,Ok_Click,The following statement contains a magic number: if (!uint.TryParse(this.port.Text' out portNumber))              {                  portNumber = 3306;              }
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.host.Location = new System.Drawing.Point(73' 12);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.host.Location = new System.Drawing.Point(73' 12);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.host.Size = new System.Drawing.Size(110' 20);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.host.Size = new System.Drawing.Size(110' 20);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.host.TabIndex = 3;
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelServer.Location = new System.Drawing.Point(12' 15);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelServer.Location = new System.Drawing.Point(12' 15);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelServer.Size = new System.Drawing.Size(38' 13);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelServer.Size = new System.Drawing.Size(38' 13);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelServer.TabIndex = 6;
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelUserName.Location = new System.Drawing.Point(12' 41);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelUserName.Location = new System.Drawing.Point(12' 41);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelUserName.Size = new System.Drawing.Size(55' 13);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelUserName.Size = new System.Drawing.Size(55' 13);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelUserName.TabIndex = 7;
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.userName.Location = new System.Drawing.Point(73' 38);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.userName.Location = new System.Drawing.Point(73' 38);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.userName.Size = new System.Drawing.Size(192' 20);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.userName.Size = new System.Drawing.Size(192' 20);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.userName.TabIndex = 5;
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelPassword.Location = new System.Drawing.Point(12' 67);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelPassword.Location = new System.Drawing.Point(12' 67);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelPassword.Size = new System.Drawing.Size(53' 13);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelPassword.Size = new System.Drawing.Size(53' 13);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelPassword.TabIndex = 8;
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.password.Location = new System.Drawing.Point(73' 64);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.password.Location = new System.Drawing.Point(73' 64);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.password.Size = new System.Drawing.Size(192' 20);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.password.Size = new System.Drawing.Size(192' 20);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelPort.Location = new System.Drawing.Point(189' 15);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelPort.Location = new System.Drawing.Point(189' 15);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelPort.Size = new System.Drawing.Size(26' 13);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelPort.Size = new System.Drawing.Size(26' 13);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.labelPort.TabIndex = 9;
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.cancel.Location = new System.Drawing.Point(190' 90);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.cancel.Location = new System.Drawing.Point(190' 90);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.cancel.Size = new System.Drawing.Size(75' 23);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.cancel.Size = new System.Drawing.Size(75' 23);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.cancel.TabIndex = 2;
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.ok.Location = new System.Drawing.Point(108' 90);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.ok.Location = new System.Drawing.Point(108' 90);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.ok.Size = new System.Drawing.Size(75' 23);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.ok.Size = new System.Drawing.Size(75' 23);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.port.Location = new System.Drawing.Point(222' 13);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.port.Location = new System.Drawing.Point(222' 13);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.port.Size = new System.Drawing.Size(43' 20);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.port.Size = new System.Drawing.Size(43' 20);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.port.TabIndex = 4;
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(277' 125);
Magic Number,MySqlTuner,FormLogOn,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormLogOn.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(277' 125);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,ProgressComplete,The following statement contains a magic number: if (this.results.InvokeRequired)              {                  ProgressBarCompleteDelegate sd = new ProgressBarCompleteDelegate(this.ProgressComplete);                  this.Invoke(sd' new object[] { complete });              }              else              {                  this.progessBarMain.Style = ProgressBarStyle.Continuous;                  if (complete)                  {                      this.progessBarMain.Value = 100;                  }                  else                  {                      // An arbitrary number to show incompletion                      this.progessBarMain.Value = 40;                  }              }
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,ProgressComplete,The following statement contains a magic number: if (this.results.InvokeRequired)              {                  ProgressBarCompleteDelegate sd = new ProgressBarCompleteDelegate(this.ProgressComplete);                  this.Invoke(sd' new object[] { complete });              }              else              {                  this.progessBarMain.Style = ProgressBarStyle.Continuous;                  if (complete)                  {                      this.progessBarMain.Value = 100;                  }                  else                  {                      // An arbitrary number to show incompletion                      this.progessBarMain.Value = 40;                  }              }
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.results.Location = new System.Drawing.Point(12' 12);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.results.Location = new System.Drawing.Point(12' 12);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.results.Size = new System.Drawing.Size(532' 315);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.results.Size = new System.Drawing.Size(532' 315);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.status.MinimumWidth = 50;
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.status.Width = 50;
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.notice.MinimumWidth = 100;
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.close.Location = new System.Drawing.Point(469' 337);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.close.Location = new System.Drawing.Point(469' 337);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.close.Size = new System.Drawing.Size(75' 23);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.close.Size = new System.Drawing.Size(75' 23);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.progessBarMain.Location = new System.Drawing.Point(12' 340);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.progessBarMain.Location = new System.Drawing.Point(12' 340);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.progessBarMain.Size = new System.Drawing.Size(178' 16);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.progessBarMain.Size = new System.Drawing.Size(178' 16);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.progessBarMain.TabIndex = 2;
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(556' 368);
Magic Number,MySqlTuner,FormMain,C:\repos\pmachapman_mysqltuner\MySQLTuner\FormMain.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(556' 368);
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,MySqlServer,The following statement contains a magic number: if (this.Port == 0)              {                  this.Port = 3306;              }
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Open,The following statement contains a magic number: MySqlConnectionStringBuilder connectionStringBuilder = new MySqlConnectionStringBuilder()              {                  Server = this.Host'                  Port = this.Port'                  UserID = this.UserName'                  Password = this.Password'                  ConnectionTimeout = 30' // Stop any time out issues                  DefaultCommandTimeout = 0              };
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The following statement contains a magic number: if (this.Version.Major > 4 || (this.Version.Major == 4 && this.Version.Minor >= 1))              {                  // have_* for engines is deprecated and will be removed in MySQL 5.6;                  // check SHOW ENGINES and set corresponding old style variables.                  // Also works around MySQL bug #59393 wrt. skip-innodb                  sql = "SHOW ENGINES";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              string engine = GetStringFromReader(reader' 0).ToLower(Settings.Culture);                              if (engine == "federated" || engine == "blackhole")                              {                                  engine += "_engine";                              }                              else if (engine == "berkeleydb")                              {                                  engine = "bdb";                              }                                string value = GetStringFromReader(reader' 1);                              if (value == "DEFAULT")                              {                                  value = "YES";                              }                                string key = "have_" + engine;                              if (this.Variables.ContainsKey(key))                              {                                  this.Variables[key] = value;                              }                              else                              {                                  this.Variables.Add(key' value);                              }                          }                      }                  }              }
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The following statement contains a magic number: if (this.Version.Major > 4 || (this.Version.Major == 4 && this.Version.Minor >= 1))              {                  // have_* for engines is deprecated and will be removed in MySQL 5.6;                  // check SHOW ENGINES and set corresponding old style variables.                  // Also works around MySQL bug #59393 wrt. skip-innodb                  sql = "SHOW ENGINES";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              string engine = GetStringFromReader(reader' 0).ToLower(Settings.Culture);                              if (engine == "federated" || engine == "blackhole")                              {                                  engine += "_engine";                              }                              else if (engine == "berkeleydb")                              {                                  engine = "bdb";                              }                                string value = GetStringFromReader(reader' 1);                              if (value == "DEFAULT")                              {                                  value = "YES";                              }                                string key = "have_" + engine;                              if (this.Variables.ContainsKey(key))                              {                                  this.Variables[key] = value;                              }                              else                              {                                  this.Variables.Add(key' value);                              }                          }                      }                  }              }
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The following statement contains a magic number: if (this.Version.Major >= 5)              {                  // MySQL 5 servers can have table sizes calculated quickly from information schema                  sql = "SELECT ENGINE' SUM(DATA_LENGTH)' COUNT(ENGINE) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND ENGINE IS NOT NULL GROUP BY ENGINE ORDER BY ENGINE ASC";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              string key = GetStringFromReader(reader' 0);                              long size;                              if (!long.TryParse(GetStringFromReader(reader' 1)' out size))                              {                                  size = 0;                              }                                long count;                              if (!long.TryParse(GetStringFromReader(reader' 2)' out count))                              {                                  count = 0;                              }                                if (size > 0)                              {                                  // Add the size                                  if (this.EngineStatistics.ContainsKey(key))                                  {                                      this.EngineStatistics[key] = size;                                  }                                  else                                  {                                      this.EngineStatistics.Add(key' size);                                  }                                    // Add the table count                                  if (this.EngineCount.ContainsKey(key))                                  {                                      this.EngineCount[key] = count;                                  }                                  else                                  {                                      this.EngineCount.Add(key' count);                                  }                              }                          }                      }                  }                    // Get the number of fragmented tables                  sql = "SELECT COUNT(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND Data_free > 0 AND NOT ENGINE = 'MEMORY'";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      object scalar = command.ExecuteScalar();                      if (scalar != null)                      {                          long fragmentedTables;                          if (!long.TryParse(scalar.ToString()' out fragmentedTables))                          {                              fragmentedTables = 0;                          }                            this.FragmentedTables = fragmentedTables;                      }                  }              }              else              {                  // MySQL < 5 servers take a lot of work to get table sizes                  // Now we build a database list' and loop through it to get storage engine stats for tables                  List<string> databases = new List<string>();                  sql = "SHOW DATABASES";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              databases.Add(GetStringFromReader(reader' 0));                          }                      }                  }                    // Reset the engine variables                  this.EngineCount = new Dictionary<string' long>();                  this.EngineStatistics = new Dictionary<string' long>();                  this.FragmentedTables = 0;                    // Go through every database                  foreach (string database in databases)                  {                      if (database != "information_schema" && database != "performance_schema")                      {                          sql = "SHOW TABLE STATUS FROM `" + database + "`";                          using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                          {                              using (MySqlDataReader reader = command.ExecuteReader())                              {                                  while (reader.Read())                                  {                                      string key = GetStringFromReader(reader' 1);                                      long size;                                      long dataFree;                                      if (this.Version.Major == 3 || (this.Version.Major == 4 && this.Version.Minor == 0))                                      {                                          // MySQL 3.23/4.0 keeps Data_Length in the 6th column                                          if (!long.TryParse(GetStringFromReader(reader' 5)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 8)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                      else                                      {                                          // MySQL 4.1+ keeps Data_Length in the 7th column                                          if (!long.TryParse(GetStringFromReader(reader' 6)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 9)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                        // Add the size                                      if (this.EngineStatistics.ContainsKey(key))                                      {                                          this.EngineStatistics[key] += size;                                      }                                      else                                      {                                          this.EngineStatistics.Add(key' size);                                      }                                        // Add the table count                                      if (this.EngineCount.ContainsKey(key))                                      {                                          this.EngineCount[key]++;                                      }                                      else                                      {                                          this.EngineCount.Add(key' 1);                                      }                                        // See if this table is fragmented                                      if (dataFree > 0)                                      {                                          this.FragmentedTables++;                                      }                                  }                              }                          }                      }                  }              }
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The following statement contains a magic number: if (this.Version.Major >= 5)              {                  // MySQL 5 servers can have table sizes calculated quickly from information schema                  sql = "SELECT ENGINE' SUM(DATA_LENGTH)' COUNT(ENGINE) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND ENGINE IS NOT NULL GROUP BY ENGINE ORDER BY ENGINE ASC";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              string key = GetStringFromReader(reader' 0);                              long size;                              if (!long.TryParse(GetStringFromReader(reader' 1)' out size))                              {                                  size = 0;                              }                                long count;                              if (!long.TryParse(GetStringFromReader(reader' 2)' out count))                              {                                  count = 0;                              }                                if (size > 0)                              {                                  // Add the size                                  if (this.EngineStatistics.ContainsKey(key))                                  {                                      this.EngineStatistics[key] = size;                                  }                                  else                                  {                                      this.EngineStatistics.Add(key' size);                                  }                                    // Add the table count                                  if (this.EngineCount.ContainsKey(key))                                  {                                      this.EngineCount[key] = count;                                  }                                  else                                  {                                      this.EngineCount.Add(key' count);                                  }                              }                          }                      }                  }                    // Get the number of fragmented tables                  sql = "SELECT COUNT(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND Data_free > 0 AND NOT ENGINE = 'MEMORY'";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      object scalar = command.ExecuteScalar();                      if (scalar != null)                      {                          long fragmentedTables;                          if (!long.TryParse(scalar.ToString()' out fragmentedTables))                          {                              fragmentedTables = 0;                          }                            this.FragmentedTables = fragmentedTables;                      }                  }              }              else              {                  // MySQL < 5 servers take a lot of work to get table sizes                  // Now we build a database list' and loop through it to get storage engine stats for tables                  List<string> databases = new List<string>();                  sql = "SHOW DATABASES";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              databases.Add(GetStringFromReader(reader' 0));                          }                      }                  }                    // Reset the engine variables                  this.EngineCount = new Dictionary<string' long>();                  this.EngineStatistics = new Dictionary<string' long>();                  this.FragmentedTables = 0;                    // Go through every database                  foreach (string database in databases)                  {                      if (database != "information_schema" && database != "performance_schema")                      {                          sql = "SHOW TABLE STATUS FROM `" + database + "`";                          using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                          {                              using (MySqlDataReader reader = command.ExecuteReader())                              {                                  while (reader.Read())                                  {                                      string key = GetStringFromReader(reader' 1);                                      long size;                                      long dataFree;                                      if (this.Version.Major == 3 || (this.Version.Major == 4 && this.Version.Minor == 0))                                      {                                          // MySQL 3.23/4.0 keeps Data_Length in the 6th column                                          if (!long.TryParse(GetStringFromReader(reader' 5)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 8)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                      else                                      {                                          // MySQL 4.1+ keeps Data_Length in the 7th column                                          if (!long.TryParse(GetStringFromReader(reader' 6)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 9)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                        // Add the size                                      if (this.EngineStatistics.ContainsKey(key))                                      {                                          this.EngineStatistics[key] += size;                                      }                                      else                                      {                                          this.EngineStatistics.Add(key' size);                                      }                                        // Add the table count                                      if (this.EngineCount.ContainsKey(key))                                      {                                          this.EngineCount[key]++;                                      }                                      else                                      {                                          this.EngineCount.Add(key' 1);                                      }                                        // See if this table is fragmented                                      if (dataFree > 0)                                      {                                          this.FragmentedTables++;                                      }                                  }                              }                          }                      }                  }              }
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The following statement contains a magic number: if (this.Version.Major >= 5)              {                  // MySQL 5 servers can have table sizes calculated quickly from information schema                  sql = "SELECT ENGINE' SUM(DATA_LENGTH)' COUNT(ENGINE) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND ENGINE IS NOT NULL GROUP BY ENGINE ORDER BY ENGINE ASC";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              string key = GetStringFromReader(reader' 0);                              long size;                              if (!long.TryParse(GetStringFromReader(reader' 1)' out size))                              {                                  size = 0;                              }                                long count;                              if (!long.TryParse(GetStringFromReader(reader' 2)' out count))                              {                                  count = 0;                              }                                if (size > 0)                              {                                  // Add the size                                  if (this.EngineStatistics.ContainsKey(key))                                  {                                      this.EngineStatistics[key] = size;                                  }                                  else                                  {                                      this.EngineStatistics.Add(key' size);                                  }                                    // Add the table count                                  if (this.EngineCount.ContainsKey(key))                                  {                                      this.EngineCount[key] = count;                                  }                                  else                                  {                                      this.EngineCount.Add(key' count);                                  }                              }                          }                      }                  }                    // Get the number of fragmented tables                  sql = "SELECT COUNT(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND Data_free > 0 AND NOT ENGINE = 'MEMORY'";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      object scalar = command.ExecuteScalar();                      if (scalar != null)                      {                          long fragmentedTables;                          if (!long.TryParse(scalar.ToString()' out fragmentedTables))                          {                              fragmentedTables = 0;                          }                            this.FragmentedTables = fragmentedTables;                      }                  }              }              else              {                  // MySQL < 5 servers take a lot of work to get table sizes                  // Now we build a database list' and loop through it to get storage engine stats for tables                  List<string> databases = new List<string>();                  sql = "SHOW DATABASES";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              databases.Add(GetStringFromReader(reader' 0));                          }                      }                  }                    // Reset the engine variables                  this.EngineCount = new Dictionary<string' long>();                  this.EngineStatistics = new Dictionary<string' long>();                  this.FragmentedTables = 0;                    // Go through every database                  foreach (string database in databases)                  {                      if (database != "information_schema" && database != "performance_schema")                      {                          sql = "SHOW TABLE STATUS FROM `" + database + "`";                          using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                          {                              using (MySqlDataReader reader = command.ExecuteReader())                              {                                  while (reader.Read())                                  {                                      string key = GetStringFromReader(reader' 1);                                      long size;                                      long dataFree;                                      if (this.Version.Major == 3 || (this.Version.Major == 4 && this.Version.Minor == 0))                                      {                                          // MySQL 3.23/4.0 keeps Data_Length in the 6th column                                          if (!long.TryParse(GetStringFromReader(reader' 5)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 8)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                      else                                      {                                          // MySQL 4.1+ keeps Data_Length in the 7th column                                          if (!long.TryParse(GetStringFromReader(reader' 6)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 9)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                        // Add the size                                      if (this.EngineStatistics.ContainsKey(key))                                      {                                          this.EngineStatistics[key] += size;                                      }                                      else                                      {                                          this.EngineStatistics.Add(key' size);                                      }                                        // Add the table count                                      if (this.EngineCount.ContainsKey(key))                                      {                                          this.EngineCount[key]++;                                      }                                      else                                      {                                          this.EngineCount.Add(key' 1);                                      }                                        // See if this table is fragmented                                      if (dataFree > 0)                                      {                                          this.FragmentedTables++;                                      }                                  }                              }                          }                      }                  }              }
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The following statement contains a magic number: if (this.Version.Major >= 5)              {                  // MySQL 5 servers can have table sizes calculated quickly from information schema                  sql = "SELECT ENGINE' SUM(DATA_LENGTH)' COUNT(ENGINE) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND ENGINE IS NOT NULL GROUP BY ENGINE ORDER BY ENGINE ASC";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              string key = GetStringFromReader(reader' 0);                              long size;                              if (!long.TryParse(GetStringFromReader(reader' 1)' out size))                              {                                  size = 0;                              }                                long count;                              if (!long.TryParse(GetStringFromReader(reader' 2)' out count))                              {                                  count = 0;                              }                                if (size > 0)                              {                                  // Add the size                                  if (this.EngineStatistics.ContainsKey(key))                                  {                                      this.EngineStatistics[key] = size;                                  }                                  else                                  {                                      this.EngineStatistics.Add(key' size);                                  }                                    // Add the table count                                  if (this.EngineCount.ContainsKey(key))                                  {                                      this.EngineCount[key] = count;                                  }                                  else                                  {                                      this.EngineCount.Add(key' count);                                  }                              }                          }                      }                  }                    // Get the number of fragmented tables                  sql = "SELECT COUNT(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND Data_free > 0 AND NOT ENGINE = 'MEMORY'";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      object scalar = command.ExecuteScalar();                      if (scalar != null)                      {                          long fragmentedTables;                          if (!long.TryParse(scalar.ToString()' out fragmentedTables))                          {                              fragmentedTables = 0;                          }                            this.FragmentedTables = fragmentedTables;                      }                  }              }              else              {                  // MySQL < 5 servers take a lot of work to get table sizes                  // Now we build a database list' and loop through it to get storage engine stats for tables                  List<string> databases = new List<string>();                  sql = "SHOW DATABASES";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              databases.Add(GetStringFromReader(reader' 0));                          }                      }                  }                    // Reset the engine variables                  this.EngineCount = new Dictionary<string' long>();                  this.EngineStatistics = new Dictionary<string' long>();                  this.FragmentedTables = 0;                    // Go through every database                  foreach (string database in databases)                  {                      if (database != "information_schema" && database != "performance_schema")                      {                          sql = "SHOW TABLE STATUS FROM `" + database + "`";                          using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                          {                              using (MySqlDataReader reader = command.ExecuteReader())                              {                                  while (reader.Read())                                  {                                      string key = GetStringFromReader(reader' 1);                                      long size;                                      long dataFree;                                      if (this.Version.Major == 3 || (this.Version.Major == 4 && this.Version.Minor == 0))                                      {                                          // MySQL 3.23/4.0 keeps Data_Length in the 6th column                                          if (!long.TryParse(GetStringFromReader(reader' 5)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 8)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                      else                                      {                                          // MySQL 4.1+ keeps Data_Length in the 7th column                                          if (!long.TryParse(GetStringFromReader(reader' 6)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 9)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                        // Add the size                                      if (this.EngineStatistics.ContainsKey(key))                                      {                                          this.EngineStatistics[key] += size;                                      }                                      else                                      {                                          this.EngineStatistics.Add(key' size);                                      }                                        // Add the table count                                      if (this.EngineCount.ContainsKey(key))                                      {                                          this.EngineCount[key]++;                                      }                                      else                                      {                                          this.EngineCount.Add(key' 1);                                      }                                        // See if this table is fragmented                                      if (dataFree > 0)                                      {                                          this.FragmentedTables++;                                      }                                  }                              }                          }                      }                  }              }
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The following statement contains a magic number: if (this.Version.Major >= 5)              {                  // MySQL 5 servers can have table sizes calculated quickly from information schema                  sql = "SELECT ENGINE' SUM(DATA_LENGTH)' COUNT(ENGINE) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND ENGINE IS NOT NULL GROUP BY ENGINE ORDER BY ENGINE ASC";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              string key = GetStringFromReader(reader' 0);                              long size;                              if (!long.TryParse(GetStringFromReader(reader' 1)' out size))                              {                                  size = 0;                              }                                long count;                              if (!long.TryParse(GetStringFromReader(reader' 2)' out count))                              {                                  count = 0;                              }                                if (size > 0)                              {                                  // Add the size                                  if (this.EngineStatistics.ContainsKey(key))                                  {                                      this.EngineStatistics[key] = size;                                  }                                  else                                  {                                      this.EngineStatistics.Add(key' size);                                  }                                    // Add the table count                                  if (this.EngineCount.ContainsKey(key))                                  {                                      this.EngineCount[key] = count;                                  }                                  else                                  {                                      this.EngineCount.Add(key' count);                                  }                              }                          }                      }                  }                    // Get the number of fragmented tables                  sql = "SELECT COUNT(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND Data_free > 0 AND NOT ENGINE = 'MEMORY'";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      object scalar = command.ExecuteScalar();                      if (scalar != null)                      {                          long fragmentedTables;                          if (!long.TryParse(scalar.ToString()' out fragmentedTables))                          {                              fragmentedTables = 0;                          }                            this.FragmentedTables = fragmentedTables;                      }                  }              }              else              {                  // MySQL < 5 servers take a lot of work to get table sizes                  // Now we build a database list' and loop through it to get storage engine stats for tables                  List<string> databases = new List<string>();                  sql = "SHOW DATABASES";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              databases.Add(GetStringFromReader(reader' 0));                          }                      }                  }                    // Reset the engine variables                  this.EngineCount = new Dictionary<string' long>();                  this.EngineStatistics = new Dictionary<string' long>();                  this.FragmentedTables = 0;                    // Go through every database                  foreach (string database in databases)                  {                      if (database != "information_schema" && database != "performance_schema")                      {                          sql = "SHOW TABLE STATUS FROM `" + database + "`";                          using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                          {                              using (MySqlDataReader reader = command.ExecuteReader())                              {                                  while (reader.Read())                                  {                                      string key = GetStringFromReader(reader' 1);                                      long size;                                      long dataFree;                                      if (this.Version.Major == 3 || (this.Version.Major == 4 && this.Version.Minor == 0))                                      {                                          // MySQL 3.23/4.0 keeps Data_Length in the 6th column                                          if (!long.TryParse(GetStringFromReader(reader' 5)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 8)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                      else                                      {                                          // MySQL 4.1+ keeps Data_Length in the 7th column                                          if (!long.TryParse(GetStringFromReader(reader' 6)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 9)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                        // Add the size                                      if (this.EngineStatistics.ContainsKey(key))                                      {                                          this.EngineStatistics[key] += size;                                      }                                      else                                      {                                          this.EngineStatistics.Add(key' size);                                      }                                        // Add the table count                                      if (this.EngineCount.ContainsKey(key))                                      {                                          this.EngineCount[key]++;                                      }                                      else                                      {                                          this.EngineCount.Add(key' 1);                                      }                                        // See if this table is fragmented                                      if (dataFree > 0)                                      {                                          this.FragmentedTables++;                                      }                                  }                              }                          }                      }                  }              }
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The following statement contains a magic number: if (this.Version.Major >= 5)              {                  // MySQL 5 servers can have table sizes calculated quickly from information schema                  sql = "SELECT ENGINE' SUM(DATA_LENGTH)' COUNT(ENGINE) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND ENGINE IS NOT NULL GROUP BY ENGINE ORDER BY ENGINE ASC";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              string key = GetStringFromReader(reader' 0);                              long size;                              if (!long.TryParse(GetStringFromReader(reader' 1)' out size))                              {                                  size = 0;                              }                                long count;                              if (!long.TryParse(GetStringFromReader(reader' 2)' out count))                              {                                  count = 0;                              }                                if (size > 0)                              {                                  // Add the size                                  if (this.EngineStatistics.ContainsKey(key))                                  {                                      this.EngineStatistics[key] = size;                                  }                                  else                                  {                                      this.EngineStatistics.Add(key' size);                                  }                                    // Add the table count                                  if (this.EngineCount.ContainsKey(key))                                  {                                      this.EngineCount[key] = count;                                  }                                  else                                  {                                      this.EngineCount.Add(key' count);                                  }                              }                          }                      }                  }                    // Get the number of fragmented tables                  sql = "SELECT COUNT(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND Data_free > 0 AND NOT ENGINE = 'MEMORY'";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      object scalar = command.ExecuteScalar();                      if (scalar != null)                      {                          long fragmentedTables;                          if (!long.TryParse(scalar.ToString()' out fragmentedTables))                          {                              fragmentedTables = 0;                          }                            this.FragmentedTables = fragmentedTables;                      }                  }              }              else              {                  // MySQL < 5 servers take a lot of work to get table sizes                  // Now we build a database list' and loop through it to get storage engine stats for tables                  List<string> databases = new List<string>();                  sql = "SHOW DATABASES";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              databases.Add(GetStringFromReader(reader' 0));                          }                      }                  }                    // Reset the engine variables                  this.EngineCount = new Dictionary<string' long>();                  this.EngineStatistics = new Dictionary<string' long>();                  this.FragmentedTables = 0;                    // Go through every database                  foreach (string database in databases)                  {                      if (database != "information_schema" && database != "performance_schema")                      {                          sql = "SHOW TABLE STATUS FROM `" + database + "`";                          using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                          {                              using (MySqlDataReader reader = command.ExecuteReader())                              {                                  while (reader.Read())                                  {                                      string key = GetStringFromReader(reader' 1);                                      long size;                                      long dataFree;                                      if (this.Version.Major == 3 || (this.Version.Major == 4 && this.Version.Minor == 0))                                      {                                          // MySQL 3.23/4.0 keeps Data_Length in the 6th column                                          if (!long.TryParse(GetStringFromReader(reader' 5)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 8)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                      else                                      {                                          // MySQL 4.1+ keeps Data_Length in the 7th column                                          if (!long.TryParse(GetStringFromReader(reader' 6)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 9)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                        // Add the size                                      if (this.EngineStatistics.ContainsKey(key))                                      {                                          this.EngineStatistics[key] += size;                                      }                                      else                                      {                                          this.EngineStatistics.Add(key' size);                                      }                                        // Add the table count                                      if (this.EngineCount.ContainsKey(key))                                      {                                          this.EngineCount[key]++;                                      }                                      else                                      {                                          this.EngineCount.Add(key' 1);                                      }                                        // See if this table is fragmented                                      if (dataFree > 0)                                      {                                          this.FragmentedTables++;                                      }                                  }                              }                          }                      }                  }              }
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The following statement contains a magic number: if (this.Version.Major >= 5)              {                  // MySQL 5 servers can have table sizes calculated quickly from information schema                  sql = "SELECT ENGINE' SUM(DATA_LENGTH)' COUNT(ENGINE) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND ENGINE IS NOT NULL GROUP BY ENGINE ORDER BY ENGINE ASC";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              string key = GetStringFromReader(reader' 0);                              long size;                              if (!long.TryParse(GetStringFromReader(reader' 1)' out size))                              {                                  size = 0;                              }                                long count;                              if (!long.TryParse(GetStringFromReader(reader' 2)' out count))                              {                                  count = 0;                              }                                if (size > 0)                              {                                  // Add the size                                  if (this.EngineStatistics.ContainsKey(key))                                  {                                      this.EngineStatistics[key] = size;                                  }                                  else                                  {                                      this.EngineStatistics.Add(key' size);                                  }                                    // Add the table count                                  if (this.EngineCount.ContainsKey(key))                                  {                                      this.EngineCount[key] = count;                                  }                                  else                                  {                                      this.EngineCount.Add(key' count);                                  }                              }                          }                      }                  }                    // Get the number of fragmented tables                  sql = "SELECT COUNT(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND Data_free > 0 AND NOT ENGINE = 'MEMORY'";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      object scalar = command.ExecuteScalar();                      if (scalar != null)                      {                          long fragmentedTables;                          if (!long.TryParse(scalar.ToString()' out fragmentedTables))                          {                              fragmentedTables = 0;                          }                            this.FragmentedTables = fragmentedTables;                      }                  }              }              else              {                  // MySQL < 5 servers take a lot of work to get table sizes                  // Now we build a database list' and loop through it to get storage engine stats for tables                  List<string> databases = new List<string>();                  sql = "SHOW DATABASES";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              databases.Add(GetStringFromReader(reader' 0));                          }                      }                  }                    // Reset the engine variables                  this.EngineCount = new Dictionary<string' long>();                  this.EngineStatistics = new Dictionary<string' long>();                  this.FragmentedTables = 0;                    // Go through every database                  foreach (string database in databases)                  {                      if (database != "information_schema" && database != "performance_schema")                      {                          sql = "SHOW TABLE STATUS FROM `" + database + "`";                          using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                          {                              using (MySqlDataReader reader = command.ExecuteReader())                              {                                  while (reader.Read())                                  {                                      string key = GetStringFromReader(reader' 1);                                      long size;                                      long dataFree;                                      if (this.Version.Major == 3 || (this.Version.Major == 4 && this.Version.Minor == 0))                                      {                                          // MySQL 3.23/4.0 keeps Data_Length in the 6th column                                          if (!long.TryParse(GetStringFromReader(reader' 5)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 8)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                      else                                      {                                          // MySQL 4.1+ keeps Data_Length in the 7th column                                          if (!long.TryParse(GetStringFromReader(reader' 6)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 9)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                        // Add the size                                      if (this.EngineStatistics.ContainsKey(key))                                      {                                          this.EngineStatistics[key] += size;                                      }                                      else                                      {                                          this.EngineStatistics.Add(key' size);                                      }                                        // Add the table count                                      if (this.EngineCount.ContainsKey(key))                                      {                                          this.EngineCount[key]++;                                      }                                      else                                      {                                          this.EngineCount.Add(key' 1);                                      }                                        // See if this table is fragmented                                      if (dataFree > 0)                                      {                                          this.FragmentedTables++;                                      }                                  }                              }                          }                      }                  }              }
Magic Number,MySqlTuner,MySqlServer,C:\repos\pmachapman_mysqltuner\MySQLTuner\MySqlServer.cs,Load,The following statement contains a magic number: if (this.Version.Major >= 5)              {                  // MySQL 5 servers can have table sizes calculated quickly from information schema                  sql = "SELECT ENGINE' SUM(DATA_LENGTH)' COUNT(ENGINE) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND ENGINE IS NOT NULL GROUP BY ENGINE ORDER BY ENGINE ASC";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              string key = GetStringFromReader(reader' 0);                              long size;                              if (!long.TryParse(GetStringFromReader(reader' 1)' out size))                              {                                  size = 0;                              }                                long count;                              if (!long.TryParse(GetStringFromReader(reader' 2)' out count))                              {                                  count = 0;                              }                                if (size > 0)                              {                                  // Add the size                                  if (this.EngineStatistics.ContainsKey(key))                                  {                                      this.EngineStatistics[key] = size;                                  }                                  else                                  {                                      this.EngineStatistics.Add(key' size);                                  }                                    // Add the table count                                  if (this.EngineCount.ContainsKey(key))                                  {                                      this.EngineCount[key] = count;                                  }                                  else                                  {                                      this.EngineCount.Add(key' count);                                  }                              }                          }                      }                  }                    // Get the number of fragmented tables                  sql = "SELECT COUNT(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA NOT IN ('information_schema'' 'mysql') AND Data_free > 0 AND NOT ENGINE = 'MEMORY'";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      object scalar = command.ExecuteScalar();                      if (scalar != null)                      {                          long fragmentedTables;                          if (!long.TryParse(scalar.ToString()' out fragmentedTables))                          {                              fragmentedTables = 0;                          }                            this.FragmentedTables = fragmentedTables;                      }                  }              }              else              {                  // MySQL < 5 servers take a lot of work to get table sizes                  // Now we build a database list' and loop through it to get storage engine stats for tables                  List<string> databases = new List<string>();                  sql = "SHOW DATABASES";                  using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                  {                      using (MySqlDataReader reader = command.ExecuteReader())                      {                          while (reader.Read())                          {                              databases.Add(GetStringFromReader(reader' 0));                          }                      }                  }                    // Reset the engine variables                  this.EngineCount = new Dictionary<string' long>();                  this.EngineStatistics = new Dictionary<string' long>();                  this.FragmentedTables = 0;                    // Go through every database                  foreach (string database in databases)                  {                      if (database != "information_schema" && database != "performance_schema")                      {                          sql = "SHOW TABLE STATUS FROM `" + database + "`";                          using (MySqlCommand command = new MySqlCommand(sql' this.Connection))                          {                              using (MySqlDataReader reader = command.ExecuteReader())                              {                                  while (reader.Read())                                  {                                      string key = GetStringFromReader(reader' 1);                                      long size;                                      long dataFree;                                      if (this.Version.Major == 3 || (this.Version.Major == 4 && this.Version.Minor == 0))                                      {                                          // MySQL 3.23/4.0 keeps Data_Length in the 6th column                                          if (!long.TryParse(GetStringFromReader(reader' 5)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 8)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                      else                                      {                                          // MySQL 4.1+ keeps Data_Length in the 7th column                                          if (!long.TryParse(GetStringFromReader(reader' 6)' out size))                                          {                                              size = 0;                                          }                                            if (!long.TryParse(GetStringFromReader(reader' 9)' out dataFree))                                          {                                              dataFree = 0;                                          }                                      }                                        // Add the size                                      if (this.EngineStatistics.ContainsKey(key))                                      {                                          this.EngineStatistics[key] += size;                                      }                                      else                                      {                                          this.EngineStatistics.Add(key' size);                                      }                                        // Add the table count                                      if (this.EngineCount.ContainsKey(key))                                      {                                          this.EngineCount[key]++;                                      }                                      else                                      {                                          this.EngineCount.Add(key' 1);                                      }                                        // See if this table is fragmented                                      if (dataFree > 0)                                      {                                          this.FragmentedTables++;                                      }                                  }                              }                          }                      }                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,Calculate,The following statement contains a magic number: try              {                  // Set up the calculator                  this.Server = server;                  this.Calculations = new Dictionary<string' long>();                  this.Recommendations = new List<string>();                  this.VariablesToAdjust = new List<string>();                    // Post the first message!                  this.PrintMessage(Status.Info' "MySQL Tuner " + Assembly.GetExecutingAssembly().GetName().Version.ToString(3) + " - Peter Chapman <peter@conglomo.co.nz>");                    // Show the server                  this.PrintMessage(Status.Info' "Performing tests on " + this.Server.Host + ":" + this.Server.Port + " at " + DateTime.Now.ToString(Settings.Culture.DateTimeFormat.FullDateTimePattern' Settings.Culture));                    // See if an empty password was used                  if (string.IsNullOrEmpty(this.Server.Password))                  {                      this.PrintMessage(Status.Fail' "Successfully authenticated with no password - SECURITY RISK!");                  }                    // Get the memory                  ComputerInfo computerInfo = new ComputerInfo();                  if (this.Server.IsLocal)                  {                      this.Server.PhysicalMemory = computerInfo.TotalPhysicalMemory;                      this.Server.SwapMemory = computerInfo.TotalVirtualMemory - this.Server.PhysicalMemory;                  }                  else                  {                      // Ask for the physical memory value                      ulong physicalMemory;                      string memory = Interaction.InputBox("How much physical memory is on the server (in megabytes)?");                      if (string.IsNullOrEmpty(memory) || !ulong.TryParse(memory' out physicalMemory))                      {                          this.PrintMessage(Status.Info' "Assuming the same amount of physical memory as this computer");                          physicalMemory = computerInfo.TotalPhysicalMemory;                      }                      else                      {                          this.PrintMessage(Status.Info' "Assuming " + physicalMemory + " MB of physical memory");                          physicalMemory *= 1048576;                      }                        this.Server.PhysicalMemory = physicalMemory;                        // Ask for the swap memory value                      ulong swapMemory;                      memory = Interaction.InputBox("How much swap space is on the server (in megabytes)?");                      if (string.IsNullOrEmpty(memory) || !ulong.TryParse(memory' out swapMemory))                      {                          this.PrintMessage(Status.Info' "Assuming the same amount of swap space as this computer");                          swapMemory = computerInfo.TotalVirtualMemory - this.Server.PhysicalMemory;                      }                      else                      {                          this.PrintMessage(Status.Info' "Assuming " + swapMemory + " MB of swap space");                          swapMemory *= 1048576;                      }                        this.Server.SwapMemory = swapMemory;                  }                    // Load the server values from the database                  this.Server.Load();                    // Check current MySQL version                  this.ValidateMySqlVersion();                    // Show enabled storage engines                  this.CheckStorageEngines();                    // Display some security recommendations                  this.SecurityRecommendations();                    // Calculate everything we need                  this.PerformCalculations();                    // Print the server stats                  this.MySqlStats();                    // Make recommendations based on stats                  foreach (string recommendation in this.Recommendations)                  {                      this.PrintMessage(Status.Recommendation' recommendation);                  }                    if (this.VariablesToAdjust.Count > 0)                  {                      if (this.Calculations.ContainsKey("pct_physical_memory") && this.Calculations["pct_physical_memory"] > 90)                      {                          this.PrintMessage(Status.Info' "MySQL's maximum memory usage is dangerously high");                          this.PrintMessage(Status.Info' "Add RAM before increasing MySQL buffer variables");                      }                        foreach (string variableToAdjust in this.VariablesToAdjust)                      {                          this.PrintMessage(Status.Recommendation' variableToAdjust);                      }                  }                    if (this.Recommendations.Count == 0 && this.VariablesToAdjust.Count == 0)                  {                      this.PrintMessage(Status.Info' "No additional performance recommendations are available.");                  }                    // Complete!                  this.PrintMessage(Status.Info' "Scan Completed at " + DateTime.Now.ToString(Settings.Culture.DateTimeFormat.FullDateTimePattern' Settings.Culture));                    // Complete the progress bar                  this.ProgressComplete(true);              }              catch (Exception ex)              {                  if (ex is ObjectDisposedException)                  {                      // This is thrown if the form is closed                      return;                  }                  else                  {                      // Display the error to the user                      this.PrintMessage(Status.Fail' ex.ToString());                        // Show the progress as incomplete                      this.ProgressComplete(false);                        // Throw the error' crashing the thread                      throw;                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,Calculate,The following statement contains a magic number: try              {                  // Set up the calculator                  this.Server = server;                  this.Calculations = new Dictionary<string' long>();                  this.Recommendations = new List<string>();                  this.VariablesToAdjust = new List<string>();                    // Post the first message!                  this.PrintMessage(Status.Info' "MySQL Tuner " + Assembly.GetExecutingAssembly().GetName().Version.ToString(3) + " - Peter Chapman <peter@conglomo.co.nz>");                    // Show the server                  this.PrintMessage(Status.Info' "Performing tests on " + this.Server.Host + ":" + this.Server.Port + " at " + DateTime.Now.ToString(Settings.Culture.DateTimeFormat.FullDateTimePattern' Settings.Culture));                    // See if an empty password was used                  if (string.IsNullOrEmpty(this.Server.Password))                  {                      this.PrintMessage(Status.Fail' "Successfully authenticated with no password - SECURITY RISK!");                  }                    // Get the memory                  ComputerInfo computerInfo = new ComputerInfo();                  if (this.Server.IsLocal)                  {                      this.Server.PhysicalMemory = computerInfo.TotalPhysicalMemory;                      this.Server.SwapMemory = computerInfo.TotalVirtualMemory - this.Server.PhysicalMemory;                  }                  else                  {                      // Ask for the physical memory value                      ulong physicalMemory;                      string memory = Interaction.InputBox("How much physical memory is on the server (in megabytes)?");                      if (string.IsNullOrEmpty(memory) || !ulong.TryParse(memory' out physicalMemory))                      {                          this.PrintMessage(Status.Info' "Assuming the same amount of physical memory as this computer");                          physicalMemory = computerInfo.TotalPhysicalMemory;                      }                      else                      {                          this.PrintMessage(Status.Info' "Assuming " + physicalMemory + " MB of physical memory");                          physicalMemory *= 1048576;                      }                        this.Server.PhysicalMemory = physicalMemory;                        // Ask for the swap memory value                      ulong swapMemory;                      memory = Interaction.InputBox("How much swap space is on the server (in megabytes)?");                      if (string.IsNullOrEmpty(memory) || !ulong.TryParse(memory' out swapMemory))                      {                          this.PrintMessage(Status.Info' "Assuming the same amount of swap space as this computer");                          swapMemory = computerInfo.TotalVirtualMemory - this.Server.PhysicalMemory;                      }                      else                      {                          this.PrintMessage(Status.Info' "Assuming " + swapMemory + " MB of swap space");                          swapMemory *= 1048576;                      }                        this.Server.SwapMemory = swapMemory;                  }                    // Load the server values from the database                  this.Server.Load();                    // Check current MySQL version                  this.ValidateMySqlVersion();                    // Show enabled storage engines                  this.CheckStorageEngines();                    // Display some security recommendations                  this.SecurityRecommendations();                    // Calculate everything we need                  this.PerformCalculations();                    // Print the server stats                  this.MySqlStats();                    // Make recommendations based on stats                  foreach (string recommendation in this.Recommendations)                  {                      this.PrintMessage(Status.Recommendation' recommendation);                  }                    if (this.VariablesToAdjust.Count > 0)                  {                      if (this.Calculations.ContainsKey("pct_physical_memory") && this.Calculations["pct_physical_memory"] > 90)                      {                          this.PrintMessage(Status.Info' "MySQL's maximum memory usage is dangerously high");                          this.PrintMessage(Status.Info' "Add RAM before increasing MySQL buffer variables");                      }                        foreach (string variableToAdjust in this.VariablesToAdjust)                      {                          this.PrintMessage(Status.Recommendation' variableToAdjust);                      }                  }                    if (this.Recommendations.Count == 0 && this.VariablesToAdjust.Count == 0)                  {                      this.PrintMessage(Status.Info' "No additional performance recommendations are available.");                  }                    // Complete!                  this.PrintMessage(Status.Info' "Scan Completed at " + DateTime.Now.ToString(Settings.Culture.DateTimeFormat.FullDateTimePattern' Settings.Culture));                    // Complete the progress bar                  this.ProgressComplete(true);              }              catch (Exception ex)              {                  if (ex is ObjectDisposedException)                  {                      // This is thrown if the form is closed                      return;                  }                  else                  {                      // Display the error to the user                      this.PrintMessage(Status.Fail' ex.ToString());                        // Show the progress as incomplete                      this.ProgressComplete(false);                        // Throw the error' crashing the thread                      throw;                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,Calculate,The following statement contains a magic number: try              {                  // Set up the calculator                  this.Server = server;                  this.Calculations = new Dictionary<string' long>();                  this.Recommendations = new List<string>();                  this.VariablesToAdjust = new List<string>();                    // Post the first message!                  this.PrintMessage(Status.Info' "MySQL Tuner " + Assembly.GetExecutingAssembly().GetName().Version.ToString(3) + " - Peter Chapman <peter@conglomo.co.nz>");                    // Show the server                  this.PrintMessage(Status.Info' "Performing tests on " + this.Server.Host + ":" + this.Server.Port + " at " + DateTime.Now.ToString(Settings.Culture.DateTimeFormat.FullDateTimePattern' Settings.Culture));                    // See if an empty password was used                  if (string.IsNullOrEmpty(this.Server.Password))                  {                      this.PrintMessage(Status.Fail' "Successfully authenticated with no password - SECURITY RISK!");                  }                    // Get the memory                  ComputerInfo computerInfo = new ComputerInfo();                  if (this.Server.IsLocal)                  {                      this.Server.PhysicalMemory = computerInfo.TotalPhysicalMemory;                      this.Server.SwapMemory = computerInfo.TotalVirtualMemory - this.Server.PhysicalMemory;                  }                  else                  {                      // Ask for the physical memory value                      ulong physicalMemory;                      string memory = Interaction.InputBox("How much physical memory is on the server (in megabytes)?");                      if (string.IsNullOrEmpty(memory) || !ulong.TryParse(memory' out physicalMemory))                      {                          this.PrintMessage(Status.Info' "Assuming the same amount of physical memory as this computer");                          physicalMemory = computerInfo.TotalPhysicalMemory;                      }                      else                      {                          this.PrintMessage(Status.Info' "Assuming " + physicalMemory + " MB of physical memory");                          physicalMemory *= 1048576;                      }                        this.Server.PhysicalMemory = physicalMemory;                        // Ask for the swap memory value                      ulong swapMemory;                      memory = Interaction.InputBox("How much swap space is on the server (in megabytes)?");                      if (string.IsNullOrEmpty(memory) || !ulong.TryParse(memory' out swapMemory))                      {                          this.PrintMessage(Status.Info' "Assuming the same amount of swap space as this computer");                          swapMemory = computerInfo.TotalVirtualMemory - this.Server.PhysicalMemory;                      }                      else                      {                          this.PrintMessage(Status.Info' "Assuming " + swapMemory + " MB of swap space");                          swapMemory *= 1048576;                      }                        this.Server.SwapMemory = swapMemory;                  }                    // Load the server values from the database                  this.Server.Load();                    // Check current MySQL version                  this.ValidateMySqlVersion();                    // Show enabled storage engines                  this.CheckStorageEngines();                    // Display some security recommendations                  this.SecurityRecommendations();                    // Calculate everything we need                  this.PerformCalculations();                    // Print the server stats                  this.MySqlStats();                    // Make recommendations based on stats                  foreach (string recommendation in this.Recommendations)                  {                      this.PrintMessage(Status.Recommendation' recommendation);                  }                    if (this.VariablesToAdjust.Count > 0)                  {                      if (this.Calculations.ContainsKey("pct_physical_memory") && this.Calculations["pct_physical_memory"] > 90)                      {                          this.PrintMessage(Status.Info' "MySQL's maximum memory usage is dangerously high");                          this.PrintMessage(Status.Info' "Add RAM before increasing MySQL buffer variables");                      }                        foreach (string variableToAdjust in this.VariablesToAdjust)                      {                          this.PrintMessage(Status.Recommendation' variableToAdjust);                      }                  }                    if (this.Recommendations.Count == 0 && this.VariablesToAdjust.Count == 0)                  {                      this.PrintMessage(Status.Info' "No additional performance recommendations are available.");                  }                    // Complete!                  this.PrintMessage(Status.Info' "Scan Completed at " + DateTime.Now.ToString(Settings.Culture.DateTimeFormat.FullDateTimePattern' Settings.Culture));                    // Complete the progress bar                  this.ProgressComplete(true);              }              catch (Exception ex)              {                  if (ex is ObjectDisposedException)                  {                      // This is thrown if the form is closed                      return;                  }                  else                  {                      // Display the error to the user                      this.PrintMessage(Status.Fail' ex.ToString());                        // Show the progress as incomplete                      this.ProgressComplete(false);                        // Throw the error' crashing the thread                      throw;                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,Calculate,The following statement contains a magic number: try              {                  // Set up the calculator                  this.Server = server;                  this.Calculations = new Dictionary<string' long>();                  this.Recommendations = new List<string>();                  this.VariablesToAdjust = new List<string>();                    // Post the first message!                  this.PrintMessage(Status.Info' "MySQL Tuner " + Assembly.GetExecutingAssembly().GetName().Version.ToString(3) + " - Peter Chapman <peter@conglomo.co.nz>");                    // Show the server                  this.PrintMessage(Status.Info' "Performing tests on " + this.Server.Host + ":" + this.Server.Port + " at " + DateTime.Now.ToString(Settings.Culture.DateTimeFormat.FullDateTimePattern' Settings.Culture));                    // See if an empty password was used                  if (string.IsNullOrEmpty(this.Server.Password))                  {                      this.PrintMessage(Status.Fail' "Successfully authenticated with no password - SECURITY RISK!");                  }                    // Get the memory                  ComputerInfo computerInfo = new ComputerInfo();                  if (this.Server.IsLocal)                  {                      this.Server.PhysicalMemory = computerInfo.TotalPhysicalMemory;                      this.Server.SwapMemory = computerInfo.TotalVirtualMemory - this.Server.PhysicalMemory;                  }                  else                  {                      // Ask for the physical memory value                      ulong physicalMemory;                      string memory = Interaction.InputBox("How much physical memory is on the server (in megabytes)?");                      if (string.IsNullOrEmpty(memory) || !ulong.TryParse(memory' out physicalMemory))                      {                          this.PrintMessage(Status.Info' "Assuming the same amount of physical memory as this computer");                          physicalMemory = computerInfo.TotalPhysicalMemory;                      }                      else                      {                          this.PrintMessage(Status.Info' "Assuming " + physicalMemory + " MB of physical memory");                          physicalMemory *= 1048576;                      }                        this.Server.PhysicalMemory = physicalMemory;                        // Ask for the swap memory value                      ulong swapMemory;                      memory = Interaction.InputBox("How much swap space is on the server (in megabytes)?");                      if (string.IsNullOrEmpty(memory) || !ulong.TryParse(memory' out swapMemory))                      {                          this.PrintMessage(Status.Info' "Assuming the same amount of swap space as this computer");                          swapMemory = computerInfo.TotalVirtualMemory - this.Server.PhysicalMemory;                      }                      else                      {                          this.PrintMessage(Status.Info' "Assuming " + swapMemory + " MB of swap space");                          swapMemory *= 1048576;                      }                        this.Server.SwapMemory = swapMemory;                  }                    // Load the server values from the database                  this.Server.Load();                    // Check current MySQL version                  this.ValidateMySqlVersion();                    // Show enabled storage engines                  this.CheckStorageEngines();                    // Display some security recommendations                  this.SecurityRecommendations();                    // Calculate everything we need                  this.PerformCalculations();                    // Print the server stats                  this.MySqlStats();                    // Make recommendations based on stats                  foreach (string recommendation in this.Recommendations)                  {                      this.PrintMessage(Status.Recommendation' recommendation);                  }                    if (this.VariablesToAdjust.Count > 0)                  {                      if (this.Calculations.ContainsKey("pct_physical_memory") && this.Calculations["pct_physical_memory"] > 90)                      {                          this.PrintMessage(Status.Info' "MySQL's maximum memory usage is dangerously high");                          this.PrintMessage(Status.Info' "Add RAM before increasing MySQL buffer variables");                      }                        foreach (string variableToAdjust in this.VariablesToAdjust)                      {                          this.PrintMessage(Status.Recommendation' variableToAdjust);                      }                  }                    if (this.Recommendations.Count == 0 && this.VariablesToAdjust.Count == 0)                  {                      this.PrintMessage(Status.Info' "No additional performance recommendations are available.");                  }                    // Complete!                  this.PrintMessage(Status.Info' "Scan Completed at " + DateTime.Now.ToString(Settings.Culture.DateTimeFormat.FullDateTimePattern' Settings.Culture));                    // Complete the progress bar                  this.ProgressComplete(true);              }              catch (Exception ex)              {                  if (ex is ObjectDisposedException)                  {                      // This is thrown if the form is closed                      return;                  }                  else                  {                      // Display the error to the user                      this.PrintMessage(Status.Fail' ex.ToString());                        // Show the progress as incomplete                      this.ProgressComplete(false);                        // Throw the error' crashing the thread                      throw;                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytes,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (bytes / Math.Pow(1024' 3)).ToString("F1"' Settings.Culture) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (bytes / Math.Pow(1024' 2)).ToString("F1"' Settings.Culture) + "M";              }              else if (bytes >= 1024D)              {                  // KB                  return (bytes / 1024D).ToString("F1"' Settings.Culture) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytes,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (bytes / Math.Pow(1024' 3)).ToString("F1"' Settings.Culture) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (bytes / Math.Pow(1024' 2)).ToString("F1"' Settings.Culture) + "M";              }              else if (bytes >= 1024D)              {                  // KB                  return (bytes / 1024D).ToString("F1"' Settings.Culture) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytes,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (bytes / Math.Pow(1024' 3)).ToString("F1"' Settings.Culture) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (bytes / Math.Pow(1024' 2)).ToString("F1"' Settings.Culture) + "M";              }              else if (bytes >= 1024D)              {                  // KB                  return (bytes / 1024D).ToString("F1"' Settings.Culture) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytes,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (bytes / Math.Pow(1024' 3)).ToString("F1"' Settings.Culture) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (bytes / Math.Pow(1024' 2)).ToString("F1"' Settings.Culture) + "M";              }              else if (bytes >= 1024D)              {                  // KB                  return (bytes / 1024D).ToString("F1"' Settings.Culture) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytes,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (bytes / Math.Pow(1024' 3)).ToString("F1"' Settings.Culture) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (bytes / Math.Pow(1024' 2)).ToString("F1"' Settings.Culture) + "M";              }              else if (bytes >= 1024D)              {                  // KB                  return (bytes / 1024D).ToString("F1"' Settings.Culture) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytes,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (bytes / Math.Pow(1024' 3)).ToString("F1"' Settings.Culture) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (bytes / Math.Pow(1024' 2)).ToString("F1"' Settings.Culture) + "M";              }              else if (bytes >= 1024D)              {                  // KB                  return (bytes / 1024D).ToString("F1"' Settings.Culture) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytes,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (bytes / Math.Pow(1024' 3)).ToString("F1"' Settings.Culture) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (bytes / Math.Pow(1024' 2)).ToString("F1"' Settings.Culture) + "M";              }              else if (bytes >= 1024D)              {                  // KB                  return (bytes / 1024D).ToString("F1"' Settings.Culture) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytes,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (bytes / Math.Pow(1024' 3)).ToString("F1"' Settings.Culture) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (bytes / Math.Pow(1024' 2)).ToString("F1"' Settings.Culture) + "M";              }              else if (bytes >= 1024D)              {                  // KB                  return (bytes / 1024D).ToString("F1"' Settings.Culture) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytesRounded,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (long)(bytes / Math.Pow(1024' 3)) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (long)(bytes / Math.Pow(1024' 2)) + "M";              }              else if (bytes >= 1024)              {                  // KB                  return (long)(bytes / 1024) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytesRounded,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (long)(bytes / Math.Pow(1024' 3)) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (long)(bytes / Math.Pow(1024' 2)) + "M";              }              else if (bytes >= 1024)              {                  // KB                  return (long)(bytes / 1024) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytesRounded,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (long)(bytes / Math.Pow(1024' 3)) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (long)(bytes / Math.Pow(1024' 2)) + "M";              }              else if (bytes >= 1024)              {                  // KB                  return (long)(bytes / 1024) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytesRounded,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (long)(bytes / Math.Pow(1024' 3)) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (long)(bytes / Math.Pow(1024' 2)) + "M";              }              else if (bytes >= 1024)              {                  // KB                  return (long)(bytes / 1024) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytesRounded,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (long)(bytes / Math.Pow(1024' 3)) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (long)(bytes / Math.Pow(1024' 2)) + "M";              }              else if (bytes >= 1024)              {                  // KB                  return (long)(bytes / 1024) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytesRounded,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (long)(bytes / Math.Pow(1024' 3)) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (long)(bytes / Math.Pow(1024' 2)) + "M";              }              else if (bytes >= 1024)              {                  // KB                  return (long)(bytes / 1024) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytesRounded,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (long)(bytes / Math.Pow(1024' 3)) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (long)(bytes / Math.Pow(1024' 2)) + "M";              }              else if (bytes >= 1024)              {                  // KB                  return (long)(bytes / 1024) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytesRounded,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (long)(bytes / Math.Pow(1024' 3)) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (long)(bytes / Math.Pow(1024' 2)) + "M";              }              else if (bytes >= 1024)              {                  // KB                  return (long)(bytes / 1024) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytesRounded,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (long)(bytes / Math.Pow(1024' 3)) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (long)(bytes / Math.Pow(1024' 2)) + "M";              }              else if (bytes >= 1024)              {                  // KB                  return (long)(bytes / 1024) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayBytesRounded,The following statement contains a magic number: if (bytes >= Math.Pow(1024' 3))              {                  // GB                  return (long)(bytes / Math.Pow(1024' 3)) + "G";              }              else if (bytes >= Math.Pow(1024' 2))              {                  // MB                  return (long)(bytes / Math.Pow(1024' 2)) + "M";              }              else if (bytes >= 1024)              {                  // KB                  return (long)(bytes / 1024) + "K";              }              else              {                  return bytes + "B";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString(Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString(Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString(Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString(Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString(Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString(Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString(Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString(Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString(Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString(Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString("F3"' Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString("F3"' Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString("F3"' Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString("F3"' Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString("F3"' Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString("F3"' Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString("F3"' Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString("F3"' Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString("F3"' Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,DisplayRounded,The following statement contains a magic number: if (number >= Math.Pow(1000' 3))              {                  // GB                  return (long)(number / Math.Pow(1000' 3)) + "G";              }              else if (number >= Math.Pow(1000' 2))              {                  // MB                  return (long)(number / Math.Pow(1000' 2)) + "M";              }              else if (number >= 1000)              {                  // KB                  return (long)(number / 1000) + "K";              }              else              {                  return number.ToString("F3"' Settings.Culture);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PrettyUptime,The following statement contains a magic number: long seconds = uptime % 60;
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PrettyUptime,The following statement contains a magic number: long minutes = (uptime % 3600) / 60;
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PrettyUptime,The following statement contains a magic number: long minutes = (uptime % 3600) / 60;
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PrettyUptime,The following statement contains a magic number: long hours = (uptime % 86400) / 3600;
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PrettyUptime,The following statement contains a magic number: long hours = (uptime % 86400) / 3600;
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PrettyUptime,The following statement contains a magic number: long days = uptime / 86400;
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,ValidateMySqlVersion,The following statement contains a magic number: if (this.Server.Version.Major < 5)              {                  this.PrintMessage(Status.Fail' "Your MySQL version " + this.Server.Variables["version"] + " is EOL software!  Upgrade soon!");              }              else if (this.Server.Version.Major == 5)              {                  this.PrintMessage(Status.Pass' "Currently running supported MySQL version " + this.Server.Variables["version"]);              }              else              {                  this.PrintMessage(Status.Fail' "Currently running unsupported MySQL version " + this.Server.Variables["version"]);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,ValidateMySqlVersion,The following statement contains a magic number: if (this.Server.Version.Major < 5)              {                  this.PrintMessage(Status.Fail' "Your MySQL version " + this.Server.Variables["version"] + " is EOL software!  Upgrade soon!");              }              else if (this.Server.Version.Major == 5)              {                  this.PrintMessage(Status.Pass' "Currently running supported MySQL version " + this.Server.Variables["version"]);              }              else              {                  this.PrintMessage(Status.Fail' "Currently running unsupported MySQL version " + this.Server.Variables["version"]);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,SecurityRecommendations,The following statement contains a magic number: if (this.Server.Version.Major > 5 || (this.Server.Version.Major == 5 && this.Server.Version.Minor >= 7))              {                  passwordColumnName = "authentication_string";              }              else              {                  passwordColumnName = "password";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,SecurityRecommendations,The following statement contains a magic number: if (this.Server.Version.Major > 5 || (this.Server.Version.Major == 5 && this.Server.Version.Minor >= 7))              {                  passwordColumnName = "authentication_string";              }              else              {                  passwordColumnName = "password";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,SecurityRecommendations,The following statement contains a magic number: if (this.Server.Version.Major > 5 || (this.Server.Version.Major == 5 && this.Server.Version.Minor >= 7))              {                  passwordColumnName = "authentication_string";              }              else              {                  passwordColumnName = "password";              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (this.Server.Version.Major > 3)              {                  this.Calculations.Add("per_thread_buffers"' Convert.ToInt64(this.Server.Variables["read_buffer_size"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["read_rnd_buffer_size"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["sort_buffer_size"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["thread_stack"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["join_buffer_size"]' Settings.Culture));              }              else              {                  this.Calculations.Add("per_thread_buffers"' Convert.ToInt64(this.Server.Variables["record_buffer"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["record_rnd_buffer"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["sort_buffer"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["thread_stack"]' Settings.Culture) + Convert.ToInt64(this.Server.Variables["join_buffer_size"]' Settings.Culture));              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: this.Calculations.Add("pct_physical_memory"' Convert.ToInt64((Convert.ToUInt64(this.Calculations["total_possible_used_memory"]' Settings.Culture) * 100) / this.Server.PhysicalMemory' Settings.Culture));
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: this.Calculations["pct_connections_used"] = (this.Calculations["pct_connections_used"] > 100) ? 100 : this.Calculations["pct_connections_used"];
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: this.Calculations["pct_connections_used"] = (this.Calculations["pct_connections_used"] > 100) ? 100 : this.Calculations["pct_connections_used"];
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (this.Server.Version.Major > 3 && !(this.Server.Version.Major == 4 && this.Server.Version.Minor == 0))              {                  this.Calculations.Add("pct_key_buffer_used"' (long)Math.Ceiling(1 - ((Convert.ToDouble(this.Server.Status["Key_blocks_unused"]' Settings.Culture) * Convert.ToDouble(this.Server.Variables["key_cache_block_size"]' Settings.Culture)) / Convert.ToDouble(this.Server.Variables["key_buffer_size"]' Settings.Culture))) * 100);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (this.Server.Version.Major > 3 && !(this.Server.Version.Major == 4 && this.Server.Version.Minor == 0))              {                  this.Calculations.Add("pct_key_buffer_used"' (long)Math.Ceiling(1 - ((Convert.ToDouble(this.Server.Status["Key_blocks_unused"]' Settings.Culture) * Convert.ToDouble(this.Server.Variables["key_cache_block_size"]' Settings.Culture)) / Convert.ToDouble(this.Server.Variables["key_buffer_size"]' Settings.Culture))) * 100);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (this.Server.Version.Major > 3 && !(this.Server.Version.Major == 4 && this.Server.Version.Minor == 0))              {                  this.Calculations.Add("pct_key_buffer_used"' (long)Math.Ceiling(1 - ((Convert.ToDouble(this.Server.Status["Key_blocks_unused"]' Settings.Culture) * Convert.ToDouble(this.Server.Variables["key_cache_block_size"]' Settings.Culture)) / Convert.ToDouble(this.Server.Variables["key_buffer_size"]' Settings.Culture))) * 100);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Key_read_requests"]' Settings.Culture) > 0)              {                  this.Calculations.Add("pct_keys_from_mem"' 100 - (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Key_reads"]' Settings.Culture) / Convert.ToDouble(this.Server.Status["Key_read_requests"]' Settings.Culture)) * 100D));              }              else              {                  this.Calculations.Add("pct_keys_from_mem"' 0);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (this.Server.Version.Major > 3)              {                  this.Calculations.Add("query_cache_efficiency"' (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Qcache_hits"]' Settings.Culture) / (Convert.ToDouble(this.Server.Status["Com_select"]' Settings.Culture) + Convert.ToDouble(this.Server.Status["Qcache_hits"]' Settings.Culture))) * 100D));                  if (this.Server.Variables["query_cache_size"] != "0")                  {                      this.Calculations.Add("pct_query_cache_used"' 100 - (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Qcache_free_memory"]' Settings.Culture) / Convert.ToDouble(this.Server.Variables["query_cache_size"]' Settings.Culture)) * 100));                  }                    if (this.Server.Status["Qcache_lowmem_prunes"] == "0")                  {                      this.Calculations.Add("query_cache_prunes_per_day"' 0);                  }                  else                  {                      this.Calculations.Add("query_cache_prunes_per_day"' Convert.ToInt64(this.Server.Status["Qcache_lowmem_prunes"]' Settings.Culture) / (long)Math.Ceiling(Convert.ToInt64(this.Server.Status["Uptime"]' Settings.Culture) / 86400D));                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (this.Server.Version.Major > 3)              {                  this.Calculations.Add("query_cache_efficiency"' (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Qcache_hits"]' Settings.Culture) / (Convert.ToDouble(this.Server.Status["Com_select"]' Settings.Culture) + Convert.ToDouble(this.Server.Status["Qcache_hits"]' Settings.Culture))) * 100D));                  if (this.Server.Variables["query_cache_size"] != "0")                  {                      this.Calculations.Add("pct_query_cache_used"' 100 - (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Qcache_free_memory"]' Settings.Culture) / Convert.ToDouble(this.Server.Variables["query_cache_size"]' Settings.Culture)) * 100));                  }                    if (this.Server.Status["Qcache_lowmem_prunes"] == "0")                  {                      this.Calculations.Add("query_cache_prunes_per_day"' 0);                  }                  else                  {                      this.Calculations.Add("query_cache_prunes_per_day"' Convert.ToInt64(this.Server.Status["Qcache_lowmem_prunes"]' Settings.Culture) / (long)Math.Ceiling(Convert.ToInt64(this.Server.Status["Uptime"]' Settings.Culture) / 86400D));                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (this.Server.Version.Major > 3)              {                  this.Calculations.Add("query_cache_efficiency"' (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Qcache_hits"]' Settings.Culture) / (Convert.ToDouble(this.Server.Status["Com_select"]' Settings.Culture) + Convert.ToDouble(this.Server.Status["Qcache_hits"]' Settings.Culture))) * 100D));                  if (this.Server.Variables["query_cache_size"] != "0")                  {                      this.Calculations.Add("pct_query_cache_used"' 100 - (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Qcache_free_memory"]' Settings.Culture) / Convert.ToDouble(this.Server.Variables["query_cache_size"]' Settings.Culture)) * 100));                  }                    if (this.Server.Status["Qcache_lowmem_prunes"] == "0")                  {                      this.Calculations.Add("query_cache_prunes_per_day"' 0);                  }                  else                  {                      this.Calculations.Add("query_cache_prunes_per_day"' Convert.ToInt64(this.Server.Status["Qcache_lowmem_prunes"]' Settings.Culture) / (long)Math.Ceiling(Convert.ToInt64(this.Server.Status["Uptime"]' Settings.Culture) / 86400D));                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture) > 0)              {                  this.Calculations.Add("table_cache_hit_rate"' Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture) * 100 / Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture));              }              else              {                  this.Calculations.Add("table_cache_hit_rate"' 100);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture) > 0)              {                  this.Calculations.Add("table_cache_hit_rate"' Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture) * 100 / Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture));              }              else              {                  this.Calculations.Add("table_cache_hit_rate"' 100);              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Variables["open_files_limit"]' Settings.Culture) > 0)              {                  this.Calculations.Add("pct_files_open"' Convert.ToInt64(this.Server.Status["Open_files"]' Settings.Culture) * 100 / Convert.ToInt64(this.Server.Variables["open_files_limit"]' Settings.Culture));              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture) > 0)              {                  if (this.Server.Status["Table_locks_waited"] == "0")                  {                      this.Calculations.Add("pct_table_locks_immediate"' 100);                  }                  else                  {                      this.Calculations.Add("pct_table_locks_immediate"' Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture) * 100 / (Convert.ToInt64(this.Server.Status["Table_locks_waited"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture)));                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture) > 0)              {                  if (this.Server.Status["Table_locks_waited"] == "0")                  {                      this.Calculations.Add("pct_table_locks_immediate"' 100);                  }                  else                  {                      this.Calculations.Add("pct_table_locks_immediate"' Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture) * 100 / (Convert.ToInt64(this.Server.Status["Table_locks_waited"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture)));                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: this.Calculations.Add("thread_cache_hit_rate"' 100 - (long)Math.Ceiling((Convert.ToDouble(this.Server.Status["Threads_created"]' Settings.Culture) / Convert.ToDouble(this.Server.Status["Connections"]' Settings.Culture)) * 100D));
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Questions"]' Settings.Culture) > 0)              {                  this.Calculations.Add("total_reads"' Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture));                  this.Calculations.Add("total_writes"' Convert.ToInt64(this.Server.Status["Com_delete"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_insert"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_update"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_replace"]' Settings.Culture));                  if (this.Calculations["total_reads"] == 0)                  {                      this.Calculations.Add("pct_reads"' 0);                      this.Calculations.Add("pct_writes"' 100);                  }                  else                  {                      this.Calculations.Add("pct_reads"' (long)Math.Ceiling((Convert.ToDouble(this.Calculations["total_reads"]) / Convert.ToDouble(this.Calculations["total_reads"] + this.Calculations["total_writes"])) * 100D));                      this.Calculations.Add("pct_writes"' 100 - this.Calculations["pct_reads"]);                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Questions"]' Settings.Culture) > 0)              {                  this.Calculations.Add("total_reads"' Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture));                  this.Calculations.Add("total_writes"' Convert.ToInt64(this.Server.Status["Com_delete"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_insert"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_update"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_replace"]' Settings.Culture));                  if (this.Calculations["total_reads"] == 0)                  {                      this.Calculations.Add("pct_reads"' 0);                      this.Calculations.Add("pct_writes"' 100);                  }                  else                  {                      this.Calculations.Add("pct_reads"' (long)Math.Ceiling((Convert.ToDouble(this.Calculations["total_reads"]) / Convert.ToDouble(this.Calculations["total_reads"] + this.Calculations["total_writes"])) * 100D));                      this.Calculations.Add("pct_writes"' 100 - this.Calculations["pct_reads"]);                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,PerformCalculations,The following statement contains a magic number: if (this.Server.Variables["have_innodb"] == "YES")              {                  this.Calculations.Add("innodb_log_size_pct"' Convert.ToInt64(this.Server.Variables["innodb_log_file_size"]' Settings.Culture) * 100 / Convert.ToInt64(this.Server.Variables["innodb_buffer_pool_size"]' Settings.Culture));              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Uptime"]' Settings.Culture) < 86400)              {                  this.Recommendations.Add("MySQL started within last 24 hours - recommendations may be inaccurate");              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Calculations["total_possible_used_memory"] > 2147483648 && this.Server.PhysicalMemory < 2147483648)              {                  this.PrintMessage(Status.Fail' "Allocating > 2GB RAM on 32-bit systems can cause system instability");                  this.PrintMessage(Status.Fail' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)");              }              else if (this.Calculations["pct_physical_memory"] > 85)              {                  this.PrintMessage(Status.Fail' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)");                  this.Recommendations.Add("Reduce your overall MySQL memory footprint for system stability");              }              else              {                  this.PrintMessage(Status.Pass' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)");              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Calculations["total_possible_used_memory"] > 2147483648 && this.Server.PhysicalMemory < 2147483648)              {                  this.PrintMessage(Status.Fail' "Allocating > 2GB RAM on 32-bit systems can cause system instability");                  this.PrintMessage(Status.Fail' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)");              }              else if (this.Calculations["pct_physical_memory"] > 85)              {                  this.PrintMessage(Status.Fail' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)");                  this.Recommendations.Add("Reduce your overall MySQL memory footprint for system stability");              }              else              {                  this.PrintMessage(Status.Pass' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)");              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Calculations["total_possible_used_memory"] > 2147483648 && this.Server.PhysicalMemory < 2147483648)              {                  this.PrintMessage(Status.Fail' "Allocating > 2GB RAM on 32-bit systems can cause system instability");                  this.PrintMessage(Status.Fail' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)");              }              else if (this.Calculations["pct_physical_memory"] > 85)              {                  this.PrintMessage(Status.Fail' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)");                  this.Recommendations.Add("Reduce your overall MySQL memory footprint for system stability");              }              else              {                  this.PrintMessage(Status.Pass' "Maximum possible memory usage: " + DisplayBytes(this.Calculations["total_possible_used_memory"]) + " (" + this.Calculations["pct_physical_memory"] + "% of installed RAM)");              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Calculations["pct_slow_queries"] > 5)              {                  this.PrintMessage(Status.Fail' "Slow queries: " + this.Calculations["pct_slow_queries"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Slow_queries"]' Settings.Culture)) + "/" + DisplayRounded(Convert.ToInt64(this.Server.Status["Questions"]' Settings.Culture)) + ")");              }              else              {                  this.PrintMessage(Status.Pass' "Slow queries: " + this.Calculations["pct_slow_queries"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Slow_queries"]' Settings.Culture)) + "/" + DisplayRounded(Convert.ToInt64(this.Server.Status["Questions"]' Settings.Culture)) + ")");              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToDouble(this.Server.Variables["long_query_time"]' Settings.Culture) > 10)              {                  this.VariablesToAdjust.Add("long_query_time (<= 10)");              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Calculations["pct_connections_used"] > 85)              {                  this.PrintMessage(Status.Fail' "Highest connection usage: " + this.Calculations["pct_connections_used"] + "%  (" + this.Server.Status["Max_used_connections"] + "/" + this.Server.Variables["max_connections"] + ")");                  this.VariablesToAdjust.Add("max_connections (> " + this.Server.Variables["max_connections"] + ")");                  this.VariablesToAdjust.Add("wait_timeout (< " + this.Server.Variables["wait_timeout"] + ")");                  this.VariablesToAdjust.Add("interactive_timeout (< " + this.Server.Variables["interactive_timeout"] + ")");                  this.Recommendations.Add("Reduce or eliminate persistent connections to reduce connection usage");              }              else              {                  this.PrintMessage(Status.Pass' "Highest usage of available connections: " + this.Calculations["pct_connections_used"] + "% (" + this.Server.Status["Max_used_connections"] + "/" + this.Server.Variables["max_connections"] + ")");              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (!this.Calculations.ContainsKey("total_myisam_indexes"))              {                  this.Recommendations.Add("Unable to calculate MyISAM indexes on remote MySQL server < 5.0.0");              }              else if (!this.Calculations.ContainsKey("total_myisam_indexes") || this.Calculations["total_myisam_indexes"] == 0)              {                  this.PrintMessage(Status.Fail' "Cannot calculate MyISAM index size - please run this program as an Administrator");              }              else if (this.Calculations["total_myisam_indexes"] == 0)              {                  this.PrintMessage(Status.Fail' "None of your MyISAM tables are indexed - add indexes immediately");              }              else              {                  if (Convert.ToInt64(this.Server.Variables["key_buffer_size"]' Settings.Culture) < this.Calculations["total_myisam_indexes"] && this.Calculations["pct_keys_from_mem"] < 95)                  {                      this.PrintMessage(Status.Fail' "Key buffer size / total MyISAM indexes: " + DisplayBytes(Convert.ToInt64(this.Server.Variables["key_buffer_size"]' Settings.Culture)) + "/" + DisplayBytes(this.Calculations["total_myisam_indexes"]));                      this.VariablesToAdjust.Add("key_buffer_size (> " + DisplayBytes(this.Calculations["total_myisam_indexes"]) + ")");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Key buffer size / total MyISAM indexes: " + DisplayBytes(Convert.ToInt64(this.Server.Variables["key_buffer_size"]' Settings.Culture)) + "/" + DisplayBytes(this.Calculations["total_myisam_indexes"]));                  }                    if (Convert.ToInt64(this.Server.Status["Key_read_requests"]' Settings.Culture) > 0)                  {                      if (this.Calculations["pct_keys_from_mem"] < 95)                      {                          this.PrintMessage(Status.Fail' "Key buffer hit rate: " + this.Calculations["pct_keys_from_mem"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_read_requests"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_reads"]' Settings.Culture)) + " reads)");                      }                      else                      {                          this.PrintMessage(Status.Pass' "Key buffer hit rate: " + this.Calculations["pct_keys_from_mem"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_read_requests"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_reads"]' Settings.Culture)) + " reads)");                      }                  }                  else                  {                      // No queries have run that would use keys                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (!this.Calculations.ContainsKey("total_myisam_indexes"))              {                  this.Recommendations.Add("Unable to calculate MyISAM indexes on remote MySQL server < 5.0.0");              }              else if (!this.Calculations.ContainsKey("total_myisam_indexes") || this.Calculations["total_myisam_indexes"] == 0)              {                  this.PrintMessage(Status.Fail' "Cannot calculate MyISAM index size - please run this program as an Administrator");              }              else if (this.Calculations["total_myisam_indexes"] == 0)              {                  this.PrintMessage(Status.Fail' "None of your MyISAM tables are indexed - add indexes immediately");              }              else              {                  if (Convert.ToInt64(this.Server.Variables["key_buffer_size"]' Settings.Culture) < this.Calculations["total_myisam_indexes"] && this.Calculations["pct_keys_from_mem"] < 95)                  {                      this.PrintMessage(Status.Fail' "Key buffer size / total MyISAM indexes: " + DisplayBytes(Convert.ToInt64(this.Server.Variables["key_buffer_size"]' Settings.Culture)) + "/" + DisplayBytes(this.Calculations["total_myisam_indexes"]));                      this.VariablesToAdjust.Add("key_buffer_size (> " + DisplayBytes(this.Calculations["total_myisam_indexes"]) + ")");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Key buffer size / total MyISAM indexes: " + DisplayBytes(Convert.ToInt64(this.Server.Variables["key_buffer_size"]' Settings.Culture)) + "/" + DisplayBytes(this.Calculations["total_myisam_indexes"]));                  }                    if (Convert.ToInt64(this.Server.Status["Key_read_requests"]' Settings.Culture) > 0)                  {                      if (this.Calculations["pct_keys_from_mem"] < 95)                      {                          this.PrintMessage(Status.Fail' "Key buffer hit rate: " + this.Calculations["pct_keys_from_mem"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_read_requests"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_reads"]' Settings.Culture)) + " reads)");                      }                      else                      {                          this.PrintMessage(Status.Pass' "Key buffer hit rate: " + this.Calculations["pct_keys_from_mem"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_read_requests"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Key_reads"]' Settings.Culture)) + " reads)");                      }                  }                  else                  {                      // No queries have run that would use keys                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Server.Version.Major < 4)              {                  // MySQL versions < 4.01 don't support query caching                  this.Recommendations.Add("Upgrade MySQL to version 4+ to utilize query caching");              }              else if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) < 1)              {                  this.PrintMessage(Status.Fail' "Query cache is disabled");                  this.VariablesToAdjust.Add("query_cache_size (>= 8M)");              }              else if (Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture) == 0)              {                  this.PrintMessage(Status.Fail' "Query cache cannot be analyzed - no SELECT statements executed");              }              else              {                  if (this.Calculations["query_cache_efficiency"] < 20)                  {                      this.PrintMessage(Status.Fail' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                      this.VariablesToAdjust.Add("query_cache_limit (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_limit"]' Settings.Culture)) + "' or use smaller result sets)");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                  }                    if (this.Calculations["query_cache_prunes_per_day"] > 98)                  {                      this.PrintMessage(Status.Fail' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                      if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) > 128 * 1024 * 1024)                      {                          this.Recommendations.Add("Increasing the query_cache size over 128M may reduce performance");                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ") [see warning above]");                      }                      else                      {                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ")");                      }                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Server.Version.Major < 4)              {                  // MySQL versions < 4.01 don't support query caching                  this.Recommendations.Add("Upgrade MySQL to version 4+ to utilize query caching");              }              else if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) < 1)              {                  this.PrintMessage(Status.Fail' "Query cache is disabled");                  this.VariablesToAdjust.Add("query_cache_size (>= 8M)");              }              else if (Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture) == 0)              {                  this.PrintMessage(Status.Fail' "Query cache cannot be analyzed - no SELECT statements executed");              }              else              {                  if (this.Calculations["query_cache_efficiency"] < 20)                  {                      this.PrintMessage(Status.Fail' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                      this.VariablesToAdjust.Add("query_cache_limit (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_limit"]' Settings.Culture)) + "' or use smaller result sets)");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                  }                    if (this.Calculations["query_cache_prunes_per_day"] > 98)                  {                      this.PrintMessage(Status.Fail' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                      if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) > 128 * 1024 * 1024)                      {                          this.Recommendations.Add("Increasing the query_cache size over 128M may reduce performance");                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ") [see warning above]");                      }                      else                      {                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ")");                      }                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Server.Version.Major < 4)              {                  // MySQL versions < 4.01 don't support query caching                  this.Recommendations.Add("Upgrade MySQL to version 4+ to utilize query caching");              }              else if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) < 1)              {                  this.PrintMessage(Status.Fail' "Query cache is disabled");                  this.VariablesToAdjust.Add("query_cache_size (>= 8M)");              }              else if (Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture) == 0)              {                  this.PrintMessage(Status.Fail' "Query cache cannot be analyzed - no SELECT statements executed");              }              else              {                  if (this.Calculations["query_cache_efficiency"] < 20)                  {                      this.PrintMessage(Status.Fail' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                      this.VariablesToAdjust.Add("query_cache_limit (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_limit"]' Settings.Culture)) + "' or use smaller result sets)");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                  }                    if (this.Calculations["query_cache_prunes_per_day"] > 98)                  {                      this.PrintMessage(Status.Fail' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                      if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) > 128 * 1024 * 1024)                      {                          this.Recommendations.Add("Increasing the query_cache size over 128M may reduce performance");                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ") [see warning above]");                      }                      else                      {                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ")");                      }                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Server.Version.Major < 4)              {                  // MySQL versions < 4.01 don't support query caching                  this.Recommendations.Add("Upgrade MySQL to version 4+ to utilize query caching");              }              else if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) < 1)              {                  this.PrintMessage(Status.Fail' "Query cache is disabled");                  this.VariablesToAdjust.Add("query_cache_size (>= 8M)");              }              else if (Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture) == 0)              {                  this.PrintMessage(Status.Fail' "Query cache cannot be analyzed - no SELECT statements executed");              }              else              {                  if (this.Calculations["query_cache_efficiency"] < 20)                  {                      this.PrintMessage(Status.Fail' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                      this.VariablesToAdjust.Add("query_cache_limit (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_limit"]' Settings.Culture)) + "' or use smaller result sets)");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                  }                    if (this.Calculations["query_cache_prunes_per_day"] > 98)                  {                      this.PrintMessage(Status.Fail' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                      if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) > 128 * 1024 * 1024)                      {                          this.Recommendations.Add("Increasing the query_cache size over 128M may reduce performance");                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ") [see warning above]");                      }                      else                      {                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ")");                      }                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Server.Version.Major < 4)              {                  // MySQL versions < 4.01 don't support query caching                  this.Recommendations.Add("Upgrade MySQL to version 4+ to utilize query caching");              }              else if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) < 1)              {                  this.PrintMessage(Status.Fail' "Query cache is disabled");                  this.VariablesToAdjust.Add("query_cache_size (>= 8M)");              }              else if (Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture) == 0)              {                  this.PrintMessage(Status.Fail' "Query cache cannot be analyzed - no SELECT statements executed");              }              else              {                  if (this.Calculations["query_cache_efficiency"] < 20)                  {                      this.PrintMessage(Status.Fail' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                      this.VariablesToAdjust.Add("query_cache_limit (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_limit"]' Settings.Culture)) + "' or use smaller result sets)");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                  }                    if (this.Calculations["query_cache_prunes_per_day"] > 98)                  {                      this.PrintMessage(Status.Fail' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                      if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) > 128 * 1024 * 1024)                      {                          this.Recommendations.Add("Increasing the query_cache size over 128M may reduce performance");                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ") [see warning above]");                      }                      else                      {                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ")");                      }                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Server.Version.Major < 4)              {                  // MySQL versions < 4.01 don't support query caching                  this.Recommendations.Add("Upgrade MySQL to version 4+ to utilize query caching");              }              else if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) < 1)              {                  this.PrintMessage(Status.Fail' "Query cache is disabled");                  this.VariablesToAdjust.Add("query_cache_size (>= 8M)");              }              else if (Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture) == 0)              {                  this.PrintMessage(Status.Fail' "Query cache cannot be analyzed - no SELECT statements executed");              }              else              {                  if (this.Calculations["query_cache_efficiency"] < 20)                  {                      this.PrintMessage(Status.Fail' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                      this.VariablesToAdjust.Add("query_cache_limit (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_limit"]' Settings.Culture)) + "' or use smaller result sets)");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache efficiency: " + this.Calculations["query_cache_efficiency"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture)) + " cached / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Qcache_hits"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Com_select"]' Settings.Culture)) + " selects)");                  }                    if (this.Calculations["query_cache_prunes_per_day"] > 98)                  {                      this.PrintMessage(Status.Fail' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                      if (Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture) > 128 * 1024 * 1024)                      {                          this.Recommendations.Add("Increasing the query_cache size over 128M may reduce performance");                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ") [see warning above]");                      }                      else                      {                          this.VariablesToAdjust.Add("query_cache_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["query_cache_size"]' Settings.Culture)) + ")");                      }                  }                  else                  {                      this.PrintMessage(Status.Pass' "Query cache prunes per day: " + this.Calculations["query_cache_prunes_per_day"]);                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Calculations["total_sorts"] == 0)              {                  // For the sake of space' we will be quiet here                  // No sorts have run yet              }              else if (this.Calculations["pct_temp_sort_table"] > 10)              {                  this.PrintMessage(Status.Fail' "Sorts requiring temporary tables: " + this.Calculations["pct_temp_sort_table"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Sort_merge_passes"]' Settings.Culture)) + " temp sorts / " + DisplayRounded(this.Calculations["total_sorts"]) + " sorts)");                  this.VariablesToAdjust.Add("sort_buffer_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["sort_buffer_size"]' Settings.Culture)) + ")");                  this.VariablesToAdjust.Add("read_rnd_buffer_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["read_rnd_buffer_size"]' Settings.Culture)) + ")");              }              else              {                  this.PrintMessage(Status.Pass' "Sorts requiring temporary tables: " + this.Calculations["pct_temp_sort_table"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Sort_merge_passes"]' Settings.Culture)) + " temp sorts / " + DisplayRounded(this.Calculations["total_sorts"]) + " sorts)");              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Calculations["joins_without_indexes_per_day"] > 250)              {                  this.PrintMessage(Status.Fail' "Joins performed without indexes: " + this.Calculations["joins_without_indexes"]);                  this.VariablesToAdjust.Add("join_buffer_size (> " + DisplayBytes(Convert.ToInt64(this.Server.Variables["join_buffer_size"]' Settings.Culture)) + "' or always use indexes with joins)");                  this.Recommendations.Add("Adjust your join queries to always utilize indexes");              }              else              {                  // For the sake of space' we will be quiet here                  // No joins have run without indexes              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture) > 0)              {                  if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] < 256 * 1024 * 1024)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.VariablesToAdjust.Add("tmp_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["tmp_table_size"]' Settings.Culture)) + ")");                      this.VariablesToAdjust.Add("max_heap_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["max_heap_table_size"]' Settings.Culture)) + ")");                      this.Recommendations.Add("When making adjustments' make tmp_table_size/max_heap_table_size equal");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] >= 256)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.Recommendations.Add("Temporary table size is already large - reduce result set size");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                  }              }              else              {                  // For the sake of space' we will be quiet here                  // No temporary tables have been created              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture) > 0)              {                  if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] < 256 * 1024 * 1024)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.VariablesToAdjust.Add("tmp_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["tmp_table_size"]' Settings.Culture)) + ")");                      this.VariablesToAdjust.Add("max_heap_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["max_heap_table_size"]' Settings.Culture)) + ")");                      this.Recommendations.Add("When making adjustments' make tmp_table_size/max_heap_table_size equal");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] >= 256)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.Recommendations.Add("Temporary table size is already large - reduce result set size");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                  }              }              else              {                  // For the sake of space' we will be quiet here                  // No temporary tables have been created              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture) > 0)              {                  if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] < 256 * 1024 * 1024)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.VariablesToAdjust.Add("tmp_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["tmp_table_size"]' Settings.Culture)) + ")");                      this.VariablesToAdjust.Add("max_heap_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["max_heap_table_size"]' Settings.Culture)) + ")");                      this.Recommendations.Add("When making adjustments' make tmp_table_size/max_heap_table_size equal");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] >= 256)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.Recommendations.Add("Temporary table size is already large - reduce result set size");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                  }              }              else              {                  // For the sake of space' we will be quiet here                  // No temporary tables have been created              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture) > 0)              {                  if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] < 256 * 1024 * 1024)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.VariablesToAdjust.Add("tmp_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["tmp_table_size"]' Settings.Culture)) + ")");                      this.VariablesToAdjust.Add("max_heap_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["max_heap_table_size"]' Settings.Culture)) + ")");                      this.Recommendations.Add("When making adjustments' make tmp_table_size/max_heap_table_size equal");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] >= 256)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.Recommendations.Add("Temporary table size is already large - reduce result set size");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                  }              }              else              {                  // For the sake of space' we will be quiet here                  // No temporary tables have been created              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture) > 0)              {                  if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] < 256 * 1024 * 1024)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.VariablesToAdjust.Add("tmp_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["tmp_table_size"]' Settings.Culture)) + ")");                      this.VariablesToAdjust.Add("max_heap_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["max_heap_table_size"]' Settings.Culture)) + ")");                      this.Recommendations.Add("When making adjustments' make tmp_table_size/max_heap_table_size equal");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] >= 256)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.Recommendations.Add("Temporary table size is already large - reduce result set size");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                  }              }              else              {                  // For the sake of space' we will be quiet here                  // No temporary tables have been created              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture) > 0)              {                  if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] < 256 * 1024 * 1024)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.VariablesToAdjust.Add("tmp_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["tmp_table_size"]' Settings.Culture)) + ")");                      this.VariablesToAdjust.Add("max_heap_table_size (> " + DisplayBytesRounded(Convert.ToInt64(this.Server.Variables["max_heap_table_size"]' Settings.Culture)) + ")");                      this.Recommendations.Add("When making adjustments' make tmp_table_size/max_heap_table_size equal");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else if (this.Calculations["pct_temp_disk"] > 25 && this.Calculations["max_tmp_table_size"] >= 256)                  {                      this.PrintMessage(Status.Fail' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                      this.Recommendations.Add("Temporary table size is already large - reduce result set size");                      this.Recommendations.Add("Reduce your SELECT DISTINCT queries without LIMIT clauses");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Temporary tables created on disk: " + this.Calculations["pct_temp_disk"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture)) + " on disk / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Created_tmp_disk_tables"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Created_tmp_tables"]' Settings.Culture)) + " total)");                  }              }              else              {                  // For the sake of space' we will be quiet here                  // No temporary tables have been created              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Variables["thread_cache_size"]' Settings.Culture) == 0)              {                  this.PrintMessage(Status.Fail' "Thread cache is disabled");                  this.Recommendations.Add("Set thread_cache_size to 4 as a starting value");                  this.VariablesToAdjust.Add("thread_cache_size (start at 4)");              }              else              {                  if (this.Calculations["thread_cache_hit_rate"] <= 50)                  {                      this.PrintMessage(Status.Fail' "Thread cache hit rate: " + this.Calculations["thread_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Threads_created"]' Settings.Culture)) + " created / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Connections"]' Settings.Culture)) + " connections)");                      this.VariablesToAdjust.Add("thread_cache_size (> " + this.Server.Variables["thread_cache_size"] + ")");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Thread cache hit rate: " + this.Calculations["thread_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Threads_created"]' Settings.Culture)) + " created / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Connections"]' Settings.Culture)) + " connections)");                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture) > 0)              {                  if (this.Calculations["table_cache_hit_rate"] < 20)                  {                      this.PrintMessage(Status.Fail' "Table cache hit rate: " + this.Calculations["table_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture)) + " open / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture)) + " opened)");                      if (this.Server.Version.Major > 5 || (this.Server.Version.Major == 5 && this.Server.Version.Minor >= 1))                      {                          this.VariablesToAdjust.Add("table_open_cache (> " + this.Server.Variables["table_open_cache"] + ")");                      }                      else                      {                          this.VariablesToAdjust.Add("table_cache (> " + this.Server.Variables["table_cache"] + ")");                      }                        this.Recommendations.Add("Increase table_cache gradually to avoid file descriptor limits");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Table cache hit rate: " + this.Calculations["table_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture)) + " open / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture)) + " opened)");                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture) > 0)              {                  if (this.Calculations["table_cache_hit_rate"] < 20)                  {                      this.PrintMessage(Status.Fail' "Table cache hit rate: " + this.Calculations["table_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture)) + " open / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture)) + " opened)");                      if (this.Server.Version.Major > 5 || (this.Server.Version.Major == 5 && this.Server.Version.Minor >= 1))                      {                          this.VariablesToAdjust.Add("table_open_cache (> " + this.Server.Variables["table_open_cache"] + ")");                      }                      else                      {                          this.VariablesToAdjust.Add("table_cache (> " + this.Server.Variables["table_cache"] + ")");                      }                        this.Recommendations.Add("Increase table_cache gradually to avoid file descriptor limits");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Table cache hit rate: " + this.Calculations["table_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture)) + " open / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture)) + " opened)");                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture) > 0)              {                  if (this.Calculations["table_cache_hit_rate"] < 20)                  {                      this.PrintMessage(Status.Fail' "Table cache hit rate: " + this.Calculations["table_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture)) + " open / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture)) + " opened)");                      if (this.Server.Version.Major > 5 || (this.Server.Version.Major == 5 && this.Server.Version.Minor >= 1))                      {                          this.VariablesToAdjust.Add("table_open_cache (> " + this.Server.Variables["table_open_cache"] + ")");                      }                      else                      {                          this.VariablesToAdjust.Add("table_cache (> " + this.Server.Variables["table_cache"] + ")");                      }                        this.Recommendations.Add("Increase table_cache gradually to avoid file descriptor limits");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Table cache hit rate: " + this.Calculations["table_cache_hit_rate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_tables"]' Settings.Culture)) + " open / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Opened_tables"]' Settings.Culture)) + " opened)");                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Calculations.ContainsKey("pct_files_open"))              {                  if (this.Calculations["pct_files_open"] > 85)                  {                      this.PrintMessage(Status.Fail' "Open file limit used: " + this.Calculations["pct_files_open"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_files"]' Settings.Culture)) + "/" + DisplayRounded(Convert.ToInt64(this.Server.Variables["open_files_limit"]' Settings.Culture)) + ")");                      this.VariablesToAdjust.Add("open_files_limit (> " + this.Server.Variables["open_files_limit"] + ")");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Open file limit used: " + this.Calculations["pct_files_open"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Open_files"]' Settings.Culture)) + "/" + DisplayRounded(Convert.ToInt64(this.Server.Variables["open_files_limit"]' Settings.Culture)) + ")");                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Calculations.ContainsKey("pct_table_locks_immediate"))              {                  if (this.Calculations["pct_table_locks_immediate"] < 95)                  {                      this.PrintMessage(Status.Fail' "Table locks acquired immediately: " + this.Calculations["pct_table_locks_immediate"] + "%");                      this.Recommendations.Add("Optimize queries and/or use InnoDB to reduce lock wait");                  }                  else                  {                      this.PrintMessage(Status.Pass' "Table locks acquired immediately: " + this.Calculations["pct_table_locks_immediate"] + "% (" + DisplayRounded(Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture)) + " immediate / " + DisplayRounded(Convert.ToInt64(this.Server.Status["Table_locks_waited"]' Settings.Culture) + Convert.ToInt64(this.Server.Status["Table_locks_immediate"]' Settings.Culture)) + " locks)");                  }              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Server.Version.Major < 4 || (this.Server.Version.Major == 4 && this.Server.Version.Minor == 0))              {                  this.Recommendations.Add("Upgrade to MySQL 4.1+ to use concurrent MyISAM inserts");              }              else if (this.Server.Variables["concurrent_insert"] == "NEVER")              {                  this.Recommendations.Add("Enable concurrent_insert by setting it to 'AUTO' OR 'ALWAYS'");              }              else if (this.Server.Variables["concurrent_insert"] == "OFF")              {                  this.Recommendations.Add("Enable concurrent_insert by setting it to 'ON'");              }              else if (this.Server.Variables["concurrent_insert"] != "ON" && this.Server.Variables["concurrent_insert"] != "AUTO" && this.Server.Variables["concurrent_insert"] != "ALWAYS" && Convert.ToInt64(this.Server.Variables["concurrent_insert"]' Settings.Culture) == 0)              {                  this.Recommendations.Add("Enable concurrent_insert by setting it to 1");              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Server.Version.Major < 4 || (this.Server.Version.Major == 4 && this.Server.Version.Minor == 0))              {                  this.Recommendations.Add("Upgrade to MySQL 4.1+ to use concurrent MyISAM inserts");              }              else if (this.Server.Variables["concurrent_insert"] == "NEVER")              {                  this.Recommendations.Add("Enable concurrent_insert by setting it to 'AUTO' OR 'ALWAYS'");              }              else if (this.Server.Variables["concurrent_insert"] == "OFF")              {                  this.Recommendations.Add("Enable concurrent_insert by setting it to 'ON'");              }              else if (this.Server.Variables["concurrent_insert"] != "ON" && this.Server.Variables["concurrent_insert"] != "AUTO" && this.Server.Variables["concurrent_insert"] != "ALWAYS" && Convert.ToInt64(this.Server.Variables["concurrent_insert"]' Settings.Culture) == 0)              {                  this.Recommendations.Add("Enable concurrent_insert by setting it to 1");              }
Magic Number,MySqlTuner,TuningCalculator,C:\repos\pmachapman_mysqltuner\MySQLTuner\TuningCalculator.cs,MySqlStats,The following statement contains a magic number: if (this.Calculations["pct_aborted_connections"] > 5)              {                  this.PrintMessage(Status.Fail' "Connections aborted: " + this.Calculations["pct_aborted_connections"] + "%");                  this.Recommendations.Add("Your applications are not closing MySQL connections properly");              }
