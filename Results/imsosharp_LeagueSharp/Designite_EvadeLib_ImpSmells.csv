Implementation smell,Namespace,Class,File,Method,Description
Long Method,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The method has 158 lines of code.
Long Method,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The method has 511 lines of code.
Long Method,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The method has 187 lines of code.
Long Method,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The method has 128 lines of code.
Long Method,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The method has 139 lines of code.
Long Method,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The method has 400 lines of code.
Long Method,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,The method has 122 lines of code.
Long Method,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The method has 3221 lines of code.
Complex Method,Evade,Config,C:\repos\imsosharp_LeagueSharp\EvadeLib\Config.cs,CreateMenu,Cyclomatic complexity of the method is 9
Complex Method,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,Cyclomatic complexity of the method is 55
Complex Method,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,Cyclomatic complexity of the method is 27
Complex Method,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,Cyclomatic complexity of the method is 21
Complex Method,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,Cyclomatic complexity of the method is 22
Complex Method,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,Cyclomatic complexity of the method is 42
Complex Method,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,Cyclomatic complexity of the method is 19
Complex Method,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,ObjAiHeroOnOnProcessSpellCast,Cyclomatic complexity of the method is 15
Complex Method,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadePoints,Cyclomatic complexity of the method is 10
Complex Method,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadeTargets,Cyclomatic complexity of the method is 8
Long Parameter List,Evade,DashData,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellData.cs,DashData,The method has 7 parameters. Parameters: name' slot' range' fixedRange' delay' speed' dangerLevel
Long Parameter List,Evade,BlinkData,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellData.cs,BlinkData,The method has 6 parameters. Parameters: name' slot' range' delay' dangerLevel' isSummonerSpell
Long Parameter List,Evade,ShieldData,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellData.cs,ShieldData,The method has 5 parameters. Parameters: name' slot' delay' dangerLevel' isSpellShield
Long Parameter List,Evade,MoveBuffData,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellData.cs,MoveBuffData,The method has 5 parameters. Parameters: name' slot' delay' dangerLevel' amount
Long Parameter List,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,IsSafePath,The method has 5 parameters. Parameters: path' timeOffset' speed' delay' unit
Long Parameter List,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,Skillshot,The method has 6 parameters. Parameters: detectionType' spellData' startT' start' end' unit
Long Parameter List,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,The method has 5 parameters. Parameters: path' timeOffset' speed' delay' unit
Long Parameter List,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,TriggerOnDetectSkillshot,The method has 6 parameters. Parameters: detectionType' spellData' startT' start' end' unit
Long Parameter List,Evade,SpellData,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellData.cs,SpellData,The method has 11 parameters. Parameters: championName' spellName' slot' type' delay' range' radius' missileSpeed' addHitbox' fixedRange' defaultDangerValue
Long Parameter List,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadeTargets,The method has 7 parameters. Parameters: validTargets' speed' delay' range' isBlink' onlyGood' DontCheckForSafety
Long Identifier,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,The length of the parameter myPositionWhenExplodesWithOffset is 32.
Long Statement,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameStart,The length of the statement  "                             "Slot  " + spell.Slot + " " + spell.SData.Name + " w:" + spell.SData.LineWidth + " s:" + spell.SData.MissileSpeed + " r: " + " is 124.
Long Statement,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The length of the statement  "                                //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future. " is 126.
Complex Conditional,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The conditional expression  "item.SpellData.SpellName == skillshot.SpellData.SpellName &&                      (item.Unit.NetworkId == skillshot.Unit.NetworkId &&                       (skillshot.Direction).AngleBetween(item.Direction) < 5 &&                       (skillshot.Start.Distance(item.Start) < 100 || skillshot.SpellData.FromObjects.Length == 0))"  is complex.
Complex Conditional,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The conditional expression  "minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies)"  is complex.
Complex Conditional,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The conditional expression  "evadeSpell.IsShield && evadeSpell.CanShieldAllies &&                                      ally.Distance(ObjectManager.Player) < evadeSpell.MaxRange &&                                      dangerLevel >= evadeSpell.DangerLevel &&                                      ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready &&                                      IsAboutToHit(ally' evadeSpell.Delay)"  is complex.
Complex Conditional,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,Game_OnGameUpdate,The conditional expression  "SpellData.CollisionObjects.Count() > 0 && SpellData.CollisionObjects != null &&                  Environment.TickCount - _lastCollisionCalc > 50 && Config.Menu.Item("EnableCollision").GetValue<bool>()"  is complex.
Complex Conditional,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,ObjSpellMissileOnOnDelete,The conditional expression  "skillshot.SpellData.MissileSpellName == spellName &&                          (skillshot.Unit.NetworkId == unit.NetworkId &&                           (missile.EndPosition.To2D() - missile.StartPosition.To2D()).AngleBetween(skillshot.Direction) <                           10) && skillshot.SpellData.CanBeRemoved"  is complex.
Complex Conditional,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,GetBySpeed,The conditional expression  "spellData.ChampionName == ChampionName && spellData.MissileSpeed == speed &&                      (spellData.Id == -1 || id == spellData.Id)"  is complex.
Complex Conditional,Evade,Utils,C:\repos\imsosharp_LeagueSharp\EvadeLib\Utils.cs,ImmobileTime,The conditional expression  "buff.IsActive && Game.Time <= buff.EndTime &&                      (buff.Type == BuffType.Charm || buff.Type == BuffType.Knockup || buff.Type == BuffType.Stun ||                       buff.Type == BuffType.Suppression || buff.Type == BuffType.Snare)"  is complex.
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following statement contains a magic number: foreach (var cObject in skillshot.SpellData.CollisionObjects)              {                  switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }              }
Magic Number,Evade,Config,C:\repos\imsosharp_LeagueSharp\EvadeLib\Config.cs,CreateMenu,The following statement contains a magic number: foreach (var spell in EvadeSpellDatabase.Spells)              {                  var subMenu = new Menu(spell.Name' spell.Name);                    subMenu.AddItem(                      new MenuItem("DangerLevel" + spell.Name' "Danger level").SetValue(                          new Slider(spell.DangerLevel' 5' 1)));                    if (spell.IsTargetted && spell.ValidTargets.Contains(SpellValidTargets.AllyWards))                  {                      subMenu.AddItem(new MenuItem("WardJump" + spell.Name' "WardJump").SetValue(true));                  }                    subMenu.AddItem(new MenuItem("Enabled" + spell.Name' "Enabled").SetValue(true));                    evadeSpells.AddSubMenu(subMenu);              }
Magic Number,Evade,Config,C:\repos\imsosharp_LeagueSharp\EvadeLib\Config.cs,CreateMenu,The following statement contains a magic number: foreach (var hero in ObjectManager.Get<Obj_AI_Hero>())              {                  if (hero.Team != ObjectManager.Player.Team || Config.TestOnAllies)                  {                      foreach (var spell in SpellDatabase.Spells)                      {                          if (spell.ChampionName.ToLower() == hero.ChampionName.ToLower())                          {                              var subMenu = new Menu(spell.MenuItemName' spell.MenuItemName);                                subMenu.AddItem(                                  new MenuItem("DangerLevel" + spell.MenuItemName' "Danger level").SetValue(                                      new Slider(spell.DangerValue' 5' 1)));                                subMenu.AddItem(                                  new MenuItem("IsDangerous" + spell.MenuItemName' "Is Dangerous").SetValue(                                      spell.IsDangerous));                                subMenu.AddItem(new MenuItem("Draw" + spell.MenuItemName' "Draw").SetValue(true));                              subMenu.AddItem(new MenuItem("Enabled" + spell.MenuItemName' "Enabled").SetValue(true));                                skillShots.AddSubMenu(subMenu);                          }                      }                  }              }
Magic Number,Evade,Config,C:\repos\imsosharp_LeagueSharp\EvadeLib\Config.cs,CreateMenu,The following statement contains a magic number: drawings.AddItem(new MenuItem("Border"' "Border Width").SetValue(new Slider(1' 5' 1)));
Magic Number,Evade,Config,C:\repos\imsosharp_LeagueSharp\EvadeLib\Config.cs,CreateMenu,The following statement contains a magic number: Menu.AddItem(                  new MenuItem("OnlyDangerous"' "Dodge only dangerous").SetValue(new KeyBind(32' KeyBindType.Press)));
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Sivir")              {                  spell = new ShieldData("Sivir E"' SpellSlot.E' 100' 1' true);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Nocturne")              {                  spell = new ShieldData("Nocturne E"' SpellSlot.E' 100' 1' true);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Blitzcrank")              {                  spell = new MoveBuffData(                      "Blitzcrank W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.12f + 0.04f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Blitzcrank")              {                  spell = new MoveBuffData(                      "Blitzcrank W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.12f + 0.04f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Draven")              {                  spell = new MoveBuffData(                      "Draven W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.35f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Draven")              {                  spell = new MoveBuffData(                      "Draven W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.35f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Evelynn")              {                  spell = new MoveBuffData(                      "Evelynn W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.2f + 0.1f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Evelynn")              {                  spell = new MoveBuffData(                      "Evelynn W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.2f + 0.1f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Garen")              {                  spell = new MoveBuffData("Garen Q"' SpellSlot.Q' 100' 3' () => ObjectManager.Player.MoveSpeed * (1.35f));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Garen")              {                  spell = new MoveBuffData("Garen Q"' SpellSlot.Q' 100' 3' () => ObjectManager.Player.MoveSpeed * (1.35f));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Katarina")              {                  spell = new MoveBuffData(                      "Katarina W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Get<Obj_AI_Hero>().Any(h => h.IsValidTarget(375))                              ? ObjectManager.Player.MoveSpeed *                                (1 + 0.10f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level)                              : 0);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Katarina")              {                  spell = new MoveBuffData(                      "Katarina W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Get<Obj_AI_Hero>().Any(h => h.IsValidTarget(375))                              ? ObjectManager.Player.MoveSpeed *                                (1 + 0.10f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level)                              : 0);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Katarina")              {                  spell = new MoveBuffData(                      "Katarina W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Get<Obj_AI_Hero>().Any(h => h.IsValidTarget(375))                              ? ObjectManager.Player.MoveSpeed *                                (1 + 0.10f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level)                              : 0);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Karma")              {                  spell = new MoveBuffData(                      "Karma E"' SpellSlot.E' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.35f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.E).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Karma")              {                  spell = new MoveBuffData(                      "Karma E"' SpellSlot.E' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.35f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.E).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Kennen")              {                  spell = new MoveBuffData("Kennen E"' SpellSlot.E' 100' 3' () => 200 + ObjectManager.Player.MoveSpeed);                  //Actually it should be +335 but ingame you only gain +230' rito plz                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Kennen")              {                  spell = new MoveBuffData("Kennen E"' SpellSlot.E' 100' 3' () => 200 + ObjectManager.Player.MoveSpeed);                  //Actually it should be +335 but ingame you only gain +230' rito plz                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Kennen")              {                  spell = new MoveBuffData("Kennen E"' SpellSlot.E' 100' 3' () => 200 + ObjectManager.Player.MoveSpeed);                  //Actually it should be +335 but ingame you only gain +230' rito plz                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Khazix")              {                  spell = new MoveBuffData("Khazix R"' SpellSlot.R' 100' 5' () => ObjectManager.Player.MoveSpeed * 1.4f);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Khazix")              {                  spell = new MoveBuffData("Khazix R"' SpellSlot.R' 100' 5' () => ObjectManager.Player.MoveSpeed * 1.4f);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Lulu")              {                  spell = new MoveBuffData(                      "Lulu W"' SpellSlot.W' 100' 5'                      () => ObjectManager.Player.MoveSpeed * (1.3f + ObjectManager.Player.FlatMagicDamageMod / 100 * 0.1f));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Lulu")              {                  spell = new MoveBuffData(                      "Lulu W"' SpellSlot.W' 100' 5'                      () => ObjectManager.Player.MoveSpeed * (1.3f + ObjectManager.Player.FlatMagicDamageMod / 100 * 0.1f));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Lulu")              {                  spell = new MoveBuffData(                      "Lulu W"' SpellSlot.W' 100' 5'                      () => ObjectManager.Player.MoveSpeed * (1.3f + ObjectManager.Player.FlatMagicDamageMod / 100 * 0.1f));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Nunu")              {                  spell = new MoveBuffData(                      "Nunu W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.1f + 0.01f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Nunu")              {                  spell = new MoveBuffData(                      "Nunu W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.1f + 0.01f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Ryze")              {                  spell = new MoveBuffData("Ryze R"' SpellSlot.R' 100' 5' () => 80 + ObjectManager.Player.MoveSpeed);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Ryze")              {                  spell = new MoveBuffData("Ryze R"' SpellSlot.R' 100' 5' () => 80 + ObjectManager.Player.MoveSpeed);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Ryze")              {                  spell = new MoveBuffData("Ryze R"' SpellSlot.R' 100' 5' () => 80 + ObjectManager.Player.MoveSpeed);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Sivir")              {                  spell = new MoveBuffData("Sivir R"' SpellSlot.R' 100' 5' () => ObjectManager.Player.MoveSpeed * (1.6f));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Sivir")              {                  spell = new MoveBuffData("Sivir R"' SpellSlot.R' 100' 5' () => ObjectManager.Player.MoveSpeed * (1.6f));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Shyvana")              {                  spell = new MoveBuffData(                      "Shyvana W"' SpellSlot.W' 100' 4'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.25f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  spell.CheckSpellName = "ShyvanaImmolationAura";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Shyvana")              {                  spell = new MoveBuffData(                      "Shyvana W"' SpellSlot.W' 100' 4'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.25f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  spell.CheckSpellName = "ShyvanaImmolationAura";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Sona")              {                  spell = new MoveBuffData(                      "Sona E"' SpellSlot.E' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.12f + 0.01f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.E).Level +                           ObjectManager.Player.FlatMagicDamageMod / 100 * 0.075f +                           0.02f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.R).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Sona")              {                  spell = new MoveBuffData(                      "Sona E"' SpellSlot.E' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.12f + 0.01f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.E).Level +                           ObjectManager.Player.FlatMagicDamageMod / 100 * 0.075f +                           0.02f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.R).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Sona")              {                  spell = new MoveBuffData(                      "Sona E"' SpellSlot.E' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.12f + 0.01f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.E).Level +                           ObjectManager.Player.FlatMagicDamageMod / 100 * 0.075f +                           0.02f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.R).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Teemo")              {                  spell = new MoveBuffData(                      "Teemo W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.06f + 0.04f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Teemo")              {                  spell = new MoveBuffData(                      "Teemo W"' SpellSlot.W' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.06f + 0.04f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.W).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Udyr")              {                  spell = new MoveBuffData(                      "Udyr E"' SpellSlot.E' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.1f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.E).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Udyr")              {                  spell = new MoveBuffData(                      "Udyr E"' SpellSlot.E' 100' 3'                      () =>                          ObjectManager.Player.MoveSpeed *                          (1 + 0.1f + 0.05f * ObjectManager.Player.Spellbook.GetSpell(SpellSlot.E).Level));                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Zilean")              {                  spell = new MoveBuffData("Zilean E"' SpellSlot.E' 100' 3' () => ObjectManager.Player.MoveSpeed * 1.55f);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Zilean")              {                  spell = new MoveBuffData("Zilean E"' SpellSlot.E' 100' 3' () => ObjectManager.Player.MoveSpeed * 1.55f);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Aatrox")              {                  spell = new DashData("Aatrox Q"' SpellSlot.Q' 650' false' 400' 3000' 3);                  spell.Invert = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Aatrox")              {                  spell = new DashData("Aatrox Q"' SpellSlot.Q' 650' false' 400' 3000' 3);                  spell.Invert = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Aatrox")              {                  spell = new DashData("Aatrox Q"' SpellSlot.Q' 650' false' 400' 3000' 3);                  spell.Invert = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Aatrox")              {                  spell = new DashData("Aatrox Q"' SpellSlot.Q' 650' false' 400' 3000' 3);                  spell.Invert = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Akali")              {                  spell = new DashData("Akali R"' SpellSlot.R' 800' false' 100' 2461' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Akali")              {                  spell = new DashData("Akali R"' SpellSlot.R' 800' false' 100' 2461' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Akali")              {                  spell = new DashData("Akali R"' SpellSlot.R' 800' false' 100' 2461' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Akali")              {                  spell = new DashData("Akali R"' SpellSlot.R' 800' false' 100' 2461' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Alistar")              {                  spell = new DashData("Alistar W"' SpellSlot.W' 650' false' 100' 1900' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Alistar")              {                  spell = new DashData("Alistar W"' SpellSlot.W' 650' false' 100' 1900' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Alistar")              {                  spell = new DashData("Alistar W"' SpellSlot.W' 650' false' 100' 1900' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Alistar")              {                  spell = new DashData("Alistar W"' SpellSlot.W' 650' false' 100' 1900' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Caitlyn")              {                  spell = new DashData("Caitlyn E"' SpellSlot.E' 490' true' 250' 1000' 3);                  spell.Invert = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Caitlyn")              {                  spell = new DashData("Caitlyn E"' SpellSlot.E' 490' true' 250' 1000' 3);                  spell.Invert = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Caitlyn")              {                  spell = new DashData("Caitlyn E"' SpellSlot.E' 490' true' 250' 1000' 3);                  spell.Invert = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Caitlyn")              {                  spell = new DashData("Caitlyn E"' SpellSlot.E' 490' true' 250' 1000' 3);                  spell.Invert = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Corki")              {                  spell = new DashData("Corki W"' SpellSlot.W' 790' false' 250' 1044' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Corki")              {                  spell = new DashData("Corki W"' SpellSlot.W' 790' false' 250' 1044' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Corki")              {                  spell = new DashData("Corki W"' SpellSlot.W' 790' false' 250' 1044' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Corki")              {                  spell = new DashData("Corki W"' SpellSlot.W' 790' false' 250' 1044' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Fizz")              {                  spell = new DashData("Fizz Q"' SpellSlot.Q' 550' true' 100' 1400' 4);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyMinions' SpellValidTargets.EnemyChampions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Fizz")              {                  spell = new DashData("Fizz Q"' SpellSlot.Q' 550' true' 100' 1400' 4);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyMinions' SpellValidTargets.EnemyChampions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Fizz")              {                  spell = new DashData("Fizz Q"' SpellSlot.Q' 550' true' 100' 1400' 4);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyMinions' SpellValidTargets.EnemyChampions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Fizz")              {                  spell = new DashData("Fizz Q"' SpellSlot.Q' 550' true' 100' 1400' 4);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyMinions' SpellValidTargets.EnemyChampions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Gragas")              {                  spell = new DashData("Gragas E"' SpellSlot.E' 600' true' 250' 911' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Gragas")              {                  spell = new DashData("Gragas E"' SpellSlot.E' 600' true' 250' 911' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Gragas")              {                  spell = new DashData("Gragas E"' SpellSlot.E' 600' true' 250' 911' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Gragas")              {                  spell = new DashData("Gragas E"' SpellSlot.E' 600' true' 250' 911' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Gnar")              {                  spell = new DashData("Gnar E"' SpellSlot.E' 50' false' 0' 900' 3);                  spell.CheckSpellName = "GnarE";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Gnar")              {                  spell = new DashData("Gnar E"' SpellSlot.E' 50' false' 0' 900' 3);                  spell.CheckSpellName = "GnarE";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Gnar")              {                  spell = new DashData("Gnar E"' SpellSlot.E' 50' false' 0' 900' 3);                  spell.CheckSpellName = "GnarE";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Graves")              {                  spell = new DashData("Graves E"' SpellSlot.E' 425' true' 100' 1223' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Graves")              {                  spell = new DashData("Graves E"' SpellSlot.E' 425' true' 100' 1223' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Graves")              {                  spell = new DashData("Graves E"' SpellSlot.E' 425' true' 100' 1223' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Graves")              {                  spell = new DashData("Graves E"' SpellSlot.E' 425' true' 100' 1223' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Irelia")              {                  spell = new DashData("Irelia Q"' SpellSlot.Q' 650' false' 100' 2200' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Irelia")              {                  spell = new DashData("Irelia Q"' SpellSlot.Q' 650' false' 100' 2200' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Irelia")              {                  spell = new DashData("Irelia Q"' SpellSlot.Q' 650' false' 100' 2200' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Irelia")              {                  spell = new DashData("Irelia Q"' SpellSlot.Q' 650' false' 100' 2200' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Jax")              {                  spell = new DashData("Jax Q"' SpellSlot.Q' 700' false' 100' 1400' 3);                  spell.ValidTargets = new[]                  {                      SpellValidTargets.EnemyWards' SpellValidTargets.AllyWards' SpellValidTargets.AllyMinions'                      SpellValidTargets.AllyChampions' SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions                  };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Jax")              {                  spell = new DashData("Jax Q"' SpellSlot.Q' 700' false' 100' 1400' 3);                  spell.ValidTargets = new[]                  {                      SpellValidTargets.EnemyWards' SpellValidTargets.AllyWards' SpellValidTargets.AllyMinions'                      SpellValidTargets.AllyChampions' SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions                  };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Jax")              {                  spell = new DashData("Jax Q"' SpellSlot.Q' 700' false' 100' 1400' 3);                  spell.ValidTargets = new[]                  {                      SpellValidTargets.EnemyWards' SpellValidTargets.AllyWards' SpellValidTargets.AllyMinions'                      SpellValidTargets.AllyChampions' SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions                  };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Jax")              {                  spell = new DashData("Jax Q"' SpellSlot.Q' 700' false' 100' 1400' 3);                  spell.ValidTargets = new[]                  {                      SpellValidTargets.EnemyWards' SpellValidTargets.AllyWards' SpellValidTargets.AllyMinions'                      SpellValidTargets.AllyChampions' SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions                  };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeBlanc")              {                  spell = new DashData("LeBlanc W1"' SpellSlot.W' 600' false' 100' 1621' 3);                  spell.CheckSpellName = "LeblancSlide";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeBlanc")              {                  spell = new DashData("LeBlanc W1"' SpellSlot.W' 600' false' 100' 1621' 3);                  spell.CheckSpellName = "LeblancSlide";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeBlanc")              {                  spell = new DashData("LeBlanc W1"' SpellSlot.W' 600' false' 100' 1621' 3);                  spell.CheckSpellName = "LeblancSlide";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeBlanc")              {                  spell = new DashData("LeBlanc W1"' SpellSlot.W' 600' false' 100' 1621' 3);                  spell.CheckSpellName = "LeblancSlide";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeBlanc")              {                  spell = new DashData("LeBlanc RW"' SpellSlot.R' 600' false' 100' 1621' 3);                  spell.CheckSpellName = "LeblancSlideM";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeBlanc")              {                  spell = new DashData("LeBlanc RW"' SpellSlot.R' 600' false' 100' 1621' 3);                  spell.CheckSpellName = "LeblancSlideM";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeBlanc")              {                  spell = new DashData("LeBlanc RW"' SpellSlot.R' 600' false' 100' 1621' 3);                  spell.CheckSpellName = "LeblancSlideM";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeBlanc")              {                  spell = new DashData("LeBlanc RW"' SpellSlot.R' 600' false' 100' 1621' 3);                  spell.CheckSpellName = "LeblancSlideM";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeeSin")              {                  spell = new DashData("LeeSin W"' SpellSlot.W' 700' false' 250' 2000' 3);                  spell.ValidTargets = new[]                  { SpellValidTargets.AllyChampions' SpellValidTargets.AllyMinions' SpellValidTargets.AllyWards };                  spell.CheckSpellName = "BlindMonkWOne";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeeSin")              {                  spell = new DashData("LeeSin W"' SpellSlot.W' 700' false' 250' 2000' 3);                  spell.ValidTargets = new[]                  { SpellValidTargets.AllyChampions' SpellValidTargets.AllyMinions' SpellValidTargets.AllyWards };                  spell.CheckSpellName = "BlindMonkWOne";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeeSin")              {                  spell = new DashData("LeeSin W"' SpellSlot.W' 700' false' 250' 2000' 3);                  spell.ValidTargets = new[]                  { SpellValidTargets.AllyChampions' SpellValidTargets.AllyMinions' SpellValidTargets.AllyWards };                  spell.CheckSpellName = "BlindMonkWOne";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "LeeSin")              {                  spell = new DashData("LeeSin W"' SpellSlot.W' 700' false' 250' 2000' 3);                  spell.ValidTargets = new[]                  { SpellValidTargets.AllyChampions' SpellValidTargets.AllyMinions' SpellValidTargets.AllyWards };                  spell.CheckSpellName = "BlindMonkWOne";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Lucian")              {                  spell = new DashData("Lucian E"' SpellSlot.E' 425' false' 100' 1350' 2);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Lucian")              {                  spell = new DashData("Lucian E"' SpellSlot.E' 425' false' 100' 1350' 2);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Lucian")              {                  spell = new DashData("Lucian E"' SpellSlot.E' 425' false' 100' 1350' 2);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Lucian")              {                  spell = new DashData("Lucian E"' SpellSlot.E' 425' false' 100' 1350' 2);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Nidalee")              {                  spell = new DashData("Nidalee W"' SpellSlot.W' 375' true' 250' 943' 3);                  spell.CheckSpellName = "Pounce";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Nidalee")              {                  spell = new DashData("Nidalee W"' SpellSlot.W' 375' true' 250' 943' 3);                  spell.CheckSpellName = "Pounce";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Nidalee")              {                  spell = new DashData("Nidalee W"' SpellSlot.W' 375' true' 250' 943' 3);                  spell.CheckSpellName = "Pounce";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Nidalee")              {                  spell = new DashData("Nidalee W"' SpellSlot.W' 375' true' 250' 943' 3);                  spell.CheckSpellName = "Pounce";                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Pantheon")              {                  spell = new DashData("Pantheon W"' SpellSlot.W' 600' false' 100' 1000' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Pantheon")              {                  spell = new DashData("Pantheon W"' SpellSlot.W' 600' false' 100' 1000' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Pantheon")              {                  spell = new DashData("Pantheon W"' SpellSlot.W' 600' false' 100' 1000' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Pantheon")              {                  spell = new DashData("Pantheon W"' SpellSlot.W' 600' false' 100' 1000' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Riven")              {                  spell = new DashData("Riven Q"' SpellSlot.Q' 222' true' 250' 560' 3);                  spell.RequiresPreMove = true;                  Spells.Add(spell);                    spell = new DashData("Riven E"' SpellSlot.E' 250' false' 250' 1200' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Riven")              {                  spell = new DashData("Riven Q"' SpellSlot.Q' 222' true' 250' 560' 3);                  spell.RequiresPreMove = true;                  Spells.Add(spell);                    spell = new DashData("Riven E"' SpellSlot.E' 250' false' 250' 1200' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Riven")              {                  spell = new DashData("Riven Q"' SpellSlot.Q' 222' true' 250' 560' 3);                  spell.RequiresPreMove = true;                  Spells.Add(spell);                    spell = new DashData("Riven E"' SpellSlot.E' 250' false' 250' 1200' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Riven")              {                  spell = new DashData("Riven Q"' SpellSlot.Q' 222' true' 250' 560' 3);                  spell.RequiresPreMove = true;                  Spells.Add(spell);                    spell = new DashData("Riven E"' SpellSlot.E' 250' false' 250' 1200' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Riven")              {                  spell = new DashData("Riven Q"' SpellSlot.Q' 222' true' 250' 560' 3);                  spell.RequiresPreMove = true;                  Spells.Add(spell);                    spell = new DashData("Riven E"' SpellSlot.E' 250' false' 250' 1200' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Riven")              {                  spell = new DashData("Riven Q"' SpellSlot.Q' 222' true' 250' 560' 3);                  spell.RequiresPreMove = true;                  Spells.Add(spell);                    spell = new DashData("Riven E"' SpellSlot.E' 250' false' 250' 1200' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Riven")              {                  spell = new DashData("Riven Q"' SpellSlot.Q' 222' true' 250' 560' 3);                  spell.RequiresPreMove = true;                  Spells.Add(spell);                    spell = new DashData("Riven E"' SpellSlot.E' 250' false' 250' 1200' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Riven")              {                  spell = new DashData("Riven Q"' SpellSlot.Q' 222' true' 250' 560' 3);                  spell.RequiresPreMove = true;                  Spells.Add(spell);                    spell = new DashData("Riven E"' SpellSlot.E' 250' false' 250' 1200' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Tristana")              {                  spell = new DashData("Tristana W"' SpellSlot.W' 900' true' 300' 800' 5);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Tristana")              {                  spell = new DashData("Tristana W"' SpellSlot.W' 900' true' 300' 800' 5);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Tristana")              {                  spell = new DashData("Tristana W"' SpellSlot.W' 900' true' 300' 800' 5);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Tristana")              {                  spell = new DashData("Tristana W"' SpellSlot.W' 900' true' 300' 800' 5);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Tryndamere")              {                  spell = new DashData("Tryndamere E"' SpellSlot.E' 650' true' 250' 900' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Tryndamere")              {                  spell = new DashData("Tryndamere E"' SpellSlot.E' 650' true' 250' 900' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Tryndamere")              {                  spell = new DashData("Tryndamere E"' SpellSlot.E' 650' true' 250' 900' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Tryndamere")              {                  spell = new DashData("Tryndamere E"' SpellSlot.E' 650' true' 250' 900' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Vayne")              {                  spell = new DashData("Vayne Q"' SpellSlot.Q' 300' true' 100' 910' 2);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Vayne")              {                  spell = new DashData("Vayne Q"' SpellSlot.Q' 300' true' 100' 910' 2);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Vayne")              {                  spell = new DashData("Vayne Q"' SpellSlot.Q' 300' true' 100' 910' 2);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Vayne")              {                  spell = new DashData("Vayne Q"' SpellSlot.Q' 300' true' 100' 910' 2);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "MonkeyKing")              {                  spell = new DashData("Wukong E"' SpellSlot.E' 650' false' 100' 1400' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "MonkeyKing")              {                  spell = new DashData("Wukong E"' SpellSlot.E' 650' false' 100' 1400' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "MonkeyKing")              {                  spell = new DashData("Wukong E"' SpellSlot.E' 650' false' 100' 1400' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "MonkeyKing")              {                  spell = new DashData("Wukong E"' SpellSlot.E' 650' false' 100' 1400' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Ezreal")              {                  spell = new BlinkData("Ezreal E"' SpellSlot.E' 450' 350' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Ezreal")              {                  spell = new BlinkData("Ezreal E"' SpellSlot.E' 450' 350' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Ezreal")              {                  spell = new BlinkData("Ezreal E"' SpellSlot.E' 450' 350' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Kassadin")              {                  spell = new BlinkData("Kassadin R"' SpellSlot.R' 700' 200' 5);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Kassadin")              {                  spell = new BlinkData("Kassadin R"' SpellSlot.R' 700' 200' 5);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Kassadin")              {                  spell = new BlinkData("Kassadin R"' SpellSlot.R' 700' 200' 5);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Katarina")              {                  spell = new BlinkData("Katarina E"' SpellSlot.E' 700' 200' 3);                  spell.ValidTargets = new[]                  {                      SpellValidTargets.AllyChampions' SpellValidTargets.AllyMinions' SpellValidTargets.AllyWards'                      SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions' SpellValidTargets.EnemyWards                  };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Katarina")              {                  spell = new BlinkData("Katarina E"' SpellSlot.E' 700' 200' 3);                  spell.ValidTargets = new[]                  {                      SpellValidTargets.AllyChampions' SpellValidTargets.AllyMinions' SpellValidTargets.AllyWards'                      SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions' SpellValidTargets.EnemyWards                  };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Katarina")              {                  spell = new BlinkData("Katarina E"' SpellSlot.E' 700' 200' 3);                  spell.ValidTargets = new[]                  {                      SpellValidTargets.AllyChampions' SpellValidTargets.AllyMinions' SpellValidTargets.AllyWards'                      SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions' SpellValidTargets.EnemyWards                  };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Shaco")              {                  spell = new BlinkData("Shaco Q"' SpellSlot.Q' 400' 350' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Shaco")              {                  spell = new BlinkData("Shaco Q"' SpellSlot.Q' 400' 350' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Shaco")              {                  spell = new BlinkData("Shaco Q"' SpellSlot.Q' 400' 350' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Talon")              {                  spell = new BlinkData("Talon E"' SpellSlot.E' 700' 100' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Talon")              {                  spell = new BlinkData("Talon E"' SpellSlot.E' 700' 100' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Talon")              {                  spell = new BlinkData("Talon E"' SpellSlot.E' 700' 100' 3);                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Elise")              {                  spell = new InvulnerabilityData("Elise E"' SpellSlot.E' 250' 3);                  spell.CheckSpellName = "EliseSpiderEInitial";                  spell.SelfCast = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Elise")              {                  spell = new InvulnerabilityData("Elise E"' SpellSlot.E' 250' 3);                  spell.CheckSpellName = "EliseSpiderEInitial";                  spell.SelfCast = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Vladimir")              {                  spell = new InvulnerabilityData("Vladimir W"' SpellSlot.W' 250' 3);                  spell.SelfCast = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Vladimir")              {                  spell = new InvulnerabilityData("Vladimir W"' SpellSlot.W' 250' 3);                  spell.SelfCast = true;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Fizz")              {                  spell = new InvulnerabilityData("Fizz E"' SpellSlot.E' 250' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Fizz")              {                  spell = new InvulnerabilityData("Fizz E"' SpellSlot.E' 250' 3);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "MasterYi")              {                  spell = new InvulnerabilityData("MasterYi Q"' SpellSlot.Q' 250' 3);                  spell.MaxRange = 600;                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "MasterYi")              {                  spell = new InvulnerabilityData("MasterYi Q"' SpellSlot.Q' 250' 3);                  spell.MaxRange = 600;                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "MasterYi")              {                  spell = new InvulnerabilityData("MasterYi Q"' SpellSlot.Q' 250' 3);                  spell.MaxRange = 600;                  spell.ValidTargets = new[] { SpellValidTargets.EnemyChampions' SpellValidTargets.EnemyMinions };                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.GetSpellSlot("SummonerFlash") != SpellSlot.Unknown)              {                  spell = new BlinkData("Flash"' ObjectManager.Player.GetSpellSlot("SummonerFlash")' 400' 100' 5' true);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.GetSpellSlot("SummonerFlash") != SpellSlot.Unknown)              {                  spell = new BlinkData("Flash"' ObjectManager.Player.GetSpellSlot("SummonerFlash")' 400' 100' 5' true);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.GetSpellSlot("SummonerFlash") != SpellSlot.Unknown)              {                  spell = new BlinkData("Flash"' ObjectManager.Player.GetSpellSlot("SummonerFlash")' 400' 100' 5' true);                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: spell = new EvadeSpellData("Zhonyas"' 5);
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Karma")              {                  spell = new ShieldData("Karma E"' SpellSlot.E' 100' 2);                  spell.CanShieldAllies = true;                  spell.MaxRange = 800;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Karma")              {                  spell = new ShieldData("Karma E"' SpellSlot.E' 100' 2);                  spell.CanShieldAllies = true;                  spell.MaxRange = 800;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Karma")              {                  spell = new ShieldData("Karma E"' SpellSlot.E' 100' 2);                  spell.CanShieldAllies = true;                  spell.MaxRange = 800;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Janna")              {                  spell = new ShieldData("Janna E"' SpellSlot.E' 100' 1);                  spell.CanShieldAllies = true;                  spell.MaxRange = 800;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Janna")              {                  spell = new ShieldData("Janna E"' SpellSlot.E' 100' 1);                  spell.CanShieldAllies = true;                  spell.MaxRange = 800;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Morgana")              {                  spell = new ShieldData("Morgana E"' SpellSlot.E' 100' 3);                  spell.CanShieldAllies = true;                  spell.MaxRange = 750;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Morgana")              {                  spell = new ShieldData("Morgana E"' SpellSlot.E' 100' 3);                  spell.CanShieldAllies = true;                  spell.MaxRange = 750;                  Spells.Add(spell);              }
Magic Number,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The following statement contains a magic number: if (ObjectManager.Player.ChampionName == "Morgana")              {                  spell = new ShieldData("Morgana E"' SpellSlot.E' 100' 3);                  spell.CanShieldAllies = true;                  spell.MaxRange = 750;                  Spells.Add(spell);              }
Magic Number,Evade,Geometry,C:\repos\imsosharp_LeagueSharp\EvadeLib\Geometry.cs,PositionAfter,The following statement contains a magic number: var distance = Math.Max(0' t - delay) * speed / 1000;
Magic Number,Evade,Geometry,C:\repos\imsosharp_LeagueSharp\EvadeLib\Geometry.cs,PositionAfter,The following statement contains a magic number: for (var i = 0; i <= self.Count - 2; i++)              {                  var from = self[i];                  var to = self[i + 1];                  var d = (int) to.Distance(from);                  if (d > distance)                  {                      return from + distance * (to - from).Normalized();                  }                  distance -= d;              }
Magic Number,Evade,Circle,C:\repos\imsosharp_LeagueSharp\EvadeLib\Geometry.cs,ToPolygon,The following statement contains a magic number: var outRadius = (overrideWidth > 0                      ? overrideWidth                      : (offset + Radius) / (float) Math.Cos(2 * Math.PI / CircleLineSegmentN));
Magic Number,Evade,Circle,C:\repos\imsosharp_LeagueSharp\EvadeLib\Geometry.cs,ToPolygon,The following statement contains a magic number: for (var i = 1; i <= CircleLineSegmentN; i++)                  {                      var angle = i * 2 * Math.PI / CircleLineSegmentN;                      var point = new Vector2(                          Center.X + outRadius * (float) Math.Cos(angle)' Center.Y + outRadius * (float) Math.Sin(angle));                      result.Add(point);                  }
Magic Number,Evade,Ring,C:\repos\imsosharp_LeagueSharp\EvadeLib\Geometry.cs,ToPolygon,The following statement contains a magic number: var outRadius = (offset + Radius + RingRadius) / (float) Math.Cos(2 * Math.PI / CircleLineSegmentN);
Magic Number,Evade,Ring,C:\repos\imsosharp_LeagueSharp\EvadeLib\Geometry.cs,ToPolygon,The following statement contains a magic number: for (var i = 0; i <= CircleLineSegmentN; i++)                  {                      var angle = i * 2 * Math.PI / CircleLineSegmentN;                      var point = new Vector2(                          Center.X - outRadius * (float) Math.Cos(angle)' Center.Y - outRadius * (float) Math.Sin(angle));                      result.Add(point);                  }
Magic Number,Evade,Ring,C:\repos\imsosharp_LeagueSharp\EvadeLib\Geometry.cs,ToPolygon,The following statement contains a magic number: for (var i = 0; i <= CircleLineSegmentN; i++)                  {                      var angle = i * 2 * Math.PI / CircleLineSegmentN;                      var point = new Vector2(                          Center.X + innerRadius * (float) Math.Cos(angle)'                          Center.Y - innerRadius * (float) Math.Sin(angle));                      result.Add(point);                  }
Magic Number,Evade,Sector,C:\repos\imsosharp_LeagueSharp\EvadeLib\Geometry.cs,ToPolygon,The following statement contains a magic number: var outRadius = (Radius + offset) / (float) Math.Cos(2 * Math.PI / CircleLineSegmentN);
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,IsSpellShielded,The following statement contains a magic number: if (unit.LastCastedSpellName() == "SivirE" && (Environment.TickCount - unit.LastCastedSpellT()) < 300)              {                  return true;              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,IsSpellShielded,The following statement contains a magic number: if (unit.LastCastedSpellName() == "BlackShield" && (Environment.TickCount - unit.LastCastedSpellT()) < 300)              {                  return true;              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,IsSpellShielded,The following statement contains a magic number: if (unit.LastCastedSpellName() == "NocturneShit" && (Environment.TickCount - unit.LastCastedSpellT()) < 300)              {                  return true;              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,SkillshotDetectorOnOnDeleteMissile,The following statement contains a magic number: if (skillshot.SpellData.SpellName == "VelkozQ")              {                  var spellData = SpellDatabase.GetByName("VelkozQSplit");                  var direction = skillshot.Direction.Perpendicular();                  if (DetectedSkillshots.Count(s => s.SpellData.SpellName == "VelkozQSplit") == 0)                  {                      for (var i = -1; i <= 1; i = i + 2)                      {                          var skillshotToAdd = new Skillshot(                              DetectionType.ProcessSpell' spellData' Environment.TickCount' missile.Position.To2D()'                              missile.Position.To2D() + i * direction * spellData.Range' skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: foreach (var item in DetectedSkillshots)              {                  if (item.SpellData.SpellName == skillshot.SpellData.SpellName &&                      (item.Unit.NetworkId == skillshot.Unit.NetworkId &&                       (skillshot.Direction).AngleBetween(item.Direction) < 5 &&                       (skillshot.Start.Distance(item.Start) < 100 || skillshot.SpellData.FromObjects.Length == 0)))                  {                      alreadyAdded = true;                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: foreach (var item in DetectedSkillshots)              {                  if (item.SpellData.SpellName == skillshot.SpellData.SpellName &&                      (item.Unit.NetworkId == skillshot.Unit.NetworkId &&                       (skillshot.Direction).AngleBetween(item.Direction) < 5 &&                       (skillshot.Start.Distance(item.Start) < 100 || skillshot.SpellData.FromObjects.Length == 0)))                  {                      alreadyAdded = true;                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (skillshot.Start.Distance(ObjectManager.Player.ServerPosition.To2D()) >                  (skillshot.SpellData.Range + skillshot.SpellData.Radius + 1000) * 1.5)              {                  return;              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (skillshot.Start.Distance(ObjectManager.Player.ServerPosition.To2D()) >                  (skillshot.SpellData.Range + skillshot.SpellData.Radius + 1000) * 1.5)              {                  return;              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,OnDetectSkillshot,The following statement contains a magic number: if (!alreadyAdded)              {                  //Multiple skillshots like twisted fate Q.                  if (skillshot.DetectionType == DetectionType.ProcessSpell)                  {                      if (skillshot.SpellData.MultipleNumber != -1)                      {                          var originalDirection = skillshot.Direction;                            for (var i = -(skillshot.SpellData.MultipleNumber - 1) / 2;                              i <= (skillshot.SpellData.MultipleNumber - 1) / 2;                              i++)                          {                              var end = skillshot.Start +                                        skillshot.SpellData.Range *                                        originalDirection.Rotated(skillshot.SpellData.MultipleAngle * i);                              var skillshotToAdd = new Skillshot(                                  skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                                  skillshot.Unit);                                DetectedSkillshots.Add(skillshotToAdd);                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "UFSlash")                      {                          skillshot.SpellData.MissileSpeed = 1600 + (int) skillshot.Unit.MoveSpeed;                      }                        if (skillshot.SpellData.Invert)                      {                          var newDirection = -(skillshot.End - skillshot.Start).Normalized();                          var end = skillshot.Start + newDirection * skillshot.Start.Distance(skillshot.End);                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' skillshot.Start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.Centered)                      {                          var start = skillshot.Start - skillshot.Direction * skillshot.SpellData.Range;                          var end = skillshot.Start + skillshot.Direction * skillshot.SpellData.Range;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "SyndraE" || skillshot.SpellData.SpellName == "syndrae5")                      {                          var angle = 60;                          var edge1 =                              (skillshot.End - skillshot.Unit.ServerPosition.To2D()).Rotated(                                  -angle / 2 * (float) Math.PI / 180);                          var edge2 = edge1.Rotated(angle * (float) Math.PI / 180);                            foreach (var minion in ObjectManager.Get<Obj_AI_Minion>())                          {                              var v = minion.ServerPosition.To2D() - skillshot.Unit.ServerPosition.To2D();                              if (minion.Name == "Seed" && edge1.CrossProduct(v) > 0 && v.CrossProduct(edge2) > 0 &&                                  minion.Distance(skillshot.Unit) < 800 &&                                  (minion.Team != ObjectManager.Player.Team || Config.TestOnAllies))                              {                                  var start = minion.ServerPosition.To2D();                                  var end = skillshot.Unit.ServerPosition.To2D()                                      .Extend(                                          minion.ServerPosition.To2D()'                                          skillshot.Unit.Distance(minion) > 200 ? 1300 : 1000);                                    var skillshotToAdd = new Skillshot(                                      skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                                      skillshot.Unit);                                  DetectedSkillshots.Add(skillshotToAdd);                              }                          }                          return;                      }                        if (skillshot.SpellData.SpellName == "AlZaharCalloftheVoid")                      {                          var start = skillshot.End - skillshot.Direction.Perpendicular() * 400;                          var end = skillshot.End + skillshot.Direction.Perpendicular() * 400;                          var skillshotToAdd = new Skillshot(                              skillshot.DetectionType' skillshot.SpellData' skillshot.StartTick' start' end'                              skillshot.Unit);                          DetectedSkillshots.Add(skillshotToAdd);                          return;                      }                        if (skillshot.SpellData.SpellName == "ZiggsQ")                      {                          var d1 = skillshot.Start.Distance(skillshot.End);                          var d2 = d1 * 0.4f;                          var d3 = d2 * 0.69f;                              var bounce1SpellData = SpellDatabase.GetByName("ZiggsQBounce1");                          var bounce2SpellData = SpellDatabase.GetByName("ZiggsQBounce2");                            var bounce1Pos = skillshot.End + skillshot.Direction * d2;                          var bounce2Pos = bounce1Pos + skillshot.Direction * d3;                            bounce1SpellData.Delay =                              (int) (skillshot.SpellData.Delay + d1 * 1000f / skillshot.SpellData.MissileSpeed + 500);                          bounce2SpellData.Delay =                              (int) (bounce1SpellData.Delay + d2 * 1000f / bounce1SpellData.MissileSpeed + 500);                            var bounce1 = new Skillshot(                              skillshot.DetectionType' bounce1SpellData' skillshot.StartTick' skillshot.End' bounce1Pos'                              skillshot.Unit);                          var bounce2 = new Skillshot(                              skillshot.DetectionType' bounce2SpellData' skillshot.StartTick' bounce1Pos' bounce2Pos'                              skillshot.Unit);                            DetectedSkillshots.Add(bounce1);                          DetectedSkillshots.Add(bounce2);                      }                        if (skillshot.SpellData.SpellName == "ZiggsR")                      {                          skillshot.SpellData.Delay =                              (int) (1500 + 1500 * skillshot.End.Distance(skillshot.Start) / skillshot.SpellData.Range);                      }                        if (skillshot.SpellData.SpellName == "JarvanIVDragonStrike")                      {                          var endPos = new Vector2();                            foreach (var s in DetectedSkillshots)                          {                              if (s.Unit.NetworkId == skillshot.Unit.NetworkId && s.SpellData.Slot == SpellSlot.E)                              {                                  endPos = s.End;                              }                          }                            foreach (var m in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (m.BaseSkinName == "jarvanivstandard" && m.Team == skillshot.Unit.Team &&                                  skillshot.IsDanger(m.Position.To2D()))                              {                                  endPos = m.Position.To2D();                              }                          }                            if (!endPos.IsValid())                          {                              return;                          }                            skillshot.End = endPos + 200 * (endPos - skillshot.Start).Normalized();                          skillshot.Direction = (skillshot.End - skillshot.Start).Normalized();                      }                  }                    if (skillshot.SpellData.SpellName == "OriannasQ")                  {                      var endCSpellData = SpellDatabase.GetByName("OriannaQend");                        var skillshotToAdd = new Skillshot(                          skillshot.DetectionType' endCSpellData' skillshot.StartTick' skillshot.Start' skillshot.End'                          skillshot.Unit);                        DetectedSkillshots.Add(skillshotToAdd);                  }                      //Dont allow fow detection.                  if (skillshot.SpellData.DisableFowDetection && skillshot.DetectionType == DetectionType.RecvPacket)                  {                      return;                  }  #if DEBUG                  Console.WriteLine(Environment.TickCount + "Adding new skillshot: " + skillshot.SpellData.SpellName);  #endif                    DetectedSkillshots.Add(skillshot);              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The following statement contains a magic number: if (PreviousTickPosition.IsValid() &&                  ObjectManager.Player.ServerPosition.To2D().Distance(PreviousTickPosition) > 200)              {                  Evading = false;              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The following statement contains a magic number: if (Utils.ImmobileTime(ObjectManager.Player) - Environment.TickCount > Game.Ping / 2 + 70)              {                  Evading = false;                  return;              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The following statement contains a magic number: if (Utils.ImmobileTime(ObjectManager.Player) - Environment.TickCount > Game.Ping / 2 + 70)              {                  Evading = false;                  return;              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The following statement contains a magic number: if (EvadeToPoint.IsValid() && DetectedSkillshots.Count > 0)              {                  if (Environment.TickCount - LastSentMovePacketT2 > 1000 / 10)                  {                      ObjectManager.Player.IssueOrder(GameObjectOrder.MoveTo' EvadeToPoint.To3D());                      LastSentMovePacketT2 = Environment.TickCount;                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The following statement contains a magic number: if (EvadeToPoint.IsValid() && DetectedSkillshots.Count > 0)              {                  if (Environment.TickCount - LastSentMovePacketT2 > 1000 / 10)                  {                      ObjectManager.Player.IssueOrder(GameObjectOrder.MoveTo' EvadeToPoint.To3D());                      LastSentMovePacketT2 = Environment.TickCount;                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The following statement contains a magic number: foreach (var ally in ObjectManager.Get<Obj_AI_Hero>())              {                  if (ally.IsValidTarget(1000' false))                  {                      var shieldAlly = Config.Menu.Item("shield" + ally.ChampionName);                      if (shieldAlly != null && shieldAlly.GetValue<bool>())                      {                          var allySafeResult = IsSafe(ally.ServerPosition.To2D());                            if (!allySafeResult.IsSafe)                          {                              var dangerLevel = 0;                                foreach (var skillshot in allySafeResult.SkillshotList)                              {                                  dangerLevel = Math.Max(dangerLevel' skillshot.GetValue<Slider>("DangerLevel").Value);                              }                                foreach (var evadeSpell in EvadeSpellDatabase.Spells)                              {                                  if (evadeSpell.IsShield && evadeSpell.CanShieldAllies &&                                      ally.Distance(ObjectManager.Player) < evadeSpell.MaxRange &&                                      dangerLevel >= evadeSpell.DangerLevel &&                                      ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready &&                                      IsAboutToHit(ally' evadeSpell.Delay))                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ally);                                  }                              }                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The following statement contains a magic number: var safePath = IsSafePath(currentPath' 100);
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The following statement contains a magic number: if (Evading && IsSafe(EvadePoint).IsSafe)              {                  if (safeResult.IsSafe)                  {                      //We are safe' stop evading.                      Evading = false;                  }                  else                  {                      if (Environment.TickCount - LastSentMovePacketT > 1000/15)                      {                          LastSentMovePacketT = Environment.TickCount;                          ObjectManager.Player.SendMovePacket(EvadePoint);                      }                      return;                  }              }                  //Stop evading if the point is not safe.              else if (Evading)              {                  Evading = false;              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnOnGameUpdate,The following statement contains a magic number: if (Evading && IsSafe(EvadePoint).IsSafe)              {                  if (safeResult.IsSafe)                  {                      //We are safe' stop evading.                      Evading = false;                  }                  else                  {                      if (Environment.TickCount - LastSentMovePacketT > 1000/15)                      {                          LastSentMovePacketT = Environment.TickCount;                          ObjectManager.Player.SendMovePacket(EvadePoint);                      }                      return;                  }              }                  //Stop evading if the point is not safe.              else if (Evading)              {                  Evading = false;              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Game_OnGameSendPacket,The following statement contains a magic number: if (args.PacketData[0] == Packet.C2S.Move.Header)              {                  //Don't block the movement packets if cant find an evade point.                  if (NoSolutionFound)                  {                      return;                  }                    //Evading disabled                  if (!Config.Menu.Item("Enabled").GetValue<KeyBind>().Active)                  {                      return;                  }                    if (EvadeSpellDatabase.Spells.Any(evadeSpell => evadeSpell.Name == "Walking" && !evadeSpell.Enabled))                   {                      return;                  }                    //Spell Shielded                  if (IsSpellShielded(ObjectManager.Player))                  {                      return;                  }                    var decodedPacket = Packet.C2S.Move.Decoded(args.PacketData);                    if(decodedPacket.UnitNetworkId != ObjectManager.Player.NetworkId) return;                    if (decodedPacket.MoveType == 2)                  {                      EvadeToPoint.X = decodedPacket.X;                      EvadeToPoint.Y = decodedPacket.Y;                  }                  else                  {                      EvadeToPoint.X = 0;                      EvadeToPoint.Y = 0;                  }                    var myPath =                      ObjectManager.Player.GetPath(                          new Vector3(decodedPacket.X' decodedPacket.Y' ObjectManager.Player.ServerPosition.Z)).To2DList();                  var safeResult = IsSafe(ObjectManager.Player.ServerPosition.To2D());                                      //If we are evading:                  if (Evading || !safeResult.IsSafe)                  {                      var rcSafePath = IsSafePath(myPath' Config.EvadingRouteChangeTimeOffset);                      if (decodedPacket.MoveType == 2)                      {                          if (Evading &&                              Environment.TickCount - Config.LastEvadePointChangeT > Config.EvadePointChangeInterval)                          {                              //Update the evade point to the closest one:                              var points = Evader.GetEvadePoints(-1' 0' false' true);                              if (points.Count > 0)                              {                                  var to = new Vector2(decodedPacket.X' decodedPacket.Y);                                  EvadePoint = to.Closest(points);                                  Evading = true;                                  Config.LastEvadePointChangeT = Environment.TickCount;                              }                          }                            //If the path is safe let the user follow it.                          if (rcSafePath.IsSafe && IsSafe(myPath[myPath.Count - 1]).IsSafe && decodedPacket.MoveType == 2)                          {                              EvadePoint = myPath[myPath.Count - 1];                              Evading = true;                          }                      }                        //Block the packets if we are evading or not safe.                      args.Process = false;                      return;                  }                    var safePath = IsSafePath(myPath' Config.CrossingTimeOffset);                    //Not evading' outside the skillshots.                  //The path is not safe' stop in the intersection point.                  if (!safePath.IsSafe && decodedPacket.MoveType != 3)                  {                      if (safePath.Intersection.Valid)                      {                          if (ObjectManager.Player.Distance(safePath.Intersection.Point) > 75)                          {                              ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                          }                          else                          {                              if (/*DetectedSkillshots.Count == 1 &&*/ Environment.TickCount - LastSMovePacketT > 400)                              {                                  LastSMovePacketT = Environment.TickCount;                                                                        var perpendicular =                                          (ObjectManager.Player.ServerPosition.To2D() - safePath.Intersection.Point)                                              .Normalized();                                      var direction = perpendicular.Perpendicular();                                        var p = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular + 150 * direction;                                      var p2 = ObjectManager.Player.ServerPosition.To2D() + 1 * perpendicular - 150 * direction;                                        if (!IsSafePath(ObjectManager.Player.GetPath(p.To3D()).To2DList()' 100).IsSafe)                                      {                                          p = new Vector2();                                      }                                        if (!IsSafePath(ObjectManager.Player.GetPath(p2.To3D()).To2DList()' 100).IsSafe)                                      {                                          p2 = new Vector2();                                      }                                        EvadeToPoint2 = (p.IsValid() && (p.Distance(EvadeToPoint) < p2.Distance(EvadeToPoint))) ? p : p2;                                        if (EvadeToPoint2.IsValid())                                      {                                          ObjectManager.Player.SendMovePacket(EvadeToPoint2);                                      }                              }                          }                      }                      args.Process = false;                  }                    //AutoAttacks.                  if (!safePath.IsSafe && decodedPacket.MoveType == 3)                  {                      var target = ObjectManager.GetUnitByNetworkId<Obj_AI_Base>(decodedPacket.TargetNetworkId);                      if (target != null && target.IsValid && target.IsVisible)                      {                          //Out of attack range.                          if (ObjectManager.Player.ServerPosition.To2D().Distance(target.ServerPosition) >                              ObjectManager.Player.AttackRange + ObjectManager.Player.BoundingRadius +                              target.BoundingRadius)                          {                              if (safePath.Intersection.Valid)                              {                                  ObjectManager.Player.SendMovePacket(safePath.Intersection.Point);                              }                              args.Process = false;                          }                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,IsAboutToHit,The following statement contains a magic number: time += 150;
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The following statement contains a magic number: foreach (var evadeSpell in EvadeSpellDatabase.Spells)              {                  if (evadeSpell.Enabled && evadeSpell.DangerLevel <= dangerLevel)                  {                      //SpellShields                      if (evadeSpell.IsSpellShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                        //Walking                      if (evadeSpell.Name == "Walking")                      {                          var points = Evader.GetEvadePoints();                          if (points.Count > 0)                          {                              EvadePoint = to.Closest(points);                              var nEvadePoint = EvadePoint.Extend(ObjectManager.Player.ServerPosition.To2D()' -100);                              if (                                  Program.IsSafePath(                                      ObjectManager.Player.GetPath(nEvadePoint.To3D()).To2DList()'                                      Config.EvadingSecondTimeOffset' (int) ObjectManager.Player.MoveSpeed' 100).IsSafe)                              {                                  EvadePoint = nEvadePoint;                              }                              Evading = true;                              return;                          }                      }                        if (evadeSpell.IsReady())                      {                          //MovementSpeed Buff                          if (evadeSpell.IsMovementSpeedBuff)                          {                              var points = Evader.GetEvadePoints((int) evadeSpell.MoveSpeedTotalAmount());                                if (points.Count > 0)                              {                                  EvadePoint = to.Closest(points);                                  Evading = true;                                    if (evadeSpell.IsSummonerSpell)                                  {                                      ObjectManager.Player.SummonerSpellbook.CastSpell(                                          evadeSpell.Slot' ObjectManager.Player);                                  }                                  else                                  {                                      ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                                  }                                    return;                              }                          }                            //Dashes                          if (evadeSpell.IsDash)                          {                              //Targetted dashes                              if (evadeSpell.IsTargetted) //Lesinga W.                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' evadeSpell.Speed' evadeSpell.Delay' evadeSpell.MaxRange'                                      false' false);                                    if (targets.Count > 0)                                  {                                      var closestTarget = Utils.Closest(targets' to);                                      EvadePoint = closestTarget.ServerPosition.To2D();                                      Evading = true;                                        if (evadeSpell.IsSummonerSpell)                                      {                                          ObjectManager.Player.SummonerSpellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont dash just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                  //Skillshot type dashes.                              else                              {                                  var points = Evader.GetEvadePoints(evadeSpell.Speed' evadeSpell.Delay' false);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                    //If the spell has a fixed range (Vaynes Q)' calculate the real dashing location. TODO: take into account walls in the future.                                  if (evadeSpell.FixedRange)                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          points[i] = ObjectManager.Player.ServerPosition.To2D()                                              .Extend(points[i]' evadeSpell.MaxRange);                                      }                                        for (var i = points.Count - 1; i > 0; i--)                                      {                                          if (!IsSafe(points[i]).IsSafe)                                          {                                              points.RemoveAt(i);                                          }                                      }                                  }                                  else                                  {                                      for (var i = 0; i < points.Count; i++)                                      {                                          var k =                                              (int)                                                  (evadeSpell.MaxRange -                                                   ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                          k -= Math.Max(RandomN.Next(k) - 100' 0);                                          var extended = points[i] +                                                         k *                                                         (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                             .Normalized();                                          if (IsSafe(extended).IsSafe)                                          {                                              points[i] = extended;                                          }                                      }                                  }                                    if (points.Count > 0)                                  {                                      EvadePoint = to.Closest(points);                                      Evading = true;                                        if (!evadeSpell.Invert)                                      {                                          if (evadeSpell.RequiresPreMove)                                          {                                              ObjectManager.Player.SendMovePacket(EvadePoint);                                              var theSpell = evadeSpell;                                              Utility.DelayAction.Add(                                                  Game.Ping / 2 + 100'                                                  delegate                                                  {                                                      ObjectManager.Player.Spellbook.CastSpell(                                                          theSpell.Slot' EvadePoint.To3D());                                                  });                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                      else                                      {                                          var castPoint = ObjectManager.Player.ServerPosition.To2D() -                                                          (EvadePoint - ObjectManager.Player.ServerPosition.To2D());                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' castPoint.To3D());                                      }                                        return;                                  }                              }                          }                            //Blinks                          if (evadeSpell.IsBlink)                          {                              //Targetted blinks                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' evadeSpell.Delay' evadeSpell.MaxRange' true'                                      false);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                            if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' closestTarget);                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                  if (Environment.TickCount - LastWardJumpAttempt < 250)                                  {                                      //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                                    if (evadeSpell.IsTargetted &&                                      evadeSpell.ValidTargets.Contains(SpellValidTargets.AllyWards) &&                                      Config.Menu.Item("WardJump" + evadeSpell.Name).GetValue<bool>())                                  {                                      var wardSlot = Items.GetWardSlot();                                      if (wardSlot != null)                                      {                                          var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                            // Remove the points out of range                                          points.RemoveAll(                                              item => item.Distance(ObjectManager.Player.ServerPosition) > 600);                                            if (points.Count > 0)                                          {                                              //Dont blink just to the edge:                                              for (var i = 0; i < points.Count; i++)                                              {                                                  var k =                                                      (int)                                                          (600 -                                                           ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                                    k = k - new Random(Environment.TickCount).Next(k);                                                  var extended = points[i] +                                                                 k *                                                                 (points[i] - ObjectManager.Player.ServerPosition.To2D())                                                                     .Normalized();                                                  if (IsSafe(extended).IsSafe)                                                  {                                                      points[i] = extended;                                                  }                                              }                                                var ePoint = to.Closest(points);                                              wardSlot.UseItem(ePoint.To3D());                                              LastWardJumpAttempt = Environment.TickCount;                                              //Let the user move freely inside the skillshot.                                              NoSolutionFound = true;                                              return;                                          }                                      }                                  }                              }                                    //Skillshot type blinks.                              else                              {                                  var points = Evader.GetEvadePoints(int.MaxValue' evadeSpell.Delay' true);                                    // Remove the points out of range                                  points.RemoveAll(                                      item => item.Distance(ObjectManager.Player.ServerPosition) > evadeSpell.MaxRange);                                      //Dont blink just to the edge:                                  for (var i = 0; i < points.Count; i++)                                  {                                      var k =                                          (int)                                              (evadeSpell.MaxRange -                                               ObjectManager.Player.ServerPosition.To2D().Distance(points[i]));                                        k = k - new Random(Environment.TickCount).Next(k);                                      var extended = points[i] +                                                     k *                                                     (points[i] - ObjectManager.Player.ServerPosition.To2D()).Normalized();                                      if (IsSafe(extended).IsSafe)                                      {                                          points[i] = extended;                                      }                                  }                                      if (points.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          EvadePoint = to.Closest(points);                                          Evading = true;                                          if (evadeSpell.IsSummonerSpell)                                          {                                              ObjectManager.Player.SummonerSpellbook.CastSpell(                                                  evadeSpell.Slot' EvadePoint.To3D());                                          }                                          else                                          {                                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' EvadePoint.To3D());                                          }                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                          }                            //Invulnerabilities' like Fizz's E                          if (evadeSpell.IsInvulnerability)                          {                              if (evadeSpell.IsTargetted)                              {                                  var targets = Evader.GetEvadeTargets(                                      evadeSpell.ValidTargets' int.MaxValue' 0' evadeSpell.MaxRange' true' false' true);                                    if (targets.Count > 0)                                  {                                      if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                      {                                          var closestTarget = Utils.Closest(targets' to);                                          EvadePoint = closestTarget.ServerPosition.To2D();                                          Evading = true;                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' closestTarget);                                      }                                        //Let the user move freely inside the skillshot.                                      NoSolutionFound = true;                                      return;                                  }                              }                              else                              {                                  if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                                  {                                      if (evadeSpell.SelfCast)                                      {                                          ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot);                                      }                                      else                                      {                                          ObjectManager.Player.Spellbook.CastSpell(                                              evadeSpell.Slot' ObjectManager.Player.ServerPosition);                                      }                                  }                              }                                  //Let the user move freely inside the skillshot.                              NoSolutionFound = true;                              return;                          }                      }                        //Zhonyas                      if (evadeSpell.Name == "Zhonyas" && (Items.CanUseItem("ZhonyasHourglass")))                      {                          if (IsAboutToHit(ObjectManager.Player' 100))                          {                              Items.UseItem("ZhonyasHourglass");                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                            return;                      }                        //Shields                      if (evadeSpell.IsShield &&                          ObjectManager.Player.Spellbook.CanUseSpell(evadeSpell.Slot) == SpellState.Ready)                      {                          if (IsAboutToHit(ObjectManager.Player' evadeSpell.Delay))                          {                              ObjectManager.Player.Spellbook.CastSpell(evadeSpell.Slot' ObjectManager.Player);                          }                            //Let the user move freely inside the skillshot.                          NoSolutionFound = true;                          return;                      }                  }              }
Magic Number,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,Drawing_OnDraw,The following statement contains a magic number: if (Config.TestOnAllies)              {                  var myPath = ObjectManager.Player.GetWaypoints();                    for (var i = 0; i < myPath.Count - 1; i++)                  {                      var A = myPath[i];                      var B = myPath[i + 1];                      var SA = Drawing.WorldToScreen(A.To3D());                      var SB = Drawing.WorldToScreen(B.To3D());                       Drawing.DrawLine(SA.X' SA.Y' SB.X' SB.Y' 1' Color.White);                  }                    Drawing.DrawCircle(EvadePoint.To3D()' 300' Color.White);              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,Skillshot,The following statement contains a magic number: switch (spellData.Type)              {                  case SkillShotType.SkillshotCircle:                      Circle = new Geometry.Circle(CollisionEnd' spellData.Radius);                      break;                  case SkillShotType.SkillshotLine:                      Rectangle = new Geometry.Rectangle(Start' CollisionEnd' spellData.Radius);                      break;                  case SkillShotType.SkillshotMissileLine:                      Rectangle = new Geometry.Rectangle(Start' CollisionEnd' spellData.Radius);                      break;                  case SkillShotType.SkillshotCone:                      Sector = new Geometry.Sector(                          start' CollisionEnd - start' spellData.Radius * (float) Math.PI / 180' spellData.Range);                      break;                  case SkillShotType.SkillshotRing:                      Ring = new Geometry.Ring(CollisionEnd' spellData.Radius' spellData.RingRadius);                      break;              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsActive,The following statement contains a magic number: if (SpellData.MissileAccel != 0)              {                  return Environment.TickCount <= StartTick + 5000;              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsActive,The following statement contains a magic number: return Environment.TickCount <=                     StartTick + SpellData.Delay + SpellData.ExtraDuration +                     1000 * (Start.Distance(End) / SpellData.MissileSpeed);
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,Evade,The following statement contains a magic number: if (Environment.TickCount - _cachedValueTick < 100)              {                  return _cachedValue;              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,Game_OnGameUpdate,The following statement contains a magic number: if (SpellData.CollisionObjects.Count() > 0 && SpellData.CollisionObjects != null &&                  Environment.TickCount - _lastCollisionCalc > 50 && Config.Menu.Item("EnableCollision").GetValue<bool>())              {                  _lastCollisionCalc = Environment.TickCount;                  _collisionEnd = Collision.GetCollisionPoint(this);              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,GlobalGetMissilePosition,The following statement contains a magic number: t = (int) Math.Max(0' Math.Min(End.Distance(Start)' t * SpellData.MissileSpeed / 1000));
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,GetMissilePosition,The following statement contains a magic number: if (SpellData.MissileAccel == 0)              {                  x = t * SpellData.MissileSpeed / 1000;              }                    //Missile with constant acceleration.              else              {                  var t1 = (SpellData.MissileAccel > 0                      ? SpellData.MissileMaxSpeed                      : SpellData.MissileMinSpeed - SpellData.MissileSpeed) * 1000f / SpellData.MissileAccel;                    if (t <= t1)                  {                      x =                          (int)                              (t * SpellData.MissileSpeed / 1000d + 0.5d * SpellData.MissileAccel * Math.Pow(t / 1000d' 2));                  }                  else                  {                      x =                          (int)                              (t1 * SpellData.MissileSpeed / 1000d +                               0.5d * SpellData.MissileAccel * Math.Pow(t1 / 1000d' 2) +                               (t - t1) / 1000d *                               (SpellData.MissileAccel < 0 ? SpellData.MissileMaxSpeed : SpellData.MissileMinSpeed));                  }              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,GetMissilePosition,The following statement contains a magic number: if (SpellData.MissileAccel == 0)              {                  x = t * SpellData.MissileSpeed / 1000;              }                    //Missile with constant acceleration.              else              {                  var t1 = (SpellData.MissileAccel > 0                      ? SpellData.MissileMaxSpeed                      : SpellData.MissileMinSpeed - SpellData.MissileSpeed) * 1000f / SpellData.MissileAccel;                    if (t <= t1)                  {                      x =                          (int)                              (t * SpellData.MissileSpeed / 1000d + 0.5d * SpellData.MissileAccel * Math.Pow(t / 1000d' 2));                  }                  else                  {                      x =                          (int)                              (t1 * SpellData.MissileSpeed / 1000d +                               0.5d * SpellData.MissileAccel * Math.Pow(t1 / 1000d' 2) +                               (t - t1) / 1000d *                               (SpellData.MissileAccel < 0 ? SpellData.MissileMaxSpeed : SpellData.MissileMinSpeed));                  }              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,GetMissilePosition,The following statement contains a magic number: if (SpellData.MissileAccel == 0)              {                  x = t * SpellData.MissileSpeed / 1000;              }                    //Missile with constant acceleration.              else              {                  var t1 = (SpellData.MissileAccel > 0                      ? SpellData.MissileMaxSpeed                      : SpellData.MissileMinSpeed - SpellData.MissileSpeed) * 1000f / SpellData.MissileAccel;                    if (t <= t1)                  {                      x =                          (int)                              (t * SpellData.MissileSpeed / 1000d + 0.5d * SpellData.MissileAccel * Math.Pow(t / 1000d' 2));                  }                  else                  {                      x =                          (int)                              (t1 * SpellData.MissileSpeed / 1000d +                               0.5d * SpellData.MissileAccel * Math.Pow(t1 / 1000d' 2) +                               (t - t1) / 1000d *                               (SpellData.MissileAccel < 0 ? SpellData.MissileMaxSpeed : SpellData.MissileMinSpeed));                  }              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafeToBlink,The following statement contains a magic number: timeOffset /= 2;
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafeToBlink,The following statement contains a magic number: var timeToExplode = SpellData.ExtraDuration + SpellData.Delay +                                  (int) (1000 * Start.Distance(End) / SpellData.MissileSpeed) -                                  (Environment.TickCount - StartTick);
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,The following statement contains a magic number: timeOffset += Game.Ping / 2;
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,The following statement contains a magic number: for (var i = 0; i <= path.Count - 2; i++)              {                  var from = path[i];                  var to = path[i + 1];                  var segmentIntersections = new List<FoundIntersection>();                    for (var j = 0; j <= Polygon.Points.Count - 1; j++)                  {                      var sideStart = Polygon.Points[j];                      var sideEnd = Polygon.Points[j == (Polygon.Points.Count - 1) ? 0 : j + 1];                        var intersection = from.Intersection(to' sideStart' sideEnd);                        if (intersection.Intersects)                      {                          segmentIntersections.Add(                              new FoundIntersection(                                  Distance + intersection.Point.Distance(from)'                                  (int) ((Distance + intersection.Point.Distance(from)) * 1000 / speed)'                                  intersection.Point' from));                      }                  }                    var sortedList = segmentIntersections.OrderBy(o => o.Distance).ToList();                  allIntersections.AddRange(sortedList);                    Distance += from.Distance(to);              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,The following statement contains a magic number: for (var i = 0; i <= path.Count - 2; i++)              {                  var from = path[i];                  var to = path[i + 1];                  var segmentIntersections = new List<FoundIntersection>();                    for (var j = 0; j <= Polygon.Points.Count - 1; j++)                  {                      var sideStart = Polygon.Points[j];                      var sideEnd = Polygon.Points[j == (Polygon.Points.Count - 1) ? 0 : j + 1];                        var intersection = from.Intersection(to' sideStart' sideEnd);                        if (intersection.Intersects)                      {                          segmentIntersections.Add(                              new FoundIntersection(                                  Distance + intersection.Point.Distance(from)'                                  (int) ((Distance + intersection.Point.Distance(from)) * 1000 / speed)'                                  intersection.Point' from));                      }                  }                    var sortedList = segmentIntersections.OrderBy(o => o.Distance).ToList();                  allIntersections.AddRange(sortedList);                    Distance += from.Distance(to);              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,The following statement contains a magic number: if (SpellData.Type == SkillShotType.SkillshotMissileLine ||                  SpellData.Type == SkillShotType.SkillshotMissileCone)              {                  //Outside the skillshot                  if (IsSafe(ObjectManager.Player.ServerPosition.To2D()))                  {                      //No intersections -> Safe                      if (allIntersections.Count == 0)                      {                          return new SafePathResult(true' new FoundIntersection());                      }                        for (var i = 0; i <= allIntersections.Count - 1; i = i + 2)                      {                          var enterIntersection = allIntersections[i];                          var enterIntersectionProjection = enterIntersection.Point.ProjectOn(Start' End).SegmentPoint;                            //Intersection with no exit point.                          if (i == allIntersections.Count - 1)                          {                              var missilePositionOnIntersection = GetMissilePosition(enterIntersection.Time - timeOffset);                              return                                  new SafePathResult(                                      (End.Distance(missilePositionOnIntersection) + 50 <=                                       End.Distance(enterIntersectionProjection)) &&                                      ObjectManager.Player.MoveSpeed < SpellData.MissileSpeed' allIntersections[0]);                          }                              var exitIntersection = allIntersections[i + 1];                          var exitIntersectionProjection = exitIntersection.Point.ProjectOn(Start' End).SegmentPoint;                            var missilePosOnEnter = GetMissilePosition(enterIntersection.Time - timeOffset);                          var missilePosOnExit = GetMissilePosition(exitIntersection.Time + timeOffset);                            //Missile didnt pass.                          if (missilePosOnEnter.Distance(End) + 50 > enterIntersectionProjection.Distance(End))                          {                              if (missilePosOnExit.Distance(End) <= exitIntersectionProjection.Distance(End))                              {                                  return new SafePathResult(false' allIntersections[0]);                              }                          }                      }                        return new SafePathResult(true' allIntersections[0]);                  }                  //Inside the skillshot.                  if (allIntersections.Count == 0)                  {                      return new SafePathResult(false' new FoundIntersection());                  }                    if (allIntersections.Count > 0)                  {                      //Check only for the exit point                      var exitIntersection = allIntersections[0];                      var exitIntersectionProjection = exitIntersection.Point.ProjectOn(Start' End).SegmentPoint;                        var missilePosOnExit = GetMissilePosition(exitIntersection.Time + timeOffset);                      if (missilePosOnExit.Distance(End) <= exitIntersectionProjection.Distance(End))                      {                          return new SafePathResult(false' allIntersections[0]);                      }                  }              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,The following statement contains a magic number: if (SpellData.Type == SkillShotType.SkillshotMissileLine ||                  SpellData.Type == SkillShotType.SkillshotMissileCone)              {                  //Outside the skillshot                  if (IsSafe(ObjectManager.Player.ServerPosition.To2D()))                  {                      //No intersections -> Safe                      if (allIntersections.Count == 0)                      {                          return new SafePathResult(true' new FoundIntersection());                      }                        for (var i = 0; i <= allIntersections.Count - 1; i = i + 2)                      {                          var enterIntersection = allIntersections[i];                          var enterIntersectionProjection = enterIntersection.Point.ProjectOn(Start' End).SegmentPoint;                            //Intersection with no exit point.                          if (i == allIntersections.Count - 1)                          {                              var missilePositionOnIntersection = GetMissilePosition(enterIntersection.Time - timeOffset);                              return                                  new SafePathResult(                                      (End.Distance(missilePositionOnIntersection) + 50 <=                                       End.Distance(enterIntersectionProjection)) &&                                      ObjectManager.Player.MoveSpeed < SpellData.MissileSpeed' allIntersections[0]);                          }                              var exitIntersection = allIntersections[i + 1];                          var exitIntersectionProjection = exitIntersection.Point.ProjectOn(Start' End).SegmentPoint;                            var missilePosOnEnter = GetMissilePosition(enterIntersection.Time - timeOffset);                          var missilePosOnExit = GetMissilePosition(exitIntersection.Time + timeOffset);                            //Missile didnt pass.                          if (missilePosOnEnter.Distance(End) + 50 > enterIntersectionProjection.Distance(End))                          {                              if (missilePosOnExit.Distance(End) <= exitIntersectionProjection.Distance(End))                              {                                  return new SafePathResult(false' allIntersections[0]);                              }                          }                      }                        return new SafePathResult(true' allIntersections[0]);                  }                  //Inside the skillshot.                  if (allIntersections.Count == 0)                  {                      return new SafePathResult(false' new FoundIntersection());                  }                    if (allIntersections.Count > 0)                  {                      //Check only for the exit point                      var exitIntersection = allIntersections[0];                      var exitIntersectionProjection = exitIntersection.Point.ProjectOn(Start' End).SegmentPoint;                        var missilePosOnExit = GetMissilePosition(exitIntersection.Time + timeOffset);                      if (missilePosOnExit.Distance(End) <= exitIntersectionProjection.Distance(End))                      {                          return new SafePathResult(false' allIntersections[0]);                      }                  }              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,The following statement contains a magic number: if (SpellData.Type == SkillShotType.SkillshotMissileLine ||                  SpellData.Type == SkillShotType.SkillshotMissileCone)              {                  //Outside the skillshot                  if (IsSafe(ObjectManager.Player.ServerPosition.To2D()))                  {                      //No intersections -> Safe                      if (allIntersections.Count == 0)                      {                          return new SafePathResult(true' new FoundIntersection());                      }                        for (var i = 0; i <= allIntersections.Count - 1; i = i + 2)                      {                          var enterIntersection = allIntersections[i];                          var enterIntersectionProjection = enterIntersection.Point.ProjectOn(Start' End).SegmentPoint;                            //Intersection with no exit point.                          if (i == allIntersections.Count - 1)                          {                              var missilePositionOnIntersection = GetMissilePosition(enterIntersection.Time - timeOffset);                              return                                  new SafePathResult(                                      (End.Distance(missilePositionOnIntersection) + 50 <=                                       End.Distance(enterIntersectionProjection)) &&                                      ObjectManager.Player.MoveSpeed < SpellData.MissileSpeed' allIntersections[0]);                          }                              var exitIntersection = allIntersections[i + 1];                          var exitIntersectionProjection = exitIntersection.Point.ProjectOn(Start' End).SegmentPoint;                            var missilePosOnEnter = GetMissilePosition(enterIntersection.Time - timeOffset);                          var missilePosOnExit = GetMissilePosition(exitIntersection.Time + timeOffset);                            //Missile didnt pass.                          if (missilePosOnEnter.Distance(End) + 50 > enterIntersectionProjection.Distance(End))                          {                              if (missilePosOnExit.Distance(End) <= exitIntersectionProjection.Distance(End))                              {                                  return new SafePathResult(false' allIntersections[0]);                              }                          }                      }                        return new SafePathResult(true' allIntersections[0]);                  }                  //Inside the skillshot.                  if (allIntersections.Count == 0)                  {                      return new SafePathResult(false' new FoundIntersection());                  }                    if (allIntersections.Count > 0)                  {                      //Check only for the exit point                      var exitIntersection = allIntersections[0];                      var exitIntersectionProjection = exitIntersection.Point.ProjectOn(Start' End).SegmentPoint;                        var missilePosOnExit = GetMissilePosition(exitIntersection.Time + timeOffset);                      if (missilePosOnExit.Distance(End) <= exitIntersectionProjection.Distance(End))                      {                          return new SafePathResult(false' allIntersections[0]);                      }                  }              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsSafePath,The following statement contains a magic number: var timeToExplode = (SpellData.DontAddExtraDuration ? 0 : SpellData.ExtraDuration) + SpellData.Delay +                                  (int) (1000 * Start.Distance(End) / SpellData.MissileSpeed) -                                  (Environment.TickCount - StartTick);
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,IsAboutToHit,The following statement contains a magic number: if (!IsSafe(unit.ServerPosition.To2D()))              {                  var timeToExplode = SpellData.ExtraDuration + SpellData.Delay +                                      (int) ((1000 * Start.Distance(End)) / SpellData.MissileSpeed) -                                      (Environment.TickCount - StartTick);                  if (timeToExplode <= time)                  {                      return true;                  }              }
Magic Number,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,Draw,The following statement contains a magic number: if (SpellData.Type == SkillShotType.SkillshotMissileLine)              {                  var position = GetMissilePosition(0);                  Utils.DrawLineInWorld(                      (position + SpellData.Radius * Direction.Perpendicular()).To3D()'                      (position - SpellData.Radius * Direction.Perpendicular()).To3D()' 2' missileColor);              }
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,ObjSpellMissileOnOnCreate,The following statement contains a magic number: var castTime = Environment.TickCount - Game.Ping / 2 - (spellData.MissileDelayed ? 0 : spellData.Delay) -                             (int) (1000 * missilePosition.Distance(unitPosition) / spellData.MissileSpeed);
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,ObjSpellMissileOnOnCreate,The following statement contains a magic number: var castTime = Environment.TickCount - Game.Ping / 2 - (spellData.MissileDelayed ? 0 : spellData.Delay) -                             (int) (1000 * missilePosition.Distance(unitPosition) / spellData.MissileSpeed);
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,ObjSpellMissileOnOnDelete,The following statement contains a magic number: if (OnDeleteMissile != null)              {                  foreach (var skillshot in Program.DetectedSkillshots)                  {                      if (skillshot.SpellData.MissileSpellName == spellName &&                          (skillshot.Unit.NetworkId == unit.NetworkId &&                           (missile.EndPosition.To2D() - missile.StartPosition.To2D()).AngleBetween(skillshot.Direction) <                           10) && skillshot.SpellData.CanBeRemoved)                      {                          OnDeleteMissile(skillshot' missile);                          break;                      }                  }              }
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,ObjSpellMissileOnOnDelete,The following statement contains a magic number: Program.DetectedSkillshots.RemoveAll(                  skillshot =>                      (skillshot.SpellData.MissileSpellName == spellName ||                       skillshot.SpellData.ExtraMissileNames.Contains(spellName)) &&                      (skillshot.Unit.NetworkId == unit.NetworkId &&                       ((missile.EndPosition.To2D() - missile.StartPosition.To2D()).AngleBetween(skillshot.Direction) < 10) &&                       skillshot.SpellData.CanBeRemoved || skillshot.SpellData.ForceRemove));
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,ObjAiHeroOnOnProcessSpellCast,The following statement contains a magic number: if (spellData.FromObjects != null && spellData.FromObjects.Length > 0)              {                  foreach (var obj in ObjectManager.Get<GameObject>())                  {                      if (obj.IsEnemy && spellData.FromObjects.Contains(obj.Name))                      {                          var start = obj.Position.To2D();                          var end = start + spellData.Range * (args.End.To2D() - obj.Position.To2D()).Normalized();                          TriggerOnDetectSkillshot(                              DetectionType.ProcessSpell' spellData' Environment.TickCount - Game.Ping / 2' start' end'                              sender);                      }                  }              }
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,ObjAiHeroOnOnProcessSpellCast,The following statement contains a magic number: TriggerOnDetectSkillshot(                  DetectionType.ProcessSpell' spellData' Environment.TickCount - Game.Ping / 2' startPos' endPos' sender);
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,GameOnOnGameProcessPacket,The following statement contains a magic number: if (args.PacketData[0] == 0x3B)              {                  var packet = new GamePacket(args.PacketData);                    packet.Position = 1;                    packet.ReadFloat(); //Missile network ID                    var missilePosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                  var unitPosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = packet.Size() - 119;                  var missileSpeed = packet.ReadFloat();                    packet.Position = 65;                  var endPos = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = 112;                  var id = packet.ReadByte();                      packet.Position = packet.Size() - 83;                    var unit = ObjectManager.GetUnitByNetworkId<Obj_AI_Hero>(packet.ReadInteger());                  if ((!unit.IsValid || unit.Team == ObjectManager.Player.Team) && !Config.TestOnAllies)                  {                      return;                  }                    var spellData = SpellDatabase.GetBySpeed(unit.ChampionName' (int) missileSpeed' id);                    if (spellData == null)                  {                      return;                  }                  if (spellData.SpellName != "Laser")                  {                      return;                  }                  var castTime = Environment.TickCount - Game.Ping / 2 - spellData.Delay -                                 (int)                                     (1000 * missilePosition.SwitchYZ().To2D().Distance(unitPosition.SwitchYZ()) /                                      spellData.MissileSpeed);                    //Trigger the skillshot detection callbacks.                  TriggerOnDetectSkillshot(                      DetectionType.RecvPacket' spellData' castTime' unitPosition.SwitchYZ().To2D()'                      endPos.SwitchYZ().To2D()' unit);              }
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,GameOnOnGameProcessPacket,The following statement contains a magic number: if (args.PacketData[0] == 0x3B)              {                  var packet = new GamePacket(args.PacketData);                    packet.Position = 1;                    packet.ReadFloat(); //Missile network ID                    var missilePosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                  var unitPosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = packet.Size() - 119;                  var missileSpeed = packet.ReadFloat();                    packet.Position = 65;                  var endPos = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = 112;                  var id = packet.ReadByte();                      packet.Position = packet.Size() - 83;                    var unit = ObjectManager.GetUnitByNetworkId<Obj_AI_Hero>(packet.ReadInteger());                  if ((!unit.IsValid || unit.Team == ObjectManager.Player.Team) && !Config.TestOnAllies)                  {                      return;                  }                    var spellData = SpellDatabase.GetBySpeed(unit.ChampionName' (int) missileSpeed' id);                    if (spellData == null)                  {                      return;                  }                  if (spellData.SpellName != "Laser")                  {                      return;                  }                  var castTime = Environment.TickCount - Game.Ping / 2 - spellData.Delay -                                 (int)                                     (1000 * missilePosition.SwitchYZ().To2D().Distance(unitPosition.SwitchYZ()) /                                      spellData.MissileSpeed);                    //Trigger the skillshot detection callbacks.                  TriggerOnDetectSkillshot(                      DetectionType.RecvPacket' spellData' castTime' unitPosition.SwitchYZ().To2D()'                      endPos.SwitchYZ().To2D()' unit);              }
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,GameOnOnGameProcessPacket,The following statement contains a magic number: if (args.PacketData[0] == 0x3B)              {                  var packet = new GamePacket(args.PacketData);                    packet.Position = 1;                    packet.ReadFloat(); //Missile network ID                    var missilePosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                  var unitPosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = packet.Size() - 119;                  var missileSpeed = packet.ReadFloat();                    packet.Position = 65;                  var endPos = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = 112;                  var id = packet.ReadByte();                      packet.Position = packet.Size() - 83;                    var unit = ObjectManager.GetUnitByNetworkId<Obj_AI_Hero>(packet.ReadInteger());                  if ((!unit.IsValid || unit.Team == ObjectManager.Player.Team) && !Config.TestOnAllies)                  {                      return;                  }                    var spellData = SpellDatabase.GetBySpeed(unit.ChampionName' (int) missileSpeed' id);                    if (spellData == null)                  {                      return;                  }                  if (spellData.SpellName != "Laser")                  {                      return;                  }                  var castTime = Environment.TickCount - Game.Ping / 2 - spellData.Delay -                                 (int)                                     (1000 * missilePosition.SwitchYZ().To2D().Distance(unitPosition.SwitchYZ()) /                                      spellData.MissileSpeed);                    //Trigger the skillshot detection callbacks.                  TriggerOnDetectSkillshot(                      DetectionType.RecvPacket' spellData' castTime' unitPosition.SwitchYZ().To2D()'                      endPos.SwitchYZ().To2D()' unit);              }
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,GameOnOnGameProcessPacket,The following statement contains a magic number: if (args.PacketData[0] == 0x3B)              {                  var packet = new GamePacket(args.PacketData);                    packet.Position = 1;                    packet.ReadFloat(); //Missile network ID                    var missilePosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                  var unitPosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = packet.Size() - 119;                  var missileSpeed = packet.ReadFloat();                    packet.Position = 65;                  var endPos = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = 112;                  var id = packet.ReadByte();                      packet.Position = packet.Size() - 83;                    var unit = ObjectManager.GetUnitByNetworkId<Obj_AI_Hero>(packet.ReadInteger());                  if ((!unit.IsValid || unit.Team == ObjectManager.Player.Team) && !Config.TestOnAllies)                  {                      return;                  }                    var spellData = SpellDatabase.GetBySpeed(unit.ChampionName' (int) missileSpeed' id);                    if (spellData == null)                  {                      return;                  }                  if (spellData.SpellName != "Laser")                  {                      return;                  }                  var castTime = Environment.TickCount - Game.Ping / 2 - spellData.Delay -                                 (int)                                     (1000 * missilePosition.SwitchYZ().To2D().Distance(unitPosition.SwitchYZ()) /                                      spellData.MissileSpeed);                    //Trigger the skillshot detection callbacks.                  TriggerOnDetectSkillshot(                      DetectionType.RecvPacket' spellData' castTime' unitPosition.SwitchYZ().To2D()'                      endPos.SwitchYZ().To2D()' unit);              }
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,GameOnOnGameProcessPacket,The following statement contains a magic number: if (args.PacketData[0] == 0x3B)              {                  var packet = new GamePacket(args.PacketData);                    packet.Position = 1;                    packet.ReadFloat(); //Missile network ID                    var missilePosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                  var unitPosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = packet.Size() - 119;                  var missileSpeed = packet.ReadFloat();                    packet.Position = 65;                  var endPos = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = 112;                  var id = packet.ReadByte();                      packet.Position = packet.Size() - 83;                    var unit = ObjectManager.GetUnitByNetworkId<Obj_AI_Hero>(packet.ReadInteger());                  if ((!unit.IsValid || unit.Team == ObjectManager.Player.Team) && !Config.TestOnAllies)                  {                      return;                  }                    var spellData = SpellDatabase.GetBySpeed(unit.ChampionName' (int) missileSpeed' id);                    if (spellData == null)                  {                      return;                  }                  if (spellData.SpellName != "Laser")                  {                      return;                  }                  var castTime = Environment.TickCount - Game.Ping / 2 - spellData.Delay -                                 (int)                                     (1000 * missilePosition.SwitchYZ().To2D().Distance(unitPosition.SwitchYZ()) /                                      spellData.MissileSpeed);                    //Trigger the skillshot detection callbacks.                  TriggerOnDetectSkillshot(                      DetectionType.RecvPacket' spellData' castTime' unitPosition.SwitchYZ().To2D()'                      endPos.SwitchYZ().To2D()' unit);              }
Magic Number,Evade,SkillshotDetector,C:\repos\imsosharp_LeagueSharp\EvadeLib\SkillshotDetector.cs,GameOnOnGameProcessPacket,The following statement contains a magic number: if (args.PacketData[0] == 0x3B)              {                  var packet = new GamePacket(args.PacketData);                    packet.Position = 1;                    packet.ReadFloat(); //Missile network ID                    var missilePosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                  var unitPosition = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = packet.Size() - 119;                  var missileSpeed = packet.ReadFloat();                    packet.Position = 65;                  var endPos = new Vector3(packet.ReadFloat()' packet.ReadFloat()' packet.ReadFloat());                    packet.Position = 112;                  var id = packet.ReadByte();                      packet.Position = packet.Size() - 83;                    var unit = ObjectManager.GetUnitByNetworkId<Obj_AI_Hero>(packet.ReadInteger());                  if ((!unit.IsValid || unit.Team == ObjectManager.Player.Team) && !Config.TestOnAllies)                  {                      return;                  }                    var spellData = SpellDatabase.GetBySpeed(unit.ChampionName' (int) missileSpeed' id);                    if (spellData == null)                  {                      return;                  }                  if (spellData.SpellName != "Laser")                  {                      return;                  }                  var castTime = Environment.TickCount - Game.Ping / 2 - spellData.Delay -                                 (int)                                     (1000 * missilePosition.SwitchYZ().To2D().Distance(unitPosition.SwitchYZ()) /                                      spellData.MissileSpeed);                    //Trigger the skillshot detection callbacks.                  TriggerOnDetectSkillshot(                      DetectionType.RecvPacket' spellData' castTime' unitPosition.SwitchYZ().To2D()'                      endPos.SwitchYZ().To2D()' unit);              }
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: if (Config.TestOnAllies)              {                  Spells.Add(                      new SpellData                      {                          ChampionName = ObjectManager.Player.ChampionName'                          SpellName = "TestSkillShot"'                          Slot = SpellSlot.R'                          Type = SkillShotType.SkillshotCircle'                          Delay = 600'                          Range = 650'                          Radius = 350'                          MissileSpeed = int.MaxValue'                          FixedRange = false'                          AddHitbox = true'                          DangerValue = 5'                          IsDangerous = true'                          MissileSpellName = "TestSkillShot"'                      });              }
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: if (Config.TestOnAllies)              {                  Spells.Add(                      new SpellData                      {                          ChampionName = ObjectManager.Player.ChampionName'                          SpellName = "TestSkillShot"'                          Slot = SpellSlot.R'                          Type = SkillShotType.SkillshotCircle'                          Delay = 600'                          Range = 650'                          Radius = 350'                          MissileSpeed = int.MaxValue'                          FixedRange = false'                          AddHitbox = true'                          DangerValue = 5'                          IsDangerous = true'                          MissileSpellName = "TestSkillShot"'                      });              }
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: if (Config.TestOnAllies)              {                  Spells.Add(                      new SpellData                      {                          ChampionName = ObjectManager.Player.ChampionName'                          SpellName = "TestSkillShot"'                          Slot = SpellSlot.R'                          Type = SkillShotType.SkillshotCircle'                          Delay = 600'                          Range = 650'                          Radius = 350'                          MissileSpeed = int.MaxValue'                          FixedRange = false'                          AddHitbox = true'                          DangerValue = 5'                          IsDangerous = true'                          MissileSpellName = "TestSkillShot"'                      });              }
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: if (Config.TestOnAllies)              {                  Spells.Add(                      new SpellData                      {                          ChampionName = ObjectManager.Player.ChampionName'                          SpellName = "TestSkillShot"'                          Slot = SpellSlot.R'                          Type = SkillShotType.SkillshotCircle'                          Delay = 600'                          Range = 650'                          Radius = 350'                          MissileSpeed = int.MaxValue'                          FixedRange = false'                          AddHitbox = true'                          DangerValue = 5'                          IsDangerous = true'                          MissileSpellName = "TestSkillShot"'                      });              }
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Aatrox"'                      SpellName = "AatroxQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 650'                      Radius = 250'                      MissileSpeed = 2000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Aatrox"'                      SpellName = "AatroxQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 650'                      Radius = 250'                      MissileSpeed = 2000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Aatrox"'                      SpellName = "AatroxQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 650'                      Radius = 250'                      MissileSpeed = 2000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Aatrox"'                      SpellName = "AatroxQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 650'                      Radius = 250'                      MissileSpeed = 2000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Aatrox"'                      SpellName = "AatroxQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 650'                      Radius = 250'                      MissileSpeed = 2000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Aatrox"'                      SpellName = "AatroxE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1075'                      Radius = 35'                      MissileSpeed = 1250'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "AatroxEConeMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Aatrox"'                      SpellName = "AatroxE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1075'                      Radius = 35'                      MissileSpeed = 1250'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "AatroxEConeMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Aatrox"'                      SpellName = "AatroxE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1075'                      Radius = 35'                      MissileSpeed = 1250'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "AatroxEConeMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Aatrox"'                      SpellName = "AatroxE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1075'                      Radius = 35'                      MissileSpeed = 1250'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "AatroxEConeMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Aatrox"'                      SpellName = "AatroxE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1075'                      Radius = 35'                      MissileSpeed = 1250'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "AatroxEConeMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbofDeception"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 2500'                      MissileAccel = -3200'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "AhriOrbMissile"'                      CanBeRemoved = true'                      ForceRemove = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbofDeception"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 2500'                      MissileAccel = -3200'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "AhriOrbMissile"'                      CanBeRemoved = true'                      ForceRemove = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbofDeception"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 2500'                      MissileAccel = -3200'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "AhriOrbMissile"'                      CanBeRemoved = true'                      ForceRemove = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbofDeception"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 2500'                      MissileAccel = -3200'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "AhriOrbMissile"'                      CanBeRemoved = true'                      ForceRemove = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbofDeception"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 2500'                      MissileAccel = -3200'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "AhriOrbMissile"'                      CanBeRemoved = true'                      ForceRemove = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbofDeception"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 2500'                      MissileAccel = -3200'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "AhriOrbMissile"'                      CanBeRemoved = true'                      ForceRemove = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbofDeception"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 2500'                      MissileAccel = -3200'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "AhriOrbMissile"'                      CanBeRemoved = true'                      ForceRemove = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbofDeception"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 2500'                      MissileAccel = -3200'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "AhriOrbMissile"'                      CanBeRemoved = true'                      ForceRemove = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 60'                      MissileAccel = 1900'                      MissileMinSpeed = 60'                      MissileMaxSpeed = 2600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileFollowsUnit = true'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "AhriOrbReturn"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 60'                      MissileAccel = 1900'                      MissileMinSpeed = 60'                      MissileMaxSpeed = 2600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileFollowsUnit = true'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "AhriOrbReturn"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 60'                      MissileAccel = 1900'                      MissileMinSpeed = 60'                      MissileMaxSpeed = 2600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileFollowsUnit = true'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "AhriOrbReturn"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 60'                      MissileAccel = 1900'                      MissileMinSpeed = 60'                      MissileMaxSpeed = 2600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileFollowsUnit = true'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "AhriOrbReturn"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 60'                      MissileAccel = 1900'                      MissileMinSpeed = 60'                      MissileMaxSpeed = 2600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileFollowsUnit = true'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "AhriOrbReturn"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 60'                      MissileAccel = 1900'                      MissileMinSpeed = 60'                      MissileMaxSpeed = 2600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileFollowsUnit = true'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "AhriOrbReturn"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 60'                      MissileAccel = 1900'                      MissileMinSpeed = 60'                      MissileMaxSpeed = 2600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileFollowsUnit = true'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "AhriOrbReturn"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriOrbReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 100'                      MissileSpeed = 60'                      MissileAccel = 1900'                      MissileMinSpeed = 60'                      MissileMaxSpeed = 2600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileFollowsUnit = true'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "AhriOrbReturn"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriSeduce"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "AhriSeduceMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriSeduce"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "AhriSeduceMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriSeduce"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "AhriSeduceMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriSeduce"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "AhriSeduceMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ahri"'                      SpellName = "AhriSeduce"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "AhriSeduceMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Amumu"'                      SpellName = "BandageToss"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 90'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SadMummyBandageToss"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Amumu"'                      SpellName = "BandageToss"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 90'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SadMummyBandageToss"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Amumu"'                      SpellName = "BandageToss"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 90'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SadMummyBandageToss"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Amumu"'                      SpellName = "BandageToss"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 90'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SadMummyBandageToss"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Amumu"'                      SpellName = "BandageToss"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 90'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SadMummyBandageToss"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Amumu"'                      SpellName = "CurseoftheSadMummy"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 550'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Amumu"'                      SpellName = "CurseoftheSadMummy"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 550'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Amumu"'                      SpellName = "CurseoftheSadMummy"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 550'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Anivia"'                      SpellName = "FlashFrost"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 110'                      MissileSpeed = 850'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "FlashFrostSpell"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Anivia"'                      SpellName = "FlashFrost"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 110'                      MissileSpeed = 850'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "FlashFrostSpell"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Anivia"'                      SpellName = "FlashFrost"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 110'                      MissileSpeed = 850'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "FlashFrostSpell"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Anivia"'                      SpellName = "FlashFrost"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 110'                      MissileSpeed = 850'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "FlashFrostSpell"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Anivia"'                      SpellName = "FlashFrost"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 110'                      MissileSpeed = 850'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "FlashFrostSpell"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Annie"'                      SpellName = "Incinerate"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCone'                      Delay = 250'                      Range = 825'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Annie"'                      SpellName = "Incinerate"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCone'                      Delay = 250'                      Range = 825'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Annie"'                      SpellName = "Incinerate"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCone'                      Delay = 250'                      Range = 825'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Annie"'                      SpellName = "Incinerate"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCone'                      Delay = 250'                      Range = 825'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Annie"'                      SpellName = "InfernalGuardian"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 600'                      Radius = 251'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Annie"'                      SpellName = "InfernalGuardian"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 600'                      Radius = 251'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Annie"'                      SpellName = "InfernalGuardian"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 600'                      Radius = 251'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Annie"'                      SpellName = "InfernalGuardian"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 600'                      Radius = 251'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "VolleyAttack"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VolleyAttack"'                      MultipleNumber = 7'                      MultipleAngle = 9.58f * (float) Math.PI / 180'                      CanBeRemoved = false'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "VolleyAttack"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VolleyAttack"'                      MultipleNumber = 7'                      MultipleAngle = 9.58f * (float) Math.PI / 180'                      CanBeRemoved = false'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "VolleyAttack"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VolleyAttack"'                      MultipleNumber = 7'                      MultipleAngle = 9.58f * (float) Math.PI / 180'                      CanBeRemoved = false'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "VolleyAttack"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VolleyAttack"'                      MultipleNumber = 7'                      MultipleAngle = 9.58f * (float) Math.PI / 180'                      CanBeRemoved = false'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "VolleyAttack"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VolleyAttack"'                      MultipleNumber = 7'                      MultipleAngle = 9.58f * (float) Math.PI / 180'                      CanBeRemoved = false'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "VolleyAttack"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VolleyAttack"'                      MultipleNumber = 7'                      MultipleAngle = 9.58f * (float) Math.PI / 180'                      CanBeRemoved = false'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "VolleyAttack"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VolleyAttack"'                      MultipleNumber = 7'                      MultipleAngle = 9.58f * (float) Math.PI / 180'                      CanBeRemoved = false'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "EnchantedCrystalArrow"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 20000'                      Radius = 130'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "EnchantedCrystalArrow"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "EnchantedCrystalArrow"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 20000'                      Radius = 130'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "EnchantedCrystalArrow"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "EnchantedCrystalArrow"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 20000'                      Radius = 130'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "EnchantedCrystalArrow"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "EnchantedCrystalArrow"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 20000'                      Radius = 130'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "EnchantedCrystalArrow"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ashe"'                      SpellName = "EnchantedCrystalArrow"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 20000'                      Radius = 130'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "EnchantedCrystalArrow"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Blitzcrank"'                      SpellName = "RocketGrab"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 70'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "RocketGrabMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Blitzcrank"'                      SpellName = "RocketGrab"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 70'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "RocketGrabMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Blitzcrank"'                      SpellName = "RocketGrab"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 70'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "RocketGrabMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Blitzcrank"'                      SpellName = "RocketGrab"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 70'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "RocketGrabMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Blitzcrank"'                      SpellName = "RocketGrab"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 70'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "RocketGrabMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Blitzcrank"'                      SpellName = "StaticField"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 600'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Blitzcrank"'                      SpellName = "StaticField"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 600'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Blitzcrank"'                      SpellName = "StaticField"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 600'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Brand"'                      SpellName = "BrandBlaze"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 60'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BrandBlazeMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Brand"'                      SpellName = "BrandBlaze"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 60'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BrandBlazeMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Brand"'                      SpellName = "BrandBlaze"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 60'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BrandBlazeMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Brand"'                      SpellName = "BrandBlaze"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 60'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BrandBlazeMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Brand"'                      SpellName = "BrandBlaze"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 60'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BrandBlazeMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Brand"'                      SpellName = "BrandFissure"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 850'                      Range = 900'                      Radius = 240'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Brand"'                      SpellName = "BrandFissure"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 850'                      Range = 900'                      Radius = 240'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Brand"'                      SpellName = "BrandFissure"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 850'                      Range = 900'                      Radius = 240'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Brand"'                      SpellName = "BrandFissure"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 850'                      Range = 900'                      Radius = 240'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Braum"'                      SpellName = "BraumQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BraumQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Braum"'                      SpellName = "BraumQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BraumQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Braum"'                      SpellName = "BraumQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BraumQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Braum"'                      SpellName = "BraumQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BraumQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Braum"'                      SpellName = "BraumQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BraumQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Braum"'                      SpellName = "BraumRWrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1200'                      Radius = 115'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "braumrmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Braum"'                      SpellName = "BraumRWrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1200'                      Radius = 115'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "braumrmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Braum"'                      SpellName = "BraumRWrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1200'                      Radius = 115'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "braumrmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Braum"'                      SpellName = "BraumRWrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1200'                      Radius = 115'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "braumrmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Braum"'                      SpellName = "BraumRWrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1200'                      Radius = 115'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "braumrmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Caitlyn"'                      SpellName = "CaitlynPiltoverPeacemaker"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 625'                      Range = 1300'                      Radius = 90'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "CaitlynPiltoverPeacemaker"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Caitlyn"'                      SpellName = "CaitlynPiltoverPeacemaker"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 625'                      Range = 1300'                      Radius = 90'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "CaitlynPiltoverPeacemaker"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Caitlyn"'                      SpellName = "CaitlynPiltoverPeacemaker"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 625'                      Range = 1300'                      Radius = 90'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "CaitlynPiltoverPeacemaker"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Caitlyn"'                      SpellName = "CaitlynPiltoverPeacemaker"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 625'                      Range = 1300'                      Radius = 90'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "CaitlynPiltoverPeacemaker"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Caitlyn"'                      SpellName = "CaitlynPiltoverPeacemaker"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 625'                      Range = 1300'                      Radius = 90'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "CaitlynPiltoverPeacemaker"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Caitlyn"'                      SpellName = "CaitlynEntrapment"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1000'                      Radius = 80'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 1'                      IsDangerous = false'                      MissileSpellName = "CaitlynEntrapmentMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Caitlyn"'                      SpellName = "CaitlynEntrapment"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1000'                      Radius = 80'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 1'                      IsDangerous = false'                      MissileSpellName = "CaitlynEntrapmentMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Caitlyn"'                      SpellName = "CaitlynEntrapment"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1000'                      Radius = 80'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 1'                      IsDangerous = false'                      MissileSpellName = "CaitlynEntrapmentMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Caitlyn"'                      SpellName = "CaitlynEntrapment"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1000'                      Radius = 80'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 1'                      IsDangerous = false'                      MissileSpellName = "CaitlynEntrapmentMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Cassiopeia"'                      SpellName = "CassiopeiaNoxiousBlast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 850'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "CassiopeiaNoxiousBlast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Cassiopeia"'                      SpellName = "CassiopeiaNoxiousBlast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 850'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "CassiopeiaNoxiousBlast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Cassiopeia"'                      SpellName = "CassiopeiaNoxiousBlast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 850'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "CassiopeiaNoxiousBlast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Cassiopeia"'                      SpellName = "CassiopeiaNoxiousBlast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 850'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "CassiopeiaNoxiousBlast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Cassiopeia"'                      SpellName = "CassiopeiaPetrifyingGaze"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCone'                      Delay = 600'                      Range = 825'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "CassiopeiaPetrifyingGaze"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Cassiopeia"'                      SpellName = "CassiopeiaPetrifyingGaze"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCone'                      Delay = 600'                      Range = 825'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "CassiopeiaPetrifyingGaze"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Cassiopeia"'                      SpellName = "CassiopeiaPetrifyingGaze"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCone'                      Delay = 600'                      Range = 825'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "CassiopeiaPetrifyingGaze"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Cassiopeia"'                      SpellName = "CassiopeiaPetrifyingGaze"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCone'                      Delay = 600'                      Range = 825'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "CassiopeiaPetrifyingGaze"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Chogath"'                      SpellName = "Rupture"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1200'                      Range = 950'                      Radius = 250'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "Rupture"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Chogath"'                      SpellName = "Rupture"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1200'                      Range = 950'                      Radius = 250'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "Rupture"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Chogath"'                      SpellName = "Rupture"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1200'                      Range = 950'                      Radius = 250'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "Rupture"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Chogath"'                      SpellName = "Rupture"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1200'                      Range = 950'                      Radius = 250'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "Rupture"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "PhosphorusBomb"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 300'                      Range = 825'                      Radius = 250'                      MissileSpeed = 1000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "PhosphorusBombMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "PhosphorusBomb"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 300'                      Range = 825'                      Radius = 250'                      MissileSpeed = 1000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "PhosphorusBombMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "PhosphorusBomb"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 300'                      Range = 825'                      Radius = 250'                      MissileSpeed = 1000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "PhosphorusBombMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "PhosphorusBomb"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 300'                      Range = 825'                      Radius = 250'                      MissileSpeed = 1000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "PhosphorusBombMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "PhosphorusBomb"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 300'                      Range = 825'                      Radius = 250'                      MissileSpeed = 1000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "PhosphorusBombMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "MissileBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1300'                      Radius = 40'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "MissileBarrageMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "MissileBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1300'                      Radius = 40'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "MissileBarrageMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "MissileBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1300'                      Radius = 40'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "MissileBarrageMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "MissileBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1300'                      Radius = 40'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "MissileBarrageMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "MissileBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1300'                      Radius = 40'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "MissileBarrageMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "MissileBarrage2"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1500'                      Radius = 40'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "MissileBarrageMissile2"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "MissileBarrage2"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1500'                      Radius = 40'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "MissileBarrageMissile2"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "MissileBarrage2"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1500'                      Radius = 40'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "MissileBarrageMissile2"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "MissileBarrage2"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1500'                      Radius = 40'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "MissileBarrageMissile2"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Corki"'                      SpellName = "MissileBarrage2"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1500'                      Radius = 40'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "MissileBarrageMissile2"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Darius"'                      SpellName = "DariusAxeGrabCone"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCone'                      Delay = 300'                      Range = 550'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DariusAxeGrabCone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Darius"'                      SpellName = "DariusAxeGrabCone"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCone'                      Delay = 300'                      Range = 550'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DariusAxeGrabCone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Darius"'                      SpellName = "DariusAxeGrabCone"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCone'                      Delay = 300'                      Range = 550'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DariusAxeGrabCone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Darius"'                      SpellName = "DariusAxeGrabCone"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCone'                      Delay = 300'                      Range = 550'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DariusAxeGrabCone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "DrMundo"'                      SpellName = "InfectedCleaverMissileCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "InfectedCleaverMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "DrMundo"'                      SpellName = "InfectedCleaverMissileCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "InfectedCleaverMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "DrMundo"'                      SpellName = "InfectedCleaverMissileCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "InfectedCleaverMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "DrMundo"'                      SpellName = "InfectedCleaverMissileCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "InfectedCleaverMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "DrMundo"'                      SpellName = "InfectedCleaverMissileCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = false'                      MissileSpellName = "InfectedCleaverMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Draven"'                      SpellName = "DravenDoubleShot"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 130'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DravenDoubleShotMissile"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Draven"'                      SpellName = "DravenDoubleShot"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 130'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DravenDoubleShotMissile"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Draven"'                      SpellName = "DravenDoubleShot"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 130'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DravenDoubleShotMissile"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Draven"'                      SpellName = "DravenDoubleShot"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 130'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DravenDoubleShotMissile"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Draven"'                      SpellName = "DravenDoubleShot"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 130'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DravenDoubleShotMissile"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Draven"'                      SpellName = "DravenRCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 400'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "DravenR"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Draven"'                      SpellName = "DravenRCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 400'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "DravenR"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Draven"'                      SpellName = "DravenRCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 400'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "DravenR"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Draven"'                      SpellName = "DravenRCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 400'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "DravenR"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Draven"'                      SpellName = "DravenRCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 400'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "DravenR"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Elise"'                      SpellName = "EliseHumanE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 55'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "EliseHumanE"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Elise"'                      SpellName = "EliseHumanE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 55'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "EliseHumanE"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Elise"'                      SpellName = "EliseHumanE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 55'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "EliseHumanE"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Elise"'                      SpellName = "EliseHumanE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 55'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "EliseHumanE"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Elise"'                      SpellName = "EliseHumanE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 55'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = true'                      MissileSpellName = "EliseHumanE"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Evelynn"'                      SpellName = "EvelynnR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 650'                      Radius = 350'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "EvelynnR"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Evelynn"'                      SpellName = "EvelynnR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 650'                      Radius = 350'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "EvelynnR"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Evelynn"'                      SpellName = "EvelynnR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 650'                      Radius = 350'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "EvelynnR"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Evelynn"'                      SpellName = "EvelynnR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 650'                      Radius = 350'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "EvelynnR"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealMysticShotMissile"'                      ExtraMissileNames = new[] { "EzrealMysticShotPulseMissile" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      Id = 229'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealMysticShotMissile"'                      ExtraMissileNames = new[] { "EzrealMysticShotPulseMissile" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      Id = 229'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealMysticShotMissile"'                      ExtraMissileNames = new[] { "EzrealMysticShotPulseMissile" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      Id = 229'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealMysticShotMissile"'                      ExtraMissileNames = new[] { "EzrealMysticShotPulseMissile" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      Id = 229'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealMysticShotMissile"'                      ExtraMissileNames = new[] { "EzrealMysticShotPulseMissile" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      Id = 229'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealMysticShotMissile"'                      ExtraMissileNames = new[] { "EzrealMysticShotPulseMissile" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      Id = 229'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealEssenceFlux"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 80'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealEssenceFluxMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealEssenceFlux"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 80'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealEssenceFluxMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealEssenceFlux"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 80'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealEssenceFluxMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealEssenceFlux"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 80'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealEssenceFluxMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealEssenceFlux"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 80'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "EzrealEssenceFluxMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealTrueshotBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 1000'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "EzrealTrueshotBarrage"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      Id = 245'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealTrueshotBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 1000'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "EzrealTrueshotBarrage"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      Id = 245'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealTrueshotBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 1000'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "EzrealTrueshotBarrage"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      Id = 245'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealTrueshotBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 1000'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "EzrealTrueshotBarrage"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      Id = 245'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealTrueshotBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 1000'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "EzrealTrueshotBarrage"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      Id = 245'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ezreal"'                      SpellName = "EzrealTrueshotBarrage"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 1000'                      Range = 20000'                      Radius = 160'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "EzrealTrueshotBarrage"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      Id = 245'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Fizz"'                      SpellName = "FizzMarinerDoom"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 120'                      MissileSpeed = 1350'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "FizzMarinerDoomMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                      CanBeRemoved = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Fizz"'                      SpellName = "FizzMarinerDoom"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 120'                      MissileSpeed = 1350'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "FizzMarinerDoomMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                      CanBeRemoved = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Fizz"'                      SpellName = "FizzMarinerDoom"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 120'                      MissileSpeed = 1350'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "FizzMarinerDoomMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                      CanBeRemoved = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Fizz"'                      SpellName = "FizzMarinerDoom"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 120'                      MissileSpeed = 1350'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "FizzMarinerDoomMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                      CanBeRemoved = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Fizz"'                      SpellName = "FizzMarinerDoom"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 120'                      MissileSpeed = 1350'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "FizzMarinerDoomMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                      CanBeRemoved = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioResoluteSmite"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 900'                      Radius = 200'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GalioResoluteSmite"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioResoluteSmite"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 900'                      Radius = 200'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GalioResoluteSmite"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioResoluteSmite"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 900'                      Radius = 200'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GalioResoluteSmite"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioResoluteSmite"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 900'                      Radius = 200'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GalioResoluteSmite"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioResoluteSmite"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 900'                      Radius = 200'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GalioResoluteSmite"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioRighteousGust"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 120'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GalioRighteousGust"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioRighteousGust"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 120'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GalioRighteousGust"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioRighteousGust"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 120'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GalioRighteousGust"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioRighteousGust"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 120'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GalioRighteousGust"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioRighteousGust"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 120'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GalioRighteousGust"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioIdolOfDurand"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 550'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioIdolOfDurand"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 550'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Galio"'                      SpellName = "GalioIdolOfDurand"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 550'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1125'                      Radius = 60'                      MissileSpeed = 2500'                      MissileAccel = -3000'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "gnarqmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1125'                      Radius = 60'                      MissileSpeed = 2500'                      MissileAccel = -3000'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "gnarqmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1125'                      Radius = 60'                      MissileSpeed = 2500'                      MissileAccel = -3000'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "gnarqmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1125'                      Radius = 60'                      MissileSpeed = 2500'                      MissileAccel = -3000'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "gnarqmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1125'                      Radius = 60'                      MissileSpeed = 2500'                      MissileAccel = -3000'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "gnarqmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1125'                      Radius = 60'                      MissileSpeed = 2500'                      MissileAccel = -3000'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "gnarqmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1125'                      Radius = 60'                      MissileSpeed = 2500'                      MissileAccel = -3000'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "gnarqmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1125'                      Radius = 60'                      MissileSpeed = 2500'                      MissileAccel = -3000'                      MissileMaxSpeed = 2500'                      MissileMinSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "gnarqmissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 2500'                      Radius = 75'                      MissileSpeed = 60'                      MissileAccel = 800'                      MissileMaxSpeed = 2600'                      MissileMinSpeed = 60'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "GnarQMissileReturn"'                      DisableFowDetection = false'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 2500'                      Radius = 75'                      MissileSpeed = 60'                      MissileAccel = 800'                      MissileMaxSpeed = 2600'                      MissileMinSpeed = 60'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "GnarQMissileReturn"'                      DisableFowDetection = false'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 2500'                      Radius = 75'                      MissileSpeed = 60'                      MissileAccel = 800'                      MissileMaxSpeed = 2600'                      MissileMinSpeed = 60'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "GnarQMissileReturn"'                      DisableFowDetection = false'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 2500'                      Radius = 75'                      MissileSpeed = 60'                      MissileAccel = 800'                      MissileMaxSpeed = 2600'                      MissileMinSpeed = 60'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "GnarQMissileReturn"'                      DisableFowDetection = false'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 2500'                      Radius = 75'                      MissileSpeed = 60'                      MissileAccel = 800'                      MissileMaxSpeed = 2600'                      MissileMinSpeed = 60'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "GnarQMissileReturn"'                      DisableFowDetection = false'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 2500'                      Radius = 75'                      MissileSpeed = 60'                      MissileAccel = 800'                      MissileMaxSpeed = 2600'                      MissileMinSpeed = 60'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "GnarQMissileReturn"'                      DisableFowDetection = false'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 2500'                      Radius = 75'                      MissileSpeed = 60'                      MissileAccel = 800'                      MissileMaxSpeed = 2600'                      MissileMinSpeed = 60'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      CanBeRemoved = true'                      ForceRemove = true'                      MissileSpellName = "GnarQMissileReturn"'                      DisableFowDetection = false'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1150'                      Radius = 90'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1150'                      Radius = 90'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1150'                      Radius = 90'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1150'                      Radius = 90'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1150'                      Radius = 90'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotLine'                      Delay = 600'                      Range = 600'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigW"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotLine'                      Delay = 600'                      Range = 600'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigW"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotLine'                      Delay = 600'                      Range = 600'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigW"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotLine'                      Delay = 600'                      Range = 600'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigW"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 473'                      Radius = 150'                      MissileSpeed = 903'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 473'                      Radius = 150'                      MissileSpeed = 903'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 473'                      Radius = 150'                      MissileSpeed = 903'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 473'                      Radius = 150'                      MissileSpeed = 903'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 475'                      Radius = 200'                      MissileSpeed = 1000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 475'                      Radius = 200'                      MissileSpeed = 1000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 475'                      Radius = 200'                      MissileSpeed = 1000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 475'                      Radius = 200'                      MissileSpeed = 1000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarBigE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 475'                      Radius = 200'                      MissileSpeed = 1000'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GnarBigE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 500'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 500'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gnar"'                      SpellName = "GnarR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 500'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasQMissile"'                      ExtraDuration = 4500'                      ToggleParticleName = "Gragas_"'                      DontCross = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasQMissile"'                      ExtraDuration = 4500'                      ToggleParticleName = "Gragas_"'                      DontCross = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasQMissile"'                      ExtraDuration = 4500'                      ToggleParticleName = "Gragas_"'                      DontCross = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasQMissile"'                      ExtraDuration = 4500'                      ToggleParticleName = "Gragas_"'                      DontCross = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasQMissile"'                      ExtraDuration = 4500'                      ToggleParticleName = "Gragas_"'                      DontCross = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasQMissile"'                      ExtraDuration = 4500'                      ToggleParticleName = "Gragas_"'                      DontCross = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 950'                      Radius = 200'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasE"'                      CanBeRemoved = true'                      ExtraRange = 300'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 950'                      Radius = 200'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasE"'                      CanBeRemoved = true'                      ExtraRange = 300'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 950'                      Radius = 200'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasE"'                      CanBeRemoved = true'                      ExtraRange = 300'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 950'                      Radius = 200'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasE"'                      CanBeRemoved = true'                      ExtraRange = 300'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 950'                      Radius = 200'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GragasE"'                      CanBeRemoved = true'                      ExtraRange = 300'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1050'                      Radius = 375'                      MissileSpeed = 1800'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "GragasRBoom"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1050'                      Radius = 375'                      MissileSpeed = 1800'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "GragasRBoom"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1050'                      Radius = 375'                      MissileSpeed = 1800'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "GragasRBoom"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1050'                      Radius = 375'                      MissileSpeed = 1800'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "GragasRBoom"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Gragas"'                      SpellName = "GragasR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1050'                      Radius = 375'                      MissileSpeed = 1800'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "GragasRBoom"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesClusterShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 50'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GravesClusterShotAttack"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesClusterShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 50'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GravesClusterShotAttack"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesClusterShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 50'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GravesClusterShotAttack"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesClusterShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 50'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GravesClusterShotAttack"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesClusterShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 50'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GravesClusterShotAttack"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesClusterShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 50'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GravesClusterShotAttack"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesClusterShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 50'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GravesClusterShotAttack"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesClusterShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 50'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "GravesClusterShotAttack"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesChargeShot"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 100'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "GravesChargeShotShot"'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesChargeShot"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 100'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "GravesChargeShotShot"'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesChargeShot"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 100'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "GravesChargeShotShot"'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesChargeShot"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 100'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "GravesChargeShotShot"'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Graves"'                      SpellName = "GravesChargeShot"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 100'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "GravesChargeShotShot"'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Heimerdinger"'                      SpellName = "Heimerdingerwm"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1500'                      Radius = 70'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "HeimerdingerWAttack2"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Heimerdinger"'                      SpellName = "Heimerdingerwm"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1500'                      Radius = 70'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "HeimerdingerWAttack2"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Heimerdinger"'                      SpellName = "Heimerdingerwm"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1500'                      Radius = 70'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "HeimerdingerWAttack2"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Heimerdinger"'                      SpellName = "Heimerdingerwm"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1500'                      Radius = 70'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "HeimerdingerWAttack2"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Heimerdinger"'                      SpellName = "Heimerdingerwm"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1500'                      Radius = 70'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "HeimerdingerWAttack2"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Heimerdinger"'                      SpellName = "HeimerdingerE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 925'                      Radius = 100'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "heimerdingerespell"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Heimerdinger"'                      SpellName = "HeimerdingerE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 925'                      Radius = 100'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "heimerdingerespell"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Heimerdinger"'                      SpellName = "HeimerdingerE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 925'                      Radius = 100'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "heimerdingerespell"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Heimerdinger"'                      SpellName = "HeimerdingerE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 925'                      Radius = 100'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "heimerdingerespell"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Heimerdinger"'                      SpellName = "HeimerdingerE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 925'                      Radius = 100'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "heimerdingerespell"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Irelia"'                      SpellName = "IreliaTranscendentBlades"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1200'                      Radius = 65'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "IreliaTranscendentBlades"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Irelia"'                      SpellName = "IreliaTranscendentBlades"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1200'                      Radius = 65'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "IreliaTranscendentBlades"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Irelia"'                      SpellName = "IreliaTranscendentBlades"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1200'                      Radius = 65'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "IreliaTranscendentBlades"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Irelia"'                      SpellName = "IreliaTranscendentBlades"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1200'                      Radius = 65'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "IreliaTranscendentBlades"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Janna"'                      SpellName = "JannaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1700'                      Radius = 150'                      MissileSpeed = 900'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "HowlingGaleSpell"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Janna"'                      SpellName = "JannaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1700'                      Radius = 150'                      MissileSpeed = 900'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "HowlingGaleSpell"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Janna"'                      SpellName = "JannaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1700'                      Radius = 150'                      MissileSpeed = 900'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "HowlingGaleSpell"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Janna"'                      SpellName = "JannaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1700'                      Radius = 150'                      MissileSpeed = 900'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "HowlingGaleSpell"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Janna"'                      SpellName = "JannaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1700'                      Radius = 150'                      MissileSpeed = 900'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "HowlingGaleSpell"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "JarvanIV"'                      SpellName = "JarvanIVDragonStrike"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 880'                      Radius = 70'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JarvanIVDragonStrike"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "JarvanIV"'                      SpellName = "JarvanIVDragonStrike"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 880'                      Radius = 70'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JarvanIVDragonStrike"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "JarvanIV"'                      SpellName = "JarvanIVDragonStrike"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 880'                      Radius = 70'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JarvanIVDragonStrike"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "JarvanIV"'                      SpellName = "JarvanIVDragonStrike"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 880'                      Radius = 70'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JarvanIVDragonStrike"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "JarvanIV"'                      SpellName = "JarvanIVDragonStrike"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 880'                      Radius = 70'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JarvanIVDragonStrike"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "JarvanIV"'                      SpellName = "JarvanIVDemacianStandard"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 860'                      Radius = 175'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JarvanIVDemacianStandard"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "JarvanIV"'                      SpellName = "JarvanIVDemacianStandard"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 860'                      Radius = 175'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JarvanIVDemacianStandard"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "JarvanIV"'                      SpellName = "JarvanIVDemacianStandard"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 860'                      Radius = 175'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JarvanIVDemacianStandard"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "JarvanIV"'                      SpellName = "JarvanIVDemacianStandard"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 860'                      Radius = 175'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JarvanIVDemacianStandard"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jayce"'                      SpellName = "jayceshockblast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JayceShockBlastMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jayce"'                      SpellName = "jayceshockblast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JayceShockBlastMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jayce"'                      SpellName = "jayceshockblast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JayceShockBlastMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jayce"'                      SpellName = "jayceshockblast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JayceShockBlastMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jayce"'                      SpellName = "jayceshockblast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JayceShockBlastMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jayce"'                      SpellName = "JayceQAccel"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 2350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JayceShockBlastWallMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jayce"'                      SpellName = "JayceQAccel"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 2350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JayceShockBlastWallMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jayce"'                      SpellName = "JayceQAccel"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 2350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JayceShockBlastWallMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jayce"'                      SpellName = "JayceQAccel"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 2350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JayceShockBlastWallMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jayce"'                      SpellName = "JayceQAccel"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 2350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "JayceShockBlastWallMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jinx"'                      SpellName = "JinxW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 600'                      Range = 1500'                      Radius = 60'                      MissileSpeed = 3300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JinxWMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jinx"'                      SpellName = "JinxW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 600'                      Range = 1500'                      Radius = 60'                      MissileSpeed = 3300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JinxWMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jinx"'                      SpellName = "JinxW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 600'                      Range = 1500'                      Radius = 60'                      MissileSpeed = 3300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JinxWMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jinx"'                      SpellName = "JinxW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 600'                      Range = 1500'                      Radius = 60'                      MissileSpeed = 3300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JinxWMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jinx"'                      SpellName = "JinxW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 600'                      Range = 1500'                      Radius = 60'                      MissileSpeed = 3300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JinxWMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jinx"'                      SpellName = "JinxRWrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 600'                      Range = 20000'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "JinxR"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jinx"'                      SpellName = "JinxRWrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 600'                      Range = 20000'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "JinxR"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jinx"'                      SpellName = "JinxRWrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 600'                      Range = 20000'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "JinxR"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jinx"'                      SpellName = "JinxRWrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 600'                      Range = 20000'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "JinxR"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Jinx"'                      SpellName = "JinxRWrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 600'                      Range = 20000'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "JinxR"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kalista"'                      SpellName = "KalistaMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 40'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "kalistamysticshotmis"'                      ExtraMissileNames = new[] { "kalistamysticshotmistrue" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kalista"'                      SpellName = "KalistaMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 40'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "kalistamysticshotmis"'                      ExtraMissileNames = new[] { "kalistamysticshotmistrue" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kalista"'                      SpellName = "KalistaMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 40'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "kalistamysticshotmis"'                      ExtraMissileNames = new[] { "kalistamysticshotmistrue" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kalista"'                      SpellName = "KalistaMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 40'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "kalistamysticshotmis"'                      ExtraMissileNames = new[] { "kalistamysticshotmistrue" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kalista"'                      SpellName = "KalistaMysticShot"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 40'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "kalistamysticshotmis"'                      ExtraMissileNames = new[] { "kalistamysticshotmistrue" }'                      CanBeRemoved = true'                      CollisionObjects =                          new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karma"'                      SpellName = "KarmaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KarmaQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karma"'                      SpellName = "KarmaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KarmaQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karma"'                      SpellName = "KarmaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KarmaQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karma"'                      SpellName = "KarmaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KarmaQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karma"'                      SpellName = "KarmaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KarmaQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karma"'                      SpellName = "KarmaQMantra"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 80'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KarmaQMissileMantra"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karma"'                      SpellName = "KarmaQMantra"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 80'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KarmaQMissileMantra"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karma"'                      SpellName = "KarmaQMantra"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 80'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KarmaQMissileMantra"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karma"'                      SpellName = "KarmaQMantra"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 80'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KarmaQMissileMantra"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karma"'                      SpellName = "KarmaQMantra"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 80'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KarmaQMissileMantra"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karthus"'                      SpellName = "KarthusLayWasteA2"'                      ExtraSpellNames =                          new[]                          {                              "karthuslaywastea3"' "karthuslaywastea1"' "karthuslaywastedeada1"' "karthuslaywastedeada2"'                              "karthuslaywastedeada3"                          }'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 625'                      Range = 875'                      Radius = 160'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karthus"'                      SpellName = "KarthusLayWasteA2"'                      ExtraSpellNames =                          new[]                          {                              "karthuslaywastea3"' "karthuslaywastea1"' "karthuslaywastedeada1"' "karthuslaywastedeada2"'                              "karthuslaywastedeada3"                          }'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 625'                      Range = 875'                      Radius = 160'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karthus"'                      SpellName = "KarthusLayWasteA2"'                      ExtraSpellNames =                          new[]                          {                              "karthuslaywastea3"' "karthuslaywastea1"' "karthuslaywastedeada1"' "karthuslaywastedeada2"'                              "karthuslaywastedeada3"                          }'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 625'                      Range = 875'                      Radius = 160'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Karthus"'                      SpellName = "KarthusLayWasteA2"'                      ExtraSpellNames =                          new[]                          {                              "karthuslaywastea3"' "karthuslaywastea1"' "karthuslaywastedeada1"' "karthuslaywastedeada2"'                              "karthuslaywastedeada3"                          }'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 625'                      Range = 875'                      Radius = 160'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kassadin"'                      SpellName = "RiftWalk"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 700'                      Radius = 270'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RiftWalk"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kassadin"'                      SpellName = "RiftWalk"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 700'                      Radius = 270'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RiftWalk"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kassadin"'                      SpellName = "RiftWalk"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 700'                      Radius = 270'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RiftWalk"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kassadin"'                      SpellName = "RiftWalk"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 700'                      Radius = 270'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RiftWalk"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kennen"'                      SpellName = "KennenShurikenHurlMissile1"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1050'                      Radius = 50'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KennenShurikenHurlMissile1"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kennen"'                      SpellName = "KennenShurikenHurlMissile1"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1050'                      Radius = 50'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KennenShurikenHurlMissile1"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kennen"'                      SpellName = "KennenShurikenHurlMissile1"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1050'                      Radius = 50'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KennenShurikenHurlMissile1"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kennen"'                      SpellName = "KennenShurikenHurlMissile1"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1050'                      Radius = 50'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KennenShurikenHurlMissile1"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kennen"'                      SpellName = "KennenShurikenHurlMissile1"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1050'                      Radius = 50'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KennenShurikenHurlMissile1"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixW"'                      ExtraSpellNames = new[] { "khazixwlong" }'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 73'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixWMissile"'                      CanBeRemoved = true'                      MultipleNumber = 3'                      MultipleAngle = 22f * (float) Math.PI / 180'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixW"'                      ExtraSpellNames = new[] { "khazixwlong" }'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 73'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixWMissile"'                      CanBeRemoved = true'                      MultipleNumber = 3'                      MultipleAngle = 22f * (float) Math.PI / 180'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixW"'                      ExtraSpellNames = new[] { "khazixwlong" }'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 73'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixWMissile"'                      CanBeRemoved = true'                      MultipleNumber = 3'                      MultipleAngle = 22f * (float) Math.PI / 180'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixW"'                      ExtraSpellNames = new[] { "khazixwlong" }'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 73'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixWMissile"'                      CanBeRemoved = true'                      MultipleNumber = 3'                      MultipleAngle = 22f * (float) Math.PI / 180'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixW"'                      ExtraSpellNames = new[] { "khazixwlong" }'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 73'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixWMissile"'                      CanBeRemoved = true'                      MultipleNumber = 3'                      MultipleAngle = 22f * (float) Math.PI / 180'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixW"'                      ExtraSpellNames = new[] { "khazixwlong" }'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 73'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixWMissile"'                      CanBeRemoved = true'                      MultipleNumber = 3'                      MultipleAngle = 22f * (float) Math.PI / 180'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixW"'                      ExtraSpellNames = new[] { "khazixwlong" }'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 73'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixWMissile"'                      CanBeRemoved = true'                      MultipleNumber = 3'                      MultipleAngle = 22f * (float) Math.PI / 180'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 600'                      Radius = 300'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 600'                      Radius = 300'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 600'                      Radius = 300'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 600'                      Radius = 300'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Khazix"'                      SpellName = "KhazixE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 600'                      Radius = 300'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KhazixE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 70'                      MissileSpeed = 1650'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawQMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 70'                      MissileSpeed = 1650'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawQMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 70'                      MissileSpeed = 1650'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawQMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 70'                      MissileSpeed = 1650'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawQMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 70'                      MissileSpeed = 1650'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawQMis"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawVoidOoze"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1360'                      Radius = 120'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawVoidOozeMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawVoidOoze"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1360'                      Radius = 120'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawVoidOozeMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawVoidOoze"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1360'                      Radius = 120'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawVoidOozeMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawVoidOoze"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1360'                      Radius = 120'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawVoidOozeMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawVoidOoze"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1360'                      Radius = 120'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawVoidOozeMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawLivingArtillery"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1200'                      Range = 1800'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawLivingArtillery"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawLivingArtillery"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1200'                      Range = 1800'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawLivingArtillery"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawLivingArtillery"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1200'                      Range = 1800'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawLivingArtillery"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Kogmaw"'                      SpellName = "KogMawLivingArtillery"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1200'                      Range = 1800'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "KogMawLivingArtillery"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSlide"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 600'                      Radius = 220'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LeblancSlide"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSlide"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 600'                      Radius = 220'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LeblancSlide"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSlide"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 600'                      Radius = 220'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LeblancSlide"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSlide"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 600'                      Radius = 220'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LeblancSlide"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSlideM"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 600'                      Radius = 220'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LeblancSlideM"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSlideM"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 600'                      Radius = 220'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LeblancSlideM"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSlideM"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 600'                      Radius = 220'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LeblancSlideM"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSlideM"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 600'                      Radius = 220'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LeblancSlideM"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSoulShackle"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeblancSoulShackle"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSoulShackle"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeblancSoulShackle"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSoulShackle"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeblancSoulShackle"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSoulShackle"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeblancSoulShackle"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSoulShackle"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeblancSoulShackle"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSoulShackleM"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeblancSoulShackleM"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSoulShackleM"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeblancSoulShackleM"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSoulShackleM"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeblancSoulShackleM"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSoulShackleM"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeblancSoulShackleM"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leblanc"'                      SpellName = "LeblancSoulShackleM"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeblancSoulShackleM"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "LeeSin"'                      SpellName = "BlindMonkQOne"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 65'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BlindMonkQOne"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "LeeSin"'                      SpellName = "BlindMonkQOne"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 65'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BlindMonkQOne"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "LeeSin"'                      SpellName = "BlindMonkQOne"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 65'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BlindMonkQOne"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "LeeSin"'                      SpellName = "BlindMonkQOne"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 65'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BlindMonkQOne"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "LeeSin"'                      SpellName = "BlindMonkQOne"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 65'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "BlindMonkQOne"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leona"'                      SpellName = "LeonaZenithBlade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 905'                      Radius = 100'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeonaZenithBladeMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leona"'                      SpellName = "LeonaZenithBlade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 905'                      Radius = 100'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeonaZenithBladeMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leona"'                      SpellName = "LeonaZenithBlade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 905'                      Radius = 100'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeonaZenithBladeMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leona"'                      SpellName = "LeonaZenithBlade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 905'                      Radius = 100'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeonaZenithBladeMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leona"'                      SpellName = "LeonaZenithBlade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 905'                      Radius = 100'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LeonaZenithBladeMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leona"'                      SpellName = "LeonaSolarFlare"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 1200'                      Radius = 300'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "LeonaSolarFlare"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leona"'                      SpellName = "LeonaSolarFlare"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 1200'                      Radius = 300'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "LeonaSolarFlare"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leona"'                      SpellName = "LeonaSolarFlare"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 1200'                      Radius = 300'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "LeonaSolarFlare"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Leona"'                      SpellName = "LeonaSolarFlare"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 1200'                      Radius = 300'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "LeonaSolarFlare"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 700'                      Radius = 75'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LissandraQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 700'                      Radius = 75'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LissandraQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 700'                      Radius = 75'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LissandraQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 700'                      Radius = 75'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LissandraQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 700'                      Radius = 75'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LissandraQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraQShards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 700'                      Radius = 90'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "lissandraqshards"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraQShards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 700'                      Radius = 90'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "lissandraqshards"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraQShards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 700'                      Radius = 90'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "lissandraqshards"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraQShards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 700'                      Radius = 90'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "lissandraqshards"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraQShards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 700'                      Radius = 90'                      MissileSpeed = 2200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "lissandraqshards"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 125'                      MissileSpeed = 850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LissandraEMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 125'                      MissileSpeed = 850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LissandraEMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 125'                      MissileSpeed = 850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LissandraEMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 125'                      MissileSpeed = 850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LissandraEMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lissandra"'                      SpellName = "LissandraE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1025'                      Radius = 125'                      MissileSpeed = 850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LissandraEMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lucian"'                      SpellName = "LucianQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 500'                      Range = 1300'                      Radius = 65'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LucianQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lucian"'                      SpellName = "LucianQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 500'                      Range = 1300'                      Radius = 65'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LucianQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lucian"'                      SpellName = "LucianQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 500'                      Range = 1300'                      Radius = 65'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LucianQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lucian"'                      SpellName = "LucianQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 500'                      Range = 1300'                      Radius = 65'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LucianQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lulu"'                      SpellName = "LuluQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuluQMissile"'                      ExtraMissileNames = new[] { "LuluQMissileTwo" }'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lulu"'                      SpellName = "LuluQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuluQMissile"'                      ExtraMissileNames = new[] { "LuluQMissileTwo" }'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lulu"'                      SpellName = "LuluQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuluQMissile"'                      ExtraMissileNames = new[] { "LuluQMissileTwo" }'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lulu"'                      SpellName = "LuluQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuluQMissile"'                      ExtraMissileNames = new[] { "LuluQMissileTwo" }'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lulu"'                      SpellName = "LuluQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 1450'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuluQMissile"'                      ExtraMissileNames = new[] { "LuluQMissileTwo" }'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightBinding"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LuxLightBindingMis"'                      //CanBeRemoved = true'                      //CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall' }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightBinding"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LuxLightBindingMis"'                      //CanBeRemoved = true'                      //CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall' }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightBinding"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LuxLightBindingMis"'                      //CanBeRemoved = true'                      //CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall' }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightBinding"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LuxLightBindingMis"'                      //CanBeRemoved = true'                      //CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall' }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightBinding"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 70'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "LuxLightBindingMis"'                      //CanBeRemoved = true'                      //CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall' }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightStrikeKugel"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuxLightStrikeKugel"'                      ExtraDuration = 5500'                      ToggleParticleName = "LuxLightstrike_tar"'                      DontCross = true'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightStrikeKugel"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuxLightStrikeKugel"'                      ExtraDuration = 5500'                      ToggleParticleName = "LuxLightstrike_tar"'                      DontCross = true'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightStrikeKugel"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuxLightStrikeKugel"'                      ExtraDuration = 5500'                      ToggleParticleName = "LuxLightstrike_tar"'                      DontCross = true'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightStrikeKugel"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuxLightStrikeKugel"'                      ExtraDuration = 5500'                      ToggleParticleName = "LuxLightstrike_tar"'                      DontCross = true'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightStrikeKugel"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuxLightStrikeKugel"'                      ExtraDuration = 5500'                      ToggleParticleName = "LuxLightstrike_tar"'                      DontCross = true'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxLightStrikeKugel"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 275'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "LuxLightStrikeKugel"'                      ExtraDuration = 5500'                      ToggleParticleName = "LuxLightstrike_tar"'                      DontCross = true'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxMaliceCannon"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotLine'                      Delay = 1000'                      Range = 3500'                      Radius = 190'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "LuxMaliceCannon"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxMaliceCannon"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotLine'                      Delay = 1000'                      Range = 3500'                      Radius = 190'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "LuxMaliceCannon"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxMaliceCannon"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotLine'                      Delay = 1000'                      Range = 3500'                      Radius = 190'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "LuxMaliceCannon"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Lux"'                      SpellName = "LuxMaliceCannon"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotLine'                      Delay = 1000'                      Range = 3500'                      Radius = 190'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "LuxMaliceCannon"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Malphite"'                      SpellName = "UFSlash"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 1000'                      Radius = 270'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "UFSlash"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Malphite"'                      SpellName = "UFSlash"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 1000'                      Radius = 270'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "UFSlash"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Malphite"'                      SpellName = "UFSlash"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 1000'                      Radius = 270'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "UFSlash"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Malphite"'                      SpellName = "UFSlash"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 1000'                      Radius = 270'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "UFSlash"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Malzahar"'                      SpellName = "AlZaharCalloftheVoid"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 1000'                      Range = 900'                      Radius = 85'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      DontCross = true'                      MissileSpellName = "AlZaharCalloftheVoid"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Malzahar"'                      SpellName = "AlZaharCalloftheVoid"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 1000'                      Range = 900'                      Radius = 85'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      DontCross = true'                      MissileSpellName = "AlZaharCalloftheVoid"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Malzahar"'                      SpellName = "AlZaharCalloftheVoid"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 1000'                      Range = 900'                      Radius = 85'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      DontCross = true'                      MissileSpellName = "AlZaharCalloftheVoid"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Malzahar"'                      SpellName = "AlZaharCalloftheVoid"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 1000'                      Range = 900'                      Radius = 85'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      DontCross = true'                      MissileSpellName = "AlZaharCalloftheVoid"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Morgana"'                      SpellName = "DarkBindingMissile"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 80'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DarkBindingMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Morgana"'                      SpellName = "DarkBindingMissile"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 80'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DarkBindingMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Morgana"'                      SpellName = "DarkBindingMissile"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 80'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DarkBindingMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Morgana"'                      SpellName = "DarkBindingMissile"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 80'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DarkBindingMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Morgana"'                      SpellName = "DarkBindingMissile"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1300'                      Radius = 80'                      MissileSpeed = 1200'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "DarkBindingMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nami"'                      SpellName = "NamiQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 1625'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "namiqmissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nami"'                      SpellName = "NamiQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 1625'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "namiqmissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nami"'                      SpellName = "NamiQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 1625'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "namiqmissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nami"'                      SpellName = "NamiQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 1625'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "namiqmissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nami"'                      SpellName = "NamiR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 2750'                      Radius = 260'                      MissileSpeed = 850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "NamiRMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nami"'                      SpellName = "NamiR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 2750'                      Radius = 260'                      MissileSpeed = 850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "NamiRMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nami"'                      SpellName = "NamiR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 2750'                      Radius = 260'                      MissileSpeed = 850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "NamiRMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nami"'                      SpellName = "NamiR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 2750'                      Radius = 260'                      MissileSpeed = 850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "NamiRMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nami"'                      SpellName = "NamiR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 2750'                      Radius = 260'                      MissileSpeed = 850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "NamiRMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nautilus"'                      SpellName = "NautilusAnchorDrag"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 90'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "NautilusAnchorDragMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      //walls?                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nautilus"'                      SpellName = "NautilusAnchorDrag"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 90'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "NautilusAnchorDragMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      //walls?                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nautilus"'                      SpellName = "NautilusAnchorDrag"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 90'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "NautilusAnchorDragMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      //walls?                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nautilus"'                      SpellName = "NautilusAnchorDrag"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 90'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "NautilusAnchorDragMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      //walls?                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nautilus"'                      SpellName = "NautilusAnchorDrag"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 90'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "NautilusAnchorDragMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                      //walls?                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nidalee"'                      SpellName = "JavelinToss"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1500'                      Radius = 40'                      MissileSpeed = 1300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JavelinToss"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nidalee"'                      SpellName = "JavelinToss"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1500'                      Radius = 40'                      MissileSpeed = 1300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JavelinToss"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nidalee"'                      SpellName = "JavelinToss"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1500'                      Radius = 40'                      MissileSpeed = 1300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JavelinToss"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nidalee"'                      SpellName = "JavelinToss"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1500'                      Radius = 40'                      MissileSpeed = 1300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JavelinToss"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Nidalee"'                      SpellName = "JavelinToss"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1500'                      Radius = 40'                      MissileSpeed = 1300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "JavelinToss"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Olaf"'                      SpellName = "OlafAxeThrowCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      ExtraRange = 150'                      Radius = 105'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "olafaxethrow"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Olaf"'                      SpellName = "OlafAxeThrowCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      ExtraRange = 150'                      Radius = 105'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "olafaxethrow"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Olaf"'                      SpellName = "OlafAxeThrowCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      ExtraRange = 150'                      Radius = 105'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "olafaxethrow"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Olaf"'                      SpellName = "OlafAxeThrowCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      ExtraRange = 150'                      Radius = 105'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "olafaxethrow"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Olaf"'                      SpellName = "OlafAxeThrowCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      ExtraRange = 150'                      Radius = 105'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "olafaxethrow"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Olaf"'                      SpellName = "OlafAxeThrowCast"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      ExtraRange = 150'                      Radius = 105'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "olafaxethrow"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannasQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1500'                      Radius = 80'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "orianaizuna"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannasQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1500'                      Radius = 80'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "orianaizuna"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannasQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1500'                      Radius = 80'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "orianaizuna"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannasQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1500'                      Radius = 80'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "orianaizuna"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannaQend"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 1500'                      Radius = 90'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannaQend"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 1500'                      Radius = 90'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannaQend"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 1500'                      Radius = 90'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannaQend"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 1500'                      Radius = 90'                      MissileSpeed = 1200'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OrianaDissonanceCommand"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 255'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "OrianaDissonanceCommand"'                      FromObject = "yomu_ring_"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OrianaDissonanceCommand"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 255'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "OrianaDissonanceCommand"'                      FromObject = "yomu_ring_"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OrianaDissonanceCommand"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 0'                      Radius = 255'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "OrianaDissonanceCommand"'                      FromObject = "yomu_ring_"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannasE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1500'                      Radius = 85'                      MissileSpeed = 1850'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "orianaredact"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannasE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1500'                      Radius = 85'                      MissileSpeed = 1850'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "orianaredact"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannasE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1500'                      Radius = 85'                      MissileSpeed = 1850'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "orianaredact"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OriannasE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1500'                      Radius = 85'                      MissileSpeed = 1850'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "orianaredact"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OrianaDetonateCommand"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 0'                      Radius = 410'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "OrianaDetonateCommand"'                      FromObject = "yomu_ring_"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OrianaDetonateCommand"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 0'                      Radius = 410'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "OrianaDetonateCommand"'                      FromObject = "yomu_ring_"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Orianna"'                      SpellName = "OrianaDetonateCommand"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 0'                      Radius = 410'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "OrianaDetonateCommand"'                      FromObject = "yomu_ring_"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Quinn"'                      SpellName = "QuinnQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 80'                      MissileSpeed = 1550'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "QuinnQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Quinn"'                      SpellName = "QuinnQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 80'                      MissileSpeed = 1550'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "QuinnQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Quinn"'                      SpellName = "QuinnQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 80'                      MissileSpeed = 1550'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "QuinnQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Quinn"'                      SpellName = "QuinnQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 80'                      MissileSpeed = 1550'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "QuinnQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Quinn"'                      SpellName = "QuinnQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1050'                      Radius = 80'                      MissileSpeed = 1550'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "QuinnQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rengar"'                      SpellName = "RengarE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 70'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "RengarEFinal"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rengar"'                      SpellName = "RengarE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 70'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "RengarEFinal"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rengar"'                      SpellName = "RengarE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 70'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "RengarEFinal"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rengar"'                      SpellName = "RengarE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 70'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "RengarEFinal"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rengar"'                      SpellName = "RengarE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 70'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "RengarEFinal"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Riven"'                      SpellName = "rivenizunablade"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 125'                      MissileSpeed = 2200'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                      MissileSpellName = "RivenLightsaberMissile"'                      ExtraMissileNames = new[] { "RivenLightsaberMissileSide" }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Riven"'                      SpellName = "rivenizunablade"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 125'                      MissileSpeed = 2200'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                      MissileSpellName = "RivenLightsaberMissile"'                      ExtraMissileNames = new[] { "RivenLightsaberMissileSide" }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Riven"'                      SpellName = "rivenizunablade"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 125'                      MissileSpeed = 2200'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                      MissileSpellName = "RivenLightsaberMissile"'                      ExtraMissileNames = new[] { "RivenLightsaberMissileSide" }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Riven"'                      SpellName = "rivenizunablade"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 125'                      MissileSpeed = 2200'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                      MissileSpellName = "RivenLightsaberMissile"'                      ExtraMissileNames = new[] { "RivenLightsaberMissileSide" }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Riven"'                      SpellName = "rivenizunablade"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 125'                      MissileSpeed = 2200'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                      MissileSpellName = "RivenLightsaberMissile"'                      ExtraMissileNames = new[] { "RivenLightsaberMissileSide" }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Riven"'                      SpellName = "rivenizunablade"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 125'                      MissileSpeed = 2200'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                      MissileSpellName = "RivenLightsaberMissile"'                      ExtraMissileNames = new[] { "RivenLightsaberMissileSide" }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Riven"'                      SpellName = "rivenizunablade"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 125'                      MissileSpeed = 2200'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                      MissileSpellName = "RivenLightsaberMissile"'                      ExtraMissileNames = new[] { "RivenLightsaberMissileSide" }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Riven"'                      SpellName = "rivenizunablade"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 125'                      MissileSpeed = 2200'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 5'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 15 * (float) Math.PI / 180'                      MissileSpellName = "RivenLightsaberMissile"'                      ExtraMissileNames = new[] { "RivenLightsaberMissileSide" }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rumble"'                      SpellName = "RumbleGrenade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RumbleGrenade"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rumble"'                      SpellName = "RumbleGrenade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RumbleGrenade"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rumble"'                      SpellName = "RumbleGrenade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RumbleGrenade"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rumble"'                      SpellName = "RumbleGrenade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RumbleGrenade"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rumble"'                      SpellName = "RumbleGrenade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RumbleGrenade"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rumble"'                      SpellName = "RumbleCarpetBombM"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 400'                      MissileDelayed = true'                      Range = 1200'                      Radius = 200'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = false'                      MissileSpellName = "RumbleCarpetBombMissile"'                      CanBeRemoved = false'                      CollisionObjects = new CollisionObjectTypes[] { }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rumble"'                      SpellName = "RumbleCarpetBombM"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 400'                      MissileDelayed = true'                      Range = 1200'                      Radius = 200'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = false'                      MissileSpellName = "RumbleCarpetBombMissile"'                      CanBeRemoved = false'                      CollisionObjects = new CollisionObjectTypes[] { }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rumble"'                      SpellName = "RumbleCarpetBombM"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 400'                      MissileDelayed = true'                      Range = 1200'                      Radius = 200'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = false'                      MissileSpellName = "RumbleCarpetBombMissile"'                      CanBeRemoved = false'                      CollisionObjects = new CollisionObjectTypes[] { }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rumble"'                      SpellName = "RumbleCarpetBombM"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 400'                      MissileDelayed = true'                      Range = 1200'                      Radius = 200'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = false'                      MissileSpellName = "RumbleCarpetBombMissile"'                      CanBeRemoved = false'                      CollisionObjects = new CollisionObjectTypes[] { }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Rumble"'                      SpellName = "RumbleCarpetBombM"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 400'                      MissileDelayed = true'                      Range = 1200'                      Radius = 200'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 4'                      IsDangerous = false'                      MissileSpellName = "RumbleCarpetBombMissile"'                      CanBeRemoved = false'                      CollisionObjects = new CollisionObjectTypes[] { }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sejuani"'                      SpellName = "SejuaniArcticAssault"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 900'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = ""'                      ExtraRange = 200'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sejuani"'                      SpellName = "SejuaniArcticAssault"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 900'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = ""'                      ExtraRange = 200'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sejuani"'                      SpellName = "SejuaniArcticAssault"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 900'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = ""'                      ExtraRange = 200'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sejuani"'                      SpellName = "SejuaniArcticAssault"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 900'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = ""'                      ExtraRange = 200'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sejuani"'                      SpellName = "SejuaniArcticAssault"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 900'                      Radius = 70'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = ""'                      ExtraRange = 200'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sejuani"'                      SpellName = "SejuaniGlacialPrisonStart"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 110'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "sejuaniglacialprison"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sejuani"'                      SpellName = "SejuaniGlacialPrisonStart"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 110'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "sejuaniglacialprison"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sejuani"'                      SpellName = "SejuaniGlacialPrisonStart"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 110'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "sejuaniglacialprison"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sejuani"'                      SpellName = "SejuaniGlacialPrisonStart"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 110'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "sejuaniglacialprison"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sejuani"'                      SpellName = "SejuaniGlacialPrisonStart"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 110'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "sejuaniglacialprison"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sion"'                      SpellName = "SionE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SionEMissile"'                      CollisionObjects =                          new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sion"'                      SpellName = "SionE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SionEMissile"'                      CollisionObjects =                          new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sion"'                      SpellName = "SionE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SionEMissile"'                      CollisionObjects =                          new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sion"'                      SpellName = "SionE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SionEMissile"'                      CollisionObjects =                          new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sion"'                      SpellName = "SionE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1800'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SionEMissile"'                      CollisionObjects =                          new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.Minion' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Soraka"'                      SpellName = "SorakaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 950'                      Radius = 300'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Soraka"'                      SpellName = "SorakaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 950'                      Radius = 300'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Soraka"'                      SpellName = "SorakaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 950'                      Radius = 300'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Soraka"'                      SpellName = "SorakaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 950'                      Radius = 300'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Soraka"'                      SpellName = "SorakaQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 950'                      Radius = 300'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shen"'                      SpellName = "ShenShadowDash"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 650'                      Radius = 50'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShenShadowDash"'                      ExtraRange = 200'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shen"'                      SpellName = "ShenShadowDash"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 650'                      Radius = 50'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShenShadowDash"'                      ExtraRange = 200'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shen"'                      SpellName = "ShenShadowDash"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 650'                      Radius = 50'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShenShadowDash"'                      ExtraRange = 200'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shen"'                      SpellName = "ShenShadowDash"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 650'                      Radius = 50'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShenShadowDash"'                      ExtraRange = 200'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shen"'                      SpellName = "ShenShadowDash"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 650'                      Radius = 50'                      MissileSpeed = 1600'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShenShadowDash"'                      ExtraRange = 200'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaFireball"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ShyvanaFireballMissile"'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaFireball"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ShyvanaFireballMissile"'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaFireball"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ShyvanaFireballMissile"'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaFireball"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ShyvanaFireballMissile"'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaFireball"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 950'                      Radius = 60'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ShyvanaFireballMissile"'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaTransformCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 150'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShyvanaTransformCast"'                      ExtraRange = 200'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaTransformCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 150'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShyvanaTransformCast"'                      ExtraRange = 200'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaTransformCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 150'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShyvanaTransformCast"'                      ExtraRange = 200'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaTransformCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 150'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShyvanaTransformCast"'                      ExtraRange = 200'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaTransformCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 150'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShyvanaTransformCast"'                      ExtraRange = 200'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Shyvana"'                      SpellName = "ShyvanaTransformCast"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 150'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ShyvanaTransformCast"'                      ExtraRange = 200'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sivir"'                      SpellName = "SivirQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1250'                      Radius = 100'                      MissileSpeed = 1350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SivirQMissileReturn"'                      DisableFowDetection = false'                      MissileFollowsUnit = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sivir"'                      SpellName = "SivirQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1250'                      Radius = 100'                      MissileSpeed = 1350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SivirQMissileReturn"'                      DisableFowDetection = false'                      MissileFollowsUnit = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sivir"'                      SpellName = "SivirQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1250'                      Radius = 100'                      MissileSpeed = 1350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SivirQMissileReturn"'                      DisableFowDetection = false'                      MissileFollowsUnit = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sivir"'                      SpellName = "SivirQReturn"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 1250'                      Radius = 100'                      MissileSpeed = 1350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SivirQMissileReturn"'                      DisableFowDetection = false'                      MissileFollowsUnit = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sivir"'                      SpellName = "SivirQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1250'                      Radius = 90'                      MissileSpeed = 1350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SivirQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sivir"'                      SpellName = "SivirQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1250'                      Radius = 90'                      MissileSpeed = 1350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SivirQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sivir"'                      SpellName = "SivirQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1250'                      Radius = 90'                      MissileSpeed = 1350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SivirQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sivir"'                      SpellName = "SivirQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1250'                      Radius = 90'                      MissileSpeed = 1350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SivirQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sivir"'                      SpellName = "SivirQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1250'                      Radius = 90'                      MissileSpeed = 1350'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SivirQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Skarner"'                      SpellName = "SkarnerFracture"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 70'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SkarnerFractureMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Skarner"'                      SpellName = "SkarnerFracture"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 70'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SkarnerFractureMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Skarner"'                      SpellName = "SkarnerFracture"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 70'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SkarnerFractureMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Skarner"'                      SpellName = "SkarnerFracture"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 70'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SkarnerFractureMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Skarner"'                      SpellName = "SkarnerFracture"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 70'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SkarnerFractureMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sona"'                      SpellName = "SonaR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 140'                      MissileSpeed = 2400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "SonaR"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sona"'                      SpellName = "SonaR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 140'                      MissileSpeed = 2400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "SonaR"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sona"'                      SpellName = "SonaR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 140'                      MissileSpeed = 2400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "SonaR"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sona"'                      SpellName = "SonaR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 140'                      MissileSpeed = 2400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "SonaR"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Sona"'                      SpellName = "SonaR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 140'                      MissileSpeed = 2400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 5'                      IsDangerous = true'                      MissileSpellName = "SonaR"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Swain"'                      SpellName = "SwainShadowGrasp"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1100'                      Range = 900'                      Radius = 180'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SwainShadowGrasp"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Swain"'                      SpellName = "SwainShadowGrasp"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1100'                      Range = 900'                      Radius = 180'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SwainShadowGrasp"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Swain"'                      SpellName = "SwainShadowGrasp"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1100'                      Range = 900'                      Radius = 180'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SwainShadowGrasp"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Swain"'                      SpellName = "SwainShadowGrasp"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1100'                      Range = 900'                      Radius = 180'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "SwainShadowGrasp"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "SyndraQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 800'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SyndraQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "SyndraQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 800'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SyndraQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "SyndraQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 800'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SyndraQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "SyndraQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 800'                      Radius = 150'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SyndraQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "syndrawcast"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 950'                      Radius = 210'                      MissileSpeed = 1450'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "syndrawcast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "syndrawcast"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 950'                      Radius = 210'                      MissileSpeed = 1450'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "syndrawcast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "syndrawcast"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 950'                      Radius = 210'                      MissileSpeed = 1450'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "syndrawcast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "syndrawcast"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 950'                      Radius = 210'                      MissileSpeed = 1450'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "syndrawcast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "syndrawcast"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 950'                      Radius = 210'                      MissileSpeed = 1450'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "syndrawcast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "syndrae5"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 300'                      Range = 950'                      Radius = 90'                      MissileSpeed = 1601'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "syndrae5"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "syndrae5"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 300'                      Range = 950'                      Radius = 90'                      MissileSpeed = 1601'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "syndrae5"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "syndrae5"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 300'                      Range = 950'                      Radius = 90'                      MissileSpeed = 1601'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "syndrae5"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "syndrae5"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 300'                      Range = 950'                      Radius = 90'                      MissileSpeed = 1601'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "syndrae5"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "syndrae5"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 300'                      Range = 950'                      Radius = 90'                      MissileSpeed = 1601'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "syndrae5"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "SyndraE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 300'                      Range = 950'                      Radius = 90'                      MissileSpeed = 1601'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      DisableFowDetection = true'                      MissileSpellName = "SyndraE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "SyndraE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 300'                      Range = 950'                      Radius = 90'                      MissileSpeed = 1601'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      DisableFowDetection = true'                      MissileSpellName = "SyndraE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "SyndraE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 300'                      Range = 950'                      Radius = 90'                      MissileSpeed = 1601'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      DisableFowDetection = true'                      MissileSpellName = "SyndraE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "SyndraE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 300'                      Range = 950'                      Radius = 90'                      MissileSpeed = 1601'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      DisableFowDetection = true'                      MissileSpellName = "SyndraE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Syndra"'                      SpellName = "SyndraE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 300'                      Range = 950'                      Radius = 90'                      MissileSpeed = 1601'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      DisableFowDetection = true'                      MissileSpellName = "SyndraE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRake"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 2300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissileone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRake"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 2300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissileone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRake"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 2300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissileone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRake"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 2300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissileone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRake"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 2300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissileone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRake"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 2300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissileone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRake"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 2300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissileone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRake"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 2300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissileone"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRakeReturn"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissiletwo"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRakeReturn"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissiletwo"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRakeReturn"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissiletwo"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRakeReturn"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissiletwo"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRakeReturn"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissiletwo"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRakeReturn"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissiletwo"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRakeReturn"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissiletwo"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Talon"'                      SpellName = "TalonRakeReturn"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 800'                      Radius = 80'                      MissileSpeed = 1850'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MultipleNumber = 3'                      MultipleAngle = 20 * (float) Math.PI / 180'                      MissileSpellName = "talonrakemissiletwo"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Thresh"'                      SpellName = "ThreshQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1100'                      Radius = 70'                      MissileSpeed = 1900'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ThreshQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Thresh"'                      SpellName = "ThreshQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1100'                      Radius = 70'                      MissileSpeed = 1900'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ThreshQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Thresh"'                      SpellName = "ThreshQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1100'                      Radius = 70'                      MissileSpeed = 1900'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ThreshQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Thresh"'                      SpellName = "ThreshQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1100'                      Radius = 70'                      MissileSpeed = 1900'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ThreshQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Thresh"'                      SpellName = "ThreshQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1100'                      Radius = 70'                      MissileSpeed = 1900'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ThreshQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Thresh"'                      SpellName = "ThreshEFlay"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1075'                      Radius = 110'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      Centered = true'                      MissileSpellName = "ThreshEMissile1"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Thresh"'                      SpellName = "ThreshEFlay"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1075'                      Radius = 110'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      Centered = true'                      MissileSpellName = "ThreshEMissile1"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Thresh"'                      SpellName = "ThreshEFlay"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1075'                      Radius = 110'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      Centered = true'                      MissileSpellName = "ThreshEMissile1"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Thresh"'                      SpellName = "ThreshEFlay"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1075'                      Radius = 110'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      Centered = true'                      MissileSpellName = "ThreshEMissile1"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Thresh"'                      SpellName = "ThreshEFlay"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1075'                      Radius = 110'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      Centered = true'                      MissileSpellName = "ThreshEMissile1"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Tristana"'                      SpellName = "RocketJump"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 900'                      Radius = 270'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RocketJump"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Tristana"'                      SpellName = "RocketJump"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 900'                      Radius = 270'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RocketJump"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Tristana"'                      SpellName = "RocketJump"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 900'                      Radius = 270'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RocketJump"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Tristana"'                      SpellName = "RocketJump"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 900'                      Radius = 270'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RocketJump"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Tristana"'                      SpellName = "RocketJump"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 900'                      Radius = 270'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "RocketJump"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Tryndamere"'                      SpellName = "slashCast"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 660'                      Radius = 93'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "slashCast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Tryndamere"'                      SpellName = "slashCast"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 660'                      Radius = 93'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "slashCast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Tryndamere"'                      SpellName = "slashCast"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 660'                      Radius = 93'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "slashCast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Tryndamere"'                      SpellName = "slashCast"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 0'                      Range = 660'                      Radius = 93'                      MissileSpeed = 1300'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "slashCast"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "TwistedFate"'                      SpellName = "WildCards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1450'                      Radius = 40'                      MissileSpeed = 1000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SealFateMissile"'                      MultipleNumber = 3'                      MultipleAngle = 28 * (float) Math.PI / 180'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "TwistedFate"'                      SpellName = "WildCards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1450'                      Radius = 40'                      MissileSpeed = 1000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SealFateMissile"'                      MultipleNumber = 3'                      MultipleAngle = 28 * (float) Math.PI / 180'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "TwistedFate"'                      SpellName = "WildCards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1450'                      Radius = 40'                      MissileSpeed = 1000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SealFateMissile"'                      MultipleNumber = 3'                      MultipleAngle = 28 * (float) Math.PI / 180'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "TwistedFate"'                      SpellName = "WildCards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1450'                      Radius = 40'                      MissileSpeed = 1000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SealFateMissile"'                      MultipleNumber = 3'                      MultipleAngle = 28 * (float) Math.PI / 180'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "TwistedFate"'                      SpellName = "WildCards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1450'                      Radius = 40'                      MissileSpeed = 1000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SealFateMissile"'                      MultipleNumber = 3'                      MultipleAngle = 28 * (float) Math.PI / 180'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "TwistedFate"'                      SpellName = "WildCards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1450'                      Radius = 40'                      MissileSpeed = 1000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SealFateMissile"'                      MultipleNumber = 3'                      MultipleAngle = 28 * (float) Math.PI / 180'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "TwistedFate"'                      SpellName = "WildCards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1450'                      Radius = 40'                      MissileSpeed = 1000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SealFateMissile"'                      MultipleNumber = 3'                      MultipleAngle = 28 * (float) Math.PI / 180'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "TwistedFate"'                      SpellName = "WildCards"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1450'                      Radius = 40'                      MissileSpeed = 1000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "SealFateMissile"'                      MultipleNumber = 3'                      MultipleAngle = 28 * (float) Math.PI / 180'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Twitch"'                      SpellName = "TwitchVenomCask"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 900'                      Radius = 275'                      MissileSpeed = 1400'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "TwitchVenomCaskMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Twitch"'                      SpellName = "TwitchVenomCask"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 900'                      Radius = 275'                      MissileSpeed = 1400'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "TwitchVenomCaskMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Twitch"'                      SpellName = "TwitchVenomCask"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 900'                      Radius = 275'                      MissileSpeed = 1400'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "TwitchVenomCaskMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Twitch"'                      SpellName = "TwitchVenomCask"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 900'                      Radius = 275'                      MissileSpeed = 1400'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "TwitchVenomCaskMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Twitch"'                      SpellName = "TwitchVenomCask"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 900'                      Radius = 275'                      MissileSpeed = 1400'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "TwitchVenomCaskMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Urgot"'                      SpellName = "UrgotHeatseekingLineMissile"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1000'                      Radius = 60'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "UrgotHeatseekingLineMissile"'                      CanBeRemoved = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Urgot"'                      SpellName = "UrgotHeatseekingLineMissile"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1000'                      Radius = 60'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "UrgotHeatseekingLineMissile"'                      CanBeRemoved = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Urgot"'                      SpellName = "UrgotHeatseekingLineMissile"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1000'                      Radius = 60'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "UrgotHeatseekingLineMissile"'                      CanBeRemoved = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Urgot"'                      SpellName = "UrgotHeatseekingLineMissile"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1000'                      Radius = 60'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "UrgotHeatseekingLineMissile"'                      CanBeRemoved = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Urgot"'                      SpellName = "UrgotHeatseekingLineMissile"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 125'                      Range = 1000'                      Radius = 60'                      MissileSpeed = 1600'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "UrgotHeatseekingLineMissile"'                      CanBeRemoved = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Urgot"'                      SpellName = "UrgotPlasmaGrenade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 210'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "UrgotPlasmaGrenadeBoom"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Urgot"'                      SpellName = "UrgotPlasmaGrenade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 210'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "UrgotPlasmaGrenadeBoom"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Urgot"'                      SpellName = "UrgotPlasmaGrenade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 210'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "UrgotPlasmaGrenadeBoom"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Urgot"'                      SpellName = "UrgotPlasmaGrenade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 210'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "UrgotPlasmaGrenadeBoom"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Urgot"'                      SpellName = "UrgotPlasmaGrenade"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1100'                      Radius = 210'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "UrgotPlasmaGrenadeBoom"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusQMissilee"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1800'                      Radius = 70'                      MissileSpeed = 1900'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VarusQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusQMissilee"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1800'                      Radius = 70'                      MissileSpeed = 1900'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VarusQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusQMissilee"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1800'                      Radius = 70'                      MissileSpeed = 1900'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VarusQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusQMissilee"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1800'                      Radius = 70'                      MissileSpeed = 1900'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VarusQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusQMissilee"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1800'                      Radius = 70'                      MissileSpeed = 1900'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VarusQMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 925'                      Radius = 235'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VarusE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 925'                      Radius = 235'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VarusE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 925'                      Radius = 235'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VarusE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 925'                      Radius = 235'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VarusE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1000'                      Range = 925'                      Radius = 235'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VarusE"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 100'                      MissileSpeed = 1950'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "VarusRMissile"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 100'                      MissileSpeed = 1950'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "VarusRMissile"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 100'                      MissileSpeed = 1950'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "VarusRMissile"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 100'                      MissileSpeed = 1950'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "VarusRMissile"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Varus"'                      SpellName = "VarusR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 100'                      MissileSpeed = 1950'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "VarusRMissile"'                      CanBeRemoved = true'                      CollisionObjects = new[] { CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Veigar"'                      SpellName = "VeigarDarkMatter"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1350'                      Range = 900'                      Radius = 225'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Veigar"'                      SpellName = "VeigarDarkMatter"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1350'                      Range = 900'                      Radius = 225'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Veigar"'                      SpellName = "VeigarDarkMatter"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1350'                      Range = 900'                      Radius = 225'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Veigar"'                      SpellName = "VeigarDarkMatter"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 1350'                      Range = 900'                      Radius = 225'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Veigar"'                      SpellName = "VeigarEventHorizon"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotRing'                      Delay = 250'                      Range = 600'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 3'                      IsDangerous = true'                      DontAddExtraDuration = true'                      RingRadius = 350'                      ExtraDuration = 3000'                      DontCross = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Veigar"'                      SpellName = "VeigarEventHorizon"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotRing'                      Delay = 250'                      Range = 600'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 3'                      IsDangerous = true'                      DontAddExtraDuration = true'                      RingRadius = 350'                      ExtraDuration = 3000'                      DontCross = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Veigar"'                      SpellName = "VeigarEventHorizon"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotRing'                      Delay = 250'                      Range = 600'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 3'                      IsDangerous = true'                      DontAddExtraDuration = true'                      RingRadius = 350'                      ExtraDuration = 3000'                      DontCross = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Veigar"'                      SpellName = "VeigarEventHorizon"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotRing'                      Delay = 250'                      Range = 600'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 3'                      IsDangerous = true'                      DontAddExtraDuration = true'                      RingRadius = 350'                      ExtraDuration = 3000'                      DontCross = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Veigar"'                      SpellName = "VeigarEventHorizon"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotRing'                      Delay = 250'                      Range = 600'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 3'                      IsDangerous = true'                      DontAddExtraDuration = true'                      RingRadius = 350'                      ExtraDuration = 3000'                      DontCross = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Veigar"'                      SpellName = "VeigarEventHorizon"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotRing'                      Delay = 250'                      Range = 600'                      Radius = 80'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 3'                      IsDangerous = true'                      DontAddExtraDuration = true'                      RingRadius = 350'                      ExtraDuration = 3000'                      DontCross = true'                      MissileSpellName = ""'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 50'                      MissileSpeed = 1300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 50'                      MissileSpeed = 1300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 50'                      MissileSpeed = 1300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 50'                      MissileSpeed = 1300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1100'                      Radius = 50'                      MissileSpeed = 1300'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozQMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozQSplit"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 900'                      Radius = 55'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozQMissileSplit"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozQSplit"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 900'                      Radius = 55'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozQMissileSplit"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozQSplit"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 900'                      Radius = 55'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozQMissileSplit"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozQSplit"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 900'                      Radius = 55'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozQMissileSplit"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozQSplit"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 900'                      Radius = 55'                      MissileSpeed = 2100'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozQMissileSplit"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 88'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozWMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 88'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozWMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 88'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozWMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 88'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozWMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1200'                      Radius = 88'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozWMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 800'                      Radius = 225'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozEMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 800'                      Radius = 225'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozEMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 800'                      Radius = 225'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozEMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 800'                      Radius = 225'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozEMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Velkoz"'                      SpellName = "VelkozE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 800'                      Radius = 225'                      MissileSpeed = 1500'                      FixedRange = false'                      AddHitbox = false'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "VelkozEMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Vi"'                      SpellName = "Vi-q"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 90'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ViQMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Vi"'                      SpellName = "Vi-q"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 90'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ViQMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Vi"'                      SpellName = "Vi-q"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 90'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ViQMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Vi"'                      SpellName = "Vi-q"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 90'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ViQMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Vi"'                      SpellName = "Vi-q"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1000'                      Radius = 90'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ViQMissile"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Viktor"'                      SpellName = "Laser"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1500'                      Radius = 80'                      MissileSpeed = 780'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ViktorDeathRayFixMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Viktor"'                      SpellName = "Laser"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1500'                      Radius = 80'                      MissileSpeed = 780'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ViktorDeathRayFixMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Viktor"'                      SpellName = "Laser"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1500'                      Radius = 80'                      MissileSpeed = 780'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ViktorDeathRayFixMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Viktor"'                      SpellName = "Laser"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1500'                      Radius = 80'                      MissileSpeed = 780'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ViktorDeathRayFixMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Viktor"'                      SpellName = "Laser"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1500'                      Radius = 80'                      MissileSpeed = 780'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ViktorDeathRayFixMissile"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "xeratharcanopulse2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 600'                      Range = 1600'                      Radius = 100'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "xeratharcanopulse2"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "xeratharcanopulse2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 600'                      Range = 1600'                      Radius = 100'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "xeratharcanopulse2"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "xeratharcanopulse2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 600'                      Range = 1600'                      Radius = 100'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "xeratharcanopulse2"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "xeratharcanopulse2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 600'                      Range = 1600'                      Radius = 100'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "xeratharcanopulse2"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "XerathArcaneBarrage2"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 1000'                      Radius = 200'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "XerathArcaneBarrage2"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "XerathArcaneBarrage2"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 1000'                      Radius = 200'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "XerathArcaneBarrage2"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "XerathArcaneBarrage2"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 1000'                      Radius = 200'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "XerathArcaneBarrage2"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "XerathArcaneBarrage2"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 1000'                      Radius = 200'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "XerathArcaneBarrage2"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "XerathMageSpear"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1150'                      Radius = 60'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "XerathMageSpearMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "XerathMageSpear"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1150'                      Radius = 60'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "XerathMageSpearMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "XerathMageSpear"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1150'                      Radius = 60'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "XerathMageSpearMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "XerathMageSpear"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1150'                      Radius = 60'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "XerathMageSpearMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "XerathMageSpear"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 200'                      Range = 1150'                      Radius = 60'                      MissileSpeed = 1400'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "XerathMageSpearMissile"'                      CanBeRemoved = true'                      CollisionObjects =                          new[]                          { CollisionObjectTypes.Minion' CollisionObjectTypes.Champions' CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "xerathrmissilewrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 5600'                      Radius = 120'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "xerathrmissilewrapper"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "xerathrmissilewrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 5600'                      Radius = 120'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "xerathrmissilewrapper"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "xerathrmissilewrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 5600'                      Radius = 120'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "xerathrmissilewrapper"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Xerath"'                      SpellName = "xerathrmissilewrapper"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 700'                      Range = 5600'                      Radius = 120'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "xerathrmissilewrapper"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 400'                      Range = 550'                      Radius = 20'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "yasuoq2"'                      Invert = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 400'                      Range = 550'                      Radius = 20'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "yasuoq2"'                      Invert = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 400'                      Range = 550'                      Radius = 20'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "yasuoq2"'                      Invert = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 400'                      Range = 550'                      Radius = 20'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "yasuoq2"'                      Invert = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq3w"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1150'                      Radius = 90'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "yasuoq3w"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq3w"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1150'                      Radius = 90'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "yasuoq3w"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq3w"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1150'                      Radius = 90'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "yasuoq3w"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq3w"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1150'                      Radius = 90'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "yasuoq3w"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq3w"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 500'                      Range = 1150'                      Radius = 90'                      MissileSpeed = 1500'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "yasuoq3w"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 400'                      Range = 550'                      Radius = 20'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "yasuoq"'                      Invert = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 400'                      Range = 550'                      Radius = 20'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "yasuoq"'                      Invert = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 400'                      Range = 550'                      Radius = 20'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "yasuoq"'                      Invert = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Yasuo"'                      SpellName = "yasuoq"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 400'                      Range = 550'                      Radius = 20'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = true'                      MissileSpellName = "yasuoq"'                      Invert = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zac"'                      SpellName = "ZacQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 500'                      Range = 550'                      Radius = 120'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZacQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zac"'                      SpellName = "ZacQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 500'                      Range = 550'                      Radius = 120'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZacQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zac"'                      SpellName = "ZacQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 500'                      Range = 550'                      Radius = 120'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZacQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zac"'                      SpellName = "ZacQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotLine'                      Delay = 500'                      Range = 550'                      Radius = 120'                      MissileSpeed = int.MaxValue'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZacQ"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zed"'                      SpellName = "ZedShuriken"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 925'                      Radius = 50'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "zedshurikenmisone"'                      FromObjects = new[] { "Zed_Clone_idle.troy"' "Zed_Clone_Idle.troy" }'                      ExtraMissileNames = new[] { "zedshurikenmistwo"' "zedshurikenmisthree" }'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zed"'                      SpellName = "ZedShuriken"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 925'                      Radius = 50'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "zedshurikenmisone"'                      FromObjects = new[] { "Zed_Clone_idle.troy"' "Zed_Clone_Idle.troy" }'                      ExtraMissileNames = new[] { "zedshurikenmistwo"' "zedshurikenmisthree" }'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zed"'                      SpellName = "ZedShuriken"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 925'                      Radius = 50'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "zedshurikenmisone"'                      FromObjects = new[] { "Zed_Clone_idle.troy"' "Zed_Clone_Idle.troy" }'                      ExtraMissileNames = new[] { "zedshurikenmistwo"' "zedshurikenmisthree" }'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zed"'                      SpellName = "ZedShuriken"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 925'                      Radius = 50'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "zedshurikenmisone"'                      FromObjects = new[] { "Zed_Clone_idle.troy"' "Zed_Clone_Idle.troy" }'                      ExtraMissileNames = new[] { "zedshurikenmistwo"' "zedshurikenmisthree" }'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zed"'                      SpellName = "ZedShuriken"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 925'                      Radius = 50'                      MissileSpeed = 1700'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "zedshurikenmisone"'                      FromObjects = new[] { "Zed_Clone_idle.troy"' "Zed_Clone_Idle.troy" }'                      ExtraMissileNames = new[] { "zedshurikenmistwo"' "zedshurikenmisthree" }'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell"'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell"'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell"'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell"'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQ"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell"'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQBounce1"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell2"'                      ExtraMissileNames = new[] { "ZiggsQSpell2" }'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQBounce1"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell2"'                      ExtraMissileNames = new[] { "ZiggsQSpell2" }'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQBounce1"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell2"'                      ExtraMissileNames = new[] { "ZiggsQSpell2" }'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQBounce1"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell2"'                      ExtraMissileNames = new[] { "ZiggsQSpell2" }'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQBounce1"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 140'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell2"'                      ExtraMissileNames = new[] { "ZiggsQSpell2" }'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQBounce2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 160'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell3"'                      ExtraMissileNames = new[] { "ZiggsQSpell3" }'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQBounce2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 160'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell3"'                      ExtraMissileNames = new[] { "ZiggsQSpell3" }'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQBounce2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 160'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell3"'                      ExtraMissileNames = new[] { "ZiggsQSpell3" }'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQBounce2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 160'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell3"'                      ExtraMissileNames = new[] { "ZiggsQSpell3" }'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsQBounce2"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 850'                      Radius = 160'                      MissileSpeed = 1700'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsQSpell3"'                      ExtraMissileNames = new[] { "ZiggsQSpell3" }'                      CanBeRemoved = false'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1000'                      Radius = 275'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsW"'                      DisableFowDetection = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1000'                      Radius = 275'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsW"'                      DisableFowDetection = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1000'                      Radius = 275'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsW"'                      DisableFowDetection = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1000'                      Radius = 275'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsW"'                      DisableFowDetection = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsW"'                      Slot = SpellSlot.W'                      Type = SkillShotType.SkillshotCircle'                      Delay = 250'                      Range = 1000'                      Radius = 275'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsW"'                      DisableFowDetection = true'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 900'                      Radius = 235'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsE"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 900'                      Radius = 235'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsE"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 900'                      Radius = 235'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsE"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 900'                      Radius = 235'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsE"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsE"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotCircle'                      Delay = 500'                      Range = 900'                      Radius = 235'                      MissileSpeed = 1750'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsE"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 5300'                      Radius = 500'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsR"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 5300'                      Radius = 500'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsR"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Ziggs"'                      SpellName = "ZiggsR"'                      Slot = SpellSlot.R'                      Type = SkillShotType.SkillshotCircle'                      Delay = 0'                      Range = 5300'                      Radius = 500'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZiggsR"'                      DisableFowDetection = true'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "ZyraQFissure"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 800'                      Radius = 220'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZyraQFissure"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "ZyraQFissure"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 800'                      Radius = 220'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZyraQFissure"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "ZyraQFissure"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 800'                      Radius = 220'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZyraQFissure"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "ZyraQFissure"'                      Slot = SpellSlot.Q'                      Type = SkillShotType.SkillshotCircle'                      Delay = 600'                      Range = 800'                      Radius = 220'                      MissileSpeed = int.MaxValue'                      FixedRange = false'                      AddHitbox = true'                      DangerValue = 2'                      IsDangerous = false'                      MissileSpellName = "ZyraQFissure"'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "ZyraGraspingRoots"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1150'                      Radius = 70'                      MissileSpeed = 1150'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ZyraGraspingRoots"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "ZyraGraspingRoots"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1150'                      Radius = 70'                      MissileSpeed = 1150'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ZyraGraspingRoots"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "ZyraGraspingRoots"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1150'                      Radius = 70'                      MissileSpeed = 1150'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ZyraGraspingRoots"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "ZyraGraspingRoots"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1150'                      Radius = 70'                      MissileSpeed = 1150'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ZyraGraspingRoots"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "ZyraGraspingRoots"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 250'                      Range = 1150'                      Radius = 70'                      MissileSpeed = 1150'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "ZyraGraspingRoots"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "zyrapassivedeathmanager"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 700'                      Range = 1474'                      Radius = 70'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "zyrapassivedeathmanager"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "zyrapassivedeathmanager"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 700'                      Range = 1474'                      Radius = 70'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "zyrapassivedeathmanager"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "zyrapassivedeathmanager"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 700'                      Range = 1474'                      Radius = 70'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "zyrapassivedeathmanager"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "zyrapassivedeathmanager"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 700'                      Range = 1474'                      Radius = 70'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "zyrapassivedeathmanager"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,SpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\SpellDatabase.cs,SpellDatabase,The following statement contains a magic number: Spells.Add(                  new SpellData                  {                      ChampionName = "Zyra"'                      SpellName = "zyrapassivedeathmanager"'                      Slot = SpellSlot.E'                      Type = SkillShotType.SkillshotMissileLine'                      Delay = 700'                      Range = 1474'                      Radius = 70'                      MissileSpeed = 2000'                      FixedRange = true'                      AddHitbox = true'                      DangerValue = 3'                      IsDangerous = true'                      MissileSpellName = "zyrapassivedeathmanager"'                      CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }'                  });
Magic Number,Evade,Utils,C:\repos\imsosharp_LeagueSharp\EvadeLib\Utils.cs,ImmobileTime,The following statement contains a magic number: return (result == 0f) ? -1 : (int) (Environment.TickCount + (result - Game.Time) * 1000);
Magic Number,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadePoints,The following statement contains a magic number: foreach (var poly in dangerPolygons)              {                  for (var i = 0; i <= poly.Points.Count - 1; i++)                  {                      var sideStart = poly.Points[i];                      var sideEnd = poly.Points[(i == poly.Points.Count - 1) ? 0 : i + 1];                        var originalCandidate = myPosition.ProjectOn(sideStart' sideEnd).SegmentPoint;                      var distanceToEvadePoint = Vector2.DistanceSquared(originalCandidate' myPosition);                          if (distanceToEvadePoint < 600 * 600)                      {                          var sideDistance = Vector2.DistanceSquared(sideEnd' sideStart);                          var direction = (sideEnd - sideStart).Normalized();                            var s = (distanceToEvadePoint < 200 * 200 && sideDistance > 90 * 90)                              ? Config.DiagonalEvadePointsCount                              : 0;                          for (var j = -s; j <= s; j++)                          {                              var candidate = originalCandidate + j * Config.DiagonalEvadePointsStep * direction;                              var pathToPoint = ObjectManager.Player.GetPath(candidate.To3D()).To2DList();                                if (!isBlink)                              {                                  if (Program.IsSafePath(pathToPoint' Config.EvadingFirstTimeOffset' speed' delay).IsSafe)                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (                                      Program.IsSafePath(pathToPoint' Config.EvadingSecondTimeOffset' speed' delay).IsSafe &&                                      j == 0)                                  {                                      badCandidates.Add(candidate);                                  }                              }                              else                              {                                  if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingFirstTimeOffset' delay))                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingSecondTimeOffset' delay))                                  {                                      badCandidates.Add(candidate);                                  }                              }                          }                      }                  }              }
Magic Number,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadePoints,The following statement contains a magic number: foreach (var poly in dangerPolygons)              {                  for (var i = 0; i <= poly.Points.Count - 1; i++)                  {                      var sideStart = poly.Points[i];                      var sideEnd = poly.Points[(i == poly.Points.Count - 1) ? 0 : i + 1];                        var originalCandidate = myPosition.ProjectOn(sideStart' sideEnd).SegmentPoint;                      var distanceToEvadePoint = Vector2.DistanceSquared(originalCandidate' myPosition);                          if (distanceToEvadePoint < 600 * 600)                      {                          var sideDistance = Vector2.DistanceSquared(sideEnd' sideStart);                          var direction = (sideEnd - sideStart).Normalized();                            var s = (distanceToEvadePoint < 200 * 200 && sideDistance > 90 * 90)                              ? Config.DiagonalEvadePointsCount                              : 0;                          for (var j = -s; j <= s; j++)                          {                              var candidate = originalCandidate + j * Config.DiagonalEvadePointsStep * direction;                              var pathToPoint = ObjectManager.Player.GetPath(candidate.To3D()).To2DList();                                if (!isBlink)                              {                                  if (Program.IsSafePath(pathToPoint' Config.EvadingFirstTimeOffset' speed' delay).IsSafe)                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (                                      Program.IsSafePath(pathToPoint' Config.EvadingSecondTimeOffset' speed' delay).IsSafe &&                                      j == 0)                                  {                                      badCandidates.Add(candidate);                                  }                              }                              else                              {                                  if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingFirstTimeOffset' delay))                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingSecondTimeOffset' delay))                                  {                                      badCandidates.Add(candidate);                                  }                              }                          }                      }                  }              }
Magic Number,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadePoints,The following statement contains a magic number: foreach (var poly in dangerPolygons)              {                  for (var i = 0; i <= poly.Points.Count - 1; i++)                  {                      var sideStart = poly.Points[i];                      var sideEnd = poly.Points[(i == poly.Points.Count - 1) ? 0 : i + 1];                        var originalCandidate = myPosition.ProjectOn(sideStart' sideEnd).SegmentPoint;                      var distanceToEvadePoint = Vector2.DistanceSquared(originalCandidate' myPosition);                          if (distanceToEvadePoint < 600 * 600)                      {                          var sideDistance = Vector2.DistanceSquared(sideEnd' sideStart);                          var direction = (sideEnd - sideStart).Normalized();                            var s = (distanceToEvadePoint < 200 * 200 && sideDistance > 90 * 90)                              ? Config.DiagonalEvadePointsCount                              : 0;                          for (var j = -s; j <= s; j++)                          {                              var candidate = originalCandidate + j * Config.DiagonalEvadePointsStep * direction;                              var pathToPoint = ObjectManager.Player.GetPath(candidate.To3D()).To2DList();                                if (!isBlink)                              {                                  if (Program.IsSafePath(pathToPoint' Config.EvadingFirstTimeOffset' speed' delay).IsSafe)                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (                                      Program.IsSafePath(pathToPoint' Config.EvadingSecondTimeOffset' speed' delay).IsSafe &&                                      j == 0)                                  {                                      badCandidates.Add(candidate);                                  }                              }                              else                              {                                  if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingFirstTimeOffset' delay))                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingSecondTimeOffset' delay))                                  {                                      badCandidates.Add(candidate);                                  }                              }                          }                      }                  }              }
Magic Number,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadePoints,The following statement contains a magic number: foreach (var poly in dangerPolygons)              {                  for (var i = 0; i <= poly.Points.Count - 1; i++)                  {                      var sideStart = poly.Points[i];                      var sideEnd = poly.Points[(i == poly.Points.Count - 1) ? 0 : i + 1];                        var originalCandidate = myPosition.ProjectOn(sideStart' sideEnd).SegmentPoint;                      var distanceToEvadePoint = Vector2.DistanceSquared(originalCandidate' myPosition);                          if (distanceToEvadePoint < 600 * 600)                      {                          var sideDistance = Vector2.DistanceSquared(sideEnd' sideStart);                          var direction = (sideEnd - sideStart).Normalized();                            var s = (distanceToEvadePoint < 200 * 200 && sideDistance > 90 * 90)                              ? Config.DiagonalEvadePointsCount                              : 0;                          for (var j = -s; j <= s; j++)                          {                              var candidate = originalCandidate + j * Config.DiagonalEvadePointsStep * direction;                              var pathToPoint = ObjectManager.Player.GetPath(candidate.To3D()).To2DList();                                if (!isBlink)                              {                                  if (Program.IsSafePath(pathToPoint' Config.EvadingFirstTimeOffset' speed' delay).IsSafe)                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (                                      Program.IsSafePath(pathToPoint' Config.EvadingSecondTimeOffset' speed' delay).IsSafe &&                                      j == 0)                                  {                                      badCandidates.Add(candidate);                                  }                              }                              else                              {                                  if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingFirstTimeOffset' delay))                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingSecondTimeOffset' delay))                                  {                                      badCandidates.Add(candidate);                                  }                              }                          }                      }                  }              }
Magic Number,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadePoints,The following statement contains a magic number: foreach (var poly in dangerPolygons)              {                  for (var i = 0; i <= poly.Points.Count - 1; i++)                  {                      var sideStart = poly.Points[i];                      var sideEnd = poly.Points[(i == poly.Points.Count - 1) ? 0 : i + 1];                        var originalCandidate = myPosition.ProjectOn(sideStart' sideEnd).SegmentPoint;                      var distanceToEvadePoint = Vector2.DistanceSquared(originalCandidate' myPosition);                          if (distanceToEvadePoint < 600 * 600)                      {                          var sideDistance = Vector2.DistanceSquared(sideEnd' sideStart);                          var direction = (sideEnd - sideStart).Normalized();                            var s = (distanceToEvadePoint < 200 * 200 && sideDistance > 90 * 90)                              ? Config.DiagonalEvadePointsCount                              : 0;                          for (var j = -s; j <= s; j++)                          {                              var candidate = originalCandidate + j * Config.DiagonalEvadePointsStep * direction;                              var pathToPoint = ObjectManager.Player.GetPath(candidate.To3D()).To2DList();                                if (!isBlink)                              {                                  if (Program.IsSafePath(pathToPoint' Config.EvadingFirstTimeOffset' speed' delay).IsSafe)                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (                                      Program.IsSafePath(pathToPoint' Config.EvadingSecondTimeOffset' speed' delay).IsSafe &&                                      j == 0)                                  {                                      badCandidates.Add(candidate);                                  }                              }                              else                              {                                  if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingFirstTimeOffset' delay))                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingSecondTimeOffset' delay))                                  {                                      badCandidates.Add(candidate);                                  }                              }                          }                      }                  }              }
Magic Number,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadePoints,The following statement contains a magic number: foreach (var poly in dangerPolygons)              {                  for (var i = 0; i <= poly.Points.Count - 1; i++)                  {                      var sideStart = poly.Points[i];                      var sideEnd = poly.Points[(i == poly.Points.Count - 1) ? 0 : i + 1];                        var originalCandidate = myPosition.ProjectOn(sideStart' sideEnd).SegmentPoint;                      var distanceToEvadePoint = Vector2.DistanceSquared(originalCandidate' myPosition);                          if (distanceToEvadePoint < 600 * 600)                      {                          var sideDistance = Vector2.DistanceSquared(sideEnd' sideStart);                          var direction = (sideEnd - sideStart).Normalized();                            var s = (distanceToEvadePoint < 200 * 200 && sideDistance > 90 * 90)                              ? Config.DiagonalEvadePointsCount                              : 0;                          for (var j = -s; j <= s; j++)                          {                              var candidate = originalCandidate + j * Config.DiagonalEvadePointsStep * direction;                              var pathToPoint = ObjectManager.Player.GetPath(candidate.To3D()).To2DList();                                if (!isBlink)                              {                                  if (Program.IsSafePath(pathToPoint' Config.EvadingFirstTimeOffset' speed' delay).IsSafe)                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (                                      Program.IsSafePath(pathToPoint' Config.EvadingSecondTimeOffset' speed' delay).IsSafe &&                                      j == 0)                                  {                                      badCandidates.Add(candidate);                                  }                              }                              else                              {                                  if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingFirstTimeOffset' delay))                                  {                                      goodCandidates.Add(candidate);                                  }                                    if (Program.IsSafeToBlink(                                      pathToPoint[pathToPoint.Count - 1]' Config.EvadingSecondTimeOffset' delay))                                  {                                      badCandidates.Add(candidate);                                  }                              }                          }                      }                  }              }
Magic Number,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadeTargets,The following statement contains a magic number: foreach (var target in allTargets)              {                  if (DontCheckForSafety || Program.IsSafe(target.ServerPosition.To2D()).IsSafe)                  {                      if (isBlink)                      {                          if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafeToBlink(target.ServerPosition.To2D()' Config.EvadingFirstTimeOffset' delay))                          {                              goodTargets.Add(target);                          }                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafeToBlink(target.ServerPosition.To2D()' Config.EvadingSecondTimeOffset' delay))                          {                              badTargets.Add(target);                          }                      }                      else                      {                          var pathToTarget = new List<Vector2>();                          pathToTarget.Add(ObjectManager.Player.ServerPosition.To2D());                          pathToTarget.Add(target.ServerPosition.To2D());                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafePath(pathToTarget' Config.EvadingFirstTimeOffset' speed' delay).IsSafe)                          {                              goodTargets.Add(target);                          }                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafePath(pathToTarget' Config.EvadingSecondTimeOffset' speed' delay).IsSafe)                          {                              badTargets.Add(target);                          }                      }                  }              }
Magic Number,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadeTargets,The following statement contains a magic number: foreach (var target in allTargets)              {                  if (DontCheckForSafety || Program.IsSafe(target.ServerPosition.To2D()).IsSafe)                  {                      if (isBlink)                      {                          if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafeToBlink(target.ServerPosition.To2D()' Config.EvadingFirstTimeOffset' delay))                          {                              goodTargets.Add(target);                          }                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafeToBlink(target.ServerPosition.To2D()' Config.EvadingSecondTimeOffset' delay))                          {                              badTargets.Add(target);                          }                      }                      else                      {                          var pathToTarget = new List<Vector2>();                          pathToTarget.Add(ObjectManager.Player.ServerPosition.To2D());                          pathToTarget.Add(target.ServerPosition.To2D());                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafePath(pathToTarget' Config.EvadingFirstTimeOffset' speed' delay).IsSafe)                          {                              goodTargets.Add(target);                          }                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafePath(pathToTarget' Config.EvadingSecondTimeOffset' speed' delay).IsSafe)                          {                              badTargets.Add(target);                          }                      }                  }              }
Magic Number,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadeTargets,The following statement contains a magic number: foreach (var target in allTargets)              {                  if (DontCheckForSafety || Program.IsSafe(target.ServerPosition.To2D()).IsSafe)                  {                      if (isBlink)                      {                          if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafeToBlink(target.ServerPosition.To2D()' Config.EvadingFirstTimeOffset' delay))                          {                              goodTargets.Add(target);                          }                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafeToBlink(target.ServerPosition.To2D()' Config.EvadingSecondTimeOffset' delay))                          {                              badTargets.Add(target);                          }                      }                      else                      {                          var pathToTarget = new List<Vector2>();                          pathToTarget.Add(ObjectManager.Player.ServerPosition.To2D());                          pathToTarget.Add(target.ServerPosition.To2D());                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafePath(pathToTarget' Config.EvadingFirstTimeOffset' speed' delay).IsSafe)                          {                              goodTargets.Add(target);                          }                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafePath(pathToTarget' Config.EvadingSecondTimeOffset' speed' delay).IsSafe)                          {                              badTargets.Add(target);                          }                      }                  }              }
Magic Number,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadeTargets,The following statement contains a magic number: foreach (var target in allTargets)              {                  if (DontCheckForSafety || Program.IsSafe(target.ServerPosition.To2D()).IsSafe)                  {                      if (isBlink)                      {                          if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafeToBlink(target.ServerPosition.To2D()' Config.EvadingFirstTimeOffset' delay))                          {                              goodTargets.Add(target);                          }                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafeToBlink(target.ServerPosition.To2D()' Config.EvadingSecondTimeOffset' delay))                          {                              badTargets.Add(target);                          }                      }                      else                      {                          var pathToTarget = new List<Vector2>();                          pathToTarget.Add(ObjectManager.Player.ServerPosition.To2D());                          pathToTarget.Add(target.ServerPosition.To2D());                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafePath(pathToTarget' Config.EvadingFirstTimeOffset' speed' delay).IsSafe)                          {                              goodTargets.Add(target);                          }                            if (Environment.TickCount - Program.LastWardJumpAttempt < 250 ||                              Program.IsSafePath(pathToTarget' Config.EvadingSecondTimeOffset' speed' delay).IsSafe)                          {                              badTargets.Add(target);                          }                      }                  }              }
Duplicate Code,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The method contains a code clone-set at the following line numbers (starting from the method definition): ((634' 653)' (638' 657)' (642' 661)' (646' 665)' (650' 669))
Duplicate Code,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The method contains a code clone-set at the following line numbers (starting from the method definition): ((634' 668)' (638' 672))
Duplicate Code,Evade,EvadeSpellDatabase,C:\repos\imsosharp_LeagueSharp\EvadeLib\EvadeSpellDatabase.cs,EvadeSpellDatabase,The method contains a code clone-set at the following line numbers (starting from the method definition): ((634' 653)' (642' 661)' (646' 665)' (650' 669))
Duplicate Code,Evade,Program,C:\repos\imsosharp_LeagueSharp\EvadeLib\Program.cs,TryToEvade,The method contains a code clone-set at the following line numbers (starting from the method definition): ((123' 150)' (289' 316))
Missing Default,Evade,Collision,C:\repos\imsosharp_LeagueSharp\EvadeLib\Collision.cs,GetCollisionPoint,The following switch statement is missing a default case: switch (cObject)                  {                      case CollisionObjectTypes.Minion:                            if (!Config.Menu.Item("MinionCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var minion in                              MinionManager.GetMinions(                                  from.To3D()' 1200' MinionTypes.All'                                  skillshot.Unit.Team == ObjectManager.Player.Team                                      ? MinionTeam.NotAlly                                      : MinionTeam.NotAllyForEnemy))                          {                              var pred = FastPrediction(                                  from' minion'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                              var w = skillshot.SpellData.RawRadius + (!pred.IsMoving ? (minion.BoundingRadius - 15) : 0) -                                      pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = minion'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                            break;                        case CollisionObjectTypes.Champions:                          if (!Config.Menu.Item("HeroCollision").GetValue<bool>())                          {                              break;                          }                          foreach (var hero in                              ObjectManager.Get<Obj_AI_Hero>()                                  .Where(                                      h =>                                          (h.IsValidTarget(1200' false) && h.Team == ObjectManager.Player.Team && !h.IsMe ||                                           Config.TestOnAllies && h.Team != ObjectManager.Player.Team)))                          {                              var pred = FastPrediction(                                  from' hero'                                  Math.Max(0' skillshot.SpellData.Delay - (Environment.TickCount - skillshot.StartTick))'                                  skillshot.SpellData.MissileSpeed);                              var pos = pred.PredictedPos;                                var w = skillshot.SpellData.RawRadius + 30 - pos.Distance(from' skillshot.End' true);                              if (w > 0)                              {                                  collisions.Add(                                      new DetectedCollision                                      {                                          Position =                                              pos.ProjectOn(skillshot.End' skillshot.Start).LinePoint +                                              skillshot.Direction * 30'                                          Unit = hero'                                          Type = CollisionObjectTypes.Minion'                                          Distance = pos.Distance(from)'                                          Diff = w'                                      });                              }                          }                          break;                        case CollisionObjectTypes.YasuoWall:                          if (!Config.Menu.Item("YasuoCollision").GetValue<bool>())                          {                              break;                          }                          if (                              !ObjectManager.Get<Obj_AI_Hero>()                                  .Any(                                      hero =>                                          hero.IsValidTarget(float.MaxValue' false) &&                                          hero.Team == ObjectManager.Player.Team && hero.ChampionName == "Yasuo"))                          {                              break;                          }                          GameObject wall = null;                          foreach (var gameObject in ObjectManager.Get<GameObject>())                          {                              if (gameObject.IsValid &&                                  System.Text.RegularExpressions.Regex.IsMatch(                                      gameObject.Name' "_w_windwall.\\.troy"'                                      System.Text.RegularExpressions.RegexOptions.IgnoreCase))                              {                                  wall = gameObject;                              }                          }                          if (wall == null)                          {                              break;                          }                          var level = wall.Name.Substring(wall.Name.Length - 6' 1);                          var wallWidth = (300 + 50 * Convert.ToInt32(level));                              var wallDirection = (wall.Position.To2D() - YasuoWallCastedPos).Normalized().Perpendicular();                          var wallStart = wall.Position.To2D() + wallWidth / 2 * wallDirection;                          var wallEnd = wallStart - wallWidth * wallDirection;                          var wallPolygon = new Geometry.Rectangle(wallStart' wallEnd' 75).ToPolygon();                          var intersection = new Vector2();                          var intersections = new List<Vector2>();                            for (var i = 0; i < wallPolygon.Points.Count; i++)                          {                              var inter =                                  wallPolygon.Points[i].Intersection(                                      wallPolygon.Points[i != wallPolygon.Points.Count - 1 ? i + 1 : 0]' from'                                      skillshot.End);                              if (inter.Intersects)                              {                                  intersections.Add(inter.Point);                              }                          }                            if (intersections.Count > 0)                          {                              intersection = intersections.OrderBy(item => item.Distance(from)).ToList()[0];                              var collisionT = Environment.TickCount +                                               Math.Max(                                                   0'                                                   skillshot.SpellData.Delay -                                                   (Environment.TickCount - skillshot.StartTick)) + 100 +                                               (1000 * intersection.Distance(from)) / skillshot.SpellData.MissileSpeed;                              if (collisionT - WallCastT < 4000)                              {                                  if (skillshot.SpellData.Type != SkillShotType.SkillshotMissileLine)                                  {                                      skillshot.ForceDisabled = true;                                  }                                  return intersection;                              }                          }                            break;                  }
Missing Default,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,Skillshot,The following switch statement is missing a default case: switch (spellData.Type)              {                  case SkillShotType.SkillshotCircle:                      Circle = new Geometry.Circle(CollisionEnd' spellData.Radius);                      break;                  case SkillShotType.SkillshotLine:                      Rectangle = new Geometry.Rectangle(Start' CollisionEnd' spellData.Radius);                      break;                  case SkillShotType.SkillshotMissileLine:                      Rectangle = new Geometry.Rectangle(Start' CollisionEnd' spellData.Radius);                      break;                  case SkillShotType.SkillshotCone:                      Sector = new Geometry.Sector(                          start' CollisionEnd - start' spellData.Radius * (float) Math.PI / 180' spellData.Range);                      break;                  case SkillShotType.SkillshotRing:                      Ring = new Geometry.Ring(CollisionEnd' spellData.Radius' spellData.RingRadius);                      break;              }
Missing Default,Evade,Skillshot,C:\repos\imsosharp_LeagueSharp\EvadeLib\Skillshot.cs,UpdatePolygon,The following switch statement is missing a default case: switch (SpellData.Type)              {                  case SkillShotType.SkillshotCircle:                      Polygon = Circle.ToPolygon();                      EvadePolygon = Circle.ToPolygon(Config.ExtraEvadeDistance);                      DrawingPolygon = Circle.ToPolygon(                          0'                          !SpellData.AddHitbox                              ? SpellData.Radius                              : (SpellData.Radius - ObjectManager.Player.BoundingRadius));                      break;                  case SkillShotType.SkillshotLine:                      Polygon = Rectangle.ToPolygon();                      DrawingPolygon = Rectangle.ToPolygon(                          0'                          !SpellData.AddHitbox                              ? SpellData.Radius                              : (SpellData.Radius - ObjectManager.Player.BoundingRadius));                      EvadePolygon = Rectangle.ToPolygon(Config.ExtraEvadeDistance);                      break;                  case SkillShotType.SkillshotMissileLine:                      Polygon = Rectangle.ToPolygon();                      DrawingPolygon = Rectangle.ToPolygon(                          0'                          !SpellData.AddHitbox                              ? SpellData.Radius                              : (SpellData.Radius - ObjectManager.Player.BoundingRadius));                      EvadePolygon = Rectangle.ToPolygon(Config.ExtraEvadeDistance);                      break;                  case SkillShotType.SkillshotCone:                      Polygon = Sector.ToPolygon();                      DrawingPolygon = Polygon;                      EvadePolygon = Sector.ToPolygon(Config.ExtraEvadeDistance);                      break;                  case SkillShotType.SkillshotRing:                      Polygon = Ring.ToPolygon();                      DrawingPolygon = Polygon;                      EvadePolygon = Ring.ToPolygon(Config.ExtraEvadeDistance);                      break;              }
Missing Default,Evade,Evader,C:\repos\imsosharp_LeagueSharp\EvadeLib\Evader.cs,GetEvadeTargets,The following switch statement is missing a default case: switch (targetType)                  {                      case SpellValidTargets.AllyChampions:                            foreach (var ally in ObjectManager.Get<Obj_AI_Hero>())                          {                              if (ally.IsValidTarget(range' false) && !ally.IsMe && ally.IsAlly)                              {                                  allTargets.Add(ally);                              }                          }                          break;                          case SpellValidTargets.AllyMinions:                          allTargets.AddRange(                              MinionManager.GetMinions(                                  ObjectManager.Player.Position' range' MinionTypes.All' MinionTeam.Ally));                          break;                        case SpellValidTargets.AllyWards:                            foreach (var gameObject in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (gameObject.Name.ToLower().Contains("ward") && gameObject.IsValidTarget(range' false) &&                                  gameObject.Team == ObjectManager.Player.Team)                              {                                  allTargets.Add(gameObject);                              }                          }                          break;                        case SpellValidTargets.EnemyChampions:                          foreach (var enemy in ObjectManager.Get<Obj_AI_Hero>())                          {                              if (enemy.IsValidTarget(range))                              {                                  allTargets.Add(enemy);                              }                          }                            break;                        case SpellValidTargets.EnemyMinions:                          allTargets.AddRange(                              MinionManager.GetMinions(                                  ObjectManager.Player.Position' range' MinionTypes.All' MinionTeam.NotAlly));                          break;                        case SpellValidTargets.EnemyWards:                            foreach (var gameObject in ObjectManager.Get<Obj_AI_Minion>())                          {                              if (gameObject.Name.ToLower().Contains("ward") && gameObject.IsValidTarget(range))                              {                                  allTargets.Add(gameObject);                              }                          }                          break;                  }
