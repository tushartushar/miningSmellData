Implementation smell,Namespace,Class,File,Method,Description
Complex Method,VVVV.Nodes.OpenCV.OpenNI,ImageNode,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ImageNode.cs,Evaluate,Cyclomatic complexity of the method is 9
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ContextNode,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ContextNode.cs,Open,The following statement contains a magic number: try  			{  				Close(i);                      Device state = FState[i];                  var context = new Context();  				FState[i].Context = context;                  context.AddLicense(FLicense);                  context.GlobalMirror = false;                    NodeInfoList list = context.EnumerateProductionTrees(global::OpenNI.NodeType.Device' null);                  NodeInfo node = null;                  if (FPinInNodes[i] != "")                  {                      foreach (NodeInfo nodeitem in list)                      {                          if (nodeitem.CreationInfo == FPinInNodes[i])                          {                              node = nodeitem;                              break;                          }                      }                        if (node == null)                          throw (new Exception("This device is unavailable. Check upstream ListDevices node"));                        context.CreateProductionTree(node);                  }                    state.DepthGenerator = new DepthGenerator(context);                  MapOutputMode depthMode = new MapOutputMode();                  depthMode.FPS = 30;                  depthMode.XRes = 640;                  depthMode.YRes = 480;                    state.DepthGenerator.MapOutputMode = depthMode;                  state.DepthGenerator.StartGenerating();                    state.Start();                    FPinOutContext[i] = state;                  FPinOutStatus[i] = "OK";  			}  			catch (Exception e)  			{  				Close(i);  				FPinOutStatus[i] = e.Message;  			}
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ContextNode,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ContextNode.cs,Open,The following statement contains a magic number: try  			{  				Close(i);                      Device state = FState[i];                  var context = new Context();  				FState[i].Context = context;                  context.AddLicense(FLicense);                  context.GlobalMirror = false;                    NodeInfoList list = context.EnumerateProductionTrees(global::OpenNI.NodeType.Device' null);                  NodeInfo node = null;                  if (FPinInNodes[i] != "")                  {                      foreach (NodeInfo nodeitem in list)                      {                          if (nodeitem.CreationInfo == FPinInNodes[i])                          {                              node = nodeitem;                              break;                          }                      }                        if (node == null)                          throw (new Exception("This device is unavailable. Check upstream ListDevices node"));                        context.CreateProductionTree(node);                  }                    state.DepthGenerator = new DepthGenerator(context);                  MapOutputMode depthMode = new MapOutputMode();                  depthMode.FPS = 30;                  depthMode.XRes = 640;                  depthMode.YRes = 480;                    state.DepthGenerator.MapOutputMode = depthMode;                  state.DepthGenerator.StartGenerating();                    state.Start();                    FPinOutContext[i] = state;                  FPinOutStatus[i] = "OK";  			}  			catch (Exception e)  			{  				Close(i);  				FPinOutStatus[i] = e.Message;  			}
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ContextNode,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ContextNode.cs,Open,The following statement contains a magic number: try  			{  				Close(i);                      Device state = FState[i];                  var context = new Context();  				FState[i].Context = context;                  context.AddLicense(FLicense);                  context.GlobalMirror = false;                    NodeInfoList list = context.EnumerateProductionTrees(global::OpenNI.NodeType.Device' null);                  NodeInfo node = null;                  if (FPinInNodes[i] != "")                  {                      foreach (NodeInfo nodeitem in list)                      {                          if (nodeitem.CreationInfo == FPinInNodes[i])                          {                              node = nodeitem;                              break;                          }                      }                        if (node == null)                          throw (new Exception("This device is unavailable. Check upstream ListDevices node"));                        context.CreateProductionTree(node);                  }                    state.DepthGenerator = new DepthGenerator(context);                  MapOutputMode depthMode = new MapOutputMode();                  depthMode.FPS = 30;                  depthMode.XRes = 640;                  depthMode.YRes = 480;                    state.DepthGenerator.MapOutputMode = depthMode;                  state.DepthGenerator.StartGenerating();                    state.Start();                    FPinOutContext[i] = state;                  FPinOutStatus[i] = "OK";  			}  			catch (Exception e)  			{  				Close(i);  				FPinOutStatus[i] = e.Message;  			}
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ImageInstance,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ImageNode.cs,InitialiseImage,The following statement contains a magic number: imageMode.FPS = 30;
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ImageInstance,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ImageNode.cs,Update,The following statement contains a magic number: lock (FLock)  				{  					if (EnableImage)  					{    						if (Mode == ImageNodeMode.RGB)  						{  							byte* rgbs = (byte*)FRGBGenerator.ImageMapPtr.ToPointer();  							byte* rgbd = (byte*)Image.Image.Data.ToPointer();    							for (int i = 0; i < Width * Height; i++)  							{  								rgbd[2] = rgbs[0];  								rgbd[1] = rgbs[1];  								rgbd[0] = rgbs[2];  								rgbs += 3;  								rgbd += 3;  							}  						}  						else if (Mode == ImageNodeMode.IR)  						{  							Image.Image.SetPixels(FIRGenerator.IRMapPtr);  							ushort* dataFixed = (ushort*)FIRGenerator.IRMapPtr;  						}  						Image.Send();  					}    					Depth.Image.SetPixels(FState.DepthGenerator.DepthMapPtr);  					Depth.Send();    					if (EnableWorld)  					{  						fillWorld();  						World.Send();  					}  				}
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ImageInstance,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ImageNode.cs,Update,The following statement contains a magic number: lock (FLock)  				{  					if (EnableImage)  					{    						if (Mode == ImageNodeMode.RGB)  						{  							byte* rgbs = (byte*)FRGBGenerator.ImageMapPtr.ToPointer();  							byte* rgbd = (byte*)Image.Image.Data.ToPointer();    							for (int i = 0; i < Width * Height; i++)  							{  								rgbd[2] = rgbs[0];  								rgbd[1] = rgbs[1];  								rgbd[0] = rgbs[2];  								rgbs += 3;  								rgbd += 3;  							}  						}  						else if (Mode == ImageNodeMode.IR)  						{  							Image.Image.SetPixels(FIRGenerator.IRMapPtr);  							ushort* dataFixed = (ushort*)FIRGenerator.IRMapPtr;  						}  						Image.Send();  					}    					Depth.Image.SetPixels(FState.DepthGenerator.DepthMapPtr);  					Depth.Send();    					if (EnableWorld)  					{  						fillWorld();  						World.Send();  					}  				}
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ImageInstance,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ImageNode.cs,Update,The following statement contains a magic number: lock (FLock)  				{  					if (EnableImage)  					{    						if (Mode == ImageNodeMode.RGB)  						{  							byte* rgbs = (byte*)FRGBGenerator.ImageMapPtr.ToPointer();  							byte* rgbd = (byte*)Image.Image.Data.ToPointer();    							for (int i = 0; i < Width * Height; i++)  							{  								rgbd[2] = rgbs[0];  								rgbd[1] = rgbs[1];  								rgbd[0] = rgbs[2];  								rgbs += 3;  								rgbd += 3;  							}  						}  						else if (Mode == ImageNodeMode.IR)  						{  							Image.Image.SetPixels(FIRGenerator.IRMapPtr);  							ushort* dataFixed = (ushort*)FIRGenerator.IRMapPtr;  						}  						Image.Send();  					}    					Depth.Image.SetPixels(FState.DepthGenerator.DepthMapPtr);  					Depth.Send();    					if (EnableWorld)  					{  						fillWorld();  						World.Send();  					}  				}
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ImageInstance,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ImageNode.cs,Update,The following statement contains a magic number: lock (FLock)  				{  					if (EnableImage)  					{    						if (Mode == ImageNodeMode.RGB)  						{  							byte* rgbs = (byte*)FRGBGenerator.ImageMapPtr.ToPointer();  							byte* rgbd = (byte*)Image.Image.Data.ToPointer();    							for (int i = 0; i < Width * Height; i++)  							{  								rgbd[2] = rgbs[0];  								rgbd[1] = rgbs[1];  								rgbd[0] = rgbs[2];  								rgbs += 3;  								rgbd += 3;  							}  						}  						else if (Mode == ImageNodeMode.IR)  						{  							Image.Image.SetPixels(FIRGenerator.IRMapPtr);  							ushort* dataFixed = (ushort*)FIRGenerator.IRMapPtr;  						}  						Image.Send();  					}    					Depth.Image.SetPixels(FState.DepthGenerator.DepthMapPtr);  					Depth.Send();    					if (EnableWorld)  					{  						fillWorld();  						World.Send();  					}  				}
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ImageInstance,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ImageNode.cs,fillWorld,The following statement contains a magic number: for (int i = 0; i < Width * Height; ++i' xyz += 3)                  {                      xyz[0] = xyzp[i].X / 1000.0f;                      xyz[1] = xyzp[i].Y / 1000.0f;                      xyz[2] = xyzp[i].Z / 1000.0f;                  }
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ImageInstance,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ImageNode.cs,fillWorld,The following statement contains a magic number: for (int i = 0; i < Width * Height; ++i' xyz += 3)                  {                      xyz[0] = xyzp[i].X / 1000.0f;                      xyz[1] = xyzp[i].Y / 1000.0f;                      xyz[2] = xyzp[i].Z / 1000.0f;                  }
Magic Number,VVVV.Nodes.OpenCV.OpenNI,ListDevicesNode,C:\repos\elliotwoods_VVVV.Packs.Image\src\nodes\plugins\Image\OpenNI\OpenNI\ListDevices.cs,Refresh,The following statement contains a magic number: try              {                  FLicense.Vendor = "PrimeSense";                  FLicense.Key = "0KOIk2JeIBYClPWVnMoRKn5cdY4";                  FContext.AddLicense(FLicense);                                    NodeInfoList list = FContext.EnumerateProductionTrees(global::OpenNI.NodeType.Device' null);                  FNodeList.Clear();                  foreach(var node in list)                      FNodeList.Add(node);                    FPinOutName.SliceCount = FNodeList.Count;                  FPinOutVendor.SliceCount = FNodeList.Count;                  FPinOutVersion.SliceCount = FNodeList.Count;                  FPinOutCreationInfo.SliceCount = FNodeList.Count;                  for (int i=0; i<FNodeList.Count; i++)                   {                      var node = FNodeList[i];                      FPinOutName[i] = node.Description.Name;                      FPinOutVendor[i] = node.Description.Vendor;                      FPinOutVersion[i] = (double)node.Description.Version.Major + ((double)FNodeList[i].Description.Version.Minor / 1000.0);                      FPinOutCreationInfo[i] = node.CreationInfo;                  }                    FPinOutStatus[0] = "OK";              }              catch (Exception e)              {                  FPinOutStatus[0] = e.Message;              }
