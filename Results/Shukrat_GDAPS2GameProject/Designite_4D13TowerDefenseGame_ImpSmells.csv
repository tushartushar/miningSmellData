Implementation smell,Namespace,Class,File,Method,Description
Long Method,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The method has 154 lines of code.
Long Method,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The method has 344 lines of code.
Long Method,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The method has 242 lines of code.
Long Method,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The method has 255 lines of code.
Long Method,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The method has 122 lines of code.
Long Method,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The method has 121 lines of code.
Long Method,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The method has 147 lines of code.
Long Method,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The method has 231 lines of code.
Long Method,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Update,The method has 252 lines of code.
Complex Method,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,Cyclomatic complexity of the method is 49
Complex Method,_4D13TowerDefenseGame,GameProcesses,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameProcesses.cs,Update,Cyclomatic complexity of the method is 18
Complex Method,_4D13TowerDefenseGame,GameProcesses,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameProcesses.cs,Draw,Cyclomatic complexity of the method is 18
Complex Method,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,Cyclomatic complexity of the method is 43
Complex Method,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,Cyclomatic complexity of the method is 35
Complex Method,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,Cyclomatic complexity of the method is 95
Complex Method,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,Cyclomatic complexity of the method is 22
Complex Method,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Draw,Cyclomatic complexity of the method is 11
Complex Method,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,Cyclomatic complexity of the method is 13
Complex Method,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,Cyclomatic complexity of the method is 83
Complex Method,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,Cyclomatic complexity of the method is 10
Complex Method,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Update,Cyclomatic complexity of the method is 185
Complex Method,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,Cyclomatic complexity of the method is 10
Long Parameter List,_4D13TowerDefenseGame,Circle,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Circle.cs,Circle,The method has 5 parameters.
Long Parameter List,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Enemy,The method has 12 parameters.
Long Parameter List,_4D13TowerDefenseGame,GamePiece,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GamePiece.cs,GamePiece,The method has 7 parameters.
Long Parameter List,_4D13TowerDefenseGame,MovableGamePiece,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\MovableGamePiece.cs,MovableGamePiece,The method has 8 parameters.
Long Parameter List,_4D13TowerDefenseGame,MovableGamePiece,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\MovableGamePiece.cs,Move,The method has 6 parameters.
Long Parameter List,_4D13TowerDefenseGame,MovableGamePiece,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\MovableGamePiece.cs,Move,The method has 6 parameters.
Long Parameter List,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Projectile,The method has 9 parameters.
Long Parameter List,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The method has 6 parameters.
Long Parameter List,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The method has 6 parameters.
Long Parameter List,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,Tower,The method has 12 parameters.
Long Statement,_4D13TowerDefenseGame,Game1,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\4D13TowerDefense.cs,Update,The length of the statement  "	if (GamePad.GetState (PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState ().IsKeyDown (Keys.Escape)) " is 123.
Long Statement,_4D13TowerDefenseGame,Circle,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Circle.cs,InitializeBasicEffect,The length of the statement  "	effect.Projection = Matrix.CreateOrthographicOffCenter (0' graphics.GraphicsDevice.Viewport.Width' graphics.GraphicsDevice.Viewport.Height' 0' 0' 1); " is 149.
Long Statement,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,AttackTower,The length of the statement  "		shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' ""' 1' ""); " is 156.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathDR) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && tf_PathSelect) { " is 127.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathUL) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && tf_PathSelect) { " is 127.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathUR) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && tf_PathSelect) { " is 127.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathLeftRight) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && tf_PathSelect) { " is 134.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathUpDown) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && tf_PathSelect) { " is 131.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathDL) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && !tf_PathSelect) { " is 128.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathDR) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && !tf_PathSelect) { " is 128.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathUL) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && !tf_PathSelect) { " is 128.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathUR) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && !tf_PathSelect) { " is 128.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathDL) && mState.LeftButton == ButtonState.Pressed && tf_BackgroundSelect && !tf_PathSelect) { " is 127.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathDR) && mState.LeftButton == ButtonState.Pressed && tf_BackgroundSelect && !tf_PathSelect) { " is 127.
Long Statement,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The length of the statement  "	if (mousePos.Intersects (select_PathUL) && mState.LeftButton == ButtonState.Pressed && tf_BackgroundSelect && !tf_PathSelect) { " is 127.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The length of the statement  "	mainMenu_Exit_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButton"); " is 120.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The length of the statement  "	mainMenu_ExitHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButtonHover"); " is 130.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The length of the statement  "	mainMenu_ExitClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButtonClick"); " is 130.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The length of the statement  "	mapEdit_MenuHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Menu/MenuHoverButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The length of the statement  "	mapEdit_MenuClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Menu/MenuClickButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The length of the statement  "	spell_Fireball_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/Game - In Game/Buttons/Spells/Fireball"); " is 123.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The length of the statement  "	game_Play_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/Game - In Game/Buttons/Speed Control/Play"); " is 121.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The length of the statement  "	game_Pause_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/Game - In Game/Buttons/Speed Control/Pause"); " is 123.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The length of the statement  "				if (GameVariables.Towers [t].HitBox.Intersects (GameVariables.Enemies [i].PieceShape) && GameVariables.Enemies [i].IsVisible == true) { " is 135.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The length of the statement  "							GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10)); " is 180.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The length of the statement  "							GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40)); " is 180.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,LoadContent,The length of the statement  "	mapEdit_BackHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Back/BackHoverButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,LoadContent,The length of the statement  "	mapEdit_BackClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Back/BackClickButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The length of the statement  "			GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false)); " is 165.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_Exit_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButton"); " is 120.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_ExitHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButtonHover"); " is 130.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_ExitClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButtonClick"); " is 130.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_Load_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Load Custom/LCButton"); " is 125.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_LoadHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Load Custom/LCHoverButton"); " is 135.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_LoadClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Load Custom/LCClickButton"); " is 135.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_New_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - New Map/NewButton"); " is 121.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_NewHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - New Map/NewHoverButton"); " is 131.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_NewClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - New Map/NewClickButton"); " is 131.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_MapEditor_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Map Editor/MEButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_MapEditorHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Map Editor/MEHoverButton"); " is 139.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_MapEditorClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Map Editor/MEClickButton"); " is 139.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_Settings_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Settings/settingsButton"); " is 132.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_SettingsHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Settings/settingsButtonHover"); " is 142.
Long Statement,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_SettingsClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Settings/settingsButtonClick"); " is 142.
Long Statement,_4D13TowerDefenseGame,GS_Game_Settings,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_Settings.cs,LoadContent,The length of the statement  "	mapEdit_BackHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Back/BackHoverButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_Game_Settings,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_Settings.cs,LoadContent,The length of the statement  "	mapEdit_BackClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Back/BackClickButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_MM_LoadMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_LoadMenu.cs,LoadContent,The length of the statement  "	mapEdit_BackHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Back/BackHoverButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_MM_LoadMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_LoadMenu.cs,LoadContent,The length of the statement  "	mapEdit_BackClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Back/BackClickButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mapEdit_BackHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Back/BackHoverButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mapEdit_BackClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Back/BackClickButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_Exit_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButton"); " is 120.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_ExitHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButtonHover"); " is 130.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_ExitClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButtonClick"); " is 130.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_Load_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Load/LoadButton"); " is 120.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_LoadHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Load/LoadHoverButton"); " is 130.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_LoadClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Load/LoadClickButton"); " is 130.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_New_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - New Map/NewButton"); " is 121.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_NewHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - New Map/NewHoverButton"); " is 131.
Long Statement,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,LoadContent,The length of the statement  "	mainMenu_NewClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - New Map/NewClickButton"); " is 131.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_SaveHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Save/SaveHoverButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_SaveClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Save/SaveClickButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_BackSelect_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Backdrop Select/BGButton"); " is 134.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_BackSelectHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Backdrop Select/BGHoverButton"); " is 144.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_BackSelectClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Backdrop Select/BGClickButton"); " is 144.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_PathSelect_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Path Select/PathsButton"); " is 133.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_PathSelectHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Path Select/PathsHoverButton"); " is 143.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_PathSelectClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Path Select/PathsClickButton"); " is 143.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mainMenu_Exit_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButton"); " is 120.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mainMenu_ExitHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButtonHover"); " is 130.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mainMenu_ExitClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Exit/exitButtonClick"); " is 130.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_MenuHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Menu/MenuHoverButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_MenuClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Menu/MenuClickButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_Tiles_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Tiles/TilesButton"); " is 122.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_TilesHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Tiles/TilesHoverButton"); " is 132.
Long Statement,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,LoadContent,The length of the statement  "	mapEdit_TilesClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Tiles/TilesClickButton"); " is 132.
Long Statement,_4D13TowerDefenseGame,GS_MM_SaveMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_SaveMenu.cs,LoadContent,The length of the statement  "	mapEdit_BackHover_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Back/BackHoverButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,GS_MM_SaveMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_SaveMenu.cs,LoadContent,The length of the statement  "	mapEdit_BackClick_Txtr = Content.Load<Texture2D> ("Interface/Interface - Interactive/All Buttons/Button - Back/BackClickButton"); " is 129.
Long Statement,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Draw,The length of the statement  "	spriteBatch.DrawString (font' "Enter desired map file name (Enter file name without .map): " + lineBuffer' userInput' Color.Black); " is 131.
Long Statement,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The length of the statement  "				shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect); " is 176.
Long Statement,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The length of the statement  "				shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect); " is 176.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathDR) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathUL) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathUR) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathLeftRight) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathUpDown) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathDL) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && !tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathDR) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && !tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathUL) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && !tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathUR) && mState.LeftButton == ButtonState.Pressed && !tf_BackgroundSelect && !tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathDL) && mState.LeftButton == ButtonState.Pressed && tf_BackgroundSelect && !tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathDR) && mState.LeftButton == ButtonState.Pressed && tf_BackgroundSelect && !tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The conditional expression  "mousePos.Intersects (select_PathUL) && mState.LeftButton == ButtonState.Pressed && tf_BackgroundSelect && !tf_PathSelect"  is complex.
Complex Conditional,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The conditional expression  "this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600"  is complex.
Complex Conditional,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The conditional expression  "this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600"  is complex.
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Enemy,The following statement contains a magic number: droppedCurrency = rng.Next (0' 49);  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Enemy,The following statement contains a magic number: direction = 3;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Enemy,The following statement contains a magic number: hitBox = new Rectangle ((pieceShape.X - pieceShape.Width)' (pieceShape.Y - pieceShape.Height)' (pieceShape.Width * 3)' (pieceShape.Height * 3));  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Enemy,The following statement contains a magic number: hitBox = new Rectangle ((pieceShape.X - pieceShape.Width)' (pieceShape.Y - pieceShape.Height)' (pieceShape.Width * 3)' (pieceShape.Height * 3));  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,AttackTower,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' ""' 1' "");  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,AttackTower,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' ""' 1' "");  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,AttackTower,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' ""' 1' "");  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,AttackTower,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' ""' 1' "");  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,AttackTower,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' ""' 1' "");  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,AttackTower,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' ""' 1' "");  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,AttackTower,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' ""' 1' "");  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,AttackTower,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' ""' 1' "");  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (isVisible == true) {  	if (slowed == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  	}  	else if (slowed == true) {  		if (slowControl == false) {  			foreach (PathMarker pm in GameVariables.Markers) {  				if (this.pieceShape.Intersects (pm.Marker)) {  					if (pm.Control == 3 && lastDirection == 1) {  						direction = 2;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 2) {  						direction = 1;  						lastDirection = 2;  					}  					else if (pm.Control == 2 && lastDirection == 4) {  						direction = 1;  						lastDirection = 4;  					}  					else if (pm.Control == 6 && lastDirection == 1) {  						direction = 4;  						lastDirection = 1;  					}  					else if (pm.Control == 2 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else if (pm.Control == 4 && lastDirection == 1) {  						direction = 1;  						lastDirection = 1;  					}  					else {  						direction = pm.Control;  					}  				}  			}  			switch (direction) {  			case 1: {  				this.pieceShape.Y -= moveSpeed;  				lastDirection = 1;  				break;  			}  			case 2: {  				this.pieceShape.X += moveSpeed;  				lastDirection = 2;  				break;  			}  			case 3: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 3;  				break;  			}  			case 4: {  				this.pieceShape.X -= moveSpeed;  				lastDirection = 4;  				break;  			}  			case 6: {  				this.pieceShape.Y += moveSpeed;  				lastDirection = 6;  				break;  			}  			case 5: {  				this.MoraleAttack ();  				alive = false;  				break;  			}  			default: {  				break;  			}  			}  			slowControl = true;  		}  		else {  			if (slowCount == 6) {  				slowControl = false;  				slowCount = 0;  			}  			slowCount++;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  }  else if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: direction = 2;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 2;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 4;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: direction = 4;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 2;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 3;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 4;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 6;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowed == true) {  	if (slowControl == false) {  		foreach (PathMarker pm in GameVariables.Markers) {  			if (this.pieceShape.Intersects (pm.Marker)) {  				if (pm.Control == 3 && lastDirection == 1) {  					direction = 2;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 2) {  					direction = 1;  					lastDirection = 2;  				}  				else if (pm.Control == 2 && lastDirection == 4) {  					direction = 1;  					lastDirection = 4;  				}  				else if (pm.Control == 6 && lastDirection == 1) {  					direction = 4;  					lastDirection = 1;  				}  				else if (pm.Control == 2 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else if (pm.Control == 4 && lastDirection == 1) {  					direction = 1;  					lastDirection = 1;  				}  				else {  					direction = pm.Control;  				}  			}  		}  		switch (direction) {  		case 1: {  			this.pieceShape.Y -= moveSpeed;  			lastDirection = 1;  			break;  		}  		case 2: {  			this.pieceShape.X += moveSpeed;  			lastDirection = 2;  			break;  		}  		case 3: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 3;  			break;  		}  		case 4: {  			this.pieceShape.X -= moveSpeed;  			lastDirection = 4;  			break;  		}  		case 6: {  			this.pieceShape.Y += moveSpeed;  			lastDirection = 6;  			break;  		}  		case 5: {  			this.MoraleAttack ();  			alive = false;  			break;  		}  		default: {  			break;  		}  		}  		slowControl = true;  	}  	else {  		if (slowCount == 6) {  			slowControl = false;  			slowCount = 0;  		}  		slowCount++;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowControl == false) {  	foreach (PathMarker pm in GameVariables.Markers) {  		if (this.pieceShape.Intersects (pm.Marker)) {  			if (pm.Control == 3 && lastDirection == 1) {  				direction = 2;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 2) {  				direction = 1;  				lastDirection = 2;  			}  			else if (pm.Control == 2 && lastDirection == 4) {  				direction = 1;  				lastDirection = 4;  			}  			else if (pm.Control == 6 && lastDirection == 1) {  				direction = 4;  				lastDirection = 1;  			}  			else if (pm.Control == 2 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else if (pm.Control == 4 && lastDirection == 1) {  				direction = 1;  				lastDirection = 1;  			}  			else {  				direction = pm.Control;  			}  		}  	}  	switch (direction) {  	case 1: {  		this.pieceShape.Y -= moveSpeed;  		lastDirection = 1;  		break;  	}  	case 2: {  		this.pieceShape.X += moveSpeed;  		lastDirection = 2;  		break;  	}  	case 3: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 3;  		break;  	}  	case 4: {  		this.pieceShape.X -= moveSpeed;  		lastDirection = 4;  		break;  	}  	case 6: {  		this.pieceShape.Y += moveSpeed;  		lastDirection = 6;  		break;  	}  	case 5: {  		this.MoraleAttack ();  		alive = false;  		break;  	}  	default: {  		break;  	}  	}  	slowControl = true;  }  else {  	if (slowCount == 6) {  		slowControl = false;  		slowCount = 0;  	}  	slowCount++;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: foreach (PathMarker pm in GameVariables.Markers) {  	if (this.pieceShape.Intersects (pm.Marker)) {  		if (pm.Control == 3 && lastDirection == 1) {  			direction = 2;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 2) {  			direction = 1;  			lastDirection = 2;  		}  		else if (pm.Control == 2 && lastDirection == 4) {  			direction = 1;  			lastDirection = 4;  		}  		else if (pm.Control == 6 && lastDirection == 1) {  			direction = 4;  			lastDirection = 1;  		}  		else if (pm.Control == 2 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else if (pm.Control == 4 && lastDirection == 1) {  			direction = 1;  			lastDirection = 1;  		}  		else {  			direction = pm.Control;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (pm.Marker)) {  	if (pm.Control == 3 && lastDirection == 1) {  		direction = 2;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 2) {  		direction = 1;  		lastDirection = 2;  	}  	else if (pm.Control == 2 && lastDirection == 4) {  		direction = 1;  		lastDirection = 4;  	}  	else if (pm.Control == 6 && lastDirection == 1) {  		direction = 4;  		lastDirection = 1;  	}  	else if (pm.Control == 2 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else if (pm.Control == 4 && lastDirection == 1) {  		direction = 1;  		lastDirection = 1;  	}  	else {  		direction = pm.Control;  	}  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 3 && lastDirection == 1) {  	direction = 2;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: direction = 2;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 2) {  	direction = 1;  	lastDirection = 2;  }  else if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 2;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 4) {  	direction = 1;  	lastDirection = 4;  }  else if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 4;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 6 && lastDirection == 1) {  	direction = 4;  	lastDirection = 1;  }  else if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: direction = 4;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 2 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (pm.Control == 4 && lastDirection == 1) {  	direction = 1;  	lastDirection = 1;  }  else {  	direction = pm.Control;  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: switch (direction) {  case 1: {  	this.pieceShape.Y -= moveSpeed;  	lastDirection = 1;  	break;  }  case 2: {  	this.pieceShape.X += moveSpeed;  	lastDirection = 2;  	break;  }  case 3: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 3;  	break;  }  case 4: {  	this.pieceShape.X -= moveSpeed;  	lastDirection = 4;  	break;  }  case 6: {  	this.pieceShape.Y += moveSpeed;  	lastDirection = 6;  	break;  }  case 5: {  	this.MoraleAttack ();  	alive = false;  	break;  }  default: {  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 2;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 3;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 4;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: lastDirection = 6;  
Magic Number,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The following statement contains a magic number: if (slowCount == 6) {  	slowControl = false;  	slowCount = 0;  }  
Magic Number,_4D13TowerDefenseGame,GameProcesses,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameProcesses.cs,Initialize,The following statement contains a magic number: graphics.PreferredBackBufferHeight = 920;  
Magic Number,_4D13TowerDefenseGame,GameProcesses,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameProcesses.cs,Initialize,The following statement contains a magic number: graphics.PreferredBackBufferWidth = 1150;  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: tiles = new Rectangle[20' 20];  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: tiles = new Rectangle[20' 20];  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: newTile.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: newTile.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: newTile.X = (45 * x) + 10;  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: newTile.X = (45 * x) + 10;  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: newTile.Y = (45 * i) + 10;  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: newTile.Y = (45 * i) + 10;  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: textures = new int[20' 20];  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: textures = new int[20' 20];  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		textures [i' x] = 0;  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture - Buildable location;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		textures [i' x] = 0;  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture - Buildable location;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,GameState,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	textures [i' x] = 0;  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture - Buildable location;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The following statement contains a magic number: if (mousePos.Intersects (select_PathDR) && mState.LeftButton == ButtonState.Pressed && tf_BackgroundSelect && !tf_PathSelect) {  	if (tf_BackgroundSelect && !tf_PathSelect) {  		tf_Grasslands = false;  		tf_Desert = true;  		tf_Tundra = false;  		saveLoadBackground = 2;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The following statement contains a magic number: if (tf_BackgroundSelect && !tf_PathSelect) {  	tf_Grasslands = false;  	tf_Desert = true;  	tf_Tundra = false;  	saveLoadBackground = 2;  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The following statement contains a magic number: saveLoadBackground = 2;  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The following statement contains a magic number: if (mousePos.Intersects (select_PathUL) && mState.LeftButton == ButtonState.Pressed && tf_BackgroundSelect && !tf_PathSelect) {  	if (tf_BackgroundSelect && !tf_PathSelect) {  		tf_Grasslands = false;  		tf_Desert = false;  		tf_Tundra = true;  		saveLoadBackground = 3;  	}  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The following statement contains a magic number: if (tf_BackgroundSelect && !tf_PathSelect) {  	tf_Grasslands = false;  	tf_Desert = false;  	tf_Tundra = true;  	saveLoadBackground = 3;  }  
Magic Number,_4D13TowerDefenseGame,GameState,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GameState.cs,MouseTileSelect,The following statement contains a magic number: saveLoadBackground = 3;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The following statement contains a magic number: frameCount = -10;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The following statement contains a magic number: GameVariables.Currency = 500;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,LoadContent,The following statement contains a magic number: GameVariables.Morale = 100;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_GameBorderRec.Width = 1150;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_GameBorderRec.Height = 920;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: sideBarBG.Width = 230;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: sideBarBG.Height = 900;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: sideBarBG.X = graphics.PreferredBackBufferWidth - 240;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: sideBarBG.Y = 10;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_BackgroundRec.Width = 900;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_BackgroundRec.Height = 900;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_BackgroundRec.X = 10;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_BackgroundRec.Y = 10;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: mapEdit_MenuRec.Width = 100;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: mapEdit_MenuRec.Height = 75;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: mapEdit_MenuRec.X = graphics.PreferredBackBufferWidth - 230;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: mapEdit_MenuRec.Y = 835;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: mapEdit_ExitRec.Width = 100;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: mapEdit_ExitRec.Height = 75;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: mapEdit_ExitRec.X = graphics.PreferredBackBufferWidth - 120;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: mapEdit_ExitRec.Y = 835;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_HealthBarRec.Width = 215;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_HealthBarRec.Height = 46;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_HealthBarRec.X = graphics.PreferredBackBufferWidth - 225;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_HealthBarRec.Y = 20;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_ManaBarRec.Width = 215;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_ManaBarRec.Height = 46;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_ManaBarRec.X = graphics.PreferredBackBufferWidth - 225;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: game_ManaBarRec.Y = 86;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_FireballRec.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_FireballRec.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_FireballRec.X = graphics.PreferredBackBufferWidth - 230;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_FireballRec.Y = 147;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_HealRec.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_HealRec.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_HealRec.X = graphics.PreferredBackBufferWidth - 175;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_HealRec.Y = 147;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_RageRec.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_RageRec.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_RageRec.X = graphics.PreferredBackBufferWidth - 120;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_RageRec.Y = 147;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_SlowRec.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_SlowRec.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_SlowRec.X = graphics.PreferredBackBufferWidth - 65;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: spell_SlowRec.Y = 147;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: twr_CatapultRec.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: twr_CatapultRec.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: twr_CatapultRec.X = graphics.PreferredBackBufferWidth - 230;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: twr_CatapultRec.Y = 222;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: twr_TrebuchetRec.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: twr_TrebuchetRec.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: twr_TrebuchetRec.X = graphics.PreferredBackBufferWidth - 175;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: twr_TrebuchetRec.Y = 222;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: for (int i = 0; i < GameVariables.Enemies.Count; i++) {  	for (int t = 0; t < GameVariables.Towers.Count; t++) {  		foreach (Spell st in GameVariables.Magic) {  			// See if towers are under spell effect  			if (GameVariables.Towers [t].PieceShape.Intersects (st.AreaOfEffect)) {  				switch (st.Effect) {  				case "berserk": {  					GameVariables.Towers [t].Berserked = true;  					break;  				}  				default: {  					GameVariables.Towers [t].Berserked = false;  					break;  				}  				}  			}  		}  		// sets towers to attack enemies.  		if (GameVariables.Enemies [i] != null) {  			if (GameVariables.Towers [t].HitBox.Intersects (GameVariables.Enemies [i].PieceShape) && GameVariables.Enemies [i].IsVisible == true) {  				GameVariables.Towers [t].AttackEnemy (GameVariables.Enemies [i]);  			}  			if (GameVariables.Enemies [i].Alive == false) {  				GameVariables.Enemies [i] = null;  				GameVariables.Towers [t].shot = null;  			}  		}  		// sets spells to work  		if (GameVariables.Enemies [i] != null) {  			if (GameVariables.Enemies [i].Immune == false && GameVariables.Enemies [i].IsVisible == true) {  				foreach (Spell s in GameVariables.Magic) {  					if (GameVariables.Enemies [i].PieceShape.Intersects (s.AreaOfEffect)) {  						switch (s.Effect) {  						case "slow": {  							GameVariables.Enemies [i].Slowed = true;  							break;  						}  						case "fire": {  							GameVariables.Enemies [i].Health -= 250;  							break;  						}  						default: {  							GameVariables.Enemies [i].Slowed = false;  							break;  						}  						}  					}  				}  			}  			if (GameVariables.Enemies [i].PieceShape.X > 800) {  				GameVariables.Enemies [i].MoraleAttack ();  				GameVariables.Enemies [i].Shot = null;  				GameVariables.Enemies.RemoveAt (i);  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: for (int i = 0; i < GameVariables.Enemies.Count; i++) {  	for (int t = 0; t < GameVariables.Towers.Count; t++) {  		foreach (Spell st in GameVariables.Magic) {  			// See if towers are under spell effect  			if (GameVariables.Towers [t].PieceShape.Intersects (st.AreaOfEffect)) {  				switch (st.Effect) {  				case "berserk": {  					GameVariables.Towers [t].Berserked = true;  					break;  				}  				default: {  					GameVariables.Towers [t].Berserked = false;  					break;  				}  				}  			}  		}  		// sets towers to attack enemies.  		if (GameVariables.Enemies [i] != null) {  			if (GameVariables.Towers [t].HitBox.Intersects (GameVariables.Enemies [i].PieceShape) && GameVariables.Enemies [i].IsVisible == true) {  				GameVariables.Towers [t].AttackEnemy (GameVariables.Enemies [i]);  			}  			if (GameVariables.Enemies [i].Alive == false) {  				GameVariables.Enemies [i] = null;  				GameVariables.Towers [t].shot = null;  			}  		}  		// sets spells to work  		if (GameVariables.Enemies [i] != null) {  			if (GameVariables.Enemies [i].Immune == false && GameVariables.Enemies [i].IsVisible == true) {  				foreach (Spell s in GameVariables.Magic) {  					if (GameVariables.Enemies [i].PieceShape.Intersects (s.AreaOfEffect)) {  						switch (s.Effect) {  						case "slow": {  							GameVariables.Enemies [i].Slowed = true;  							break;  						}  						case "fire": {  							GameVariables.Enemies [i].Health -= 250;  							break;  						}  						default: {  							GameVariables.Enemies [i].Slowed = false;  							break;  						}  						}  					}  				}  			}  			if (GameVariables.Enemies [i].PieceShape.X > 800) {  				GameVariables.Enemies [i].MoraleAttack ();  				GameVariables.Enemies [i].Shot = null;  				GameVariables.Enemies.RemoveAt (i);  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: for (int t = 0; t < GameVariables.Towers.Count; t++) {  	foreach (Spell st in GameVariables.Magic) {  		// See if towers are under spell effect  		if (GameVariables.Towers [t].PieceShape.Intersects (st.AreaOfEffect)) {  			switch (st.Effect) {  			case "berserk": {  				GameVariables.Towers [t].Berserked = true;  				break;  			}  			default: {  				GameVariables.Towers [t].Berserked = false;  				break;  			}  			}  		}  	}  	// sets towers to attack enemies.  	if (GameVariables.Enemies [i] != null) {  		if (GameVariables.Towers [t].HitBox.Intersects (GameVariables.Enemies [i].PieceShape) && GameVariables.Enemies [i].IsVisible == true) {  			GameVariables.Towers [t].AttackEnemy (GameVariables.Enemies [i]);  		}  		if (GameVariables.Enemies [i].Alive == false) {  			GameVariables.Enemies [i] = null;  			GameVariables.Towers [t].shot = null;  		}  	}  	// sets spells to work  	if (GameVariables.Enemies [i] != null) {  		if (GameVariables.Enemies [i].Immune == false && GameVariables.Enemies [i].IsVisible == true) {  			foreach (Spell s in GameVariables.Magic) {  				if (GameVariables.Enemies [i].PieceShape.Intersects (s.AreaOfEffect)) {  					switch (s.Effect) {  					case "slow": {  						GameVariables.Enemies [i].Slowed = true;  						break;  					}  					case "fire": {  						GameVariables.Enemies [i].Health -= 250;  						break;  					}  					default: {  						GameVariables.Enemies [i].Slowed = false;  						break;  					}  					}  				}  			}  		}  		if (GameVariables.Enemies [i].PieceShape.X > 800) {  			GameVariables.Enemies [i].MoraleAttack ();  			GameVariables.Enemies [i].Shot = null;  			GameVariables.Enemies.RemoveAt (i);  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: for (int t = 0; t < GameVariables.Towers.Count; t++) {  	foreach (Spell st in GameVariables.Magic) {  		// See if towers are under spell effect  		if (GameVariables.Towers [t].PieceShape.Intersects (st.AreaOfEffect)) {  			switch (st.Effect) {  			case "berserk": {  				GameVariables.Towers [t].Berserked = true;  				break;  			}  			default: {  				GameVariables.Towers [t].Berserked = false;  				break;  			}  			}  		}  	}  	// sets towers to attack enemies.  	if (GameVariables.Enemies [i] != null) {  		if (GameVariables.Towers [t].HitBox.Intersects (GameVariables.Enemies [i].PieceShape) && GameVariables.Enemies [i].IsVisible == true) {  			GameVariables.Towers [t].AttackEnemy (GameVariables.Enemies [i]);  		}  		if (GameVariables.Enemies [i].Alive == false) {  			GameVariables.Enemies [i] = null;  			GameVariables.Towers [t].shot = null;  		}  	}  	// sets spells to work  	if (GameVariables.Enemies [i] != null) {  		if (GameVariables.Enemies [i].Immune == false && GameVariables.Enemies [i].IsVisible == true) {  			foreach (Spell s in GameVariables.Magic) {  				if (GameVariables.Enemies [i].PieceShape.Intersects (s.AreaOfEffect)) {  					switch (s.Effect) {  					case "slow": {  						GameVariables.Enemies [i].Slowed = true;  						break;  					}  					case "fire": {  						GameVariables.Enemies [i].Health -= 250;  						break;  					}  					default: {  						GameVariables.Enemies [i].Slowed = false;  						break;  					}  					}  				}  			}  		}  		if (GameVariables.Enemies [i].PieceShape.X > 800) {  			GameVariables.Enemies [i].MoraleAttack ();  			GameVariables.Enemies [i].Shot = null;  			GameVariables.Enemies.RemoveAt (i);  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (GameVariables.Enemies [i] != null) {  	if (GameVariables.Enemies [i].Immune == false && GameVariables.Enemies [i].IsVisible == true) {  		foreach (Spell s in GameVariables.Magic) {  			if (GameVariables.Enemies [i].PieceShape.Intersects (s.AreaOfEffect)) {  				switch (s.Effect) {  				case "slow": {  					GameVariables.Enemies [i].Slowed = true;  					break;  				}  				case "fire": {  					GameVariables.Enemies [i].Health -= 250;  					break;  				}  				default: {  					GameVariables.Enemies [i].Slowed = false;  					break;  				}  				}  			}  		}  	}  	if (GameVariables.Enemies [i].PieceShape.X > 800) {  		GameVariables.Enemies [i].MoraleAttack ();  		GameVariables.Enemies [i].Shot = null;  		GameVariables.Enemies.RemoveAt (i);  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (GameVariables.Enemies [i] != null) {  	if (GameVariables.Enemies [i].Immune == false && GameVariables.Enemies [i].IsVisible == true) {  		foreach (Spell s in GameVariables.Magic) {  			if (GameVariables.Enemies [i].PieceShape.Intersects (s.AreaOfEffect)) {  				switch (s.Effect) {  				case "slow": {  					GameVariables.Enemies [i].Slowed = true;  					break;  				}  				case "fire": {  					GameVariables.Enemies [i].Health -= 250;  					break;  				}  				default: {  					GameVariables.Enemies [i].Slowed = false;  					break;  				}  				}  			}  		}  	}  	if (GameVariables.Enemies [i].PieceShape.X > 800) {  		GameVariables.Enemies [i].MoraleAttack ();  		GameVariables.Enemies [i].Shot = null;  		GameVariables.Enemies.RemoveAt (i);  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (GameVariables.Enemies [i].Immune == false && GameVariables.Enemies [i].IsVisible == true) {  	foreach (Spell s in GameVariables.Magic) {  		if (GameVariables.Enemies [i].PieceShape.Intersects (s.AreaOfEffect)) {  			switch (s.Effect) {  			case "slow": {  				GameVariables.Enemies [i].Slowed = true;  				break;  			}  			case "fire": {  				GameVariables.Enemies [i].Health -= 250;  				break;  			}  			default: {  				GameVariables.Enemies [i].Slowed = false;  				break;  			}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: foreach (Spell s in GameVariables.Magic) {  	if (GameVariables.Enemies [i].PieceShape.Intersects (s.AreaOfEffect)) {  		switch (s.Effect) {  		case "slow": {  			GameVariables.Enemies [i].Slowed = true;  			break;  		}  		case "fire": {  			GameVariables.Enemies [i].Health -= 250;  			break;  		}  		default: {  			GameVariables.Enemies [i].Slowed = false;  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (GameVariables.Enemies [i].PieceShape.Intersects (s.AreaOfEffect)) {  	switch (s.Effect) {  	case "slow": {  		GameVariables.Enemies [i].Slowed = true;  		break;  	}  	case "fire": {  		GameVariables.Enemies [i].Health -= 250;  		break;  	}  	default: {  		GameVariables.Enemies [i].Slowed = false;  		break;  	}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: switch (s.Effect) {  case "slow": {  	GameVariables.Enemies [i].Slowed = true;  	break;  }  case "fire": {  	GameVariables.Enemies [i].Health -= 250;  	break;  }  default: {  	GameVariables.Enemies [i].Slowed = false;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: GameVariables.Enemies [i].Health -= 250;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (GameVariables.Enemies [i].PieceShape.X > 800) {  	GameVariables.Enemies [i].MoraleAttack ();  	GameVariables.Enemies [i].Shot = null;  	GameVariables.Enemies.RemoveAt (i);  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (GameVariables.Towers.Count > 0) {  	if (frameCount == 119) {  		for (int k = 0; k <= enemySpawner; k++) {  			if (k < GameVariables.Enemies.Count && GameVariables.Enemies [k] != null) {  				GameVariables.Enemies [k].IsVisible = true;  			}  		}  		enemySpawner++;  		// add spell despawn around  		GameVariables.Magic.Clear ();  		frameCount = 0;  	}  	frameCount++;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (frameCount == 119) {  	for (int k = 0; k <= enemySpawner; k++) {  		if (k < GameVariables.Enemies.Count && GameVariables.Enemies [k] != null) {  			GameVariables.Enemies [k].IsVisible = true;  		}  	}  	enemySpawner++;  	// add spell despawn around  	GameVariables.Magic.Clear ();  	frameCount = 0;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (spell_HealRec)) {  	if (mState.LeftButton == ButtonState.Pressed) {  		if (GameVariables.Currency >= 50) {  			GameVariables.Currency = GameVariables.Currency - 10;  			GameVariables.Morale = GameVariables.Morale + 1;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (spell_HealRec)) {  	if (mState.LeftButton == ButtonState.Pressed) {  		if (GameVariables.Currency >= 50) {  			GameVariables.Currency = GameVariables.Currency - 10;  			GameVariables.Morale = GameVariables.Morale + 1;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (mState.LeftButton == ButtonState.Pressed) {  	if (GameVariables.Currency >= 50) {  		GameVariables.Currency = GameVariables.Currency - 10;  		GameVariables.Morale = GameVariables.Morale + 1;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (mState.LeftButton == ButtonState.Pressed) {  	if (GameVariables.Currency >= 50) {  		GameVariables.Currency = GameVariables.Currency - 10;  		GameVariables.Morale = GameVariables.Morale + 1;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (GameVariables.Currency >= 50) {  	GameVariables.Currency = GameVariables.Currency - 10;  	GameVariables.Morale = GameVariables.Morale + 1;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: if (GameVariables.Currency >= 50) {  	GameVariables.Currency = GameVariables.Currency - 10;  	GameVariables.Morale = GameVariables.Morale + 1;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Update,The following statement contains a magic number: GameVariables.Currency = GameVariables.Currency - 10;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (saveLoadBackground) {  case 1: {  	spriteBatch.Draw (bg_Grasslands' game_BackgroundRec' Color.Gray);  	break;  }  case 2: {  	spriteBatch.Draw (bg_Desert' game_BackgroundRec' Color.Gray);  	break;  }  case 3: {  	spriteBatch.Draw (bg_Tundra' game_BackgroundRec' Color.LightGray);  	break;  }  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (saveLoadBackground) {  case 1: {  	spriteBatch.Draw (bg_Grasslands' game_BackgroundRec' Color.Gray);  	break;  }  case 2: {  	spriteBatch.Draw (bg_Desert' game_BackgroundRec' Color.Gray);  	break;  }  case 3: {  	spriteBatch.Draw (bg_Tundra' game_BackgroundRec' Color.LightGray);  	break;  }  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (spell_HealRec)) {  	if (mState.LeftButton == ButtonState.Pressed) {  		if (GameVariables.Morale < 101) {  			if (GameVariables.Currency >= 50) {  				GameVariables.Currency = GameVariables.Currency - 10;  				GameVariables.Morale = GameVariables.Morale + 1;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (spell_HealRec)) {  	if (mState.LeftButton == ButtonState.Pressed) {  		if (GameVariables.Morale < 101) {  			if (GameVariables.Currency >= 50) {  				GameVariables.Currency = GameVariables.Currency - 10;  				GameVariables.Morale = GameVariables.Morale + 1;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (spell_HealRec)) {  	if (mState.LeftButton == ButtonState.Pressed) {  		if (GameVariables.Morale < 101) {  			if (GameVariables.Currency >= 50) {  				GameVariables.Currency = GameVariables.Currency - 10;  				GameVariables.Morale = GameVariables.Morale + 1;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mState.LeftButton == ButtonState.Pressed) {  	if (GameVariables.Morale < 101) {  		if (GameVariables.Currency >= 50) {  			GameVariables.Currency = GameVariables.Currency - 10;  			GameVariables.Morale = GameVariables.Morale + 1;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mState.LeftButton == ButtonState.Pressed) {  	if (GameVariables.Morale < 101) {  		if (GameVariables.Currency >= 50) {  			GameVariables.Currency = GameVariables.Currency - 10;  			GameVariables.Morale = GameVariables.Morale + 1;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mState.LeftButton == ButtonState.Pressed) {  	if (GameVariables.Morale < 101) {  		if (GameVariables.Currency >= 50) {  			GameVariables.Currency = GameVariables.Currency - 10;  			GameVariables.Morale = GameVariables.Morale + 1;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Morale < 101) {  	if (GameVariables.Currency >= 50) {  		GameVariables.Currency = GameVariables.Currency - 10;  		GameVariables.Morale = GameVariables.Morale + 1;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Morale < 101) {  	if (GameVariables.Currency >= 50) {  		GameVariables.Currency = GameVariables.Currency - 10;  		GameVariables.Morale = GameVariables.Morale + 1;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Morale < 101) {  	if (GameVariables.Currency >= 50) {  		GameVariables.Currency = GameVariables.Currency - 10;  		GameVariables.Morale = GameVariables.Morale + 1;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 50) {  	GameVariables.Currency = GameVariables.Currency - 10;  	GameVariables.Morale = GameVariables.Morale + 1;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 50) {  	GameVariables.Currency = GameVariables.Currency - 10;  	GameVariables.Morale = GameVariables.Morale + 1;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Currency = GameVariables.Currency - 10;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Catapult) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create tower  						textures [x' y] = 11;  						GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  						GameVariables.Currency = GameVariables.Currency - 100;  					}  				}  			}  			if (tf_Trebuchet) {  				if (textures [x' y] == 0) {  					if (GameVariables.Currency >= 200) {  						//create tower  						textures [x' y] = 12;  						GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  						GameVariables.Currency = GameVariables.Currency - 200;  					}  				}  			}  			if (tf_Fire) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 13;  						GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Rage) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 15;  						GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  			if (tf_Slow) {  				if (textures [x' y] != 0 || textures [x' y] == 0) {  					if (GameVariables.Currency >= 100) {  						//create magic  						//textures[x' y] = 16;  						GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  						GameVariables.Currency = GameVariables.Currency - 50;  						if (GameVariables.Currency <= 0) {  							GameVariables.Currency = 0;  						}  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Catapult) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create tower  					textures [x' y] = 11;  					GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  					GameVariables.Currency = GameVariables.Currency - 100;  				}  			}  		}  		if (tf_Trebuchet) {  			if (textures [x' y] == 0) {  				if (GameVariables.Currency >= 200) {  					//create tower  					textures [x' y] = 12;  					GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  					GameVariables.Currency = GameVariables.Currency - 200;  				}  			}  		}  		if (tf_Fire) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 13;  					GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Rage) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 15;  					GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  		if (tf_Slow) {  			if (textures [x' y] != 0 || textures [x' y] == 0) {  				if (GameVariables.Currency >= 100) {  					//create magic  					//textures[x' y] = 16;  					GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  					GameVariables.Currency = GameVariables.Currency - 50;  					if (GameVariables.Currency <= 0) {  						GameVariables.Currency = 0;  					}  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Catapult) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create tower  				textures [x' y] = 11;  				GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  				GameVariables.Currency = GameVariables.Currency - 100;  			}  		}  	}  	if (tf_Trebuchet) {  		if (textures [x' y] == 0) {  			if (GameVariables.Currency >= 200) {  				//create tower  				textures [x' y] = 12;  				GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  				GameVariables.Currency = GameVariables.Currency - 200;  			}  		}  	}  	if (tf_Fire) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 13;  				GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Rage) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 15;  				GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  	if (tf_Slow) {  		if (textures [x' y] != 0 || textures [x' y] == 0) {  			if (GameVariables.Currency >= 100) {  				//create magic  				//textures[x' y] = 16;  				GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  				GameVariables.Currency = GameVariables.Currency - 50;  				if (GameVariables.Currency <= 0) {  					GameVariables.Currency = 0;  				}  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Catapult) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create tower  			textures [x' y] = 11;  			GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  			GameVariables.Currency = GameVariables.Currency - 100;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Catapult) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create tower  			textures [x' y] = 11;  			GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  			GameVariables.Currency = GameVariables.Currency - 100;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Catapult) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create tower  			textures [x' y] = 11;  			GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  			GameVariables.Currency = GameVariables.Currency - 100;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Catapult) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create tower  			textures [x' y] = 11;  			GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  			GameVariables.Currency = GameVariables.Currency - 100;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Catapult) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create tower  			textures [x' y] = 11;  			GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  			GameVariables.Currency = GameVariables.Currency - 100;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Catapult) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create tower  			textures [x' y] = 11;  			GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  			GameVariables.Currency = GameVariables.Currency - 100;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Catapult) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create tower  			textures [x' y] = 11;  			GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  			GameVariables.Currency = GameVariables.Currency - 100;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Catapult) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create tower  			textures [x' y] = 11;  			GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  			GameVariables.Currency = GameVariables.Currency - 100;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Catapult) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create tower  			textures [x' y] = 11;  			GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  			GameVariables.Currency = GameVariables.Currency - 100;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create tower  		textures [x' y] = 11;  		GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  		GameVariables.Currency = GameVariables.Currency - 100;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create tower  		textures [x' y] = 11;  		GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  		GameVariables.Currency = GameVariables.Currency - 100;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create tower  		textures [x' y] = 11;  		GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  		GameVariables.Currency = GameVariables.Currency - 100;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create tower  		textures [x' y] = 11;  		GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  		GameVariables.Currency = GameVariables.Currency - 100;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create tower  		textures [x' y] = 11;  		GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  		GameVariables.Currency = GameVariables.Currency - 100;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create tower  		textures [x' y] = 11;  		GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  		GameVariables.Currency = GameVariables.Currency - 100;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create tower  		textures [x' y] = 11;  		GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  		GameVariables.Currency = GameVariables.Currency - 100;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create tower  		textures [x' y] = 11;  		GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  		GameVariables.Currency = GameVariables.Currency - 100;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create tower  		textures [x' y] = 11;  		GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  		GameVariables.Currency = GameVariables.Currency - 100;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create tower  	textures [x' y] = 11;  	GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  	GameVariables.Currency = GameVariables.Currency - 100;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create tower  	textures [x' y] = 11;  	GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  	GameVariables.Currency = GameVariables.Currency - 100;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create tower  	textures [x' y] = 11;  	GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  	GameVariables.Currency = GameVariables.Currency - 100;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create tower  	textures [x' y] = 11;  	GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  	GameVariables.Currency = GameVariables.Currency - 100;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create tower  	textures [x' y] = 11;  	GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  	GameVariables.Currency = GameVariables.Currency - 100;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create tower  	textures [x' y] = 11;  	GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  	GameVariables.Currency = GameVariables.Currency - 100;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create tower  	textures [x' y] = 11;  	GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  	GameVariables.Currency = GameVariables.Currency - 100;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create tower  	textures [x' y] = 11;  	GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  	GameVariables.Currency = GameVariables.Currency - 100;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create tower  	textures [x' y] = 11;  	GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  	GameVariables.Currency = GameVariables.Currency - 100;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: textures [x' y] = 11;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 50' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower1"' "Projectiles/Projectile"' 5' 10' ""' 10));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Currency = GameVariables.Currency - 100;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Trebuchet) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 200) {  			//create tower  			textures [x' y] = 12;  			GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  			GameVariables.Currency = GameVariables.Currency - 200;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Trebuchet) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 200) {  			//create tower  			textures [x' y] = 12;  			GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  			GameVariables.Currency = GameVariables.Currency - 200;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Trebuchet) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 200) {  			//create tower  			textures [x' y] = 12;  			GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  			GameVariables.Currency = GameVariables.Currency - 200;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Trebuchet) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 200) {  			//create tower  			textures [x' y] = 12;  			GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  			GameVariables.Currency = GameVariables.Currency - 200;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Trebuchet) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 200) {  			//create tower  			textures [x' y] = 12;  			GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  			GameVariables.Currency = GameVariables.Currency - 200;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Trebuchet) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 200) {  			//create tower  			textures [x' y] = 12;  			GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  			GameVariables.Currency = GameVariables.Currency - 200;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Trebuchet) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 200) {  			//create tower  			textures [x' y] = 12;  			GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  			GameVariables.Currency = GameVariables.Currency - 200;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Trebuchet) {  	if (textures [x' y] == 0) {  		if (GameVariables.Currency >= 200) {  			//create tower  			textures [x' y] = 12;  			GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  			GameVariables.Currency = GameVariables.Currency - 200;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 200) {  		//create tower  		textures [x' y] = 12;  		GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  		GameVariables.Currency = GameVariables.Currency - 200;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 200) {  		//create tower  		textures [x' y] = 12;  		GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  		GameVariables.Currency = GameVariables.Currency - 200;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 200) {  		//create tower  		textures [x' y] = 12;  		GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  		GameVariables.Currency = GameVariables.Currency - 200;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 200) {  		//create tower  		textures [x' y] = 12;  		GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  		GameVariables.Currency = GameVariables.Currency - 200;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 200) {  		//create tower  		textures [x' y] = 12;  		GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  		GameVariables.Currency = GameVariables.Currency - 200;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 200) {  		//create tower  		textures [x' y] = 12;  		GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  		GameVariables.Currency = GameVariables.Currency - 200;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 200) {  		//create tower  		textures [x' y] = 12;  		GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  		GameVariables.Currency = GameVariables.Currency - 200;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] == 0) {  	if (GameVariables.Currency >= 200) {  		//create tower  		textures [x' y] = 12;  		GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  		GameVariables.Currency = GameVariables.Currency - 200;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 200) {  	//create tower  	textures [x' y] = 12;  	GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  	GameVariables.Currency = GameVariables.Currency - 200;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 200) {  	//create tower  	textures [x' y] = 12;  	GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  	GameVariables.Currency = GameVariables.Currency - 200;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 200) {  	//create tower  	textures [x' y] = 12;  	GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  	GameVariables.Currency = GameVariables.Currency - 200;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 200) {  	//create tower  	textures [x' y] = 12;  	GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  	GameVariables.Currency = GameVariables.Currency - 200;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 200) {  	//create tower  	textures [x' y] = 12;  	GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  	GameVariables.Currency = GameVariables.Currency - 200;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 200) {  	//create tower  	textures [x' y] = 12;  	GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  	GameVariables.Currency = GameVariables.Currency - 200;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 200) {  	//create tower  	textures [x' y] = 12;  	GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  	GameVariables.Currency = GameVariables.Currency - 200;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 200) {  	//create tower  	textures [x' y] = 12;  	GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  	GameVariables.Currency = GameVariables.Currency - 200;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: textures [x' y] = 12;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Towers.Add (new Tower (1' 100' GameState.tiles [x' y].X' GameState.tiles [x' y].Y' 45' 45' "Tiles/Tiles - Tower Art/Tower2"' "Projectiles/Projectile"' 1' 5' ""' 40));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Currency = GameVariables.Currency - 200;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Fire) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 13;  			GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Fire) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 13;  			GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Fire) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 13;  			GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Fire) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 13;  			GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 13;  		GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 13;  		GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 13;  		GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 13;  		GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 13;  	GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 13;  	GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 13;  	GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 13;  	GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Magic.Add (new Spell ("fire"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Currency = GameVariables.Currency - 50;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Rage) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 15;  			GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Rage) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 15;  			GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Rage) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 15;  			GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Rage) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 15;  			GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 15;  		GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 15;  		GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 15;  		GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 15;  		GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 15;  	GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 15;  	GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 15;  	GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 15;  	GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Magic.Add (new Spell ("speed"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Currency = GameVariables.Currency - 50;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Slow) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 16;  			GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Slow) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 16;  			GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Slow) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 16;  			GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (tf_Slow) {  	if (textures [x' y] != 0 || textures [x' y] == 0) {  		if (GameVariables.Currency >= 100) {  			//create magic  			//textures[x' y] = 16;  			GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  			GameVariables.Currency = GameVariables.Currency - 50;  			if (GameVariables.Currency <= 0) {  				GameVariables.Currency = 0;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 16;  		GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 16;  		GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 16;  		GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (textures [x' y] != 0 || textures [x' y] == 0) {  	if (GameVariables.Currency >= 100) {  		//create magic  		//textures[x' y] = 16;  		GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  		GameVariables.Currency = GameVariables.Currency - 50;  		if (GameVariables.Currency <= 0) {  			GameVariables.Currency = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 16;  	GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 16;  	GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 16;  	GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: if (GameVariables.Currency >= 100) {  	//create magic  	//textures[x' y] = 16;  	GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  	GameVariables.Currency = GameVariables.Currency - 50;  	if (GameVariables.Currency <= 0) {  		GameVariables.Currency = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Magic.Add (new Spell ("slow"' GameState.tiles [x' y].X - 45' GameState.tiles [x' y].Y - 45));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: GameVariables.Currency = GameVariables.Currency - 50;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 11:  			spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  			break;  		case 12:  			spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  			break;  		case 13:  			spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  			break;  		case 15:  			spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  			break;  		case 16:  			spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 11:  			spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  			break;  		case 12:  			spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  			break;  		case 13:  			spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  			break;  		case 15:  			spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  			break;  		case 16:  			spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 11:  			spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  			break;  		case 12:  			spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  			break;  		case 13:  			spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  			break;  		case 15:  			spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  			break;  		case 16:  			spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 11:  			spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  			break;  		case 12:  			spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  			break;  		case 13:  			spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  			break;  		case 15:  			spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  			break;  		case 16:  			spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 11:  			spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  			break;  		case 12:  			spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  			break;  		case 13:  			spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  			break;  		case 15:  			spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  			break;  		case 16:  			spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 11:  			spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  			break;  		case 12:  			spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  			break;  		case 13:  			spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  			break;  		case 15:  			spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  			break;  		case 16:  			spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 11:  			spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  			break;  		case 12:  			spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  			break;  		case 13:  			spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  			break;  		case 15:  			spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  			break;  		case 16:  			spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 11:  		spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  		break;  	case 12:  		spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  		break;  	case 13:  		spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  		break;  	case 15:  		spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  		break;  	case 16:  		spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 11:  		spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  		break;  	case 12:  		spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  		break;  	case 13:  		spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  		break;  	case 15:  		spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  		break;  	case 16:  		spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 11:  		spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  		break;  	case 12:  		spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  		break;  	case 13:  		spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  		break;  	case 15:  		spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  		break;  	case 16:  		spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 11:  		spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  		break;  	case 12:  		spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  		break;  	case 13:  		spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  		break;  	case 15:  		spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  		break;  	case 16:  		spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 11:  		spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  		break;  	case 12:  		spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  		break;  	case 13:  		spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  		break;  	case 15:  		spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  		break;  	case 16:  		spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 11:  		spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  		break;  	case 12:  		spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  		break;  	case 13:  		spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  		break;  	case 15:  		spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  		break;  	case 16:  		spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 11:  	spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  	break;  case 12:  	spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  	break;  case 13:  	spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  	break;  case 15:  	spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  	break;  case 16:  	spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 11:  	spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  	break;  case 12:  	spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  	break;  case 13:  	spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  	break;  case 15:  	spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  	break;  case 16:  	spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 11:  	spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  	break;  case 12:  	spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  	break;  case 13:  	spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  	break;  case 15:  	spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  	break;  case 16:  	spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 11:  	spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  	break;  case 12:  	spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  	break;  case 13:  	spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  	break;  case 15:  	spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  	break;  case 16:  	spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadMap,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadMap.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 11:  	spriteBatch.Draw (twr_Catapult_Txtr' tiles [x' y]' Color.White);  	break;  case 12:  	spriteBatch.Draw (twr_Trebuchet_Txtr' tiles [x' y]' Color.White);  	break;  case 13:  	spriteBatch.Draw (spell_Fireball_Txtr' tiles [x' y]' Color.White);  	break;  case 15:  	spriteBatch.Draw (spell_Rage_Txtr' tiles [x' y]' Color.White);  	break;  case 16:  	spriteBatch.Draw (spell_Slow_Txtr' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Width = 200;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Height = 88;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.X = 940;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Y = 822;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameProcesses.saveLoad.LoadComplete) {  	#region Initalization  	// Sets the Health and mana  	GameVariables.Currency = 500;  	GameVariables.Morale = 100;  	// Sets everything up the lists for use  	//GameVariables.Towers = null;  	//GameVariables.Enemies = null;  	GameVariables.Magic = new List<Spell> ();  	//GameVariables.Markers = null;  	// set the list of enemies to exist  	GameVariables.Enemies = new List<Enemy> ();  	GameVariables.Towers = new List<Tower> ();  	GameVariables.Markers = new List<PathMarker> ();  	// Spawn location  	GameVariables.SpawnLocationX = 0;  	GameVariables.SpawnLocationY = 0;  	#endregion  	#region Portal finding  	// Goes to find the portal  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  				GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	#region Pathmarker adding  	// adds path markers on the path  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			switch (GameState.textures [i' j]) {  			case 1: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  				//3  				break;  			}  			case 2: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  				//3  				break;  			}  			case 3: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  				//4  				break;  			}  			case 4: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  				//2  				break;  			}  			case 10: {  				GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  				break;  			}  			}  		}  	}  	#endregion  	#region Enemy spawning  	// spawn a list of 1000 enemies  	for (int i = 0; i < 1000; i++) {  		GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  	}  	#endregion  	#region Draw tectures (X'Y)  	// Draw tectures at their XY cordiantes  	int xDim = 0;  	int yDim = 0;  	for (int i = 0; i < 20; i++) {  		for (int j = 0; j < 20; j++) {  			if (GameState.textures [i' j] == 9) {  				xDim = GameState.tiles [i' j].X;  				yDim = GameState.tiles [i' j].Y;  			}  		}  	}  	#endregion  	return GameProcesses.GameStateEnum.main_LoadMap;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Currency = 500;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Morale = 100;  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		if (GameState.textures [i' j] == 9) {  			GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  			GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		if (GameState.textures [i' j] == 9) {  			GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  			GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		if (GameState.textures [i' j] == 9) {  			GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  			GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	if (GameState.textures [i' j] == 9) {  		GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  		GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	if (GameState.textures [i' j] == 9) {  		GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  		GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameState.textures [i' j] == 9) {  	GameVariables.SpawnLocationX = GameState.tiles [i' j].X;  	GameVariables.SpawnLocationY = GameState.tiles [i' j].Y;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		switch (GameState.textures [i' j]) {  		case 1: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  			//3  			break;  		}  		case 2: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  			//3  			break;  		}  		case 3: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  			//4  			break;  		}  		case 4: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  			//2  			break;  		}  		case 10: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		switch (GameState.textures [i' j]) {  		case 1: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  			//3  			break;  		}  		case 2: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  			//3  			break;  		}  		case 3: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  			//4  			break;  		}  		case 4: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  			//2  			break;  		}  		case 10: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		switch (GameState.textures [i' j]) {  		case 1: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  			//3  			break;  		}  		case 2: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  			//3  			break;  		}  		case 3: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  			//4  			break;  		}  		case 4: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  			//2  			break;  		}  		case 10: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		switch (GameState.textures [i' j]) {  		case 1: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  			//3  			break;  		}  		case 2: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  			//3  			break;  		}  		case 3: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  			//4  			break;  		}  		case 4: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  			//2  			break;  		}  		case 10: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		switch (GameState.textures [i' j]) {  		case 1: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  			//3  			break;  		}  		case 2: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  			//3  			break;  		}  		case 3: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  			//4  			break;  		}  		case 4: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  			//2  			break;  		}  		case 10: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		switch (GameState.textures [i' j]) {  		case 1: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  			//3  			break;  		}  		case 2: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  			//3  			break;  		}  		case 3: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  			//4  			break;  		}  		case 4: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  			//2  			break;  		}  		case 10: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		switch (GameState.textures [i' j]) {  		case 1: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  			//3  			break;  		}  		case 2: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  			//3  			break;  		}  		case 3: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  			//4  			break;  		}  		case 4: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  			//2  			break;  		}  		case 10: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		switch (GameState.textures [i' j]) {  		case 1: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  			//3  			break;  		}  		case 2: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  			//3  			break;  		}  		case 3: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  			//4  			break;  		}  		case 4: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  			//2  			break;  		}  		case 10: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		switch (GameState.textures [i' j]) {  		case 1: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  			//3  			break;  		}  		case 2: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  			//3  			break;  		}  		case 3: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  			//4  			break;  		}  		case 4: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  			//2  			break;  		}  		case 10: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		switch (GameState.textures [i' j]) {  		case 1: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  			//3  			break;  		}  		case 2: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  			//3  			break;  		}  		case 3: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  			//4  			break;  		}  		case 4: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  			//2  			break;  		}  		case 10: {  			GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  			break;  		}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	switch (GameState.textures [i' j]) {  	case 1: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  		//3  		break;  	}  	case 2: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  		//3  		break;  	}  	case 3: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  		//4  		break;  	}  	case 4: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  		//2  		break;  	}  	case 10: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  		break;  	}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	switch (GameState.textures [i' j]) {  	case 1: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  		//3  		break;  	}  	case 2: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  		//3  		break;  	}  	case 3: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  		//4  		break;  	}  	case 4: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  		//2  		break;  	}  	case 10: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  		break;  	}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	switch (GameState.textures [i' j]) {  	case 1: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  		//3  		break;  	}  	case 2: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  		//3  		break;  	}  	case 3: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  		//4  		break;  	}  	case 4: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  		//2  		break;  	}  	case 10: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  		break;  	}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	switch (GameState.textures [i' j]) {  	case 1: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  		//3  		break;  	}  	case 2: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  		//3  		break;  	}  	case 3: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  		//4  		break;  	}  	case 4: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  		//2  		break;  	}  	case 10: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  		break;  	}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	switch (GameState.textures [i' j]) {  	case 1: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  		//3  		break;  	}  	case 2: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  		//3  		break;  	}  	case 3: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  		//4  		break;  	}  	case 4: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  		//2  		break;  	}  	case 10: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  		break;  	}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	switch (GameState.textures [i' j]) {  	case 1: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  		//3  		break;  	}  	case 2: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  		//3  		break;  	}  	case 3: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  		//4  		break;  	}  	case 4: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  		//2  		break;  	}  	case 10: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  		break;  	}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	switch (GameState.textures [i' j]) {  	case 1: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  		//3  		break;  	}  	case 2: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  		//3  		break;  	}  	case 3: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  		//4  		break;  	}  	case 4: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  		//2  		break;  	}  	case 10: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  		break;  	}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	switch (GameState.textures [i' j]) {  	case 1: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  		//3  		break;  	}  	case 2: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  		//3  		break;  	}  	case 3: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  		//4  		break;  	}  	case 4: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  		//2  		break;  	}  	case 10: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  		break;  	}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	switch (GameState.textures [i' j]) {  	case 1: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  		//3  		break;  	}  	case 2: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  		//3  		break;  	}  	case 3: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  		//4  		break;  	}  	case 4: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  		//2  		break;  	}  	case 10: {  		GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  		break;  	}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: switch (GameState.textures [i' j]) {  case 1: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  	//3  	break;  }  case 2: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  	//3  	break;  }  case 3: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  	//4  	break;  }  case 4: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  	//2  	break;  }  case 10: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: switch (GameState.textures [i' j]) {  case 1: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  	//3  	break;  }  case 2: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  	//3  	break;  }  case 3: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  	//4  	break;  }  case 4: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  	//2  	break;  }  case 10: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: switch (GameState.textures [i' j]) {  case 1: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  	//3  	break;  }  case 2: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  	//3  	break;  }  case 3: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  	//4  	break;  }  case 4: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  	//2  	break;  }  case 10: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: switch (GameState.textures [i' j]) {  case 1: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  	//3  	break;  }  case 2: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  	//3  	break;  }  case 3: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  	//4  	break;  }  case 4: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  	//2  	break;  }  case 10: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: switch (GameState.textures [i' j]) {  case 1: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  	//3  	break;  }  case 2: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  	//3  	break;  }  case 3: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  	//4  	break;  }  case 4: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  	//2  	break;  }  case 10: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: switch (GameState.textures [i' j]) {  case 1: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  	//3  	break;  }  case 2: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  	//3  	break;  }  case 3: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  	//4  	break;  }  case 4: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  	//2  	break;  }  case 10: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: switch (GameState.textures [i' j]) {  case 1: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  	//3  	break;  }  case 2: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  	//3  	break;  }  case 3: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  	//4  	break;  }  case 4: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  	//2  	break;  }  case 10: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: switch (GameState.textures [i' j]) {  case 1: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  	//3  	break;  }  case 2: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  	//3  	break;  }  case 3: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  	//4  	break;  }  case 4: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  	//2  	break;  }  case 10: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: GameVariables.Enemies.Add (new Enemy (10 * i' 20' GameVariables.SpawnLocationX' GameVariables.SpawnLocationY' 50' 50' "Monster"' 1' (i / 2)' (i / 4)' false' false));  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		if (GameState.textures [i' j] == 9) {  			xDim = GameState.tiles [i' j].X;  			yDim = GameState.tiles [i' j].Y;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		if (GameState.textures [i' j] == 9) {  			xDim = GameState.tiles [i' j].X;  			yDim = GameState.tiles [i' j].Y;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int j = 0; j < 20; j++) {  		if (GameState.textures [i' j] == 9) {  			xDim = GameState.tiles [i' j].X;  			yDim = GameState.tiles [i' j].Y;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	if (GameState.textures [i' j] == 9) {  		xDim = GameState.tiles [i' j].X;  		yDim = GameState.tiles [i' j].Y;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: for (int j = 0; j < 20; j++) {  	if (GameState.textures [i' j] == 9) {  		xDim = GameState.tiles [i' j].X;  		yDim = GameState.tiles [i' j].Y;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following statement contains a magic number: if (GameState.textures [i' j] == 9) {  	xDim = GameState.tiles [i' j].X;  	yDim = GameState.tiles [i' j].Y;  }  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Width = 200;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Height = 88;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.X = 475;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Y = 750;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_LoadRec.Width = 200;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_LoadRec.Height = 88;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_LoadRec.X = 475;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_LoadRec.Y = 554;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_MapEditorRec.Width = 200;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_MapEditorRec.Height = 88;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_MapEditorRec.X = 475;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_MapEditorRec.Y = 652;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mapEdit_MainBackground.Width = 1150;  
Magic Number,_4D13TowerDefenseGame,GS_Game_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_MainMenu.cs,Update,The following statement contains a magic number: mapEdit_MainBackground.Height = 920;  
Magic Number,_4D13TowerDefenseGame,GS_Game_Settings,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_Settings.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Width = 200;  
Magic Number,_4D13TowerDefenseGame,GS_Game_Settings,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_Settings.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Height = 88;  
Magic Number,_4D13TowerDefenseGame,GS_Game_Settings,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_Settings.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.X = 475;  
Magic Number,_4D13TowerDefenseGame,GS_Game_Settings,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_Settings.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Y = 750;  
Magic Number,_4D13TowerDefenseGame,GS_Game_Settings,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_Settings.cs,Update,The following statement contains a magic number: mapEdit_MainBackground.Width = 1150;  
Magic Number,_4D13TowerDefenseGame,GS_Game_Settings,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_Settings.cs,Update,The following statement contains a magic number: mapEdit_MainBackground.Height = 920;  
Magic Number,_4D13TowerDefenseGame,GS_MM_LoadMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_LoadMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Width = 200;  
Magic Number,_4D13TowerDefenseGame,GS_MM_LoadMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_LoadMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Height = 88;  
Magic Number,_4D13TowerDefenseGame,GS_MM_LoadMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_LoadMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.X = 940;  
Magic Number,_4D13TowerDefenseGame,GS_MM_LoadMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_LoadMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Y = 822;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Width = 200;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Height = 88;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.X = 475;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Y = 750;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_LoadRec.Width = 200;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_LoadRec.Height = 88;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_LoadRec.X = 475;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_LoadRec.Y = 652;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_NewRec.Width = 200;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_NewRec.Height = 88;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_NewRec.X = 475;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mainMenu_NewRec.Y = 554;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mapEdit_MainBackground.Width = 1150;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: mapEdit_MainBackground.Height = 920;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (prevMState.LeftButton != ButtonState.Pressed) {  	if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		saveLoadBackground = 0;  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_MapEditor;  	}  	// Load Map Button collision  	// Changes GameState to gs_LoadMenu  	if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  		#region Initialize Arrays  		// Initilize 2D Rectangle Array  		// Used to detect mouse "paint brush" collision information  		tiles = new Rectangle[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				Rectangle newTile = new Rectangle ();  				newTile.Width = 45;  				newTile.Height = 45;  				newTile.X = (45 * x) + 10;  				newTile.Y = (45 * i) + 10;  				tiles [i' x] = newTile;  			}  		}  		// Initialize 2D int array  		// Used to establish textures assigned in tiles 2D Rectangle matrix above  		textures = new int[20' 20];  		for (int i = 0; i < 20; i++) {  			for (int x = 0; x < 20; x++) {  				textures [i' x] = 0;  				// IFORMATION FOR TEXTURES 2D ARRAY:  				// 0 = No texture - Buildable location;  				// 1 = Gray;  				// 2 = Blue;  				// 3 = Green;  			}  		}  		#endregion  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  	}  	// Exit Map Button collision  	if (mousePos.Intersects (mainMenu_ExitRec) && mState.LeftButton == ButtonState.Pressed) {  		prevMState = Mouse.GetState ();  		return GameProcesses.GameStateEnum.main_MainMenu;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_NewRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	saveLoadBackground = 0;  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_MapEditor;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: tiles = new Rectangle[20' 20];  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: tiles = new Rectangle[20' 20];  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.X = (45 * x) + 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.X = (45 * x) + 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.Y = (45 * i) + 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.Y = (45 * i) + 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: textures = new int[20' 20];  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: textures = new int[20' 20];  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		textures [i' x] = 0;  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture - Buildable location;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		textures [i' x] = 0;  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture - Buildable location;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	textures [i' x] = 0;  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture - Buildable location;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: if (mousePos.Intersects (mainMenu_LoadRec) && mState.LeftButton == ButtonState.Pressed) {  	#region Initialize Arrays  	// Initilize 2D Rectangle Array  	// Used to detect mouse "paint brush" collision information  	tiles = new Rectangle[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			Rectangle newTile = new Rectangle ();  			newTile.Width = 45;  			newTile.Height = 45;  			newTile.X = (45 * x) + 10;  			newTile.Y = (45 * i) + 10;  			tiles [i' x] = newTile;  		}  	}  	// Initialize 2D int array  	// Used to establish textures assigned in tiles 2D Rectangle matrix above  	textures = new int[20' 20];  	for (int i = 0; i < 20; i++) {  		for (int x = 0; x < 20; x++) {  			textures [i' x] = 0;  			// IFORMATION FOR TEXTURES 2D ARRAY:  			// 0 = No texture - Buildable location;  			// 1 = Gray;  			// 2 = Blue;  			// 3 = Green;  		}  	}  	#endregion  	prevMState = Mouse.GetState ();  	return GameProcesses.GameStateEnum.mapEdit_LoadMenu;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: tiles = new Rectangle[20' 20];  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: tiles = new Rectangle[20' 20];  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		Rectangle newTile = new Rectangle ();  		newTile.Width = 45;  		newTile.Height = 45;  		newTile.X = (45 * x) + 10;  		newTile.Y = (45 * i) + 10;  		tiles [i' x] = newTile;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	Rectangle newTile = new Rectangle ();  	newTile.Width = 45;  	newTile.Height = 45;  	newTile.X = (45 * x) + 10;  	newTile.Y = (45 * i) + 10;  	tiles [i' x] = newTile;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.X = (45 * x) + 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.X = (45 * x) + 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.Y = (45 * i) + 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: newTile.Y = (45 * i) + 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: textures = new int[20' 20];  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: textures = new int[20' 20];  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		textures [i' x] = 0;  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture - Buildable location;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	for (int x = 0; x < 20; x++) {  		textures [i' x] = 0;  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture - Buildable location;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	textures [i' x] = 0;  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture - Buildable location;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: paintBrush.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: paintBrush.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: paintBrush.X = graphics.PreferredBackBufferWidth - 65;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: paintBrush.Y = 610;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: game_GameBorderRec.Width = 1150;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: game_GameBorderRec.Height = 920;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: sideBarBG.Width = 230;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: sideBarBG.Height = 900;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: sideBarBG.X = graphics.PreferredBackBufferWidth - 240;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: sideBarBG.Y = 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: game_BackgroundRec.Width = 900;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: game_BackgroundRec.Height = 900;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: game_BackgroundRec.X = 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: game_BackgroundRec.Y = 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_MenuRec.Width = 100;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_MenuRec.Height = 75;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_MenuRec.X = graphics.PreferredBackBufferWidth - 120;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_MenuRec.Y = 665;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_TilesRec.Width = 100;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_TilesRec.Height = 75;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_TilesRec.X = graphics.PreferredBackBufferWidth - 230;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_TilesRec.Y = 665;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_ExitRec.Width = 100;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_ExitRec.Height = 75;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_ExitRec.X = graphics.PreferredBackBufferWidth - 120;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_ExitRec.Y = 835;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_SaveRec.Width = 100;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_SaveRec.Height = 75;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_SaveRec.X = graphics.PreferredBackBufferWidth - 120;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_SaveRec.Y = 750;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_BackSelectRec.Width = 100;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_BackSelectRec.Height = 75;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_BackSelectRec.X = graphics.PreferredBackBufferWidth - 230;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_BackSelectRec.Y = 835;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_PathTilesRec.Width = 100;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_PathTilesRec.Height = 75;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_PathTilesRec.X = graphics.PreferredBackBufferWidth - 230;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: mapEdit_PathTilesRec.Y = 750;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_Eraser.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_Eraser.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_Eraser.X = graphics.PreferredBackBufferWidth - 230;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_Eraser.Y = 610;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathDL.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathDL.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathDL.X = graphics.PreferredBackBufferWidth - 230;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathDL.Y = 20;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathDR.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathDR.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathDR.X = graphics.PreferredBackBufferWidth - 175;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathDR.Y = 20;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUL.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUL.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUL.X = graphics.PreferredBackBufferWidth - 120;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUL.Y = 20;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUR.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUR.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUR.X = graphics.PreferredBackBufferWidth - 65;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUR.Y = 20;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathLeftRight.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathLeftRight.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathLeftRight.X = graphics.PreferredBackBufferWidth - 230;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathLeftRight.Y = 75;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUpDown.Width = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUpDown.Height = 45;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUpDown.X = graphics.PreferredBackBufferWidth - 175;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Update,The following statement contains a magic number: select_PathUpDown.Y = 75;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (saveLoadBackground) {  case 1: {  	spriteBatch.Draw (bg_Grasslands' game_BackgroundRec' Color.Gray);  	break;  }  case 2: {  	spriteBatch.Draw (bg_Desert' game_BackgroundRec' Color.Gray);  	break;  }  case 3: {  	spriteBatch.Draw (bg_Tundra' game_BackgroundRec' Color.LightGray);  	break;  }  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (saveLoadBackground) {  case 1: {  	spriteBatch.Draw (bg_Grasslands' game_BackgroundRec' Color.Gray);  	break;  }  case 2: {  	spriteBatch.Draw (bg_Desert' game_BackgroundRec' Color.Gray);  	break;  }  case 3: {  	spriteBatch.Draw (bg_Tundra' game_BackgroundRec' Color.LightGray);  	break;  }  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  		// Draw the current tile selected  		// Assigns textures 2D array the int associated with currently selected tile  		// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  		if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  			if (tf_Eraser) {  				textures [x' y] = 0;  			}  			if (tf_PathDL) {  				textures [x' y] = 1;  			}  			if (tf_PathDR) {  				textures [x' y] = 2;  			}  			if (tf_PathUL) {  				textures [x' y] = 3;  			}  			if (tf_PathUR) {  				textures [x' y] = 4;  			}  			if (tf_PathLeftRight) {  				textures [x' y] = 5;  			}  			if (tf_PathUpDown) {  				textures [x' y] = 6;  			}  			if (tf_Bolder) {  				textures [x' y] = 7;  			}  			if (tf_Tree) {  				textures [x' y] = 8;  			}  			if (tf_Spawn) {  				textures [x' y] = 9;  			}  			if (tf_Goal) {  				textures [x' y] = 10;  			}  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Eraser) {  			textures [x' y] = 0;  		}  		if (tf_PathDL) {  			textures [x' y] = 1;  		}  		if (tf_PathDR) {  			textures [x' y] = 2;  		}  		if (tf_PathUL) {  			textures [x' y] = 3;  		}  		if (tf_PathUR) {  			textures [x' y] = 4;  		}  		if (tf_PathLeftRight) {  			textures [x' y] = 5;  		}  		if (tf_PathUpDown) {  			textures [x' y] = 6;  		}  		if (tf_Bolder) {  			textures [x' y] = 7;  		}  		if (tf_Tree) {  			textures [x' y] = 8;  		}  		if (tf_Spawn) {  			textures [x' y] = 9;  		}  		if (tf_Goal) {  			textures [x' y] = 10;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Eraser) {  			textures [x' y] = 0;  		}  		if (tf_PathDL) {  			textures [x' y] = 1;  		}  		if (tf_PathDR) {  			textures [x' y] = 2;  		}  		if (tf_PathUL) {  			textures [x' y] = 3;  		}  		if (tf_PathUR) {  			textures [x' y] = 4;  		}  		if (tf_PathLeftRight) {  			textures [x' y] = 5;  		}  		if (tf_PathUpDown) {  			textures [x' y] = 6;  		}  		if (tf_Bolder) {  			textures [x' y] = 7;  		}  		if (tf_Tree) {  			textures [x' y] = 8;  		}  		if (tf_Spawn) {  			textures [x' y] = 9;  		}  		if (tf_Goal) {  			textures [x' y] = 10;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Eraser) {  			textures [x' y] = 0;  		}  		if (tf_PathDL) {  			textures [x' y] = 1;  		}  		if (tf_PathDR) {  			textures [x' y] = 2;  		}  		if (tf_PathUL) {  			textures [x' y] = 3;  		}  		if (tf_PathUR) {  			textures [x' y] = 4;  		}  		if (tf_PathLeftRight) {  			textures [x' y] = 5;  		}  		if (tf_PathUpDown) {  			textures [x' y] = 6;  		}  		if (tf_Bolder) {  			textures [x' y] = 7;  		}  		if (tf_Tree) {  			textures [x' y] = 8;  		}  		if (tf_Spawn) {  			textures [x' y] = 9;  		}  		if (tf_Goal) {  			textures [x' y] = 10;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Eraser) {  			textures [x' y] = 0;  		}  		if (tf_PathDL) {  			textures [x' y] = 1;  		}  		if (tf_PathDR) {  			textures [x' y] = 2;  		}  		if (tf_PathUL) {  			textures [x' y] = 3;  		}  		if (tf_PathUR) {  			textures [x' y] = 4;  		}  		if (tf_PathLeftRight) {  			textures [x' y] = 5;  		}  		if (tf_PathUpDown) {  			textures [x' y] = 6;  		}  		if (tf_Bolder) {  			textures [x' y] = 7;  		}  		if (tf_Tree) {  			textures [x' y] = 8;  		}  		if (tf_Spawn) {  			textures [x' y] = 9;  		}  		if (tf_Goal) {  			textures [x' y] = 10;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Eraser) {  			textures [x' y] = 0;  		}  		if (tf_PathDL) {  			textures [x' y] = 1;  		}  		if (tf_PathDR) {  			textures [x' y] = 2;  		}  		if (tf_PathUL) {  			textures [x' y] = 3;  		}  		if (tf_PathUR) {  			textures [x' y] = 4;  		}  		if (tf_PathLeftRight) {  			textures [x' y] = 5;  		}  		if (tf_PathUpDown) {  			textures [x' y] = 6;  		}  		if (tf_Bolder) {  			textures [x' y] = 7;  		}  		if (tf_Tree) {  			textures [x' y] = 8;  		}  		if (tf_Spawn) {  			textures [x' y] = 9;  		}  		if (tf_Goal) {  			textures [x' y] = 10;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Eraser) {  			textures [x' y] = 0;  		}  		if (tf_PathDL) {  			textures [x' y] = 1;  		}  		if (tf_PathDR) {  			textures [x' y] = 2;  		}  		if (tf_PathUL) {  			textures [x' y] = 3;  		}  		if (tf_PathUR) {  			textures [x' y] = 4;  		}  		if (tf_PathLeftRight) {  			textures [x' y] = 5;  		}  		if (tf_PathUpDown) {  			textures [x' y] = 6;  		}  		if (tf_Bolder) {  			textures [x' y] = 7;  		}  		if (tf_Tree) {  			textures [x' y] = 8;  		}  		if (tf_Spawn) {  			textures [x' y] = 9;  		}  		if (tf_Goal) {  			textures [x' y] = 10;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Eraser) {  			textures [x' y] = 0;  		}  		if (tf_PathDL) {  			textures [x' y] = 1;  		}  		if (tf_PathDR) {  			textures [x' y] = 2;  		}  		if (tf_PathUL) {  			textures [x' y] = 3;  		}  		if (tf_PathUR) {  			textures [x' y] = 4;  		}  		if (tf_PathLeftRight) {  			textures [x' y] = 5;  		}  		if (tf_PathUpDown) {  			textures [x' y] = 6;  		}  		if (tf_Bolder) {  			textures [x' y] = 7;  		}  		if (tf_Tree) {  			textures [x' y] = 8;  		}  		if (tf_Spawn) {  			textures [x' y] = 9;  		}  		if (tf_Goal) {  			textures [x' y] = 10;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Eraser) {  			textures [x' y] = 0;  		}  		if (tf_PathDL) {  			textures [x' y] = 1;  		}  		if (tf_PathDR) {  			textures [x' y] = 2;  		}  		if (tf_PathUL) {  			textures [x' y] = 3;  		}  		if (tf_PathUR) {  			textures [x' y] = 4;  		}  		if (tf_PathLeftRight) {  			textures [x' y] = 5;  		}  		if (tf_PathUpDown) {  			textures [x' y] = 6;  		}  		if (tf_Bolder) {  			textures [x' y] = 7;  		}  		if (tf_Tree) {  			textures [x' y] = 8;  		}  		if (tf_Spawn) {  			textures [x' y] = 9;  		}  		if (tf_Goal) {  			textures [x' y] = 10;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Eraser) {  			textures [x' y] = 0;  		}  		if (tf_PathDL) {  			textures [x' y] = 1;  		}  		if (tf_PathDR) {  			textures [x' y] = 2;  		}  		if (tf_PathUL) {  			textures [x' y] = 3;  		}  		if (tf_PathUR) {  			textures [x' y] = 4;  		}  		if (tf_PathLeftRight) {  			textures [x' y] = 5;  		}  		if (tf_PathUpDown) {  			textures [x' y] = 6;  		}  		if (tf_Bolder) {  			textures [x' y] = 7;  		}  		if (tf_Tree) {  			textures [x' y] = 8;  		}  		if (tf_Spawn) {  			textures [x' y] = 9;  		}  		if (tf_Goal) {  			textures [x' y] = 10;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// If mouse button is pressed' and the mouse position is in the rectangle 2x2 array:  	// Draw the current tile selected  	// Assigns textures 2D array the int associated with currently selected tile  	// THIS DOES NOT DRAW THE TEXTURES PERMANENTLY - DRAW TEXTURES ON RECTANGLES BELOW DOES  	if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  		if (tf_Eraser) {  			textures [x' y] = 0;  		}  		if (tf_PathDL) {  			textures [x' y] = 1;  		}  		if (tf_PathDR) {  			textures [x' y] = 2;  		}  		if (tf_PathUL) {  			textures [x' y] = 3;  		}  		if (tf_PathUR) {  			textures [x' y] = 4;  		}  		if (tf_PathLeftRight) {  			textures [x' y] = 5;  		}  		if (tf_PathUpDown) {  			textures [x' y] = 6;  		}  		if (tf_Bolder) {  			textures [x' y] = 7;  		}  		if (tf_Tree) {  			textures [x' y] = 8;  		}  		if (tf_Spawn) {  			textures [x' y] = 9;  		}  		if (tf_Goal) {  			textures [x' y] = 10;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Eraser) {  		textures [x' y] = 0;  	}  	if (tf_PathDL) {  		textures [x' y] = 1;  	}  	if (tf_PathDR) {  		textures [x' y] = 2;  	}  	if (tf_PathUL) {  		textures [x' y] = 3;  	}  	if (tf_PathUR) {  		textures [x' y] = 4;  	}  	if (tf_PathLeftRight) {  		textures [x' y] = 5;  	}  	if (tf_PathUpDown) {  		textures [x' y] = 6;  	}  	if (tf_Bolder) {  		textures [x' y] = 7;  	}  	if (tf_Tree) {  		textures [x' y] = 8;  	}  	if (tf_Spawn) {  		textures [x' y] = 9;  	}  	if (tf_Goal) {  		textures [x' y] = 10;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Eraser) {  		textures [x' y] = 0;  	}  	if (tf_PathDL) {  		textures [x' y] = 1;  	}  	if (tf_PathDR) {  		textures [x' y] = 2;  	}  	if (tf_PathUL) {  		textures [x' y] = 3;  	}  	if (tf_PathUR) {  		textures [x' y] = 4;  	}  	if (tf_PathLeftRight) {  		textures [x' y] = 5;  	}  	if (tf_PathUpDown) {  		textures [x' y] = 6;  	}  	if (tf_Bolder) {  		textures [x' y] = 7;  	}  	if (tf_Tree) {  		textures [x' y] = 8;  	}  	if (tf_Spawn) {  		textures [x' y] = 9;  	}  	if (tf_Goal) {  		textures [x' y] = 10;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Eraser) {  		textures [x' y] = 0;  	}  	if (tf_PathDL) {  		textures [x' y] = 1;  	}  	if (tf_PathDR) {  		textures [x' y] = 2;  	}  	if (tf_PathUL) {  		textures [x' y] = 3;  	}  	if (tf_PathUR) {  		textures [x' y] = 4;  	}  	if (tf_PathLeftRight) {  		textures [x' y] = 5;  	}  	if (tf_PathUpDown) {  		textures [x' y] = 6;  	}  	if (tf_Bolder) {  		textures [x' y] = 7;  	}  	if (tf_Tree) {  		textures [x' y] = 8;  	}  	if (tf_Spawn) {  		textures [x' y] = 9;  	}  	if (tf_Goal) {  		textures [x' y] = 10;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Eraser) {  		textures [x' y] = 0;  	}  	if (tf_PathDL) {  		textures [x' y] = 1;  	}  	if (tf_PathDR) {  		textures [x' y] = 2;  	}  	if (tf_PathUL) {  		textures [x' y] = 3;  	}  	if (tf_PathUR) {  		textures [x' y] = 4;  	}  	if (tf_PathLeftRight) {  		textures [x' y] = 5;  	}  	if (tf_PathUpDown) {  		textures [x' y] = 6;  	}  	if (tf_Bolder) {  		textures [x' y] = 7;  	}  	if (tf_Tree) {  		textures [x' y] = 8;  	}  	if (tf_Spawn) {  		textures [x' y] = 9;  	}  	if (tf_Goal) {  		textures [x' y] = 10;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Eraser) {  		textures [x' y] = 0;  	}  	if (tf_PathDL) {  		textures [x' y] = 1;  	}  	if (tf_PathDR) {  		textures [x' y] = 2;  	}  	if (tf_PathUL) {  		textures [x' y] = 3;  	}  	if (tf_PathUR) {  		textures [x' y] = 4;  	}  	if (tf_PathLeftRight) {  		textures [x' y] = 5;  	}  	if (tf_PathUpDown) {  		textures [x' y] = 6;  	}  	if (tf_Bolder) {  		textures [x' y] = 7;  	}  	if (tf_Tree) {  		textures [x' y] = 8;  	}  	if (tf_Spawn) {  		textures [x' y] = 9;  	}  	if (tf_Goal) {  		textures [x' y] = 10;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Eraser) {  		textures [x' y] = 0;  	}  	if (tf_PathDL) {  		textures [x' y] = 1;  	}  	if (tf_PathDR) {  		textures [x' y] = 2;  	}  	if (tf_PathUL) {  		textures [x' y] = 3;  	}  	if (tf_PathUR) {  		textures [x' y] = 4;  	}  	if (tf_PathLeftRight) {  		textures [x' y] = 5;  	}  	if (tf_PathUpDown) {  		textures [x' y] = 6;  	}  	if (tf_Bolder) {  		textures [x' y] = 7;  	}  	if (tf_Tree) {  		textures [x' y] = 8;  	}  	if (tf_Spawn) {  		textures [x' y] = 9;  	}  	if (tf_Goal) {  		textures [x' y] = 10;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Eraser) {  		textures [x' y] = 0;  	}  	if (tf_PathDL) {  		textures [x' y] = 1;  	}  	if (tf_PathDR) {  		textures [x' y] = 2;  	}  	if (tf_PathUL) {  		textures [x' y] = 3;  	}  	if (tf_PathUR) {  		textures [x' y] = 4;  	}  	if (tf_PathLeftRight) {  		textures [x' y] = 5;  	}  	if (tf_PathUpDown) {  		textures [x' y] = 6;  	}  	if (tf_Bolder) {  		textures [x' y] = 7;  	}  	if (tf_Tree) {  		textures [x' y] = 8;  	}  	if (tf_Spawn) {  		textures [x' y] = 9;  	}  	if (tf_Goal) {  		textures [x' y] = 10;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Eraser) {  		textures [x' y] = 0;  	}  	if (tf_PathDL) {  		textures [x' y] = 1;  	}  	if (tf_PathDR) {  		textures [x' y] = 2;  	}  	if (tf_PathUL) {  		textures [x' y] = 3;  	}  	if (tf_PathUR) {  		textures [x' y] = 4;  	}  	if (tf_PathLeftRight) {  		textures [x' y] = 5;  	}  	if (tf_PathUpDown) {  		textures [x' y] = 6;  	}  	if (tf_Bolder) {  		textures [x' y] = 7;  	}  	if (tf_Tree) {  		textures [x' y] = 8;  	}  	if (tf_Spawn) {  		textures [x' y] = 9;  	}  	if (tf_Goal) {  		textures [x' y] = 10;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (mousePos.Intersects (tiles [x' y]) && mState.LeftButton == ButtonState.Pressed) {  	if (tf_Eraser) {  		textures [x' y] = 0;  	}  	if (tf_PathDL) {  		textures [x' y] = 1;  	}  	if (tf_PathDR) {  		textures [x' y] = 2;  	}  	if (tf_PathUL) {  		textures [x' y] = 3;  	}  	if (tf_PathUR) {  		textures [x' y] = 4;  	}  	if (tf_PathLeftRight) {  		textures [x' y] = 5;  	}  	if (tf_PathUpDown) {  		textures [x' y] = 6;  	}  	if (tf_Bolder) {  		textures [x' y] = 7;  	}  	if (tf_Tree) {  		textures [x' y] = 8;  	}  	if (tf_Spawn) {  		textures [x' y] = 9;  	}  	if (tf_Goal) {  		textures [x' y] = 10;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (tf_PathDR) {  	textures [x' y] = 2;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: textures [x' y] = 2;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (tf_PathUL) {  	textures [x' y] = 3;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: textures [x' y] = 3;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (tf_PathUR) {  	textures [x' y] = 4;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: textures [x' y] = 4;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (tf_PathLeftRight) {  	textures [x' y] = 5;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: textures [x' y] = 5;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (tf_PathUpDown) {  	textures [x' y] = 6;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: textures [x' y] = 6;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (tf_Bolder) {  	textures [x' y] = 7;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: textures [x' y] = 7;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (tf_Tree) {  	textures [x' y] = 8;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: textures [x' y] = 8;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (tf_Spawn) {  	textures [x' y] = 9;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: textures [x' y] = 9;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: if (tf_Goal) {  	textures [x' y] = 10;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: textures [x' y] = 10;  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// At location x' y in int 2D array' draw texture according to int  		// IFORMATION FOR TEXTURES 2D ARRAY:  		// 0 = No texture;  		// 1 = Gray;  		// 2 = Blue;  		// 3 = Green;  		switch (textures [x' y]) {  		case 0:  			break;  		case 1:  			spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  			break;  		case 2:  			spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  			break;  		case 3:  			spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  			break;  		case 4:  			spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  			break;  		case 5:  			spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  			break;  		case 6:  			spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  			break;  		case 7:  			spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  			break;  		case 8:  			spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  			break;  		case 9:  			spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  			break;  		case 10:  			spriteBatch.Draw (goal' tiles [x' y]' Color.White);  			break;  		default:  			break;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// At location x' y in int 2D array' draw texture according to int  	// IFORMATION FOR TEXTURES 2D ARRAY:  	// 0 = No texture;  	// 1 = Gray;  	// 2 = Blue;  	// 3 = Green;  	switch (textures [x' y]) {  	case 0:  		break;  	case 1:  		spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  		break;  	case 2:  		spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  		break;  	case 3:  		spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  		break;  	case 4:  		spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  		break;  	case 5:  		spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  		break;  	case 6:  		spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  		break;  	case 7:  		spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  		break;  	case 8:  		spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  		break;  	case 9:  		spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  		break;  	case 10:  		spriteBatch.Draw (goal' tiles [x' y]' Color.White);  		break;  	default:  		break;  	}  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_MapEditor,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MapEditor.cs,Draw,The following statement contains a magic number: switch (textures [x' y]) {  case 0:  	break;  case 1:  	spriteBatch.Draw (pathDL_Tile' tiles [x' y]' Color.White);  	break;  case 2:  	spriteBatch.Draw (pathDR_Tile' tiles [x' y]' Color.White);  	break;  case 3:  	spriteBatch.Draw (pathUL_Tile' tiles [x' y]' Color.White);  	break;  case 4:  	spriteBatch.Draw (pathUR_Tile' tiles [x' y]' Color.White);  	break;  case 5:  	spriteBatch.Draw (pathLeftRight_Tile' tiles [x' y]' Color.White);  	break;  case 6:  	spriteBatch.Draw (pathUpDown_Tile' tiles [x' y]' Color.White);  	break;  case 7:  	spriteBatch.Draw (obj_Boulder' tiles [x' y]' Color.White);  	break;  case 8:  	spriteBatch.Draw (obj_Tree' tiles [x' y]' Color.White);  	break;  case 9:  	spriteBatch.Draw (spawn' tiles [x' y]' Color.White);  	break;  case 10:  	spriteBatch.Draw (goal' tiles [x' y]' Color.White);  	break;  default:  	break;  }  
Magic Number,_4D13TowerDefenseGame,GS_MM_SaveMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_SaveMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Width = 200;  
Magic Number,_4D13TowerDefenseGame,GS_MM_SaveMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_SaveMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Height = 88;  
Magic Number,_4D13TowerDefenseGame,GS_MM_SaveMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_SaveMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.X = 940;  
Magic Number,_4D13TowerDefenseGame,GS_MM_SaveMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_SaveMenu.cs,Update,The following statement contains a magic number: mainMenu_ExitRec.Y = 822;  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: marker = new Rectangle (xPos + 45' yPos' 1' 1);  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: control = 6;  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: control = 3;  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: control = 4;  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: marker = new Rectangle (xPos' yPos + 46' 1' 1);  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: control = 2;  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: marker = new Rectangle (xPos' yPos' 45' 45);  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: marker = new Rectangle (xPos' yPos' 45' 45);  
Magic Number,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following statement contains a magic number: control = 5;  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (t.HitBox)) {  	int vectorX = (targetx - towerx);  	int vectorY = (targety - towery);  	double vectorMagnitude = (Math.Sqrt ((vectorX * vectorX) + (vectorY * vectorY)));  	double unitVectorX = (vectorX / vectorMagnitude);  	double unitVectorY = (vectorY / vectorMagnitude);  	double finalVectorX = (unitVectorX * moveSpeed);  	double finalVectorY = (unitVectorY * moveSpeed);  	this.pieceShape.X += (int)finalVectorX;  	this.pieceShape.Y += (int)finalVectorY;  	if (this.pieceShape.Intersects (en.PieceShape)) {  		active = false;  		en.TakeDamage (this);  	}  	else if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  		active = false;  	}  }  else {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (t.HitBox)) {  	int vectorX = (targetx - towerx);  	int vectorY = (targety - towery);  	double vectorMagnitude = (Math.Sqrt ((vectorX * vectorX) + (vectorY * vectorY)));  	double unitVectorX = (vectorX / vectorMagnitude);  	double unitVectorY = (vectorY / vectorMagnitude);  	double finalVectorX = (unitVectorX * moveSpeed);  	double finalVectorY = (unitVectorY * moveSpeed);  	this.pieceShape.X += (int)finalVectorX;  	this.pieceShape.Y += (int)finalVectorY;  	if (this.pieceShape.Intersects (en.PieceShape)) {  		active = false;  		en.TakeDamage (this);  	}  	else if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  		active = false;  	}  }  else {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (en.PieceShape)) {  	active = false;  	en.TakeDamage (this);  }  else if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (en.PieceShape)) {  	active = false;  	en.TakeDamage (this);  }  else if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (t.HitBox)) {  	int vectorX = (targetx - towerx);  	int vectorY = (targety - towery);  	double vectorMagnitude = (Math.Sqrt ((vectorX * vectorX) + (vectorY * vectorY)));  	double unitVectorX = (vectorX / vectorMagnitude);  	double unitVectorY = (vectorY / vectorMagnitude);  	double finalVectorX = (unitVectorX * moveSpeed);  	double finalVectorY = (unitVectorY * moveSpeed);  	this.pieceShape.X += (int)finalVectorX;  	this.pieceShape.Y += (int)finalVectorY;  	if (this.pieceShape.Intersects (t.PieceShape)) {  		active = false;  		t.TakeDamage (this);  	}  	else if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  		active = false;  	}  }  else {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (t.HitBox)) {  	int vectorX = (targetx - towerx);  	int vectorY = (targety - towery);  	double vectorMagnitude = (Math.Sqrt ((vectorX * vectorX) + (vectorY * vectorY)));  	double unitVectorX = (vectorX / vectorMagnitude);  	double unitVectorY = (vectorY / vectorMagnitude);  	double finalVectorX = (unitVectorX * moveSpeed);  	double finalVectorY = (unitVectorY * moveSpeed);  	this.pieceShape.X += (int)finalVectorX;  	this.pieceShape.Y += (int)finalVectorY;  	if (this.pieceShape.Intersects (t.PieceShape)) {  		active = false;  		t.TakeDamage (this);  	}  	else if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  		active = false;  	}  }  else {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (t.PieceShape)) {  	active = false;  	t.TakeDamage (this);  }  else if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.Intersects (t.PieceShape)) {  	active = false;  	t.TakeDamage (this);  }  else if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,Projectile,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Projectile.cs,Move,The following statement contains a magic number: if (this.pieceShape.X < 0 || this.pieceShape.Y < 0 || this.pieceShape.X > 800 || this.pieceShape.Y > 600) {  	active = false;  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: for (int x = 0; x < files.Length; x++) {  	Vector2 newVector = new Vector2 ();  	newVector.X = 10;  	newVector.Y = 50 + (25 * x);  	vectorList.Add (newVector);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: for (int x = 0; x < files.Length; x++) {  	Vector2 newVector = new Vector2 ();  	newVector.X = 10;  	newVector.Y = 50 + (25 * x);  	vectorList.Add (newVector);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: for (int x = 0; x < files.Length; x++) {  	Vector2 newVector = new Vector2 ();  	newVector.X = 10;  	newVector.Y = 50 + (25 * x);  	vectorList.Add (newVector);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: newVector.X = 10;  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: newVector.Y = 50 + (25 * x);  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: newVector.Y = 50 + (25 * x);  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: userInput.X = 10;  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: userInput.Y = 10;  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: fileDisplay.X = 10;  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: fileDisplay.Y = 35;  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: availFiles.X = 10;  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,SaveLoad,The following statement contains a magic number: availFiles.Y = 60;  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Save,The following statement contains a magic number: try {  	str = File.OpenWrite (fileName + ".map");  	output = new BinaryWriter (str);  	output.Write (saveLoadBackground);  	for (int x = 0; x < 20; x++) {  		for (int y = 0; y < 20; y++) {  			// Take value out of array and then write value to file  			Int32 value = textures [x' y];  			output.Write (value);  		}  	}  	output.Close ();  	str.Close ();  }  catch (IOException ioe) {  	Console.WriteLine ("Message: " + ioe.Message);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Save,The following statement contains a magic number: try {  	str = File.OpenWrite (fileName + ".map");  	output = new BinaryWriter (str);  	output.Write (saveLoadBackground);  	for (int x = 0; x < 20; x++) {  		for (int y = 0; y < 20; y++) {  			// Take value out of array and then write value to file  			Int32 value = textures [x' y];  			output.Write (value);  		}  	}  	output.Close ();  	str.Close ();  }  catch (IOException ioe) {  	Console.WriteLine ("Message: " + ioe.Message);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Save,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// Take value out of array and then write value to file  		Int32 value = textures [x' y];  		output.Write (value);  	}  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Save,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		// Take value out of array and then write value to file  		Int32 value = textures [x' y];  		output.Write (value);  	}  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Save,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	// Take value out of array and then write value to file  	Int32 value = textures [x' y];  	output.Write (value);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Load,The following statement contains a magic number: try {  	input = new BinaryReader (File.OpenRead (fileName + ".map"));  	saveLoadBackground = input.ReadInt32 ();  	for (int x = 0; x < 20; x++) {  		for (int y = 0; y < 20; y++) {  			Int32 value = input.ReadInt32 ();  			textures [x' y] = value;  		}  	}  	input.Close ();  }  catch (IOException ioe) {  	Console.WriteLine ("Message: " + ioe.Message);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Load,The following statement contains a magic number: try {  	input = new BinaryReader (File.OpenRead (fileName + ".map"));  	saveLoadBackground = input.ReadInt32 ();  	for (int x = 0; x < 20; x++) {  		for (int y = 0; y < 20; y++) {  			Int32 value = input.ReadInt32 ();  			textures [x' y] = value;  		}  	}  	input.Close ();  }  catch (IOException ioe) {  	Console.WriteLine ("Message: " + ioe.Message);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Load,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		Int32 value = input.ReadInt32 ();  		textures [x' y] = value;  	}  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Load,The following statement contains a magic number: for (int x = 0; x < 20; x++) {  	for (int y = 0; y < 20; y++) {  		Int32 value = input.ReadInt32 ();  		textures [x' y] = value;  	}  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Load,The following statement contains a magic number: for (int y = 0; y < 20; y++) {  	Int32 value = input.ReadInt32 ();  	textures [x' y] = value;  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Update,The following statement contains a magic number: for (int x = 0; x < files.Length; x++) {  	Vector2 newVector = new Vector2 ();  	newVector.X = 10;  	newVector.Y = 50 + (25 * x);  	vectorList.Add (newVector);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Update,The following statement contains a magic number: for (int x = 0; x < files.Length; x++) {  	Vector2 newVector = new Vector2 ();  	newVector.X = 10;  	newVector.Y = 50 + (25 * x);  	vectorList.Add (newVector);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Update,The following statement contains a magic number: for (int x = 0; x < files.Length; x++) {  	Vector2 newVector = new Vector2 ();  	newVector.X = 10;  	newVector.Y = 50 + (25 * x);  	vectorList.Add (newVector);  }  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Update,The following statement contains a magic number: newVector.X = 10;  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Update,The following statement contains a magic number: newVector.Y = 50 + (25 * x);  
Magic Number,_4D13TowerDefenseGame,SaveLoad,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\SaveLoad.cs,Update,The following statement contains a magic number: newVector.Y = 50 + (25 * x);  
Magic Number,_4D13TowerDefenseGame,Spell,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Spell.cs,Spell,The following statement contains a magic number: areaOfEffect = new Rectangle (xPos' yPos' 135' 135);  
Magic Number,_4D13TowerDefenseGame,Spell,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Spell.cs,Spell,The following statement contains a magic number: areaOfEffect = new Rectangle (xPos' yPos' 135' 135);  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,Tower,The following statement contains a magic number: cost = 100;  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,Tower,The following statement contains a magic number: saleValue = cost / 2;  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,Tower,The following statement contains a magic number: berserkSpeed = coolDown / 2;  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,Tower,The following statement contains a magic number: hitbox = new Rectangle ((pieceShape.X - 65)' (pieceShape.Y - 65)' (pieceShape.Width * 4)' (pieceShape.Height * 4));  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,Tower,The following statement contains a magic number: hitbox = new Rectangle ((pieceShape.X - 65)' (pieceShape.Y - 65)' (pieceShape.Width * 4)' (pieceShape.Height * 4));  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,Tower,The following statement contains a magic number: hitbox = new Rectangle ((pieceShape.X - 65)' (pieceShape.Y - 65)' (pieceShape.Width * 4)' (pieceShape.Height * 4));  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,Tower,The following statement contains a magic number: hitbox = new Rectangle ((pieceShape.X - 65)' (pieceShape.Y - 65)' (pieceShape.Width * 4)' (pieceShape.Height * 4));  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == false) {  	if (fired == coolDown) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  else if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == false) {  	if (fired == coolDown) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  else if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == false) {  	if (fired == coolDown) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  else if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == false) {  	if (fired == coolDown) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  else if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == false) {  	if (fired == coolDown) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  else if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == false) {  	if (fired == coolDown) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  else if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == false) {  	if (fired == coolDown) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  else if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == false) {  	if (fired == coolDown) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  else if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (fired == coolDown) {  	if (shot == null) {  		shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  		fired = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (fired == coolDown) {  	if (shot == null) {  		shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  		fired = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (fired == coolDown) {  	if (shot == null) {  		shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  		fired = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (fired == coolDown) {  	if (shot == null) {  		shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  		fired = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  	fired = 0;  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  	fired = 0;  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  	fired = 0;  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  	fired = 0;  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (berserked == true) {  	if (fired == berserkSpeed) {  		if (shot == null) {  			shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  			fired = 0;  		}  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (fired == berserkSpeed) {  	if (shot == null) {  		shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  		fired = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (fired == berserkSpeed) {  	if (shot == null) {  		shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  		fired = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (fired == berserkSpeed) {  	if (shot == null) {  		shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  		fired = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (fired == berserkSpeed) {  	if (shot == null) {  		shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  		fired = 0;  	}  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  	fired = 0;  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  	fired = 0;  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  	fired = 0;  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: if (shot == null) {  	shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  	fired = 0;  }  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  
Magic Number,_4D13TowerDefenseGame,Tower,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Tower.cs,AttackEnemy,The following statement contains a magic number: shot = new Projectile (1' attack' (this.PieceShape.X + (this.PieceShape.Width / 4))' (this.PieceShape.Y + (this.PieceShape.Height / 4))' 22' 22' shotString' shotSpeed' effect);  
Duplicate Code,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,Move,The method contains a code clone-set at the following line numbers (starting from the method definition): ((4' 69)' (73' 138))
Duplicate Code,_4D13TowerDefenseGame,GS_MM_MainMenu,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_MM_MainMenu.cs,Update,The method contains a code clone-set at the following line numbers (starting from the method definition): ((47' 74)' (82' 109))
Missing Default,_4D13TowerDefenseGame,Enemy,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\Enemy.cs,TakeDamage,The following switch statement is missing a default case: switch (prj.Effect) {  // need to come up with a series of status effects for this to work  case "": {  	break;  }  }  
Missing Default,_4D13TowerDefenseGame,GS_Game_LoadScreen,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\GS_Game_LoadScreen.cs,Update,The following switch statement is missing a default case: switch (GameState.textures [i' j]) {  case 1: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 1));  	//3  	break;  }  case 2: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 2));  	//3  	break;  }  case 3: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 3));  	//4  	break;  }  case 4: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 4));  	//2  	break;  }  case 10: {  	GameVariables.Markers.Add (new PathMarker (GameState.tiles [i' j].X' GameState.tiles [i' j].Y' 5));  	break;  }  }  
Missing Default,_4D13TowerDefenseGame,PathMarker,C:\repos\Shukrat_GDAPS2GameProject\4D13 Game and Tool\4D13TowerDefenseGame\4D13TowerDefenseGame\PathMarker.cs,PathMarker,The following switch statement is missing a default case: switch (ctrl) {  case 1: {  	marker = new Rectangle (xPos + 45' yPos' 1' 1);  	control = 6;  	break;  }  case 2: {  	marker = new Rectangle (xPos' yPos' 1' 1);  	control = 3;  	break;  }  case 3: {  	marker = new Rectangle (xPos + 45' yPos + 46' 1' 1);  	control = 4;  	break;  }  case 4: {  	marker = new Rectangle (xPos' yPos + 46' 1' 1);  	control = 2;  	break;  }  case 5: {  	marker = new Rectangle (xPos' yPos' 45' 45);  	control = 5;  	break;  }  }  
