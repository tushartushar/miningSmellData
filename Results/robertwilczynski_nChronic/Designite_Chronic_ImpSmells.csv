Implementation smell,Namespace,Class,File,Method,Description
Long Method,Chronic.Handlers,MyHandlerRegistry,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\Registration\MyHandlerRegistry.cs,RegisterDateHandlers,The method has 171 lines of code.
Complex Method,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,Cyclomatic complexity of the method is 8
Complex Method,Chronic,TokenCollectionExtensions,C:\repos\robertwilczynski_nChronic\src\Chronic\System\TokenCollectionExtensions.cs,DealiasAndDisambiguateTimes,Cyclomatic complexity of the method is 10
Complex Method,Chronic,Parser,C:\repos\robertwilczynski_nChronic\src\Chronic\Parser.cs,TokensToSpan,Cyclomatic complexity of the method is 9
Long Parameter List,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The method has 6 parameters. Parameters: year' month' day' hour' minute' second
Long Statement,Chronic,Numerizer,C:\repos\robertwilczynski_nChronic\src\Chronic\Numerizer.cs,Numerize,The length of the statement  "                    result = Regex.Replace(result' @"(?:<num>)?(\d*) *" + p' match => "<num>" + (r * int.Parse(match.Groups[1].Value)).ToString()); " is 127.
Long Statement,Chronic,Numerizer,C:\repos\robertwilczynski_nChronic\src\Chronic\Numerizer.cs,Numerize,The length of the statement  "            result = Regex.Replace(result' @"(\d +)(?: |and | -)*haAlf"' match => (float.Parse(match.Groups[1].Value) + 0.5).ToString()); " is 125.
Complex Conditional,Chronic,TokenCollectionExtensions,C:\repos\robertwilczynski_nChronic\src\Chronic\System\TokenCollectionExtensions.cs,DealiasAndDisambiguateTimes,The conditional expression  "token.IsTaggedAs<RepeaterTime>() &&                          token.GetTag<RepeaterTime>().Value.IsAmbiguous &&                              (nextToken == null ||                                  nextToken.GetTag<IRepeaterDayPortion>() == null)"  is complex.
Magic Number,Chronic,Numerizer,C:\repos\robertwilczynski_nChronic\src\Chronic\Numerizer.cs,Numerize,The following statement contains a magic number: ORDINALS.ForEach<string' string>(                  (p' r) =>                      result =                      Regex.Replace(                          result'                          p'                          "<num>" + r +                              p.                              LastCharacters                              (2)));
Magic Number,Chronic,Numerizer,C:\repos\robertwilczynski_nChronic\src\Chronic\Numerizer.cs,Numerize,The following statement contains a magic number: result = Regex.Replace(result' @"(\d +)(?: |and | -)*haAlf"' match => (float.Parse(match.Groups[1].Value) + 0.5).ToString());
Magic Number,Chronic,Numerizer,C:\repos\robertwilczynski_nChronic\src\Chronic\Numerizer.cs,Andition,The following statement contains a magic number: while (true)              {                  var match = pattern.Match(result);                  if (match.Success == false)                      break;                  result = result.Substring(0' match.Index) +                       "<num>" + ((int.Parse(match.Groups[1].Value) + int.Parse(match.Groups[3].Value)).ToString()) +                      result.Substring(match.Index + match.Length);              }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (second >= 60)              {                  minute += second / 60;                  second = second % 60;              }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (second >= 60)              {                  minute += second / 60;                  second = second % 60;              }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (second >= 60)              {                  minute += second / 60;                  second = second % 60;              }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (minute >= 60)              {                  hour += minute / 60;                  minute = minute % 60;              }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (minute >= 60)              {                  hour += minute / 60;                  minute = minute % 60;              }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (minute >= 60)              {                  hour += minute / 60;                  minute = minute % 60;              }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (hour >= 24)              {                  day += hour / 24;                  hour = hour % 24;              }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (hour >= 24)              {                  day += hour / 24;                  hour = hour % 24;              }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (hour >= 24)              {                  day += hour / 24;                  hour = hour % 24;              }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (day > 56)                  throw new Exception(                      "day must be no more than 56 (makes month resolution easier)");
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (month > 12)              {                  if (month % 12 == 0)                  {                      year += (month - 12) / 12;                      month = 12;                  }                  else                  {                      year += month / 12;                      month = month % 12;                  }                }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (month > 12)              {                  if (month % 12 == 0)                  {                      year += (month - 12) / 12;                      month = 12;                  }                  else                  {                      year += month / 12;                      month = month % 12;                  }                }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (month > 12)              {                  if (month % 12 == 0)                  {                      year += (month - 12) / 12;                      month = 12;                  }                  else                  {                      year += month / 12;                      month = month % 12;                  }                }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (month > 12)              {                  if (month % 12 == 0)                  {                      year += (month - 12) / 12;                      month = 12;                  }                  else                  {                      year += month / 12;                      month = month % 12;                  }                }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (month > 12)              {                  if (month % 12 == 0)                  {                      year += (month - 12) / 12;                      month = 12;                  }                  else                  {                      year += month / 12;                      month = month % 12;                  }                }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (month > 12)              {                  if (month % 12 == 0)                  {                      year += (month - 12) / 12;                      month = 12;                  }                  else                  {                      year += month / 12;                      month = month % 12;                  }                }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,New,The following statement contains a magic number: if (month > 12)              {                  if (month % 12 == 0)                  {                      year += (month - 12) / 12;                      month = 12;                  }                  else                  {                      year += month / 12;                      month = month % 12;                  }                }
Magic Number,Chronic,Time,C:\repos\robertwilczynski_nChronic\src\Chronic\System\Time.cs,IsMonthOverflow,The following statement contains a magic number: if (month > 12 || month < 1)              {                  throw new ArgumentException(String.Format(                      "Expected month between 1 and 12 but got {0}"' month)'                      "month");              }
Magic Number,Chronic,OrdinalScanner,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\OrdinalScanner.cs,ScanOrdinalDay,The following statement contains a magic number: if (match.Success)              {                  var value = int.Parse(match.Groups[1].Value);                  if (value <= 31)                      return new OrdinalDay(value);              }
Magic Number,Chronic,ScalarScanner,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\ScalarScanner.cs,ScanDay,The following statement contains a magic number: if (_dayPattern.IsMatch(token.Value))              {                  var value = int.Parse(token.Value);                  if (value <= 31 && TokenIsAPeriodOfDay(nextToken) == false)                      return new ScalarDay(value);              }
Magic Number,Chronic,ScalarScanner,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\ScalarScanner.cs,ScanMonth,The following statement contains a magic number: if (_monthPattern.IsMatch(token.Value))              {                  var value = int.Parse(token.Value);                  if (value <= 12 && TokenIsAPeriodOfDay(nextToken) == false)                      return new ScalarMonth(value);              }
Magic Number,Chronic,ScalarScanner,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\ScalarScanner.cs,ScanYear,The following statement contains a magic number: if (_yearPattern.IsMatch(token.Value))              {                  var value = int.Parse(token.Value);                  if (TokenIsAPeriodOfDay(nextToken) == false)                  {                      if (value <= 37)                      {                          value += 2000;                      }                      else if (value <= 137 && value >= 69)                      {                          value += 1900;                      }                      return new ScalarYear(value);                  }              }
Magic Number,Chronic,ScalarScanner,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\ScalarScanner.cs,ScanYear,The following statement contains a magic number: if (_yearPattern.IsMatch(token.Value))              {                  var value = int.Parse(token.Value);                  if (TokenIsAPeriodOfDay(nextToken) == false)                  {                      if (value <= 37)                      {                          value += 2000;                      }                      else if (value <= 137 && value >= 69)                      {                          value += 1900;                      }                      return new ScalarYear(value);                  }              }
Magic Number,Chronic,ScalarScanner,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\ScalarScanner.cs,ScanYear,The following statement contains a magic number: if (_yearPattern.IsMatch(token.Value))              {                  var value = int.Parse(token.Value);                  if (TokenIsAPeriodOfDay(nextToken) == false)                  {                      if (value <= 37)                      {                          value += 2000;                      }                      else if (value <= 137 && value >= 69)                      {                          value += 1900;                      }                      return new ScalarYear(value);                  }              }
Magic Number,Chronic,ScalarScanner,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\ScalarScanner.cs,ScanYear,The following statement contains a magic number: if (_yearPattern.IsMatch(token.Value))              {                  var value = int.Parse(token.Value);                  if (TokenIsAPeriodOfDay(nextToken) == false)                  {                      if (value <= 37)                      {                          value += 2000;                      }                      else if (value <= 137 && value >= 69)                      {                          value += 1900;                      }                      return new ScalarYear(value);                  }              }
Magic Number,Chronic,ScalarScanner,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\ScalarScanner.cs,ScanYear,The following statement contains a magic number: if (_yearPattern.IsMatch(token.Value))              {                  var value = int.Parse(token.Value);                  if (TokenIsAPeriodOfDay(nextToken) == false)                  {                      if (value <= 37)                      {                          value += 2000;                      }                      else if (value <= 137 && value >= 69)                      {                          value += 1900;                      }                      return new ScalarYear(value);                  }              }
Magic Number,Chronic,Span,C:\repos\robertwilczynski_nChronic\src\Chronic\Span.cs,ToTime,The following statement contains a magic number: if (Width > 1)              {                  return Start.Value.AddSeconds((double)Width / 2);              }              else              {                  return Start.Value;              }
Magic Number,Chronic.Handlers,GRGRHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\GRGRHandler.cs,Handle,The following statement contains a magic number: var outerSpan = tokens.Skip(2).Take(2).GetAnchor(options);
Magic Number,Chronic.Handlers,GRGRHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\GRGRHandler.cs,Handle,The following statement contains a magic number: var outerSpan = tokens.Skip(2).Take(2).GetAnchor(options);
Magic Number,Chronic.Handlers,GRGRHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\GRGRHandler.cs,Handle,The following statement contains a magic number: return Utils.HandleGRR(tokens.Take(2).ToList()' outerSpan);
Magic Number,Chronic.Handlers,MultiSRHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\MultiSRHandler.cs,Handle,The following statement contains a magic number: var pointer = tokens[2].GetTag<Pointer>().Value;
Magic Number,Chronic.Handlers,OdRmnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\OdRmnHandler.cs,Handle,The following statement contains a magic number: return Utils.HandleMD(month' day' tokens.Skip(2).ToList()' options);
Magic Number,Chronic.Handlers,OdRmnSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\OdRmnSyHandler.cs,Handle,The following statement contains a magic number: var year = tokens[2].GetTag<ScalarYear>().Value;
Magic Number,Chronic.Handlers,OdRmnSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\OdRmnSyHandler.cs,Handle,The following statement contains a magic number: var timeTokens = tokens.Skip(3).ToList();
Magic Number,Chronic.Handlers,ORGRHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\ORGRHandler.cs,Handle,The following statement contains a magic number: var outerSpan = tokens.Skip(2).Take(2).GetAnchor(options);
Magic Number,Chronic.Handlers,ORGRHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\ORGRHandler.cs,Handle,The following statement contains a magic number: var outerSpan = tokens.Skip(2).Take(2).GetAnchor(options);
Magic Number,Chronic.Handlers,ORGRHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\ORGRHandler.cs,Handle,The following statement contains a magic number: return Utils.HandleORR(tokens.Take(2).ToList()' outerSpan' options);
Magic Number,Chronic.Handlers,ORSRHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\ORSRHandler.cs,Handle,The following statement contains a magic number: var outerSpan = new List<Token> {tokens[3]}.GetAnchor(options);
Magic Number,Chronic.Handlers,ORSRHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\ORSRHandler.cs,Handle,The following statement contains a magic number: return Utils.HandleORR(tokens.Take(2).ToList()' outerSpan' options);
Magic Number,Chronic.Handlers,PSRHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\PSRHandler.cs,Handle,The following statement contains a magic number: var tokensToHandle = new List<Token> { tokens[1]' tokens[2]' tokens[0] };
Magic Number,Chronic.Handlers,RdnRmnOdHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RdnRmnOdHandler.cs,Handle,The following statement contains a magic number: var day = tokens[2].GetTag<OrdinalDay>().Value;
Magic Number,Chronic.Handlers,RdnRmnSdHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RdnRmnSdHandler.cs,Handle,The following statement contains a magic number: var day = tokens[2].GetTag<ScalarDay>().Value;
Magic Number,Chronic.Handlers,RmnOdHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnOdHandler.cs,Handle,The following statement contains a magic number: return Utils.HandleMD(month' day' tokens.Skip(2).ToList()' options);
Magic Number,Chronic.Handlers,RmnOdOnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnOdOnHandler.cs,Handle,The following statement contains a magic number: if (tokens.Count > 3)              {                  month = tokens[2].GetTag<RepeaterMonthName>();                  day = tokens[3].GetTag<OrdinalDay>().Value;                  remainingTokens = tokens.Take(2).ToList();              }              else              {                  month = tokens[1].GetTag<RepeaterMonthName>();                  day = tokens[2].GetTag<OrdinalDay>().Value;                  remainingTokens = tokens.Take(1).ToList();              }
Magic Number,Chronic.Handlers,RmnOdOnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnOdOnHandler.cs,Handle,The following statement contains a magic number: if (tokens.Count > 3)              {                  month = tokens[2].GetTag<RepeaterMonthName>();                  day = tokens[3].GetTag<OrdinalDay>().Value;                  remainingTokens = tokens.Take(2).ToList();              }              else              {                  month = tokens[1].GetTag<RepeaterMonthName>();                  day = tokens[2].GetTag<OrdinalDay>().Value;                  remainingTokens = tokens.Take(1).ToList();              }
Magic Number,Chronic.Handlers,RmnOdOnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnOdOnHandler.cs,Handle,The following statement contains a magic number: if (tokens.Count > 3)              {                  month = tokens[2].GetTag<RepeaterMonthName>();                  day = tokens[3].GetTag<OrdinalDay>().Value;                  remainingTokens = tokens.Take(2).ToList();              }              else              {                  month = tokens[1].GetTag<RepeaterMonthName>();                  day = tokens[2].GetTag<OrdinalDay>().Value;                  remainingTokens = tokens.Take(1).ToList();              }
Magic Number,Chronic.Handlers,RmnOdOnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnOdOnHandler.cs,Handle,The following statement contains a magic number: if (tokens.Count > 3)              {                  month = tokens[2].GetTag<RepeaterMonthName>();                  day = tokens[3].GetTag<OrdinalDay>().Value;                  remainingTokens = tokens.Take(2).ToList();              }              else              {                  month = tokens[1].GetTag<RepeaterMonthName>();                  day = tokens[2].GetTag<OrdinalDay>().Value;                  remainingTokens = tokens.Take(1).ToList();              }
Magic Number,Chronic.Handlers,RmnOdOnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnOdOnHandler.cs,Handle,The following statement contains a magic number: if (tokens.Count > 3)              {                  month = tokens[2].GetTag<RepeaterMonthName>();                  day = tokens[3].GetTag<OrdinalDay>().Value;                  remainingTokens = tokens.Take(2).ToList();              }              else              {                  month = tokens[1].GetTag<RepeaterMonthName>();                  day = tokens[2].GetTag<OrdinalDay>().Value;                  remainingTokens = tokens.Take(1).ToList();              }
Magic Number,Chronic.Handlers,RmnOdSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnOdSyHandler.cs,Handle,The following statement contains a magic number: var year = tokens[2].GetTag<ScalarYear>().Value;
Magic Number,Chronic.Handlers,RmnOdSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnOdSyHandler.cs,Handle,The following statement contains a magic number: var time_tokens = tokens.Skip(3).ToList();
Magic Number,Chronic.Handlers,RmnSdHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnSdHandler.cs,Handle,The following statement contains a magic number: return Utils.HandleMD(month' day' tokens.Skip(2).ToList()' options);
Magic Number,Chronic.Handlers,RmnSdOnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnSdOnHandler.cs,Handle,The following statement contains a magic number: if (tokens.Count > 3)              {                  month = tokens[2].GetTag<RepeaterMonthName>();                  day = tokens[3].GetTag<ScalarDay>().Value;                  remainingTokens = tokens.Take(2).ToList();              }              else              {                  month = tokens[1].GetTag<RepeaterMonthName>();                  day = tokens[2].GetTag<ScalarDay>().Value;                  remainingTokens = tokens.Take(1).ToList();                              }
Magic Number,Chronic.Handlers,RmnSdOnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnSdOnHandler.cs,Handle,The following statement contains a magic number: if (tokens.Count > 3)              {                  month = tokens[2].GetTag<RepeaterMonthName>();                  day = tokens[3].GetTag<ScalarDay>().Value;                  remainingTokens = tokens.Take(2).ToList();              }              else              {                  month = tokens[1].GetTag<RepeaterMonthName>();                  day = tokens[2].GetTag<ScalarDay>().Value;                  remainingTokens = tokens.Take(1).ToList();                              }
Magic Number,Chronic.Handlers,RmnSdOnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnSdOnHandler.cs,Handle,The following statement contains a magic number: if (tokens.Count > 3)              {                  month = tokens[2].GetTag<RepeaterMonthName>();                  day = tokens[3].GetTag<ScalarDay>().Value;                  remainingTokens = tokens.Take(2).ToList();              }              else              {                  month = tokens[1].GetTag<RepeaterMonthName>();                  day = tokens[2].GetTag<ScalarDay>().Value;                  remainingTokens = tokens.Take(1).ToList();                              }
Magic Number,Chronic.Handlers,RmnSdOnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnSdOnHandler.cs,Handle,The following statement contains a magic number: if (tokens.Count > 3)              {                  month = tokens[2].GetTag<RepeaterMonthName>();                  day = tokens[3].GetTag<ScalarDay>().Value;                  remainingTokens = tokens.Take(2).ToList();              }              else              {                  month = tokens[1].GetTag<RepeaterMonthName>();                  day = tokens[2].GetTag<ScalarDay>().Value;                  remainingTokens = tokens.Take(1).ToList();                              }
Magic Number,Chronic.Handlers,RmnSdOnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnSdOnHandler.cs,Handle,The following statement contains a magic number: if (tokens.Count > 3)              {                  month = tokens[2].GetTag<RepeaterMonthName>();                  day = tokens[3].GetTag<ScalarDay>().Value;                  remainingTokens = tokens.Take(2).ToList();              }              else              {                  month = tokens[1].GetTag<RepeaterMonthName>();                  day = tokens[2].GetTag<ScalarDay>().Value;                  remainingTokens = tokens.Take(1).ToList();                              }
Magic Number,Chronic.Handlers,RmnSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnSyHandler.cs,Handle,The following statement contains a magic number: if (month == 12)              {                  next_month_year = year + 1;                  next_month_month = 1;              }              else              {                  next_month_year = year;                  next_month_month = month + 1;              }
Magic Number,Chronic.Handlers,SdRmnHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SdRmnHandler.cs,Handle,The following statement contains a magic number: return Utils.HandleMD(month' day' tokens.Skip(2).ToList()' options);
Magic Number,Chronic.Handlers,SdRmnSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SdRmnSyHandler.cs,Handle,The following statement contains a magic number: var monthDayYear = new List<Token> { tokens[1]' tokens[0]' tokens[2] };
Magic Number,Chronic.Handlers,SdRmnSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SdRmnSyHandler.cs,Handle,The following statement contains a magic number: monthDayYear.AddRange(tokens.Skip(3).ToList());
Magic Number,Chronic.Handlers,SdSmSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SdSmSyHandler.cs,Handle,The following statement contains a magic number: var year = tokens[2].GetTag<ScalarYear>().Value;
Magic Number,Chronic.Handlers,SdSmSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SdSmSyHandler.cs,Handle,The following statement contains a magic number: var timeTokens = tokens.Skip(3).ToList();
Magic Number,Chronic.Handlers,SmSdSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SmSdSyHandler.cs,Handle,The following statement contains a magic number: var year = tokens[2].GetTag<ScalarYear>().Value;
Magic Number,Chronic.Handlers,SmSdSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SmSdSyHandler.cs,Handle,The following statement contains a magic number: var time_tokens = tokens.Skip(3).ToList();
Magic Number,Chronic.Handlers,SRPAHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SRPAHandler.cs,Handle,The following statement contains a magic number: var anchorSpan = tokens.Skip(3).GetAnchor(options);
Magic Number,Chronic.Handlers,SRPHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SRPHandler.cs,Handle,The following statement contains a magic number: var pointer = tokens[2].GetTag<Pointer>().Value;
Magic Number,Chronic.Handlers,SyRmnOdHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SyRmnOdHandler.cs,Handle,The following statement contains a magic number: var day = tokens[2].GetTag<OrdinalDay>().Value;
Magic Number,Chronic.Handlers,SyRmnOdHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SyRmnOdHandler.cs,Handle,The following statement contains a magic number: var time_tokens = tokens.Skip(3).ToList();
Magic Number,Chronic.Handlers,SySmSdHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SySmSdHandler.cs,Handle,The following statement contains a magic number: newTokens.Add(tokens[2]);
Magic Number,Chronic.Handlers,SySmSdHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\SySmSdHandler.cs,Handle,The following statement contains a magic number: newTokens.AddRange(tokens.Skip(3));
Magic Number,Chronic.Handlers,RmnSdSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnSdSyHandler.cs,Handle,The following statement contains a magic number: var year = tokens[2].GetTag<ScalarYear>().Value;
Magic Number,Chronic.Handlers,RmnSdSyHandler,C:\repos\robertwilczynski_nChronic\src\Chronic\Handlers\RmnSdSyHandler.cs,Handle,The following statement contains a magic number: try              {                  var timeTokens = tokens.Skip(3).ToList();                  var dayStart = Time.New(year' month' day);                  span = Utils.DayOrTime(dayStart' timeTokens' options);              }              catch (ArgumentException e)              {                  span = null;              }
Magic Number,Chronic.Tags.Repeaters,IntegerRepeaterDayPortion,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\IntegerRepeaterDayPortion.cs,IntegerRepeaterDayPortion,The following statement contains a magic number: _range = new Range(value * SecondsInHour' (value + 12) * SecondsInHour);
Magic Number,Chronic.Tags.Repeaters,IntegerRepeaterDayPortion,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\IntegerRepeaterDayPortion.cs,GetWidth,The following statement contains a magic number: return 12 * SecondsInHour;
Magic Number,Chronic.Tags.Repeaters,RepeaterDayName,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterDayName.cs,NextSpan,The following statement contains a magic number: if (_start == null)              {                                  _start = now.Date.AddDays(direction);                  var dayNum = (int)Value;                    while ((int)(_start.Value.DayOfWeek) != dayNum)                  {                      _start = _start.Value.AddDays(direction);                  }              }              else              {                  _start = _start.Value.AddDays(direction * 7);              }
Magic Number,Chronic.Tags.Repeaters,RepeaterMonthName,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterMonthName.cs,NextSpan,The following statement contains a magic number: if (cur_month_month == 12)              {                  next_month_year = cur_month_year + 1;                  next_month_month = 1;              }              else              {                  next_month_year = cur_month_year;                  next_month_month = cur_month_month + 1;              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,RepeaterTime,The following statement contains a magic number: if (t.Length <= 2)              {                  var hours = int.Parse(t);                  tick = new Tick((hours == 12 ? 0 : hours) * SecondsInHour' true);              }              else if (t.Length == 3)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * SecondsInHour;                  int minutesInSeconds = int.Parse(t.Substring(1)) * 60;                  tick = new Tick(hoursInSeconds + minutesInSeconds' true);              }              else if (t.Length == 4)              {                  var ambiguous = (value.Contains(":") &&                                      int.Parse(t.Substring(0' 1)) != 0 &&                                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2)) * 60;                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds' ambiguous);                  }                  else                  {                      tick = new Tick(hoursInSeconds + minutesInSeconds' ambiguous);                  }              }              else if (t.Length == 5)              {                  int hoursInSeconds = int.Parse(t.Substring(0' 1)) * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(1' 2)) * 60;                  int seconds = int.Parse(t.Substring(3));                  tick = new Tick(hoursInSeconds + minutesInSeconds + seconds'                                  true);              }              else if (t.Length == 6)              {                  bool ambiguous = (value.Contains(":") &&                      int.Parse(t.Substring(0' 1)) != 0 &&                          int.Parse(t.Substring(0' 2)) <= 12);                  int hours = int.Parse(t.Substring(0' 2));                  int hoursInSeconds = hours * 60 * 60;                  int minutesInSeconds = int.Parse(t.Substring(2' 2)) * 60;                  int seconds = int.Parse(t.Substring(4' 2));                  //type = new Tick(hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  if (hours == 12)                  {                      tick = new Tick(0 * 60 * 60 + minutesInSeconds + seconds'                                      ambiguous);                  }                  else                  {                      tick = new Tick(                          hoursInSeconds + minutesInSeconds + seconds' ambiguous);                  }              }              else              {                  throw new ArgumentException("Time cannot exceed six digits");              }
Magic Number,Chronic.Tags.Repeaters,RepeaterTime,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterTime.cs,NextSpan,The following statement contains a magic number: var halfDay = RepeaterDay.DAY_SECONDS / 2;
Magic Number,Chronic.Tags.Repeaters,RepeaterYear,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterYear.cs,GetWidth,The following statement contains a magic number: return (365 * 24 * 60 * 60);
Magic Number,Chronic.Tags.Repeaters,RepeaterYear,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterYear.cs,GetWidth,The following statement contains a magic number: return (365 * 24 * 60 * 60);
Magic Number,Chronic.Tags.Repeaters,RepeaterYear,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterYear.cs,GetWidth,The following statement contains a magic number: return (365 * 24 * 60 * 60);
Magic Number,Chronic.Tags.Repeaters,RepeaterYear,C:\repos\robertwilczynski_nChronic\src\Chronic\Tags\Repeaters\RepeaterYear.cs,GetWidth,The following statement contains a magic number: return (365 * 24 * 60 * 60);
