Implementation smell,Namespace,Class,File,Method,Description
Complex Method,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,Autocomplete,Cyclomatic complexity of the method is 10
Complex Method,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,FindLastChainLinkMember,Cyclomatic complexity of the method is 11
Long Parameter List,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,FindAutocompleteForEntries,The method has 5 parameters. Parameters: consoleInput' autocompleteEntries' command' startIndex' isNextValue
Long Identifier,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,Autocomplete,The length of the parameter newCommandLength_whichParamAt_newStartIndex_numParams is 53.
Long Statement,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,Autocomplete,The length of the statement  "                long newCommandLength_whichParamAt_newStartIndex_numParams = FindParamIndexNewStartIndexAndNumParams(consoleInput' contextResult.StartIndex); " is 141.
Long Statement,QuakeConsole,TypeLoader,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\TypeLoader.cs,LoadTypeInPython,The length of the statement  "                //type.IsAbstract && !type.IsSealed || // Not an abstract type. We check for IsSealed because a static class is considered to be abstract AND sealed. " is 149.
Complex Conditional,QuakeConsole,TypeLoader,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\TypeLoader.cs,LoadTypeInPython,The conditional expression  "type.IsGenericType || // Not a generic type (requires special handling).                  !type.IsPublic || // Not a public type.                  //type.IsAbstract && !type.IsSealed || // Not an abstract type. We check for IsSealed because a static class is considered to be abstract AND sealed.                  type.DeclaringType != null || // IronPython does not support importing nested classes.                  TypeFilters.Any(x => x.Equals(type.Name' PythonInterpreter.StringComparisonMethod)) || // Not filtered.                  !_addedTypes.Add(type)"  is complex.
Magic Number,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,Autocomplete,The following statement contains a magic number: if (contextResult.Context == AutocompletionContext.Method)              {                  long newCommandLength_whichParamAt_newStartIndex_numParams = FindParamIndexNewStartIndexAndNumParams(consoleInput' contextResult.StartIndex);                  int chainEndIndex = FindPreviousLinkEndIndex(consoleInput' contextResult.StartIndex - 1);                  if (chainEndIndex >= 0)                  {                      Stack<string> accessorChain = FindAccessorChain(consoleInput' chainEndIndex);                      Member lastChainLink = FindLastChainLinkMember(accessorChain);                      if (lastChainLink?.ParameterInfo != null)                      {                          var numParams = (int)(newCommandLength_whichParamAt_newStartIndex_numParams & 0xff);                          ParameterInfo[] overload = null;                          for (int i = numParams; i <= lastChainLink.ParameterInfo.Max(x => x.Length); i++)                          {                              ParameterInfo[] overloadCandidate = lastChainLink.ParameterInfo.FirstOrDefault(x => x.Length == i);                              if (overloadCandidate != null)                              {                                  overload = overloadCandidate;                                  break;                              }                          }                          if (overload != null)                          {                              var paramIndex = newCommandLength_whichParamAt_newStartIndex_numParams >> 32 & 0xff;                              if (overload.Length > paramIndex)                                  typeToPrefer = overload[paramIndex].ParameterType;                          }                      }                  }              }
Magic Number,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,Autocomplete,The following statement contains a magic number: int length = autocompleteBoundaryIndices >> 16;
Magic Number,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,FindParamIndexNewStartIndexAndNumParams,The following statement contains a magic number: return ((long)newCommandLength << 48) + ((long)whichParamWeAt << 32) + (newStartIndex << 16) + numParams;
Magic Number,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,FindParamIndexNewStartIndexAndNumParams,The following statement contains a magic number: return ((long)newCommandLength << 48) + ((long)whichParamWeAt << 32) + (newStartIndex << 16) + numParams;
Magic Number,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,FindParamIndexNewStartIndexAndNumParams,The following statement contains a magic number: return ((long)newCommandLength << 48) + ((long)whichParamWeAt << 32) + (newStartIndex << 16) + numParams;
Magic Number,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,FindBoundaryIndices,The following statement contains a magic number: return lookupIndex + (length << 16);
Magic Number,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,FindAccessorChain,The following statement contains a magic number: while (true)              {                  int indices = FindBoundaryIndices(consoleInput' chainEndIndex);                  int startIndex = indices & 0xff;                  int length = indices >> 16;                    string chainLink = consoleInput.Substring(startIndex' length).Trim();                  _accessorChain.Push(chainLink);                    int previousLinkEndIndex = FindPreviousLinkEndIndex(consoleInput' startIndex - 1);                  if (chainEndIndex < 0)                      return _accessorChain;                    AutocompletionType chainType = FindAutocompleteType(consoleInput' startIndex);                  if (chainType == AutocompletionType.Accessor)                  {                      chainEndIndex = previousLinkEndIndex;                      continue;                  }                  break;              }
Missing Default,QuakeConsole,Autocompleter,C:\repos\Discosultan_Paradox.Console\Interpreters\PythonInterpreter\Autocompleter.cs,Autocomplete,The following switch statement is missing a default case: switch (completionType)                  {                      case AutocompletionType.Accessor:                          MemberCollection autocompleteValues;                          if (lastChainLink.IsInstance)                              _interpreter.InstanceMembers.TryGetValue(lastChainLink.Type' out autocompleteValues);                          else                              _interpreter.StaticMembers.TryGetValue(lastChainLink.Type' out autocompleteValues);                          if (autocompleteValues == null) break;                          FindAutocompleteForEntries(consoleInput' autocompleteValues.Names' command' startIndex' isNextValue);                          break;                      case AutocompletionType.Assignment:                          FindAutocompleteForEntries(                              consoleInput'                              GetAvailableNamesForType(lastChainLink.Type)'                              command'                              startIndex'                              isNextValue);                          break;                  }
