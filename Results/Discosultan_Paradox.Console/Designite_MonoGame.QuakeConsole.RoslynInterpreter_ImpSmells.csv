Implementation smell,Namespace,Class,File,Method,Description
Complex Method,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,Autocomplete,Cyclomatic complexity of the method is 21
Long Parameter List,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,FindAutocompleteForEntries,The method has 6 parameters.
Long Identifier,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,Autocomplete,The length of the parameter newCommandLength_whichParamAt_newStartIndex_numParams is 53.
Long Statement,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,Autocomplete,The length of the statement  "		long newCommandLength_whichParamAt_newStartIndex_numParams = FindParamIndexNewStartIndexAndNumParams (consoleInput' contextResult.StartIndex); " is 142.
Long Statement,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,Autocomplete,The length of the statement  "			FindAutocompleteForEntries (consoleInput' GetAvailableNamesForType (typeToPrefer)' command' startIndex' isNextValue' completionType); " is 133.
Long Statement,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,Autocomplete,The length of the statement  "			FindAutocompleteForEntries (consoleInput' GetAvailableNamesForType (lastChainLink.Type)' command' startIndex' isNextValue' completionType); " is 139.
Long Statement,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,GetAvailableNamesForType,The length of the statement  "		IEnumerable<string> resultsQuery = _typeLoader.Instances.Where (x => type.IsAssignableFrom (x.Value.Type)).Union (_typeLoader.Statics.Where (x => type.IsAssignableFrom (x.Value.Type))).Select (x => x.Key); " is 205.
Long Statement,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,FindPreviousLinkEndIndex,The length of the statement  "		if (consoleInput [i] == AccessorSymbol || consoleInput [i] == AssignmentSymbol || consoleInput [i] == FunctionStartSymbol) { " is 124.
Long Statement,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,FindAutocompleteType,The length of the statement  "			return prev == AssignmentSymbol || Operators.Any (x => x == prev) ? AutocompletionType.Regular : AutocompletionType.Assignment; " is 127.
Long Statement,QuakeConsole,RoslynInterpreter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\RoslynInterpreter.cs,Reset,The length of the statement  "		_scriptState = await CSharpScript.RunAsync (code: "int quakeconsole_dummy_value = 1;"' globalsType: typeof(ExpandoWrapper)' globals: Globals); " is 142.
Long Statement,QuakeConsole,TypeLoader,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\TypeLoading\TypeLoader.cs,AddMembers,The length of the statement  "			memberInfo.ParamInfos [i].ForEach (overload => overload.ForEach (parameter => AddTypeImpl (parameter.ParameterType' recursionLevel))); " is 134.
Long Statement,QuakeConsole,TypeLoader,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\TypeLoading\TypeLoader.cs,AutocompleteMembersQuery,The length of the statement  "	var ordered = members.Where (x => !AutocompleteFilters.Any (y => x.Name.StartsWith (y' StringComparison.Ordinal)))// Filter. " is 124.
Long Statement,QuakeConsole,TypeLoader,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\TypeLoading\TypeLoader.cs,AutocompleteMembersQuery,The length of the statement  "			Parameters = firstMember.MemberType == MemberTypes.Method ? group.Select (x => ((MethodInfo)x).GetParameters ()).ToArray () : null " is 130.
Magic Number,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,Autocomplete,The following statement contains a magic number: if (contextResult.Context == AutocompletionContext.Method) {  	long newCommandLength_whichParamAt_newStartIndex_numParams = FindParamIndexNewStartIndexAndNumParams (consoleInput' contextResult.StartIndex);  	int chainEndIndex = FindPreviousLinkEndIndex (consoleInput' contextResult.StartIndex - 1);  	if (chainEndIndex >= 0) {  		Stack<string> accessorChain = FindAccessorChain (consoleInput' chainEndIndex);  		Member lastChainLink = FindLastChainLinkMember (accessorChain);  		if (lastChainLink.ParameterInfo != null) {  			var numParams = (int)(newCommandLength_whichParamAt_newStartIndex_numParams & 0xff);  			ParameterInfo[] overload = null;  			for (int i = numParams; i <= lastChainLink.ParameterInfo.Max (x => x.Length); i++) {  				ParameterInfo[] overloadCandidate = lastChainLink.ParameterInfo.FirstOrDefault (x => x.Length == i);  				if (overloadCandidate != null) {  					overload = overloadCandidate;  					break;  				}  			}  			if (overload != null) {  				var paramIndex = newCommandLength_whichParamAt_newStartIndex_numParams >> 32 & 0xff;  				if (overload.Length > paramIndex)  					typeToPrefer = overload [paramIndex].ParameterType;  			}  		}  	}  }  
Magic Number,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,Autocomplete,The following statement contains a magic number: if (chainEndIndex >= 0) {  	Stack<string> accessorChain = FindAccessorChain (consoleInput' chainEndIndex);  	Member lastChainLink = FindLastChainLinkMember (accessorChain);  	if (lastChainLink.ParameterInfo != null) {  		var numParams = (int)(newCommandLength_whichParamAt_newStartIndex_numParams & 0xff);  		ParameterInfo[] overload = null;  		for (int i = numParams; i <= lastChainLink.ParameterInfo.Max (x => x.Length); i++) {  			ParameterInfo[] overloadCandidate = lastChainLink.ParameterInfo.FirstOrDefault (x => x.Length == i);  			if (overloadCandidate != null) {  				overload = overloadCandidate;  				break;  			}  		}  		if (overload != null) {  			var paramIndex = newCommandLength_whichParamAt_newStartIndex_numParams >> 32 & 0xff;  			if (overload.Length > paramIndex)  				typeToPrefer = overload [paramIndex].ParameterType;  		}  	}  }  
Magic Number,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,Autocomplete,The following statement contains a magic number: if (lastChainLink.ParameterInfo != null) {  	var numParams = (int)(newCommandLength_whichParamAt_newStartIndex_numParams & 0xff);  	ParameterInfo[] overload = null;  	for (int i = numParams; i <= lastChainLink.ParameterInfo.Max (x => x.Length); i++) {  		ParameterInfo[] overloadCandidate = lastChainLink.ParameterInfo.FirstOrDefault (x => x.Length == i);  		if (overloadCandidate != null) {  			overload = overloadCandidate;  			break;  		}  	}  	if (overload != null) {  		var paramIndex = newCommandLength_whichParamAt_newStartIndex_numParams >> 32 & 0xff;  		if (overload.Length > paramIndex)  			typeToPrefer = overload [paramIndex].ParameterType;  	}  }  
Magic Number,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,Autocomplete,The following statement contains a magic number: if (overload != null) {  	var paramIndex = newCommandLength_whichParamAt_newStartIndex_numParams >> 32 & 0xff;  	if (overload.Length > paramIndex)  		typeToPrefer = overload [paramIndex].ParameterType;  }  
Magic Number,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,FindParamIndexNewStartIndexAndNumParams,The following statement contains a magic number: return ((long)newCommandLength << 48) + ((long)whichParamWeAt << 32) + (newStartIndex << 16) + numParams;  
Magic Number,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,FindParamIndexNewStartIndexAndNumParams,The following statement contains a magic number: return ((long)newCommandLength << 48) + ((long)whichParamWeAt << 32) + (newStartIndex << 16) + numParams;  
Magic Number,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,FindParamIndexNewStartIndexAndNumParams,The following statement contains a magic number: return ((long)newCommandLength << 48) + ((long)whichParamWeAt << 32) + (newStartIndex << 16) + numParams;  
Magic Number,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,FindBoundaryIndices,The following statement contains a magic number: return lookupIndex + (length << 16);  
Magic Number,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,FindAccessorChain,The following statement contains a magic number: while (true) {  	int indices = FindBoundaryIndices (consoleInput' chainEndIndex);  	int startIndex = indices & 0xff;  	int length = indices >> 16;  	string chainLink = consoleInput.Substring (startIndex' length).Trim ();  	_accessorChain.Push (chainLink);  	int previousLinkEndIndex = FindPreviousLinkEndIndex (consoleInput' startIndex - 1);  	if (chainEndIndex < 0)  		return _accessorChain;  	AutocompletionType chainType = FindAutocompleteType (consoleInput' startIndex);  	if (chainType == AutocompletionType.Accessor) {  		chainEndIndex = previousLinkEndIndex;  		continue;  	}  	break;  }  
Missing Default,QuakeConsole,Autocompleter,F:\newReposMay17\Discosultan_Paradox.Console\Interpreters\RoslynInterpreter\Autocompletion\Autocompleter.cs,Autocomplete,The following switch statement is missing a default case: switch (completionType) {  case AutocompletionType.Accessor:  	MemberCollection autocompleteValues;  	if (lastChainLink.IsInstance)  		_typeLoader.InstanceMembers.TryGetValue (lastChainLink.Type' out autocompleteValues);  	else  		_typeLoader.StaticMembers.TryGetValue (lastChainLink.Type' out autocompleteValues);  	if (autocompleteValues == null)  		break;  	FindAutocompleteForEntries (consoleInput' autocompleteValues.Names' command' startIndex' isNextValue' completionType);  	break;  case AutocompletionType.Assignment:  	FindAutocompleteForEntries (consoleInput' GetAvailableNamesForType (lastChainLink.Type)' command' startIndex' isNextValue' completionType);  	break;  }  
