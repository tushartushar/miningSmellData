Implementation smell,Namespace,Class,File,Method,Description
Complex Method,UnityTest,ComparerBase,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\ComparerBase.cs,GetFailureMessage,Cyclomatic complexity of the method is 9
Complex Method,UnityTest,ResultSummarizer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Common\ResultWriter\ResultSummarizer.cs,Summarize,Cyclomatic complexity of the method is 27
Complex Method,UnityTest,XmlResultWriter,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Common\ResultWriter\XmlResultWriter.cs,WriteResultElement,Cyclomatic complexity of the method is 15
Complex Method,UnityTest,TestRunner,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\IntegrationTestsFramework\TestRunner\TestRunner.cs,StateMachine,Cyclomatic complexity of the method is 27
Long Parameter List,UnityTest,TestRunner,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\IntegrationTestsFramework\TestRunner\TestRunner.cs,PrintResultToLog,The method has 9 parameters.
Long Statement,UnityTest,AssertionComponent,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\AssertionComponent.cs,OnComponentCopy,The length of the statement  "	var oldActionList = Resources.FindObjectsOfTypeAll (typeof(AssertionComponent)).Where (o => ((AssertionComponent)o).m_ActionBase == m_ActionBase && o != this); " is 159.
Long Statement,UnityTest,ActionBase,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\ActionBase.cs,GetConfigurationDescription,The length of the statement  "	foreach (var prop in GetType ().GetFields (BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).Where (info => info.FieldType.IsSerializable)) { " is 164.
Long Statement,UnityTest,TestComponent,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\IntegrationTestsFramework\TestRunner\TestComponent.cs,GetTypeByName,The length of the statement  "	return AppDomain.CurrentDomain.GetAssemblies ().SelectMany (a => a.GetTypes ()).FirstOrDefault (type => type.Name == className); " is 128.
Long Statement,UnityTest,TestRunner,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\IntegrationTestsFramework\TestRunner\TestRunner.cs,ParseListForGroups,The length of the statement  "			var childrenTestResult = testResult.gameObject.GetComponentsInChildren (typeof(TestComponent)' true).Where (t => t != testResult).Cast<ITestComponent> ().ToArray (); " is 165.
Long Statement,UnityTest,TestRunner,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\IntegrationTestsFramework\TestRunner\TestRunner.cs,PrintResultToLog,The length of the statement  "		Debug.Log ("Failed tests: " + string.Join ("' "' testToRun.Where (t => t.IsFailure).Select (result => result.Name).ToArray ())); " is 128.
Long Statement,UnityTest,TestRunner,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\IntegrationTestsFramework\TestRunner\TestRunner.cs,PrintResultToLog,The length of the statement  "		Debug.Log ("Ignored tests: " + string.Join ("' "' testToRun.Where (t => t.IsIgnored).Select (result => result.Name).ToArray ())); " is 129.
Long Statement,UnityTest,TestRunner,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\IntegrationTestsFramework\TestRunner\TestRunner.cs,GetResultDestiantion,The length of the statement  "	var nameWithoutExtension = integrationTestsConfigFileName.Substring (0' integrationTestsConfigFileName.LastIndexOf ('.')); " is 122.
Long Statement,UnityTest,TestRunner,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\IntegrationTestsFramework\TestRunner\TestRunner.cs,GetResultDestiantion,The length of the statement  "	if (UnityEditorInternal.InternalEditorUtility.inBatchMode && Environment.GetCommandLineArgs ().Any (s => s.StartsWith (resultsFileDirectory))) " is 142.
Long Statement,UnityTest,TestRunner,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\IntegrationTestsFramework\TestRunner\TestRunner.cs,GetResultDestiantion,The length of the statement  "		resultDestiantion = Environment.GetCommandLineArgs ().First (s => s.StartsWith (resultsFileDirectory)).Substring (resultsFileDirectory.Length); " is 143.
Magic Number,UnityTest,ActionBase,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\ActionBase.cs,GetDepthOfSearch,The following statement contains a magic number: return 2;  
Magic Number,UnityTest,FloatComparer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\FloatComparer.cs,GetDepthOfSearch,The following statement contains a magic number: return 3;  
Magic Number,UnityTest,Vector2Comparer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\Vector2Comparer.cs,GetDepthOfSearch,The following statement contains a magic number: return 3;  
Magic Number,UnityTest,Vector4Comparer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\Vector4Comparer.cs,GetDepthOfSearch,The following statement contains a magic number: return 3;  
Missing Default,UnityTest,ColliderComparer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\ColliderComparer.cs,Compare,The following switch statement is missing a default case: switch (compareType) {  case CompareType.Intersects:  	return a.Intersects (b);  case CompareType.DoesNotIntersect:  	return !a.Intersects (b);  }  
Missing Default,UnityTest,ComparerBase,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\ComparerBase.cs,GetFailureMessage,The following switch statement is missing a default case: switch (compareToType) {  case ComparerBase.CompareToType.CompareToObject:  	message += " (" + other + ")." + otherPropertyPath + " failed.";  	break;  case ComparerBase.CompareToType.CompareToConstantValue:  	message += " " + ConstValue + " failed.";  	break;  case ComparerBase.CompareToType.CompareToNull:  	message += " failed.";  	break;  }  
Missing Default,UnityTest,FloatComparer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\FloatComparer.cs,Compare,The following switch statement is missing a default case: switch (compareTypes) {  case CompareTypes.Equal:  	return Math.Abs (a - b) < floatingPointError;  case CompareTypes.NotEqual:  	return Math.Abs (a - b) > floatingPointError;  case CompareTypes.Greater:  	return a > b;  case CompareTypes.Less:  	return a < b;  }  
Missing Default,UnityTest,IntComparer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\IntComparer.cs,Compare,The following switch statement is missing a default case: switch (compareType) {  case CompareType.Equal:  	return a == b;  case CompareType.NotEqual:  	return a != b;  case CompareType.Greater:  	return a > b;  case CompareType.GreaterOrEqual:  	return a >= b;  case CompareType.Less:  	return a < b;  case CompareType.LessOrEqual:  	return a <= b;  }  
Missing Default,UnityTest,IsRenderedByCamera,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\IsRenderedByCamera.cs,Compare,The following switch statement is missing a default case: switch (compareType) {  case CompareType.IsVisible:  	return isVisible;  case CompareType.IsNotVisible:  	return !isVisible;  }  
Missing Default,UnityTest,StringComparer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\StringComparer.cs,Compare,The following switch statement is missing a default case: switch (compareType) {  case CompareType.Equal:  	return String.Compare (a' b' comparisonType) == 0;  case CompareType.NotEqual:  	return String.Compare (a' b' comparisonType) != 0;  case CompareType.Longer:  	return String.Compare (a' b' comparisonType) > 0;  case CompareType.Shorter:  	return String.Compare (a' b' comparisonType) < 0;  }  
Missing Default,UnityTest,Vector2Comparer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\Vector2Comparer.cs,Compare,The following switch statement is missing a default case: switch (compareType) {  case CompareType.MagnitudeEquals:  	return AreVectorMagnitudeEqual (a.magnitude' b.magnitude' floatingPointError);  case CompareType.MagnitudeNotEquals:  	return !AreVectorMagnitudeEqual (a.magnitude' b.magnitude' floatingPointError);  }  
Missing Default,UnityTest,Vector3Comparer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\Vector3Comparer.cs,Compare,The following switch statement is missing a default case: switch (compareType) {  case CompareType.MagnitudeEquals:  	return AreVectorMagnitudeEqual (a.magnitude' b.magnitude' floatingPointError);  case CompareType.MagnitudeNotEquals:  	return !AreVectorMagnitudeEqual (a.magnitude' b.magnitude' floatingPointError);  }  
Missing Default,UnityTest,Vector4Comparer,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Assertions\Comparers\Vector4Comparer.cs,Compare,The following switch statement is missing a default case: switch (compareType) {  case CompareType.MagnitudeEquals:  	return AreVectorMagnitudeEqual (a.magnitude' b.magnitude' floatingPointError);  case CompareType.MagnitudeNotEquals:  	return !AreVectorMagnitudeEqual (a.magnitude' b.magnitude' floatingPointError);  }  
Missing Default,UnityTest,XmlResultWriter,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\Common\ResultWriter\XmlResultWriter.cs,WriteResultElement,The following switch statement is missing a default case: switch (result.ResultState) {  case TestResultState.Ignored:  case TestResultState.NotRunnable:  case TestResultState.Skipped:  	WriteReasonElement (result);  	break;  case TestResultState.Failure:  case TestResultState.Error:  case TestResultState.Cancelled:  	WriteFailureElement (result);  	break;  case TestResultState.Success:  case TestResultState.Inconclusive:  	if (result.Message != null)  		WriteReasonElement (result);  	break;  }  
Missing Default,UnityTest,TestRunner,C:\repos\warriorcns_mgr\UnityProject\Assets\UnityTestTools\IntegrationTestsFramework\TestRunner\TestRunner.cs,StateMachine,The following switch statement is missing a default case: switch (testState) {  case TestState.Success:  	LogMessage (finishedMessage);  	FinishTest (TestResult.ResultType.Success);  	break;  case TestState.Failure:  	LogMessage (failedMessage);  	FinishTest (TestResult.ResultType.Failed);  	break;  case TestState.Exception:  	LogMessage (failedExceptionMessage);  	FinishTest (TestResult.ResultType.FailedException);  	break;  case TestState.Timeout:  	LogMessage (timeoutMessage);  	FinishTest (TestResult.ResultType.Timeout);  	break;  case TestState.Ignored:  	LogMessage (ignoredMessage);  	FinishTest (TestResult.ResultType.Ignored);  	break;  }  
