Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,Cyclomatic complexity of the method is 8
Long Parameter List,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The method has 5 parameters.
Long Parameter List,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,getCroppedRectangle,The method has 8 parameters.
Long Statement,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The length of the statement  "		scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height); " is 127.
Long Statement,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The length of the statement  "			mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt); " is 143.
Long Statement,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The length of the statement  "			mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt); " is 137.
Complex Conditional,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The conditional expression  "size.Width == 0 || size.Height == 0 || scale <= 0 || strokeColor == null || fillColor == null"  is complex.
Complex Conditional,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,inkPresenter_OnMouseLeftButtonDown,The conditional expression  "point.X < 0 || point.Y < 0 || point.X > ActualWidth || point.Y > ActualHeight"  is complex.
Complex Conditional,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,inkPresenter_OnMouseMove,The conditional expression  "point.X < 0 || point.Y < 0 || point.X > ActualWidth || point.Y > ActualHeight"  is complex.
Complex Conditional,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,inkPresenter_OnMouseLeftButtonUp,The conditional expression  "currentStroke != null && point.X >= 0 && point.Y >= 0 && point.X <= ActualWidth && point.Y <= ActualHeight"  is complex.
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (shouldCrop) {  	croppedRectangle = getCroppedRectangle ();  	Rect scaledRectangle;  	scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height);  	if (scaledRectangle.X >= 5) {  		scaledRectangle.X -= 5;  		scaledRectangle.Width += 5;  	}  	if (scaledRectangle.Y >= 5) {  		scaledRectangle.Y -= 5;  		scaledRectangle.Height += 5;  	}  	if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  		scaledRectangle.Width += 5;  	if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  		scaledRectangle.Height += 5;  	bitmap = crop (bitmap' scaledRectangle);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (shouldCrop) {  	croppedRectangle = getCroppedRectangle ();  	Rect scaledRectangle;  	scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height);  	if (scaledRectangle.X >= 5) {  		scaledRectangle.X -= 5;  		scaledRectangle.Width += 5;  	}  	if (scaledRectangle.Y >= 5) {  		scaledRectangle.Y -= 5;  		scaledRectangle.Height += 5;  	}  	if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  		scaledRectangle.Width += 5;  	if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  		scaledRectangle.Height += 5;  	bitmap = crop (bitmap' scaledRectangle);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (shouldCrop) {  	croppedRectangle = getCroppedRectangle ();  	Rect scaledRectangle;  	scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height);  	if (scaledRectangle.X >= 5) {  		scaledRectangle.X -= 5;  		scaledRectangle.Width += 5;  	}  	if (scaledRectangle.Y >= 5) {  		scaledRectangle.Y -= 5;  		scaledRectangle.Height += 5;  	}  	if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  		scaledRectangle.Width += 5;  	if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  		scaledRectangle.Height += 5;  	bitmap = crop (bitmap' scaledRectangle);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (shouldCrop) {  	croppedRectangle = getCroppedRectangle ();  	Rect scaledRectangle;  	scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height);  	if (scaledRectangle.X >= 5) {  		scaledRectangle.X -= 5;  		scaledRectangle.Width += 5;  	}  	if (scaledRectangle.Y >= 5) {  		scaledRectangle.Y -= 5;  		scaledRectangle.Height += 5;  	}  	if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  		scaledRectangle.Width += 5;  	if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  		scaledRectangle.Height += 5;  	bitmap = crop (bitmap' scaledRectangle);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (shouldCrop) {  	croppedRectangle = getCroppedRectangle ();  	Rect scaledRectangle;  	scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height);  	if (scaledRectangle.X >= 5) {  		scaledRectangle.X -= 5;  		scaledRectangle.Width += 5;  	}  	if (scaledRectangle.Y >= 5) {  		scaledRectangle.Y -= 5;  		scaledRectangle.Height += 5;  	}  	if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  		scaledRectangle.Width += 5;  	if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  		scaledRectangle.Height += 5;  	bitmap = crop (bitmap' scaledRectangle);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (shouldCrop) {  	croppedRectangle = getCroppedRectangle ();  	Rect scaledRectangle;  	scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height);  	if (scaledRectangle.X >= 5) {  		scaledRectangle.X -= 5;  		scaledRectangle.Width += 5;  	}  	if (scaledRectangle.Y >= 5) {  		scaledRectangle.Y -= 5;  		scaledRectangle.Height += 5;  	}  	if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  		scaledRectangle.Width += 5;  	if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  		scaledRectangle.Height += 5;  	bitmap = crop (bitmap' scaledRectangle);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (shouldCrop) {  	croppedRectangle = getCroppedRectangle ();  	Rect scaledRectangle;  	scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height);  	if (scaledRectangle.X >= 5) {  		scaledRectangle.X -= 5;  		scaledRectangle.Width += 5;  	}  	if (scaledRectangle.Y >= 5) {  		scaledRectangle.Y -= 5;  		scaledRectangle.Height += 5;  	}  	if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  		scaledRectangle.Width += 5;  	if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  		scaledRectangle.Height += 5;  	bitmap = crop (bitmap' scaledRectangle);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (shouldCrop) {  	croppedRectangle = getCroppedRectangle ();  	Rect scaledRectangle;  	scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height);  	if (scaledRectangle.X >= 5) {  		scaledRectangle.X -= 5;  		scaledRectangle.Width += 5;  	}  	if (scaledRectangle.Y >= 5) {  		scaledRectangle.Y -= 5;  		scaledRectangle.Height += 5;  	}  	if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  		scaledRectangle.Width += 5;  	if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  		scaledRectangle.Height += 5;  	bitmap = crop (bitmap' scaledRectangle);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (shouldCrop) {  	croppedRectangle = getCroppedRectangle ();  	Rect scaledRectangle;  	scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height);  	if (scaledRectangle.X >= 5) {  		scaledRectangle.X -= 5;  		scaledRectangle.Width += 5;  	}  	if (scaledRectangle.Y >= 5) {  		scaledRectangle.Y -= 5;  		scaledRectangle.Height += 5;  	}  	if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  		scaledRectangle.Width += 5;  	if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  		scaledRectangle.Height += 5;  	bitmap = crop (bitmap' scaledRectangle);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (shouldCrop) {  	croppedRectangle = getCroppedRectangle ();  	Rect scaledRectangle;  	scaledRectangle = new Rect (croppedRectangle.X * uncroppedScale' croppedRectangle.Y * uncroppedScale' size.Width' size.Height);  	if (scaledRectangle.X >= 5) {  		scaledRectangle.X -= 5;  		scaledRectangle.Width += 5;  	}  	if (scaledRectangle.Y >= 5) {  		scaledRectangle.Y -= 5;  		scaledRectangle.Height += 5;  	}  	if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  		scaledRectangle.Width += 5;  	if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  		scaledRectangle.Height += 5;  	bitmap = crop (bitmap' scaledRectangle);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (scaledRectangle.X >= 5) {  	scaledRectangle.X -= 5;  	scaledRectangle.Width += 5;  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (scaledRectangle.X >= 5) {  	scaledRectangle.X -= 5;  	scaledRectangle.Width += 5;  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (scaledRectangle.X >= 5) {  	scaledRectangle.X -= 5;  	scaledRectangle.Width += 5;  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: scaledRectangle.X -= 5;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: scaledRectangle.Width += 5;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (scaledRectangle.Y >= 5) {  	scaledRectangle.Y -= 5;  	scaledRectangle.Height += 5;  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (scaledRectangle.Y >= 5) {  	scaledRectangle.Y -= 5;  	scaledRectangle.Height += 5;  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (scaledRectangle.Y >= 5) {  	scaledRectangle.Y -= 5;  	scaledRectangle.Height += 5;  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: scaledRectangle.Y -= 5;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: scaledRectangle.Height += 5;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  	scaledRectangle.Width += 5;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (scaledRectangle.X + scaledRectangle.Width <= uncroppedSize.Width - 5)  	scaledRectangle.Width += 5;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: scaledRectangle.Width += 5;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  	scaledRectangle.Height += 5;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: if (scaledRectangle.Y + scaledRectangle.Height <= uncroppedSize.Height - 5)  	scaledRectangle.Height += 5;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,GetImage,The following statement contains a magic number: scaledRectangle.Height += 5;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: if (pointsArray.Count < 4) {  	smoothedPoints = pointsArray;  	return currentStroke;  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < pointsArray.Count - 2; index++) {  	Point p0 = pointsArray [index - 1];  	Point p1 = pointsArray [index];  	Point p2 = pointsArray [index + 1];  	Point p3 = pointsArray [index + 2];  	//Add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		float t = (float)i * (1f / (float)granularity);  		float tt = t * t;  		float ttt = tt * t;  		//Intermediate point  		Point mid = new Point ();  		mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  		mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  		smoothedStroke.StylusPoints.Add (GetPoint (mid));  		smoothedPoints.Add (mid);  	}  	//Add p2  	smoothedStroke.StylusPoints.Add (GetPoint (p2));  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < pointsArray.Count - 2; index++) {  	Point p0 = pointsArray [index - 1];  	Point p1 = pointsArray [index];  	Point p2 = pointsArray [index + 1];  	Point p3 = pointsArray [index + 2];  	//Add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		float t = (float)i * (1f / (float)granularity);  		float tt = t * t;  		float ttt = tt * t;  		//Intermediate point  		Point mid = new Point ();  		mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  		mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  		smoothedStroke.StylusPoints.Add (GetPoint (mid));  		smoothedPoints.Add (mid);  	}  	//Add p2  	smoothedStroke.StylusPoints.Add (GetPoint (p2));  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < pointsArray.Count - 2; index++) {  	Point p0 = pointsArray [index - 1];  	Point p1 = pointsArray [index];  	Point p2 = pointsArray [index + 1];  	Point p3 = pointsArray [index + 2];  	//Add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		float t = (float)i * (1f / (float)granularity);  		float tt = t * t;  		float ttt = tt * t;  		//Intermediate point  		Point mid = new Point ();  		mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  		mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  		smoothedStroke.StylusPoints.Add (GetPoint (mid));  		smoothedPoints.Add (mid);  	}  	//Add p2  	smoothedStroke.StylusPoints.Add (GetPoint (p2));  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < pointsArray.Count - 2; index++) {  	Point p0 = pointsArray [index - 1];  	Point p1 = pointsArray [index];  	Point p2 = pointsArray [index + 1];  	Point p3 = pointsArray [index + 2];  	//Add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		float t = (float)i * (1f / (float)granularity);  		float tt = t * t;  		float ttt = tt * t;  		//Intermediate point  		Point mid = new Point ();  		mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  		mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  		smoothedStroke.StylusPoints.Add (GetPoint (mid));  		smoothedPoints.Add (mid);  	}  	//Add p2  	smoothedStroke.StylusPoints.Add (GetPoint (p2));  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < pointsArray.Count - 2; index++) {  	Point p0 = pointsArray [index - 1];  	Point p1 = pointsArray [index];  	Point p2 = pointsArray [index + 1];  	Point p3 = pointsArray [index + 2];  	//Add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		float t = (float)i * (1f / (float)granularity);  		float tt = t * t;  		float ttt = tt * t;  		//Intermediate point  		Point mid = new Point ();  		mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  		mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  		smoothedStroke.StylusPoints.Add (GetPoint (mid));  		smoothedPoints.Add (mid);  	}  	//Add p2  	smoothedStroke.StylusPoints.Add (GetPoint (p2));  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < pointsArray.Count - 2; index++) {  	Point p0 = pointsArray [index - 1];  	Point p1 = pointsArray [index];  	Point p2 = pointsArray [index + 1];  	Point p3 = pointsArray [index + 2];  	//Add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		float t = (float)i * (1f / (float)granularity);  		float tt = t * t;  		float ttt = tt * t;  		//Intermediate point  		Point mid = new Point ();  		mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  		mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  		smoothedStroke.StylusPoints.Add (GetPoint (mid));  		smoothedPoints.Add (mid);  	}  	//Add p2  	smoothedStroke.StylusPoints.Add (GetPoint (p2));  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < pointsArray.Count - 2; index++) {  	Point p0 = pointsArray [index - 1];  	Point p1 = pointsArray [index];  	Point p2 = pointsArray [index + 1];  	Point p3 = pointsArray [index + 2];  	//Add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		float t = (float)i * (1f / (float)granularity);  		float tt = t * t;  		float ttt = tt * t;  		//Intermediate point  		Point mid = new Point ();  		mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  		mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  		smoothedStroke.StylusPoints.Add (GetPoint (mid));  		smoothedPoints.Add (mid);  	}  	//Add p2  	smoothedStroke.StylusPoints.Add (GetPoint (p2));  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var index = 1; index < pointsArray.Count - 2; index++) {  	Point p0 = pointsArray [index - 1];  	Point p1 = pointsArray [index];  	Point p2 = pointsArray [index + 1];  	Point p3 = pointsArray [index + 2];  	//Add n points starting at p1 + dx/dy up until p2 using Catmull-Rom splines  	for (var i = 1; i < granularity; i++) {  		float t = (float)i * (1f / (float)granularity);  		float tt = t * t;  		float ttt = tt * t;  		//Intermediate point  		Point mid = new Point ();  		mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  		mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  		smoothedStroke.StylusPoints.Add (GetPoint (mid));  		smoothedPoints.Add (mid);  	}  	//Add p2  	smoothedStroke.StylusPoints.Add (GetPoint (p2));  	smoothedPoints.Add (p2);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	float t = (float)i * (1f / (float)granularity);  	float tt = t * t;  	float ttt = tt * t;  	//Intermediate point  	Point mid = new Point ();  	mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  	mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  	smoothedStroke.StylusPoints.Add (GetPoint (mid));  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	float t = (float)i * (1f / (float)granularity);  	float tt = t * t;  	float ttt = tt * t;  	//Intermediate point  	Point mid = new Point ();  	mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  	mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  	smoothedStroke.StylusPoints.Add (GetPoint (mid));  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	float t = (float)i * (1f / (float)granularity);  	float tt = t * t;  	float ttt = tt * t;  	//Intermediate point  	Point mid = new Point ();  	mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  	mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  	smoothedStroke.StylusPoints.Add (GetPoint (mid));  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	float t = (float)i * (1f / (float)granularity);  	float tt = t * t;  	float ttt = tt * t;  	//Intermediate point  	Point mid = new Point ();  	mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  	mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  	smoothedStroke.StylusPoints.Add (GetPoint (mid));  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	float t = (float)i * (1f / (float)granularity);  	float tt = t * t;  	float ttt = tt * t;  	//Intermediate point  	Point mid = new Point ();  	mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  	mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  	smoothedStroke.StylusPoints.Add (GetPoint (mid));  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: for (var i = 1; i < granularity; i++) {  	float t = (float)i * (1f / (float)granularity);  	float tt = t * t;  	float ttt = tt * t;  	//Intermediate point  	Point mid = new Point ();  	mid.X = 0.5f * (2f * p1.X + (p2.X - p0.X) * t + (2f * p0.X - 5f * p1.X + 4f * p2.X - p3.X) * tt + (3f * p1.X - p0.X - 3f * p2.X + p3.X) * ttt);  	mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  	smoothedStroke.StylusPoints.Add (GetPoint (mid));  	smoothedPoints.Add (mid);  }  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,smoothedPathWithGranularity,The following statement contains a magic number: mid.Y = 0.5f * (2 * p1.Y + (p2.Y - p0.Y) * t + (2 * p0.Y - 5 * p1.Y + 4 * p2.Y - p3.Y) * tt + (3 * p1.Y - p0.Y - 3 * p2.Y + p3.Y) * ttt);  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,inkPresenter_OnMouseLeftButtonUp,The following statement contains a magic number: currentStroke = smoothedPathWithGranularity (40' out currentPoints);  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,LoadPoints,The following statement contains a magic number: do {  	//Create a new path and set the line options  	currentStroke = new Stroke ();  	currentStroke.DrawingAttributes.Color = strokeColor;  	currentStroke.DrawingAttributes.Width = lineWidth;  	currentStroke.DrawingAttributes.Height = lineWidth;  	currentPoints = new List<Point> ();  	//Move to the first point and add that point to the current_points array.  	currentStroke.StylusPoints.Add (GetPoint (loadedPoints [startIndex]));  	currentPoints.Add (loadedPoints [startIndex]);  	//Iterate through the array until an empty point (or the end of the array) is reached'  	//adding each point to the current_path and to the current_points array.  	for (var i = startIndex + 1; i < emptyIndex; i++) {  		currentStroke.StylusPoints.Add (GetPoint (loadedPoints [i]));  		currentPoints.Add (loadedPoints [i]);  	}  	//Add the current_path and current_points list to their respective Lists before  	//starting on the next line to be drawn.  	strokes.Add (currentStroke);  	points.Add (currentPoints.ToArray ());  	//Obtain the indices for the next line to be drawn.  	startIndex = emptyIndex + 1;  	if (startIndex < loadedPoints.Count () - 1) {  		emptyIndex = loadedPoints.ToList ().IndexOf (new Point (-10000' -10000)' startIndex);  		if (emptyIndex == -1)  			emptyIndex = loadedPoints.Count ();  	}  	else  		emptyIndex = startIndex;  }  while (startIndex < emptyIndex);  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,LoadPoints,The following statement contains a magic number: do {  	//Create a new path and set the line options  	currentStroke = new Stroke ();  	currentStroke.DrawingAttributes.Color = strokeColor;  	currentStroke.DrawingAttributes.Width = lineWidth;  	currentStroke.DrawingAttributes.Height = lineWidth;  	currentPoints = new List<Point> ();  	//Move to the first point and add that point to the current_points array.  	currentStroke.StylusPoints.Add (GetPoint (loadedPoints [startIndex]));  	currentPoints.Add (loadedPoints [startIndex]);  	//Iterate through the array until an empty point (or the end of the array) is reached'  	//adding each point to the current_path and to the current_points array.  	for (var i = startIndex + 1; i < emptyIndex; i++) {  		currentStroke.StylusPoints.Add (GetPoint (loadedPoints [i]));  		currentPoints.Add (loadedPoints [i]);  	}  	//Add the current_path and current_points list to their respective Lists before  	//starting on the next line to be drawn.  	strokes.Add (currentStroke);  	points.Add (currentPoints.ToArray ());  	//Obtain the indices for the next line to be drawn.  	startIndex = emptyIndex + 1;  	if (startIndex < loadedPoints.Count () - 1) {  		emptyIndex = loadedPoints.ToList ().IndexOf (new Point (-10000' -10000)' startIndex);  		if (emptyIndex == -1)  			emptyIndex = loadedPoints.Count ();  	}  	else  		emptyIndex = startIndex;  }  while (startIndex < emptyIndex);  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,LoadPoints,The following statement contains a magic number: if (startIndex < loadedPoints.Count () - 1) {  	emptyIndex = loadedPoints.ToList ().IndexOf (new Point (-10000' -10000)' startIndex);  	if (emptyIndex == -1)  		emptyIndex = loadedPoints.Count ();  }  else  	emptyIndex = startIndex;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,LoadPoints,The following statement contains a magic number: if (startIndex < loadedPoints.Count () - 1) {  	emptyIndex = loadedPoints.ToList ().IndexOf (new Point (-10000' -10000)' startIndex);  	if (emptyIndex == -1)  		emptyIndex = loadedPoints.Count ();  }  else  	emptyIndex = startIndex;  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,LoadPoints,The following statement contains a magic number: emptyIndex = loadedPoints.ToList ().IndexOf (new Point (-10000' -10000)' startIndex);  
Magic Number,Xamarin.Controls,SignaturePadView,C:\repos\xamarin_VervetaCRM\Common\SignaturePad.WP7\SignaturePad.xaml.cs,LoadPoints,The following statement contains a magic number: emptyIndex = loadedPoints.ToList ().IndexOf (new Point (-10000' -10000)' startIndex);  
