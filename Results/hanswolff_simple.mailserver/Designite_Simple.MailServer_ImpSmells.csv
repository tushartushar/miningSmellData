Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv6Literal,Cyclomatic complexity of the method is 14
Complex Method,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,Validate,Cyclomatic complexity of the method is 13
Complex Method,Simple.MailServer.Mime,StringReaderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\StringReaderStream.cs,ReadLine,Cyclomatic complexity of the method is 10
Complex Method,Simple.MailServer.Mime,StringReaderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\StringReaderStream.cs,ReadLineAsync,Cyclomatic complexity of the method is 10
Complex Method,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Simple.MailServer.Smtp,SmtpResponse,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Smtp\SmtpResponse.cs,Equals,Cyclomatic complexity of the method is 8
Long Statement,Simple.MailServer.Smtp,SmtpServer,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Smtp\SmtpServer.cs,PortBindingClientConnected,The length of the statement  "            connection.ClientDisconnected += (sender' args) => ClientDisconnected(this' new SmtpConnectionEventArgs(args.Connection)); " is 122.
Long Statement,Bdev.Net.Dns,SoaRecord,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\SoaRecord.cs,ToString,The length of the statement  "			return string.Format("primary name server = {0}\nresponsible mail addr = {1}\nserial  = {2}\nrefresh = {3}\nretry   = {4}\nexpire  = {5}\ndefault TTL = {6}"' " is 157.
Long Statement,Simple.MailServer.Extensions,StreamReaderExtensions,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Extensions\StreamReaderExtensions.cs,Seek,The length of the statement  "            var preamble = (byte[])streamReader.GetType().InvokeMember("_preamble"' BindingFlags.DeclaredOnly | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.GetField' null' streamReader' null); " is 198.
Empty Catch Block,Simple.MailServer,BaseConnection,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\BaseConnection.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,Simple.MailServer,PortListener,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\PortListener.cs,ListenForClients,The method has an empty catch block.
Magic Number,Simple.MailServer,IdleConnectionDisconnectWatchdog<T>,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\IdleConnectionDisconnectorWatchdog.cs,IdleConnectionDisconnectWatchdog,The following statement contains a magic number: _interval = 1000;
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,IsAtom,The following statement contains a magic number: return c < 128 ? IsLetterOrDigit(c) || AtomCharacters.IndexOf(c) != -1 : allowInternational;
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,IsDomain,The following statement contains a magic number: return c < 128 ? IsLetterOrDigit(c) || c == '-' : allowInternational;
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipQuoted,The following statement contains a magic number: while (index < text.Length)              {                  if (text[index] >= 128 && !allowInternational)                      return false;                    if (text[index] == '\\')                  {                      escaped = !escaped;                  }                  else if (!escaped)                  {                      if (text[index] == '"')                          break;                  }                  else                  {                      escaped = false;                  }                    index++;              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv4Literal,The following statement contains a magic number: while (index < text.Length && groups < 4)              {                  int startIndex = index;                  int value = 0;                    while (index < text.Length && text[index] >= '0' && text[index] <= '9')                  {                      value = (value * 10) + (text[index] - '0');                      index++;                  }                    if (index == startIndex || index - startIndex > 3 || value > 255)                      return false;                    groups++;                    if (groups < 4 && index < text.Length && text[index] == '.')                      index++;              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv4Literal,The following statement contains a magic number: while (index < text.Length && groups < 4)              {                  int startIndex = index;                  int value = 0;                    while (index < text.Length && text[index] >= '0' && text[index] <= '9')                  {                      value = (value * 10) + (text[index] - '0');                      index++;                  }                    if (index == startIndex || index - startIndex > 3 || value > 255)                      return false;                    groups++;                    if (groups < 4 && index < text.Length && text[index] == '.')                      index++;              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv4Literal,The following statement contains a magic number: while (index < text.Length && groups < 4)              {                  int startIndex = index;                  int value = 0;                    while (index < text.Length && text[index] >= '0' && text[index] <= '9')                  {                      value = (value * 10) + (text[index] - '0');                      index++;                  }                    if (index == startIndex || index - startIndex > 3 || value > 255)                      return false;                    groups++;                    if (groups < 4 && index < text.Length && text[index] == '.')                      index++;              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv4Literal,The following statement contains a magic number: while (index < text.Length && groups < 4)              {                  int startIndex = index;                  int value = 0;                    while (index < text.Length && text[index] >= '0' && text[index] <= '9')                  {                      value = (value * 10) + (text[index] - '0');                      index++;                  }                    if (index == startIndex || index - startIndex > 3 || value > 255)                      return false;                    groups++;                    if (groups < 4 && index < text.Length && text[index] == '.')                      index++;              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv4Literal,The following statement contains a magic number: while (index < text.Length && groups < 4)              {                  int startIndex = index;                  int value = 0;                    while (index < text.Length && text[index] >= '0' && text[index] <= '9')                  {                      value = (value * 10) + (text[index] - '0');                      index++;                  }                    if (index == startIndex || index - startIndex > 3 || value > 255)                      return false;                    groups++;                    if (groups < 4 && index < text.Length && text[index] == '.')                      index++;              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv4Literal,The following statement contains a magic number: return groups == 4;
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv6Literal,The following statement contains a magic number: while (index < text.Length)              {                  int startIndex = index;                    while (index < text.Length && IsHexDigit(text[index]))                      index++;                    if (index >= text.Length)                      break;                    if (index > startIndex && colons > 2 && text[index] == '.')                  {                      // IPv6v4                      index = startIndex;                        if (!SkipIPv4Literal(text' ref index))                          return false;                        break;                  }                    int count = index - startIndex;                  if (count > 4)                      return false;                    if (text[index] != ':')                      break;                    startIndex = index;                  while (index < text.Length && text[index] == ':')                      index++;                    count = index - startIndex;                  if (count > 2)                      return false;                    if (count == 2)                  {                      if (compact)                          return false;                        compact = true;                      colons += 2;                  }                  else                  {                      colons++;                  }              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv6Literal,The following statement contains a magic number: while (index < text.Length)              {                  int startIndex = index;                    while (index < text.Length && IsHexDigit(text[index]))                      index++;                    if (index >= text.Length)                      break;                    if (index > startIndex && colons > 2 && text[index] == '.')                  {                      // IPv6v4                      index = startIndex;                        if (!SkipIPv4Literal(text' ref index))                          return false;                        break;                  }                    int count = index - startIndex;                  if (count > 4)                      return false;                    if (text[index] != ':')                      break;                    startIndex = index;                  while (index < text.Length && text[index] == ':')                      index++;                    count = index - startIndex;                  if (count > 2)                      return false;                    if (count == 2)                  {                      if (compact)                          return false;                        compact = true;                      colons += 2;                  }                  else                  {                      colons++;                  }              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv6Literal,The following statement contains a magic number: while (index < text.Length)              {                  int startIndex = index;                    while (index < text.Length && IsHexDigit(text[index]))                      index++;                    if (index >= text.Length)                      break;                    if (index > startIndex && colons > 2 && text[index] == '.')                  {                      // IPv6v4                      index = startIndex;                        if (!SkipIPv4Literal(text' ref index))                          return false;                        break;                  }                    int count = index - startIndex;                  if (count > 4)                      return false;                    if (text[index] != ':')                      break;                    startIndex = index;                  while (index < text.Length && text[index] == ':')                      index++;                    count = index - startIndex;                  if (count > 2)                      return false;                    if (count == 2)                  {                      if (compact)                          return false;                        compact = true;                      colons += 2;                  }                  else                  {                      colons++;                  }              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv6Literal,The following statement contains a magic number: while (index < text.Length)              {                  int startIndex = index;                    while (index < text.Length && IsHexDigit(text[index]))                      index++;                    if (index >= text.Length)                      break;                    if (index > startIndex && colons > 2 && text[index] == '.')                  {                      // IPv6v4                      index = startIndex;                        if (!SkipIPv4Literal(text' ref index))                          return false;                        break;                  }                    int count = index - startIndex;                  if (count > 4)                      return false;                    if (text[index] != ':')                      break;                    startIndex = index;                  while (index < text.Length && text[index] == ':')                      index++;                    count = index - startIndex;                  if (count > 2)                      return false;                    if (count == 2)                  {                      if (compact)                          return false;                        compact = true;                      colons += 2;                  }                  else                  {                      colons++;                  }              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv6Literal,The following statement contains a magic number: while (index < text.Length)              {                  int startIndex = index;                    while (index < text.Length && IsHexDigit(text[index]))                      index++;                    if (index >= text.Length)                      break;                    if (index > startIndex && colons > 2 && text[index] == '.')                  {                      // IPv6v4                      index = startIndex;                        if (!SkipIPv4Literal(text' ref index))                          return false;                        break;                  }                    int count = index - startIndex;                  if (count > 4)                      return false;                    if (text[index] != ':')                      break;                    startIndex = index;                  while (index < text.Length && text[index] == ':')                      index++;                    count = index - startIndex;                  if (count > 2)                      return false;                    if (count == 2)                  {                      if (compact)                          return false;                        compact = true;                      colons += 2;                  }                  else                  {                      colons++;                  }              }
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv6Literal,The following statement contains a magic number: if (colons < 2)                  return false;
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv6Literal,The following statement contains a magic number: if (compact)                  return colons < 6;
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,SkipIPv6Literal,The following statement contains a magic number: return colons < 7;
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,Validate,The following statement contains a magic number: if (index + 8 >= email.Length)                  return false;
Magic Number,Simple.MailServer.Mime,EmailValidator,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\XamarinEmailValidator.cs,Validate,The following statement contains a magic number: var ipv6 = email.Substring(index' 5);
Magic Number,Simple.MailServer.Mime,StringReaderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\StringReaderStream.cs,ReadLine,The following statement contains a magic number: for (var i = 0; i < _buffer.Length; i++)              {                  var b = BaseStream.ReadByte();                  if (b < 0)                  {                      _eof = true;                      if (i == 0) return null;                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      return res;                  }                    if (b == 10)                  {                      var lastByte = i > 0 ? _buffer[i - 1] : _lastByte;                      if (lastByte == 13 || _bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte)b;                      _bufferFull = false;                      return res;                  }                    if (b == 13)                  {                      if (_bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        if (i == 0)                      {                          _lastByte = (byte)b;                          return BlankLine;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte) b;                      _bufferFull = false;                      return res;                  }                    _buffer[i] = (byte)b;              }
Magic Number,Simple.MailServer.Mime,StringReaderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\StringReaderStream.cs,ReadLine,The following statement contains a magic number: for (var i = 0; i < _buffer.Length; i++)              {                  var b = BaseStream.ReadByte();                  if (b < 0)                  {                      _eof = true;                      if (i == 0) return null;                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      return res;                  }                    if (b == 10)                  {                      var lastByte = i > 0 ? _buffer[i - 1] : _lastByte;                      if (lastByte == 13 || _bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte)b;                      _bufferFull = false;                      return res;                  }                    if (b == 13)                  {                      if (_bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        if (i == 0)                      {                          _lastByte = (byte)b;                          return BlankLine;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte) b;                      _bufferFull = false;                      return res;                  }                    _buffer[i] = (byte)b;              }
Magic Number,Simple.MailServer.Mime,StringReaderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\StringReaderStream.cs,ReadLine,The following statement contains a magic number: for (var i = 0; i < _buffer.Length; i++)              {                  var b = BaseStream.ReadByte();                  if (b < 0)                  {                      _eof = true;                      if (i == 0) return null;                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      return res;                  }                    if (b == 10)                  {                      var lastByte = i > 0 ? _buffer[i - 1] : _lastByte;                      if (lastByte == 13 || _bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte)b;                      _bufferFull = false;                      return res;                  }                    if (b == 13)                  {                      if (_bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        if (i == 0)                      {                          _lastByte = (byte)b;                          return BlankLine;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte) b;                      _bufferFull = false;                      return res;                  }                    _buffer[i] = (byte)b;              }
Magic Number,Simple.MailServer.Mime,StringReaderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\StringReaderStream.cs,ReadLineAsync,The following statement contains a magic number: for (var i = 0; i < _buffer.Length; i++)              {                  var read = await BaseStream.ReadAsync(_singleBuf' 0' 1' cancellationToken);                  if (read <= 0)                  {                      _eof = true;                      if (i == 0) return null;                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      return res;                  }                    int b = _singleBuf[0];                  if (b == 10)                  {                      var lastByte = i > 0 ? _buffer[i - 1] : _lastByte;                      if (lastByte == 13 || _bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte)b;                      _bufferFull = false;                      return res;                  }                    if (b == 13)                  {                      if (_bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        if (i == 0)                      {                          _lastByte = (byte)b;                          return BlankLine;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte)b;                      _bufferFull = false;                      return res;                  }                    _buffer[i] = (byte)b;              }
Magic Number,Simple.MailServer.Mime,StringReaderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\StringReaderStream.cs,ReadLineAsync,The following statement contains a magic number: for (var i = 0; i < _buffer.Length; i++)              {                  var read = await BaseStream.ReadAsync(_singleBuf' 0' 1' cancellationToken);                  if (read <= 0)                  {                      _eof = true;                      if (i == 0) return null;                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      return res;                  }                    int b = _singleBuf[0];                  if (b == 10)                  {                      var lastByte = i > 0 ? _buffer[i - 1] : _lastByte;                      if (lastByte == 13 || _bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte)b;                      _bufferFull = false;                      return res;                  }                    if (b == 13)                  {                      if (_bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        if (i == 0)                      {                          _lastByte = (byte)b;                          return BlankLine;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte)b;                      _bufferFull = false;                      return res;                  }                    _buffer[i] = (byte)b;              }
Magic Number,Simple.MailServer.Mime,StringReaderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\StringReaderStream.cs,ReadLineAsync,The following statement contains a magic number: for (var i = 0; i < _buffer.Length; i++)              {                  var read = await BaseStream.ReadAsync(_singleBuf' 0' 1' cancellationToken);                  if (read <= 0)                  {                      _eof = true;                      if (i == 0) return null;                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      return res;                  }                    int b = _singleBuf[0];                  if (b == 10)                  {                      var lastByte = i > 0 ? _buffer[i - 1] : _lastByte;                      if (lastByte == 13 || _bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte)b;                      _bufferFull = false;                      return res;                  }                    if (b == 13)                  {                      if (_bufferFull)                      {                          _bufferFull = false;                          _lastByte = (byte)b;                          i--;                          continue;                      }                        if (i == 0)                      {                          _lastByte = (byte)b;                          return BlankLine;                      }                        var res = new byte[i];                      Buffer.BlockCopy(_buffer' 0' res' 0' i);                      _lastByte = (byte)b;                      _bufferFull = false;                      return res;                  }                    _buffer[i] = (byte)b;              }
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[2].Length == 2)                  normalizedDate.Append("20" + dmyhmsz[2] + " ");              else                  normalizedDate.Append(dmyhmsz[2] + " ");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[2].Length == 2)                  normalizedDate.Append("20" + dmyhmsz[2] + " ");              else                  normalizedDate.Append(dmyhmsz[2] + " ");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[2].Length == 2)                  normalizedDate.Append("20" + dmyhmsz[2] + " ");              else                  normalizedDate.Append(dmyhmsz[2] + " ");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[2].Length == 2)                  normalizedDate.Append("20" + dmyhmsz[2] + " ");              else                  normalizedDate.Append(dmyhmsz[2] + " ");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[3].Length == 1)                  normalizedDate.Append("0" + dmyhmsz[3] + ":");              else                  normalizedDate.Append(dmyhmsz[3] + ":");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[3].Length == 1)                  normalizedDate.Append("0" + dmyhmsz[3] + ":");              else                  normalizedDate.Append(dmyhmsz[3] + ":");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[3].Length == 1)                  normalizedDate.Append("0" + dmyhmsz[3] + ":");              else                  normalizedDate.Append(dmyhmsz[3] + ":");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[4].Length == 1)                  normalizedDate.Append("0" + dmyhmsz[4] + ":");              else                  normalizedDate.Append(dmyhmsz[4] + ":");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[4].Length == 1)                  normalizedDate.Append("0" + dmyhmsz[4] + ":");              else                  normalizedDate.Append(dmyhmsz[4] + ":");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[4].Length == 1)                  normalizedDate.Append("0" + dmyhmsz[4] + ":");              else                  normalizedDate.Append(dmyhmsz[4] + ":");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[5].Length == 1)                  normalizedDate.Append("0" + dmyhmsz[5] + " ");              else                  normalizedDate.Append(dmyhmsz[5] + " ");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[5].Length == 1)                  normalizedDate.Append("0" + dmyhmsz[5] + " ");              else                  normalizedDate.Append(dmyhmsz[5] + " ");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: if (dmyhmsz[5].Length == 1)                  normalizedDate.Append("0" + dmyhmsz[5] + " ");              else                  normalizedDate.Append(dmyhmsz[5] + " ");
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,CreateNormalizedDate,The following statement contains a magic number: normalizedDate.Append(dmyhmsz[6]);
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: var dmyhmsz = new string[7];
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (dateparts.Length == 5)              {                  dmyhmsz[0] = dateparts[0];                  dmyhmsz[1] = dateparts[1];                  dmyhmsz[2] = dateparts[2];                    timeString = dateparts[3];                    dmyhmsz[6] = dateparts[4];              }              // IMAP date (day-month-year time timeZone)              else if (dateparts.Length == 3)              {                  string[] dmy = dateparts[0].Split('-');                  if (dmy.Length == 3)                  {                      dmyhmsz[0] = dmy[0];                      dmyhmsz[1] = dmy[1];                      dmyhmsz[2] = dmy[2];                        timeString = dateparts[1];                        dmyhmsz[6] = dateparts[2];                  }                  else return null;              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (timeParts.Length == 3)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = timeParts[2];              }              else if (timeParts.Length == 2)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = "00";              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (timeParts.Length == 3)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = timeParts[2];              }              else if (timeParts.Length == 2)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = "00";              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (timeParts.Length == 3)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = timeParts[2];              }              else if (timeParts.Length == 2)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = "00";              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (timeParts.Length == 3)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = timeParts[2];              }              else if (timeParts.Length == 2)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = "00";              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (timeParts.Length == 3)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = timeParts[2];              }              else if (timeParts.Length == 2)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = "00";              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (timeParts.Length == 3)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = timeParts[2];              }              else if (timeParts.Length == 2)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = "00";              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (timeParts.Length == 3)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = timeParts[2];              }              else if (timeParts.Length == 2)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = "00";              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (timeParts.Length == 3)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = timeParts[2];              }              else if (timeParts.Length == 2)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = "00";              }              else return null;
Magic Number,Simple.MailServer.Mime,DateTimeRfc2822,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\DateTimeRfc2822.cs,SplitParts,The following statement contains a magic number: if (timeParts.Length == 3)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = timeParts[2];              }              else if (timeParts.Length == 2)              {                  dmyhmsz[3] = timeParts[0];                  dmyhmsz[4] = timeParts[1];                  dmyhmsz[5] = "00";              }              else return null;
Magic Number,Simple.MailServer.Mime,QuotedPrintableEncoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableEncoderStream.cs,Write,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  int currentLen;                    byte b = buffer[i];                  if (b > 127 || b == '=')                  {                      _triBuf[1] = Hex[b >> 4];                      _triBuf[2] = Hex[b % 16];                      currentLen = 3;                  }                  else                  {                      if (b == 13 || b == 10)                      {                          BaseStream.WriteByte(b);                          _charsInLine = 0;                          continue;                      }                      currentLen = 1;                  }                    _charsInLine += currentLen;                  if (_charsInLine > 75)                  {                      BaseStream.Write(LineBreak' 0' LineBreak.Length);                      _charsInLine = currentLen;                  }                  if (currentLen == 1)                      BaseStream.WriteByte(b);                  else                      BaseStream.Write(_triBuf' 0' _triBuf.Length);              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableEncoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableEncoderStream.cs,Write,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  int currentLen;                    byte b = buffer[i];                  if (b > 127 || b == '=')                  {                      _triBuf[1] = Hex[b >> 4];                      _triBuf[2] = Hex[b % 16];                      currentLen = 3;                  }                  else                  {                      if (b == 13 || b == 10)                      {                          BaseStream.WriteByte(b);                          _charsInLine = 0;                          continue;                      }                      currentLen = 1;                  }                    _charsInLine += currentLen;                  if (_charsInLine > 75)                  {                      BaseStream.Write(LineBreak' 0' LineBreak.Length);                      _charsInLine = currentLen;                  }                  if (currentLen == 1)                      BaseStream.WriteByte(b);                  else                      BaseStream.Write(_triBuf' 0' _triBuf.Length);              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableEncoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableEncoderStream.cs,Write,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  int currentLen;                    byte b = buffer[i];                  if (b > 127 || b == '=')                  {                      _triBuf[1] = Hex[b >> 4];                      _triBuf[2] = Hex[b % 16];                      currentLen = 3;                  }                  else                  {                      if (b == 13 || b == 10)                      {                          BaseStream.WriteByte(b);                          _charsInLine = 0;                          continue;                      }                      currentLen = 1;                  }                    _charsInLine += currentLen;                  if (_charsInLine > 75)                  {                      BaseStream.Write(LineBreak' 0' LineBreak.Length);                      _charsInLine = currentLen;                  }                  if (currentLen == 1)                      BaseStream.WriteByte(b);                  else                      BaseStream.Write(_triBuf' 0' _triBuf.Length);              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableEncoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableEncoderStream.cs,Write,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  int currentLen;                    byte b = buffer[i];                  if (b > 127 || b == '=')                  {                      _triBuf[1] = Hex[b >> 4];                      _triBuf[2] = Hex[b % 16];                      currentLen = 3;                  }                  else                  {                      if (b == 13 || b == 10)                      {                          BaseStream.WriteByte(b);                          _charsInLine = 0;                          continue;                      }                      currentLen = 1;                  }                    _charsInLine += currentLen;                  if (_charsInLine > 75)                  {                      BaseStream.Write(LineBreak' 0' LineBreak.Length);                      _charsInLine = currentLen;                  }                  if (currentLen == 1)                      BaseStream.WriteByte(b);                  else                      BaseStream.Write(_triBuf' 0' _triBuf.Length);              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableEncoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableEncoderStream.cs,Write,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  int currentLen;                    byte b = buffer[i];                  if (b > 127 || b == '=')                  {                      _triBuf[1] = Hex[b >> 4];                      _triBuf[2] = Hex[b % 16];                      currentLen = 3;                  }                  else                  {                      if (b == 13 || b == 10)                      {                          BaseStream.WriteByte(b);                          _charsInLine = 0;                          continue;                      }                      currentLen = 1;                  }                    _charsInLine += currentLen;                  if (_charsInLine > 75)                  {                      BaseStream.Write(LineBreak' 0' LineBreak.Length);                      _charsInLine = currentLen;                  }                  if (currentLen == 1)                      BaseStream.WriteByte(b);                  else                      BaseStream.Write(_triBuf' 0' _triBuf.Length);              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableEncoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableEncoderStream.cs,Write,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  int currentLen;                    byte b = buffer[i];                  if (b > 127 || b == '=')                  {                      _triBuf[1] = Hex[b >> 4];                      _triBuf[2] = Hex[b % 16];                      currentLen = 3;                  }                  else                  {                      if (b == 13 || b == 10)                      {                          BaseStream.WriteByte(b);                          _charsInLine = 0;                          continue;                      }                      currentLen = 1;                  }                    _charsInLine += currentLen;                  if (_charsInLine > 75)                  {                      BaseStream.Write(LineBreak' 0' LineBreak.Length);                      _charsInLine = currentLen;                  }                  if (currentLen == 1)                      BaseStream.WriteByte(b);                  else                      BaseStream.Write(_triBuf' 0' _triBuf.Length);              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableEncoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableEncoderStream.cs,Write,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  int currentLen;                    byte b = buffer[i];                  if (b > 127 || b == '=')                  {                      _triBuf[1] = Hex[b >> 4];                      _triBuf[2] = Hex[b % 16];                      currentLen = 3;                  }                  else                  {                      if (b == 13 || b == 10)                      {                          BaseStream.WriteByte(b);                          _charsInLine = 0;                          continue;                      }                      currentLen = 1;                  }                    _charsInLine += currentLen;                  if (_charsInLine > 75)                  {                      BaseStream.Write(LineBreak' 0' LineBreak.Length);                      _charsInLine = currentLen;                  }                  if (currentLen == 1)                      BaseStream.WriteByte(b);                  else                      BaseStream.Write(_triBuf' 0' _triBuf.Length);              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableEncoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableEncoderStream.cs,Write,The following statement contains a magic number: for (int i = offset; i < count; i++)              {                  int currentLen;                    byte b = buffer[i];                  if (b > 127 || b == '=')                  {                      _triBuf[1] = Hex[b >> 4];                      _triBuf[2] = Hex[b % 16];                      currentLen = 3;                  }                  else                  {                      if (b == 13 || b == 10)                      {                          BaseStream.WriteByte(b);                          _charsInLine = 0;                          continue;                      }                      currentLen = 1;                  }                    _charsInLine += currentLen;                  if (_charsInLine > 75)                  {                      BaseStream.Write(LineBreak' 0' LineBreak.Length);                      _charsInLine = currentLen;                  }                  if (currentLen == 1)                      BaseStream.WriteByte(b);                  else                      BaseStream.Write(_triBuf' 0' _triBuf.Length);              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Read,The following statement contains a magic number: for (int i = offset; read < count; i++)              {                  if (MaxReadPosition >= 0 && BaseStream.Position >= MaxReadPosition)                      break;                    if (BaseStream.Read(_singleBuf' 0' 1) <= 0)                      break;                    var b = _singleBuf[0];                  if (_bytesAfterEqualsSign == 0)                  {                      if (b == '=')                      {                          _bytesAfterEqualsSign = 1;                          continue;                      }                      buffer[read++] = b;                      continue;                  }                    _triBuf[_bytesAfterEqualsSign] = b;                  _bytesAfterEqualsSign++;                  if (_bytesAfterEqualsSign < 3) continue;                  _bytesAfterEqualsSign = 0;                    if (_triBuf[1] == '\r' || _triBuf[1] == '\n')                  {                      if (!IgnoreErrors && _triBuf[2] != '\r' && _triBuf[2] != '\n')                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      continue;                  }                    int val1 = _triBuf[1];                  val1 -= (val1 < 58 ? 48 : (val1 < 97 ? 55 : 87));                  int val2 = _triBuf[2];                  val2 -= (val2 < 58 ? 48 : (val2 < 97 ? 55 : 87));                  if (val1 < 0 || val1 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  if (val2 < 0 || val2 > 15)                  {                      if (!IgnoreErrors)                          throw new InvalidOperationException("Cannot decode sequence =" + Escape(_triBuf[1]) + Escape(_triBuf[2]));                      val1 = 0;                      val2 = 0;                  }                  buffer[read++] = ((byte)((val1 << 4) | val2));              }
Magic Number,Simple.MailServer.Smtp,SmtpIdentificationResponder,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Smtp\SmtpIdentificationResponder.cs,VerifyIdentification,The following statement contains a magic number: return new SmtpResponse(500' "Invalid Identification (" + smtpIdentification.Mode + ")");
Magic Number,Simple.MailServer.Smtp,SmtpIdentificationResponder,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Smtp\SmtpIdentificationResponder.cs,VerifyEhlo,The following statement contains a magic number: var response = new SmtpResponse(250' smtpCapabilities.First().ToString()' additionalLines);
Magic Number,Simple.MailServer.Smtp,SmtpCommandParser,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Smtp\SmtpCommandParser.cs,IsLineTooLong,The following statement contains a magic number: if (lineBuf.Length > 2040)              {                  smtpResponse = SmtpResponses.LineTooLong;                  return true;              }
Magic Number,Simple.MailServer.Smtp,SmtpResponse,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Smtp\SmtpResponse.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = ResponseCode.GetHashCode();                  hashCode = (hashCode * 397) ^ (ResponseText != null ? ResponseText.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ AdditionalLines.Count.GetHashCode();                  return hashCode;              }
Magic Number,Simple.MailServer.Smtp,SmtpResponse,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Smtp\SmtpResponse.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = ResponseCode.GetHashCode();                  hashCode = (hashCode * 397) ^ (ResponseText != null ? ResponseText.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ AdditionalLines.Count.GetHashCode();                  return hashCode;              }
Magic Number,Simple.MailServer.Smtp,SmtpServer,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Smtp\SmtpServer.cs,SetupSessionThenProcessCommands,The following statement contains a magic number: rawLineDecoder.ProcessLineCommand += async (s' e) =>              {                  var response = sessionInfoParseResponder.ProcessLineCommand(e.Buffer);                  if (response == null || !response.HasValue) return;                    if (response.ResponseCode == SmtpResponses.DisconnectResponseCode)                  {                      await SendResponseAsync(connection' response);                        MailServerLogger.Instance.Debug(String.Format("Remote connection disconnected {0}"' connection.RemoteEndPoint));                      rawLineDecoder.Cancel();                      await Task.Delay(100).ContinueWith(t => session.Disconnect());                      return;                  }                    await SendResponseAsync(connection' response);              };
Magic Number,Bdev.Net.Dns,MXRecord,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\MXRecord.cs,GetHashCode,The following statement contains a magic number: return _domainName.GetHashCode() * 29 ^ _preference.GetHashCode();
Magic Number,Bdev.Net.Dns,Pointer,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Pointer.cs,ReadShort,The following statement contains a magic number: return (short)(ReadByte()<<8 | ReadByte());
Magic Number,Bdev.Net.Dns,Pointer,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Pointer.cs,ReadInt,The following statement contains a magic number: return (ushort)ReadShort()<<16 | (ushort)ReadShort();
Magic Number,Bdev.Net.Dns,Pointer,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Pointer.cs,ReadDomain,The following statement contains a magic number: while ((length = ReadByte()) != 0)  			{  				// top 2 bits set denotes domain name compression and to reference elsewhere  				if ((length & 0xc0) == 0xc0)  				{  					// work out the existing domain name' copy this pointer  					Pointer newPointer = Copy();  						  					// and move it to where specified here  					newPointer.SetPosition((length & 0x3f)<<8 | ReadByte());    					// repeat call recursively  					domain.Append(newPointer.ReadDomain());  					return domain.ToString();  				}    				// if not using compression' copy a char at a time to the domain name  				while (length > 0)  				{  					domain.Append(ReadChar());  					length--;  				}    				// if size of next label isn't null (end of domain name) add a period ready for next label  				if (Peek() != 0) domain.Append('.');  			}
Magic Number,Bdev.Net.Dns,Question,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Question.cs,Question,The following statement contains a magic number: if (domain.Length ==0 || domain.Length>255 || !Regex.IsMatch(domain' @"^[a-z|A-Z|0-9|-|_]{1'63}(\.[a-z|A-Z|0-9|-|_]{1'63})+$"))  			{  				// domain names can't be bigger tan 255 chars' and individal labels can't be bigger than 63 chars  				throw new ArgumentException("The supplied domain name was not in the correct form"' "domain");  			}
Magic Number,Bdev.Net.Dns,Request,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Request.cs,GetMessage,The following statement contains a magic number: data.Add((byte)(((byte)_opCode<<3)  | (_recursionDesired?0x01:0)));
Magic Number,Bdev.Net.Dns,Request,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Request.cs,GetMessage,The following statement contains a magic number: unchecked  			{  				data.Add((byte)(_questions.Count >> 8));  				data.Add((byte)_questions.Count);  			}
Magic Number,Bdev.Net.Dns,Resolver,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Resolver.cs,UdpTransferAttempt,The following statement contains a magic number: unchecked              {                  // substitute in an id unique to this lookup' the request has no idea about this                  requestMessage[0] = (byte)(_uniqueId >> 8);                  requestMessage[1] = (byte)_uniqueId;              }
Magic Number,Bdev.Net.Dns,Resolver,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Resolver.cs,UdpTransferAttempt,The following statement contains a magic number: socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.ReceiveTimeout' 1000);
Magic Number,Bdev.Net.Dns,Resolver,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Resolver.cs,UdpTransferAttempt,The following statement contains a magic number: var responseMessage = new byte[512];
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: byte flags1 = message[2];
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: byte flags2 = message[3];
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: int returnCode = flags2 & 15;
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: if (returnCode > 6) returnCode = 6;
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: if (returnCode > 6) returnCode = 6;
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: _authoritativeAnswer = ((flags1 & 4) != 0);
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: _recursionAvailable = ((flags2 & 128) != 0);
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: _messageTruncated = ((flags1 & 2) != 0);
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: _questions = new Question[GetShort(message' 4)];
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: _answers = new Answer[GetShort(message' 6)];
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: _nameServers = new NameServer[GetShort(message' 8)];
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: _additionalRecords = new AdditionalRecord[GetShort(message' 10)];
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,Response,The following statement contains a magic number: var pointer = new Pointer(message' 12);
Magic Number,Bdev.Net.Dns,Response,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Dns\Response.cs,GetShort,The following statement contains a magic number: return (short) (message[position] << 8 | message[position + 1]);
Missing Default,Simple.MailServer.Mime,QuotedPrintableDecoderStream,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Mime\QuotedPrintableDecoderStream.cs,Escape,The following switch statement is missing a default case: switch (c)              {                  case (byte)'\0': return @"\0";                  case (byte)'\b': return @"\b";                  case (byte)'\n': return @"\n";                  case (byte)'\r': return @"\r";                  case (byte)'\t': return @"\t";              }
Missing Default,Simple.MailServer.Smtp,SmtpIdentificationResponder,C:\repos\hanswolff_simple.mailserver\Simple.MailServer\Smtp\SmtpIdentificationResponder.cs,VerifyIdentification,The following switch statement is missing a default case: switch (smtpIdentification.Mode)              {                  case SmtpIdentificationMode.HELO:                      return VerifyHelo();                    case SmtpIdentificationMode.EHLO:                      return VerifyEhlo();              }
