Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The length of the statement  "                            if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded) " is 143.
Long Statement,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The length of the statement  "                            if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded) " is 145.
Long Statement,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The length of the statement  "                            if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) " is 151.
Long Statement,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The length of the statement  "                            if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) " is 155.
Long Statement,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The length of the statement  "                            g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25)); " is 127.
Long Statement,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The length of the statement  "                        var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult); " is 141.
Long Statement,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The length of the statement  "                        var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult); " is 137.
Long Statement,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,UpdateTargetFaces,The length of the statement  "            this.viewModel.TrainName = this.viewModel.TrainName.Replace(this.viewModel.TargetFaces.Count.ToString()' (this.viewModel.TargetFaces.Count + 1).ToString()); " is 156.
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The following statement contains a magic number: using (var processedBitmap = (Bitmap)e.ColorSpaceBitmap.Clone())              {                  if (face == null)                  {                      this.viewModel.ReadyForTraining = false;                  }                  else                  {                      using (var g = Graphics.FromImage(processedBitmap))                      {                          var isFmb = this.viewModel.ProcessorType == ProcessorTypes.FaceModel;                          var rect = face.TrackingResult.FaceRect;                          var faceOutlineColor = Color.Green;                            if (isFmb)                          {                              if (face.TrackingResult.ConstructedFaceModel == null)                              {                                  faceOutlineColor = Color.Red;                                                                    if (face.TrackingResult.BuilderStatus == FaceModelBuilderCollectionStatus.Complete)                                      faceOutlineColor = Color.Orange;                              }                                var scale = (rect.Width + rect.Height) / 6;                              var midX = rect.X + (rect.Width / 2);                              var midY = rect.Y + (rect.Height / 2);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X - (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X + rect.Width + (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' rect.Y - (scale * 2)' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' midY' scale' scale);                          }                            this.viewModel.ReadyForTraining = faceOutlineColor == Color.Green;                            g.DrawPath(new Pen(faceOutlineColor' 5)' face.TrackingResult.GetFacePath());                            if (!string.IsNullOrEmpty(face.Key))                          {                              var score = Math.Round(face.ProcessorResults.First().Score' 2);                                // Write the key on the image...                              g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25));                          }                      }                        if (this.takeTrainingImage)                      {                          var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult);                          var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult);                            var bstf = new BitmapSourceTargetFace();                          bstf.Key = this.viewModel.TrainName;                            if (eoResult != null)                          {                              bstf.Image = (Bitmap)eoResult.Image.Clone();                          }                          else                          {                              bstf.Image = face.TrackingResult.GetCroppedFace(e.ColorSpaceBitmap);                          }                            if (fmResult != null)                          {                              bstf.Deformations = fmResult.Deformations;                              bstf.HairColor = fmResult.HairColor;                              bstf.SkinColor = fmResult.SkinColor;                          }                            this.viewModel.TargetFaces.Add(bstf);                            this.SerializeBitmapSourceTargetFace(bstf);                            this.takeTrainingImage = false;                                                    this.UpdateTargetFaces();                      }                  }                    this.viewModel.CurrentVideoFrame = LoadBitmap(processedBitmap);              }
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The following statement contains a magic number: using (var processedBitmap = (Bitmap)e.ColorSpaceBitmap.Clone())              {                  if (face == null)                  {                      this.viewModel.ReadyForTraining = false;                  }                  else                  {                      using (var g = Graphics.FromImage(processedBitmap))                      {                          var isFmb = this.viewModel.ProcessorType == ProcessorTypes.FaceModel;                          var rect = face.TrackingResult.FaceRect;                          var faceOutlineColor = Color.Green;                            if (isFmb)                          {                              if (face.TrackingResult.ConstructedFaceModel == null)                              {                                  faceOutlineColor = Color.Red;                                                                    if (face.TrackingResult.BuilderStatus == FaceModelBuilderCollectionStatus.Complete)                                      faceOutlineColor = Color.Orange;                              }                                var scale = (rect.Width + rect.Height) / 6;                              var midX = rect.X + (rect.Width / 2);                              var midY = rect.Y + (rect.Height / 2);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X - (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X + rect.Width + (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' rect.Y - (scale * 2)' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' midY' scale' scale);                          }                            this.viewModel.ReadyForTraining = faceOutlineColor == Color.Green;                            g.DrawPath(new Pen(faceOutlineColor' 5)' face.TrackingResult.GetFacePath());                            if (!string.IsNullOrEmpty(face.Key))                          {                              var score = Math.Round(face.ProcessorResults.First().Score' 2);                                // Write the key on the image...                              g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25));                          }                      }                        if (this.takeTrainingImage)                      {                          var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult);                          var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult);                            var bstf = new BitmapSourceTargetFace();                          bstf.Key = this.viewModel.TrainName;                            if (eoResult != null)                          {                              bstf.Image = (Bitmap)eoResult.Image.Clone();                          }                          else                          {                              bstf.Image = face.TrackingResult.GetCroppedFace(e.ColorSpaceBitmap);                          }                            if (fmResult != null)                          {                              bstf.Deformations = fmResult.Deformations;                              bstf.HairColor = fmResult.HairColor;                              bstf.SkinColor = fmResult.SkinColor;                          }                            this.viewModel.TargetFaces.Add(bstf);                            this.SerializeBitmapSourceTargetFace(bstf);                            this.takeTrainingImage = false;                                                    this.UpdateTargetFaces();                      }                  }                    this.viewModel.CurrentVideoFrame = LoadBitmap(processedBitmap);              }
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The following statement contains a magic number: using (var processedBitmap = (Bitmap)e.ColorSpaceBitmap.Clone())              {                  if (face == null)                  {                      this.viewModel.ReadyForTraining = false;                  }                  else                  {                      using (var g = Graphics.FromImage(processedBitmap))                      {                          var isFmb = this.viewModel.ProcessorType == ProcessorTypes.FaceModel;                          var rect = face.TrackingResult.FaceRect;                          var faceOutlineColor = Color.Green;                            if (isFmb)                          {                              if (face.TrackingResult.ConstructedFaceModel == null)                              {                                  faceOutlineColor = Color.Red;                                                                    if (face.TrackingResult.BuilderStatus == FaceModelBuilderCollectionStatus.Complete)                                      faceOutlineColor = Color.Orange;                              }                                var scale = (rect.Width + rect.Height) / 6;                              var midX = rect.X + (rect.Width / 2);                              var midY = rect.Y + (rect.Height / 2);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X - (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X + rect.Width + (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' rect.Y - (scale * 2)' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' midY' scale' scale);                          }                            this.viewModel.ReadyForTraining = faceOutlineColor == Color.Green;                            g.DrawPath(new Pen(faceOutlineColor' 5)' face.TrackingResult.GetFacePath());                            if (!string.IsNullOrEmpty(face.Key))                          {                              var score = Math.Round(face.ProcessorResults.First().Score' 2);                                // Write the key on the image...                              g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25));                          }                      }                        if (this.takeTrainingImage)                      {                          var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult);                          var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult);                            var bstf = new BitmapSourceTargetFace();                          bstf.Key = this.viewModel.TrainName;                            if (eoResult != null)                          {                              bstf.Image = (Bitmap)eoResult.Image.Clone();                          }                          else                          {                              bstf.Image = face.TrackingResult.GetCroppedFace(e.ColorSpaceBitmap);                          }                            if (fmResult != null)                          {                              bstf.Deformations = fmResult.Deformations;                              bstf.HairColor = fmResult.HairColor;                              bstf.SkinColor = fmResult.SkinColor;                          }                            this.viewModel.TargetFaces.Add(bstf);                            this.SerializeBitmapSourceTargetFace(bstf);                            this.takeTrainingImage = false;                                                    this.UpdateTargetFaces();                      }                  }                    this.viewModel.CurrentVideoFrame = LoadBitmap(processedBitmap);              }
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The following statement contains a magic number: using (var processedBitmap = (Bitmap)e.ColorSpaceBitmap.Clone())              {                  if (face == null)                  {                      this.viewModel.ReadyForTraining = false;                  }                  else                  {                      using (var g = Graphics.FromImage(processedBitmap))                      {                          var isFmb = this.viewModel.ProcessorType == ProcessorTypes.FaceModel;                          var rect = face.TrackingResult.FaceRect;                          var faceOutlineColor = Color.Green;                            if (isFmb)                          {                              if (face.TrackingResult.ConstructedFaceModel == null)                              {                                  faceOutlineColor = Color.Red;                                                                    if (face.TrackingResult.BuilderStatus == FaceModelBuilderCollectionStatus.Complete)                                      faceOutlineColor = Color.Orange;                              }                                var scale = (rect.Width + rect.Height) / 6;                              var midX = rect.X + (rect.Width / 2);                              var midY = rect.Y + (rect.Height / 2);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X - (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X + rect.Width + (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' rect.Y - (scale * 2)' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' midY' scale' scale);                          }                            this.viewModel.ReadyForTraining = faceOutlineColor == Color.Green;                            g.DrawPath(new Pen(faceOutlineColor' 5)' face.TrackingResult.GetFacePath());                            if (!string.IsNullOrEmpty(face.Key))                          {                              var score = Math.Round(face.ProcessorResults.First().Score' 2);                                // Write the key on the image...                              g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25));                          }                      }                        if (this.takeTrainingImage)                      {                          var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult);                          var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult);                            var bstf = new BitmapSourceTargetFace();                          bstf.Key = this.viewModel.TrainName;                            if (eoResult != null)                          {                              bstf.Image = (Bitmap)eoResult.Image.Clone();                          }                          else                          {                              bstf.Image = face.TrackingResult.GetCroppedFace(e.ColorSpaceBitmap);                          }                            if (fmResult != null)                          {                              bstf.Deformations = fmResult.Deformations;                              bstf.HairColor = fmResult.HairColor;                              bstf.SkinColor = fmResult.SkinColor;                          }                            this.viewModel.TargetFaces.Add(bstf);                            this.SerializeBitmapSourceTargetFace(bstf);                            this.takeTrainingImage = false;                                                    this.UpdateTargetFaces();                      }                  }                    this.viewModel.CurrentVideoFrame = LoadBitmap(processedBitmap);              }
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The following statement contains a magic number: using (var processedBitmap = (Bitmap)e.ColorSpaceBitmap.Clone())              {                  if (face == null)                  {                      this.viewModel.ReadyForTraining = false;                  }                  else                  {                      using (var g = Graphics.FromImage(processedBitmap))                      {                          var isFmb = this.viewModel.ProcessorType == ProcessorTypes.FaceModel;                          var rect = face.TrackingResult.FaceRect;                          var faceOutlineColor = Color.Green;                            if (isFmb)                          {                              if (face.TrackingResult.ConstructedFaceModel == null)                              {                                  faceOutlineColor = Color.Red;                                                                    if (face.TrackingResult.BuilderStatus == FaceModelBuilderCollectionStatus.Complete)                                      faceOutlineColor = Color.Orange;                              }                                var scale = (rect.Width + rect.Height) / 6;                              var midX = rect.X + (rect.Width / 2);                              var midY = rect.Y + (rect.Height / 2);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X - (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X + rect.Width + (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' rect.Y - (scale * 2)' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' midY' scale' scale);                          }                            this.viewModel.ReadyForTraining = faceOutlineColor == Color.Green;                            g.DrawPath(new Pen(faceOutlineColor' 5)' face.TrackingResult.GetFacePath());                            if (!string.IsNullOrEmpty(face.Key))                          {                              var score = Math.Round(face.ProcessorResults.First().Score' 2);                                // Write the key on the image...                              g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25));                          }                      }                        if (this.takeTrainingImage)                      {                          var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult);                          var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult);                            var bstf = new BitmapSourceTargetFace();                          bstf.Key = this.viewModel.TrainName;                            if (eoResult != null)                          {                              bstf.Image = (Bitmap)eoResult.Image.Clone();                          }                          else                          {                              bstf.Image = face.TrackingResult.GetCroppedFace(e.ColorSpaceBitmap);                          }                            if (fmResult != null)                          {                              bstf.Deformations = fmResult.Deformations;                              bstf.HairColor = fmResult.HairColor;                              bstf.SkinColor = fmResult.SkinColor;                          }                            this.viewModel.TargetFaces.Add(bstf);                            this.SerializeBitmapSourceTargetFace(bstf);                            this.takeTrainingImage = false;                                                    this.UpdateTargetFaces();                      }                  }                    this.viewModel.CurrentVideoFrame = LoadBitmap(processedBitmap);              }
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The following statement contains a magic number: using (var processedBitmap = (Bitmap)e.ColorSpaceBitmap.Clone())              {                  if (face == null)                  {                      this.viewModel.ReadyForTraining = false;                  }                  else                  {                      using (var g = Graphics.FromImage(processedBitmap))                      {                          var isFmb = this.viewModel.ProcessorType == ProcessorTypes.FaceModel;                          var rect = face.TrackingResult.FaceRect;                          var faceOutlineColor = Color.Green;                            if (isFmb)                          {                              if (face.TrackingResult.ConstructedFaceModel == null)                              {                                  faceOutlineColor = Color.Red;                                                                    if (face.TrackingResult.BuilderStatus == FaceModelBuilderCollectionStatus.Complete)                                      faceOutlineColor = Color.Orange;                              }                                var scale = (rect.Width + rect.Height) / 6;                              var midX = rect.X + (rect.Width / 2);                              var midY = rect.Y + (rect.Height / 2);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X - (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X + rect.Width + (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' rect.Y - (scale * 2)' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' midY' scale' scale);                          }                            this.viewModel.ReadyForTraining = faceOutlineColor == Color.Green;                            g.DrawPath(new Pen(faceOutlineColor' 5)' face.TrackingResult.GetFacePath());                            if (!string.IsNullOrEmpty(face.Key))                          {                              var score = Math.Round(face.ProcessorResults.First().Score' 2);                                // Write the key on the image...                              g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25));                          }                      }                        if (this.takeTrainingImage)                      {                          var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult);                          var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult);                            var bstf = new BitmapSourceTargetFace();                          bstf.Key = this.viewModel.TrainName;                            if (eoResult != null)                          {                              bstf.Image = (Bitmap)eoResult.Image.Clone();                          }                          else                          {                              bstf.Image = face.TrackingResult.GetCroppedFace(e.ColorSpaceBitmap);                          }                            if (fmResult != null)                          {                              bstf.Deformations = fmResult.Deformations;                              bstf.HairColor = fmResult.HairColor;                              bstf.SkinColor = fmResult.SkinColor;                          }                            this.viewModel.TargetFaces.Add(bstf);                            this.SerializeBitmapSourceTargetFace(bstf);                            this.takeTrainingImage = false;                                                    this.UpdateTargetFaces();                      }                  }                    this.viewModel.CurrentVideoFrame = LoadBitmap(processedBitmap);              }
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The following statement contains a magic number: using (var processedBitmap = (Bitmap)e.ColorSpaceBitmap.Clone())              {                  if (face == null)                  {                      this.viewModel.ReadyForTraining = false;                  }                  else                  {                      using (var g = Graphics.FromImage(processedBitmap))                      {                          var isFmb = this.viewModel.ProcessorType == ProcessorTypes.FaceModel;                          var rect = face.TrackingResult.FaceRect;                          var faceOutlineColor = Color.Green;                            if (isFmb)                          {                              if (face.TrackingResult.ConstructedFaceModel == null)                              {                                  faceOutlineColor = Color.Red;                                                                    if (face.TrackingResult.BuilderStatus == FaceModelBuilderCollectionStatus.Complete)                                      faceOutlineColor = Color.Orange;                              }                                var scale = (rect.Width + rect.Height) / 6;                              var midX = rect.X + (rect.Width / 2);                              var midY = rect.Y + (rect.Height / 2);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X - (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X + rect.Width + (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' rect.Y - (scale * 2)' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' midY' scale' scale);                          }                            this.viewModel.ReadyForTraining = faceOutlineColor == Color.Green;                            g.DrawPath(new Pen(faceOutlineColor' 5)' face.TrackingResult.GetFacePath());                            if (!string.IsNullOrEmpty(face.Key))                          {                              var score = Math.Round(face.ProcessorResults.First().Score' 2);                                // Write the key on the image...                              g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25));                          }                      }                        if (this.takeTrainingImage)                      {                          var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult);                          var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult);                            var bstf = new BitmapSourceTargetFace();                          bstf.Key = this.viewModel.TrainName;                            if (eoResult != null)                          {                              bstf.Image = (Bitmap)eoResult.Image.Clone();                          }                          else                          {                              bstf.Image = face.TrackingResult.GetCroppedFace(e.ColorSpaceBitmap);                          }                            if (fmResult != null)                          {                              bstf.Deformations = fmResult.Deformations;                              bstf.HairColor = fmResult.HairColor;                              bstf.SkinColor = fmResult.SkinColor;                          }                            this.viewModel.TargetFaces.Add(bstf);                            this.SerializeBitmapSourceTargetFace(bstf);                            this.takeTrainingImage = false;                                                    this.UpdateTargetFaces();                      }                  }                    this.viewModel.CurrentVideoFrame = LoadBitmap(processedBitmap);              }
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The following statement contains a magic number: using (var processedBitmap = (Bitmap)e.ColorSpaceBitmap.Clone())              {                  if (face == null)                  {                      this.viewModel.ReadyForTraining = false;                  }                  else                  {                      using (var g = Graphics.FromImage(processedBitmap))                      {                          var isFmb = this.viewModel.ProcessorType == ProcessorTypes.FaceModel;                          var rect = face.TrackingResult.FaceRect;                          var faceOutlineColor = Color.Green;                            if (isFmb)                          {                              if (face.TrackingResult.ConstructedFaceModel == null)                              {                                  faceOutlineColor = Color.Red;                                                                    if (face.TrackingResult.BuilderStatus == FaceModelBuilderCollectionStatus.Complete)                                      faceOutlineColor = Color.Orange;                              }                                var scale = (rect.Width + rect.Height) / 6;                              var midX = rect.X + (rect.Width / 2);                              var midY = rect.Y + (rect.Height / 2);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X - (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X + rect.Width + (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' rect.Y - (scale * 2)' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' midY' scale' scale);                          }                            this.viewModel.ReadyForTraining = faceOutlineColor == Color.Green;                            g.DrawPath(new Pen(faceOutlineColor' 5)' face.TrackingResult.GetFacePath());                            if (!string.IsNullOrEmpty(face.Key))                          {                              var score = Math.Round(face.ProcessorResults.First().Score' 2);                                // Write the key on the image...                              g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25));                          }                      }                        if (this.takeTrainingImage)                      {                          var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult);                          var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult);                            var bstf = new BitmapSourceTargetFace();                          bstf.Key = this.viewModel.TrainName;                            if (eoResult != null)                          {                              bstf.Image = (Bitmap)eoResult.Image.Clone();                          }                          else                          {                              bstf.Image = face.TrackingResult.GetCroppedFace(e.ColorSpaceBitmap);                          }                            if (fmResult != null)                          {                              bstf.Deformations = fmResult.Deformations;                              bstf.HairColor = fmResult.HairColor;                              bstf.SkinColor = fmResult.SkinColor;                          }                            this.viewModel.TargetFaces.Add(bstf);                            this.SerializeBitmapSourceTargetFace(bstf);                            this.takeTrainingImage = false;                                                    this.UpdateTargetFaces();                      }                  }                    this.viewModel.CurrentVideoFrame = LoadBitmap(processedBitmap);              }
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The following statement contains a magic number: using (var processedBitmap = (Bitmap)e.ColorSpaceBitmap.Clone())              {                  if (face == null)                  {                      this.viewModel.ReadyForTraining = false;                  }                  else                  {                      using (var g = Graphics.FromImage(processedBitmap))                      {                          var isFmb = this.viewModel.ProcessorType == ProcessorTypes.FaceModel;                          var rect = face.TrackingResult.FaceRect;                          var faceOutlineColor = Color.Green;                            if (isFmb)                          {                              if (face.TrackingResult.ConstructedFaceModel == null)                              {                                  faceOutlineColor = Color.Red;                                                                    if (face.TrackingResult.BuilderStatus == FaceModelBuilderCollectionStatus.Complete)                                      faceOutlineColor = Color.Orange;                              }                                var scale = (rect.Width + rect.Height) / 6;                              var midX = rect.X + (rect.Width / 2);                              var midY = rect.Y + (rect.Height / 2);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X - (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X + rect.Width + (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' rect.Y - (scale * 2)' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' midY' scale' scale);                          }                            this.viewModel.ReadyForTraining = faceOutlineColor == Color.Green;                            g.DrawPath(new Pen(faceOutlineColor' 5)' face.TrackingResult.GetFacePath());                            if (!string.IsNullOrEmpty(face.Key))                          {                              var score = Math.Round(face.ProcessorResults.First().Score' 2);                                // Write the key on the image...                              g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25));                          }                      }                        if (this.takeTrainingImage)                      {                          var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult);                          var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult);                            var bstf = new BitmapSourceTargetFace();                          bstf.Key = this.viewModel.TrainName;                            if (eoResult != null)                          {                              bstf.Image = (Bitmap)eoResult.Image.Clone();                          }                          else                          {                              bstf.Image = face.TrackingResult.GetCroppedFace(e.ColorSpaceBitmap);                          }                            if (fmResult != null)                          {                              bstf.Deformations = fmResult.Deformations;                              bstf.HairColor = fmResult.HairColor;                              bstf.SkinColor = fmResult.SkinColor;                          }                            this.viewModel.TargetFaces.Add(bstf);                            this.SerializeBitmapSourceTargetFace(bstf);                            this.takeTrainingImage = false;                                                    this.UpdateTargetFaces();                      }                  }                    this.viewModel.CurrentVideoFrame = LoadBitmap(processedBitmap);              }
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Engine_RecognitionComplete,The following statement contains a magic number: using (var processedBitmap = (Bitmap)e.ColorSpaceBitmap.Clone())              {                  if (face == null)                  {                      this.viewModel.ReadyForTraining = false;                  }                  else                  {                      using (var g = Graphics.FromImage(processedBitmap))                      {                          var isFmb = this.viewModel.ProcessorType == ProcessorTypes.FaceModel;                          var rect = face.TrackingResult.FaceRect;                          var faceOutlineColor = Color.Green;                            if (isFmb)                          {                              if (face.TrackingResult.ConstructedFaceModel == null)                              {                                  faceOutlineColor = Color.Red;                                                                    if (face.TrackingResult.BuilderStatus == FaceModelBuilderCollectionStatus.Complete)                                      faceOutlineColor = Color.Orange;                              }                                var scale = (rect.Width + rect.Height) / 6;                              var midX = rect.X + (rect.Width / 2);                              var midY = rect.Y + (rect.Height / 2);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.LeftViewsNeeded) == FaceModelBuilderCollectionStatus.LeftViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X - (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.RightViewsNeeded) == FaceModelBuilderCollectionStatus.RightViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' rect.X + rect.Width + (scale * 2)' midY' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded) == FaceModelBuilderCollectionStatus.TiltedUpViewsNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' rect.Y - (scale * 2)' scale' scale);                                if ((face.TrackingResult.BuilderStatus & FaceModelBuilderCollectionStatus.FrontViewFramesNeeded) == FaceModelBuilderCollectionStatus.FrontViewFramesNeeded)                                  g.FillRectangle(new SolidBrush(Color.Red)' midX' midY' scale' scale);                          }                            this.viewModel.ReadyForTraining = faceOutlineColor == Color.Green;                            g.DrawPath(new Pen(faceOutlineColor' 5)' face.TrackingResult.GetFacePath());                            if (!string.IsNullOrEmpty(face.Key))                          {                              var score = Math.Round(face.ProcessorResults.First().Score' 2);                                // Write the key on the image...                              g.DrawString(face.Key + ": " + score' new Font("Arial"' 100)' Brushes.Red' new System.Drawing.Point(rect.Left' rect.Top - 25));                          }                      }                        if (this.takeTrainingImage)                      {                          var eoResult = (EigenObjectRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is EigenObjectRecognitionProcessorResult);                          var fmResult = (FaceModelRecognitionProcessorResult)face.ProcessorResults.SingleOrDefault(x => x is FaceModelRecognitionProcessorResult);                            var bstf = new BitmapSourceTargetFace();                          bstf.Key = this.viewModel.TrainName;                            if (eoResult != null)                          {                              bstf.Image = (Bitmap)eoResult.Image.Clone();                          }                          else                          {                              bstf.Image = face.TrackingResult.GetCroppedFace(e.ColorSpaceBitmap);                          }                            if (fmResult != null)                          {                              bstf.Deformations = fmResult.Deformations;                              bstf.HairColor = fmResult.HairColor;                              bstf.SkinColor = fmResult.SkinColor;                          }                            this.viewModel.TargetFaces.Add(bstf);                            this.SerializeBitmapSourceTargetFace(bstf);                            this.takeTrainingImage = false;                                                    this.UpdateTargetFaces();                      }                  }                    this.viewModel.CurrentVideoFrame = LoadBitmap(processedBitmap);              }
Magic Number,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,Train,The following statement contains a magic number: timer.Interval = TimeSpan.FromSeconds(2);
Missing Default,Sacknet.KinectFacialRecognitionDemo,MainWindow,C:\repos\mrosack_Sacknet.KinectFacialRecognition\Sacknet.KinectFacialRecognitionDemo\MainWindow.xaml.cs,ViewModelPropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName)              {                  case "ProcessorType":                      this.LoadProcessor();                      break;              }
