Implementation smell,Namespace,Class,File,Method,Description
Long Method,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The method has 216 lines of code.
Complex Method,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,Cyclomatic complexity of the method is 39
Long Parameter List,Console,ConsoleToolWindow,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\ConsoleToolWindow.cs,Exec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Parameter List,Console.Console,OleCommandFilter,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\OleCommandFilter.cs,InternalExec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Parameter List,Console.Console,OleCommandFilter,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\OleCommandFilter.cs,Exec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Parameter List,Console.Console,WpfConsole,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsole.cs,WpfConsole,The method has 5 parameters. Parameters: factory' sp' consoleStatus' contentTypeName' hostName
Long Parameter List,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Parameter List,Console.Types,Token,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Types\Token.cs,Token,The method has 5 parameters. Parameters: type' startLine' endLine' startColumn' endColumn
Long Parameter List,Console.Types,VsKeyInfo,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Types\VsKeyInfo.cs,Create,The method has 9 parameters. Parameters: key' keyChar' virtualKey' keyStates' shiftPressed' controlPressed' altPressed' capsLockToggled' numLockToggled
Long Identifier,Console,GuidList,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Guids.cs,,The length of the parameter GuidPackageManagerConsoleFontAndColorCategoryString is 51.
Long Identifier,Console,GuidList,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Guids.cs,,The length of the parameter GuidPackageManagerConsoleFontAndColorCategory is 45.
Long Identifier,Console.Console,WpfConsoleClassifier,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleClassifier.cs,GetCommandLineClassifications,The length of the parameter cachedCommandLineClassifications is 32.
Long Identifier,Console.Console,WpfConsoleClassifier,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleClassifier.cs,TryGetCachedCommandLineClassifications,The length of the parameter cachedCommandLineClassifications is 32.
Long Identifier,Console.Utils,NuGetEvent,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Utils\NuGetEvent.cs,,The length of the parameter PackageManagerConsoleCommandExecutionBegin is 42.
Long Identifier,Console.Utils,NuGetEvent,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Utils\NuGetEvent.cs,,The length of the parameter PackageManagerConsoleCommandExecutionEnd is 40.
Long Statement,Console.OutputConsole,OutputConsole,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\OutputConsole\OutputConsole.cs,Start,The length of the statement  "                int result = _outputWindow.CreatePane(ref _outputWindowPaneGuid' _outputWindowPaneName' fInitVisible: 1' fClearWithSolution: 0); " is 128.
Long Statement,Console.OutputConsole,OutputConsoleProvider,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\OutputConsole\OutputConsoleProvider.cs,GetPowerShellHostProvider,The length of the statement  "            IEnumerable<Lazy<IHostProvider' IHostMetadata>> hostProviderExports = exportProvider.GetExports<IHostProvider' IHostMetadata>(); " is 128.
Long Statement,Console.OutputConsole,OutputConsoleProvider,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\OutputConsole\OutputConsoleProvider.cs,GetPowerShellHostProvider,The length of the statement  "            Lazy<IHostProvider' IHostMetadata> psProvider = hostProviderExports.Single(export => export.Metadata.HostName == PowerShellHostProviderName); " is 141.
Complex Conditional,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,PasteText,The conditional expression  "iLineStart < text.Length                          && (c = text[iLineStart]) != text[iNewLine]                          && (c == '\n' || c == '\r')"  is complex.
Empty Catch Block,Console.Utils,NuGetEventTrigger,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Utils\NuGetEventTrigger.cs,NuGetEventTrigger,The method has an empty catch block.
Magic Number,Console,ConsoleContainer,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\ConsoleContainer.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.RootLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.InitializeText = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,Console,ConsoleToolWindow,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\ConsoleToolWindow.cs,ConsoleToolWindow,The following statement contains a magic number: BitmapResourceID = 301;
Magic Number,Console.Console,Dispatcher,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\ConsoleDispatcher.cs,PromptNewLine,The following statement contains a magic number: WpfConsole.Write(WpfConsole.Host.Prompt + (char) 32);
Magic Number,Console.Console,TextFormatClassifier,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\TextFormatClassifier.cs,GetClassificationName,The following statement contains a magic number: StringBuilder sb = new StringBuilder(32);
Magic Number,Console.Console,WpfConsole,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: percentComplete = 100;
Magic Number,Console.Console,WpfConsole,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: percentComplete > 100
Magic Number,Console.Console,WpfConsole,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsole.cs,WriteProgress,The following statement contains a magic number: percentComplete == 100
Magic Number,Console.Console,WpfConsole,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsole.cs,HideProgress,The following statement contains a magic number: VsStatusBar.Progress(                  ref _pdwCookieForStatusBar'                  0 /* completed */'                  String.Empty'                  100'                  100);
Magic Number,Console.Console,WpfConsole,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsole.cs,HideProgress,The following statement contains a magic number: VsStatusBar.Progress(                  ref _pdwCookieForStatusBar'                  0 /* completed */'                  String.Empty'                  100'                  100);
Magic Number,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: keyScan = (short)(keyScan >> 8);
Magic Number,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: var keyInfo = VsKeyInfo.Create(                  key'                  keyChar'                  virtualKey'                  keyStates: KeyStates.Down'                  capsLockToggled: capsLockToggled'                  numLockToggled: numLockToggled'                  shiftPressed: ((shiftState & 1) == 1)'                  controlPressed: ((shiftState & 2) == 4)'                  altPressed: ((shiftState & 4) == 2));
Magic Number,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: var keyInfo = VsKeyInfo.Create(                  key'                  keyChar'                  virtualKey'                  keyStates: KeyStates.Down'                  capsLockToggled: capsLockToggled'                  numLockToggled: numLockToggled'                  shiftPressed: ((shiftState & 1) == 1)'                  controlPressed: ((shiftState & 2) == 4)'                  altPressed: ((shiftState & 4) == 2));
Magic Number,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: var keyInfo = VsKeyInfo.Create(                  key'                  keyChar'                  virtualKey'                  keyStates: KeyStates.Down'                  capsLockToggled: capsLockToggled'                  numLockToggled: numLockToggled'                  shiftPressed: ((shiftState & 1) == 1)'                  controlPressed: ((shiftState & 2) == 4)'                  altPressed: ((shiftState & 4) == 2));
Magic Number,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,GetVsKeyInfo,The following statement contains a magic number: var keyInfo = VsKeyInfo.Create(                  key'                  keyChar'                  virtualKey'                  keyStates: KeyStates.Down'                  capsLockToggled: capsLockToggled'                  numLockToggled: numLockToggled'                  shiftPressed: ((shiftState & 1) == 1)'                  controlPressed: ((shiftState & 2) == 4)'                  altPressed: ((shiftState & 4) == 2));
Magic Number,Console.Host,DefaultHost,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Host\DefaultHost.cs,HandleNpmCommand,The following statement contains a magic number: parameters.Length < 2
Missing Default,Console,ConsoleContainer,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\ConsoleContainer.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.RootLayout = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.InitializeText = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,Console.Console,WpfConsole,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsole.cs,SetReadOnlyRegionType,The following switch statement is missing a default case: switch (value)                  {                      case ReadOnlyRegionType.BeginAndBody:                          if (snapshot.Length > 0)                          {                              _readOnlyRegionBegin = edit.CreateReadOnlyRegion(new Span(0' 0)'                                                                               SpanTrackingMode.EdgeExclusive'                                                                               EdgeInsertionMode.Deny);                              _readOnlyRegionBody = edit.CreateReadOnlyRegion(new Span(0' snapshot.Length));                          }                          break;                        case ReadOnlyRegionType.All:                          _readOnlyRegionBody = edit.CreateReadOnlyRegion(new Span(0' snapshot.Length)'                                                                          SpanTrackingMode.EdgeExclusive'                                                                          EdgeInsertionMode.Deny);                          break;                  }
Missing Default,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The following switch statement is missing a default case: switch ((VSConstants.VSStd97CmdID)nCmdID)                  {                      case VSConstants.VSStd97CmdID.Paste:                          if (IsCaretInReadOnlyRegion || IsSelectionReadonly)                          {                              hr = VSConstants.S_OK; // eat it                          }                          else                          {                              PasteText(ref hr);                          }                          break;                  }
Missing Default,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The following switch statement is missing a default case: switch (commandID)                      {                          case VSConstants.VSStd2KCmdID.TYPECHAR:                          case VSConstants.VSStd2KCmdID.BACKSPACE:                          case VSConstants.VSStd2KCmdID.RETURN:                              var keyInfo = GetVsKeyInfo(pvaIn' commandID);                              WpfConsole.Dispatcher.PostKey(keyInfo);                              break;                            case VSConstants.VSStd2KCmdID.CANCEL: // Handle ESC                              WpfConsole.Dispatcher.CancelWaitKey();                              break;                      }
Missing Default,Console.Console,WpfConsoleKeyProcessor,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Console\WpfConsoleKeyProcessor.cs,InternalExec,The following switch statement is missing a default case: switch (commandID)                      {                          case VSConstants.VSStd2KCmdID.TYPECHAR:                              if (IsCompletionSessionActive)                              {                                  char ch = (char)(ushort)Marshal.GetObjectForNativeVariant(pvaIn);                                  if (IsCommitChar(ch))                                  {                                      if (_completionSession.SelectedCompletionSet.SelectionStatus.IsSelected)                                      {                                          _completionSession.Commit();                                      }                                      else                                      {                                          _completionSession.Dismiss();                                      }                                  }                              }                              else                              {                                  if (IsSelectionReadonly)                                  {                                      WpfTextView.Selection.Clear();                                  }                                  if (IsCaretInReadOnlyRegion)                                  {                                      WpfTextView.Caret.MoveTo(WpfConsole.InputLineExtent.End);                                  }                              }                              break;                            case VSConstants.VSStd2KCmdID.LEFT:                          case VSConstants.VSStd2KCmdID.LEFT_EXT:                          case VSConstants.VSStd2KCmdID.LEFT_EXT_COL:                          case VSConstants.VSStd2KCmdID.WORDPREV:                          case VSConstants.VSStd2KCmdID.WORDPREV_EXT:                          case VSConstants.VSStd2KCmdID.WORDPREV_EXT_COL:                              if (IsCaretAtInputLineStart)                              {                                  //                                  // Note: This simple implementation depends on Prompt containing a trailing space.                                  // When caret is on the right of InputLineStart' editor will handle it correctly'                                  // and caret won't move left to InputLineStart because of the trailing space.                                  //                                  hr = VSConstants.S_OK; // eat it                              }                              break;                            case VSConstants.VSStd2KCmdID.BOL:                          case VSConstants.VSStd2KCmdID.BOL_EXT:                          case VSConstants.VSStd2KCmdID.BOL_EXT_COL:                              if (IsCaretOnInputLine)                              {                                  VirtualSnapshotPoint oldCaretPoint = WpfTextView.Caret.Position.VirtualBufferPosition;                                    WpfTextView.Caret.MoveTo(WpfConsole.InputLineStart.Value);                                  WpfTextView.Caret.EnsureVisible();                                    if ((VSConstants.VSStd2KCmdID)nCmdID == VSConstants.VSStd2KCmdID.BOL)                                  {                                      WpfTextView.Selection.Clear();                                  }                                  else if ((VSConstants.VSStd2KCmdID)nCmdID != VSConstants.VSStd2KCmdID.BOL)                                  // extend selection                                  {                                      VirtualSnapshotPoint anchorPoint = WpfTextView.Selection.IsEmpty                                                                             ? oldCaretPoint.TranslateTo(                                                                                 WpfTextView.TextSnapshot)                                                                             : WpfTextView.Selection.AnchorPoint;                                      WpfTextView.Selection.Select(anchorPoint'                                                                   WpfTextView.Caret.Position.VirtualBufferPosition);                                  }                                    hr = VSConstants.S_OK;                              }                              break;                            case VSConstants.VSStd2KCmdID.UP:                              if (!IsCompletionSessionActive)                              {                                  if (IsCaretInReadOnlyRegion)                                  {                                      ExecuteCommand(VSConstants.VSStd2KCmdID.END);                                  }                                  WpfConsole.NavigateHistory(-1);                                  hr = VSConstants.S_OK;                              }                              break;                            case VSConstants.VSStd2KCmdID.DOWN:                              if (!IsCompletionSessionActive)                              {                                  if (IsCaretInReadOnlyRegion)                                  {                                      ExecuteCommand(VSConstants.VSStd2KCmdID.END);                                  }                                  WpfConsole.NavigateHistory(+1);                                  hr = VSConstants.S_OK;                              }                              break;                            case VSConstants.VSStd2KCmdID.RETURN:                              if (IsCompletionSessionActive)                              {                                  if (_completionSession.SelectedCompletionSet.SelectionStatus.IsSelected)                                  {                                      _completionSession.Commit();                                  }                                  else                                  {                                      _completionSession.Dismiss();                                  }                              }                              else if (IsCaretOnInputLine || !IsCaretInReadOnlyRegion)                              {                                  ExecuteCommand(VSConstants.VSStd2KCmdID.END);                                  ExecuteCommand(VSConstants.VSStd2KCmdID.RETURN);                                    WpfConsole.EndInputLine();                              }                              hr = VSConstants.S_OK;                              break;                            case VSConstants.VSStd2KCmdID.TAB:                              if (!IsCaretInReadOnlyRegion)                              {                                  if (IsCompletionSessionActive)                                  {                                      _completionSession.Commit();                                  }                                  else                                  {                                      TriggerCompletion();                                  }                              }                              hr = VSConstants.S_OK;                              break;                            case VSConstants.VSStd2KCmdID.CANCEL:                              if (IsCompletionSessionActive)                              {                                  _completionSession.Dismiss();                                  hr = VSConstants.S_OK;                              }                              else if (!IsCaretInReadOnlyRegion)                              {                                  // Delete all text after InputLineStart                                  WpfTextView.TextBuffer.Delete(WpfConsole.AllInputExtent);                                  hr = VSConstants.S_OK;                              }                              break;                          case VSConstants.VSStd2KCmdID.CUTLINE:                              // clears the console when CutLine shortcut key is pressed'                              // usually it is Ctrl + L                              WpfConsole.ClearConsole();                              hr = VSConstants.S_OK;                              break;                      }
Missing Default,Console.Host,DefaultHost,D:\research\architectureSmells\repos\dtretyakov_node-tools\src\Console\Host\DefaultHost.cs,HandleNpmCommand,The following switch statement is missing a default case: switch (parameters[0].ToLowerInvariant())              {                  case "install":                      {                          var path = string.Format(@"{0}\node_modules\{1}"' _solutionManager.ActiveProjectPath' parameters[1]);                          _solutionManager.AddDirectory(path);                      }                      break;                    case "uninstall":                      {                          var path = string.Format(@"node_modules\{0}"' parameters[1]);                          _solutionManager.RemoveDirectory(path);                      }                      break;              }
