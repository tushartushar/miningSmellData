Implementation smell,Namespace,Class,File,Method,Description
Long Method,MindTouch.Dream,DreamHost,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHost.cs,DreamHost,The method has 110 lines of code.
Long Method,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,GetStatus,The method has 111 lines of code.
Long Method,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,The method has 232 lines of code.
Long Method,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,StartService,The method has 114 lines of code.
Complex Method,MindTouch.Dream.AmazonS3,AmazonS3Client,C:\repos\MindTouch_DReAM\src\mindtouch.core\AmazonS3\AmazonS3Client.cs,GetDirectory,Cyclomatic complexity of the method is 9
Complex Method,MindTouch.Dream,CoreUtil,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamCoreUtil.cs,ExecutePipe,Cyclomatic complexity of the method is 8
Complex Method,MindTouch.Dream,DreamHost,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHost.cs,DreamHost,Cyclomatic complexity of the method is 18
Complex Method,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,EpilogueDreamOut,Cyclomatic complexity of the method is 8
Complex Method,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,GetTimers,Cyclomatic complexity of the method is 8
Complex Method,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,Cyclomatic complexity of the method is 28
Complex Method,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,StartService,Cyclomatic complexity of the method is 9
Complex Method,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,CreateServiceFeatureDirectory,Cyclomatic complexity of the method is 10
Complex Method,MindTouch.Dream.Services,EmailService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\EmailService.cs,SendEmail,Cyclomatic complexity of the method is 8
Long Parameter List,MindTouch.Dream,DreamFeatureChain,C:\repos\MindTouch_DReAM\src\mindtouch.core\dreampipe.cs,DreamFeatureChain,The method has 5 parameters. Parameters: stage' mainStage' context' response' previousName
Long Parameter List,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,The method has 5 parameters. Parameters: verb' uri' user' request' response
Long Parameter List,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,The method has 6 parameters. Parameters: verb' uri' user' request' response' completion
Long Parameter List,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,StartService,The method has 5 parameters. Parameters: service' blueprint' path' config' result
Long Parameter List,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,Invoke,The method has 5 parameters. Parameters: plug' verb' uri' request' response
Long Parameter List,MindTouch.Dream,ServiceEntry,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,ServiceEntry,The method has 5 parameters. Parameters: service' uri' owner' sid' blueprint
Long Parameter List,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,ResponseHandler,The method has 7 parameters. Parameters: verb' requestUri' request' response' httpContext' activity' result
Long Parameter List,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,Read,The method has 6 parameters. Parameters: activity' stream' buffer' offset' count' result
Long Parameter List,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,Write,The method has 6 parameters. Parameters: activity' stream' buffer' offset' count' result
Long Parameter List,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,CopyStream,The method has 5 parameters. Parameters: activity' source' target' length' result
Long Parameter List,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,CopyStream_Handler,The method has 5 parameters. Parameters: activity' source' target' length' result
Long Parameter List,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,Invoke,The method has 5 parameters. Parameters: plug' verb' uri' request' response
Long Statement,MindTouch.Dream.AmazonS3,AmazonS3Client,C:\repos\MindTouch_DReAM\src\mindtouch.core\AmazonS3\AmazonS3Client.cs,PutFile,The length of the statement  "                throw new InvalidOperationException(string.Format("cannot put a file at a path with a trailing {0}"' _config.Delimiter)); " is 121.
Long Statement,MindTouch.Dream.AmazonS3,AmazonS3Client,C:\repos\MindTouch_DReAM\src\mindtouch.core\AmazonS3\AmazonS3Client.cs,GetFile,The length of the statement  "            var response = _rootPlug.AtPath(path).InvokeEx(head ? "HEAD" : "GET"' DreamMessage.Ok()' new Result<DreamMessage>()).Wait(); " is 124.
Long Statement,MindTouch.Dream.AmazonS3,AmazonS3Client,C:\repos\MindTouch_DReAM\src\mindtouch.core\AmazonS3\AmazonS3Client.cs,GetFile,The length of the statement  "            var expiration = string.IsNullOrEmpty(expireEpoch) ? (DateTime?)null : DateTimeUtil.FromEpoch(SysUtil.ChangeType<uint>(expireEpoch)); " is 133.
Long Statement,MindTouch.Dream.AmazonS3,AmazonS3Client,C:\repos\MindTouch_DReAM\src\mindtouch.core\AmazonS3\AmazonS3Client.cs,GetFile,The length of the statement  "            var ttl = string.IsNullOrEmpty(ttlString) ? (TimeSpan?)null : TimeSpan.FromSeconds(SysUtil.ChangeType<double>(ttlString)); " is 122.
Long Statement,MindTouch.Dream.AmazonS3,AmazonS3Client,C:\repos\MindTouch_DReAM\src\mindtouch.core\AmazonS3\AmazonS3Client.cs,OnDelete,The length of the statement  "                _log.DebugFormat("Ignoring premature expiration event for '{0}' scheduled for '{1}'"' filepathEntry.Value' filepathEntry.When); " is 127.
Long Statement,MindTouch.Dream,DreamApplicationConfigurationBuilder,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamApplicationConfigurationBuilder.cs,FromAppSettings,The length of the statement  "            config.ServicesDirectory = settings["dream.service.path"] ?? settings["service-dir"] ?? Path.Combine("bin"' "services"); " is 120.
Long Statement,MindTouch.Dream,CoreUtil,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamCoreUtil.cs,FindBuiltInTypeBySID,The length of the statement  "                DreamServiceAttribute attr = (DreamServiceAttribute)Attribute.GetCustomAttribute(type' typeof(DreamServiceAttribute)' false); " is 125.
Long Statement,MindTouch.Dream,DreamFeatureChain,C:\repos\MindTouch_DReAM\src\mindtouch.core\dreampipe.cs,Handler,The length of the statement  "                            _log.ErrorExceptionFormat(result.Exception' "handler for {0}:{1} failed ({2})"' _context.Verb' _context.Uri.ToString(false)' _previousName); " is 140.
Long Statement,MindTouch.Dream,DreamFeatureChain,C:\repos\MindTouch_DReAM\src\mindtouch.core\dreampipe.cs,Handler,The length of the statement  "                    _log.ErrorExceptionFormat(result.Exception' "handler for {0}:{1} failed ({2})' cascading via processing exception '{3}'"' _context.Verb' _context.Uri.ToString(false)' _previousName' e); " is 185.
Long Statement,MindTouch.Dream,DreamFeatureChain,C:\repos\MindTouch_DReAM\src\mindtouch.core\dreampipe.cs,Handler,The length of the statement  "                    _log.ErrorExceptionFormat(e' "handler for {0}:{1} failed completing stage '{2}'"' _context.Verb' _context.Uri.ToString(false)' _previousName); " is 142.
Long Statement,MindTouch.Dream,DreamFeatureChain,C:\repos\MindTouch_DReAM\src\mindtouch.core\dreampipe.cs,Handler_DreamMessage,The length of the statement  "                // grabbing context from FeatureChain (must remove it again from env before env completes' so that it doesn't get disposed) " is 123.
Long Statement,MindTouch.Dream,DreamFeatureChain,C:\repos\MindTouch_DReAM\src\mindtouch.core\dreampipe.cs,Handler_DreamMessage,The length of the statement  "                if((_stage.Access != DreamAccess.Public) && (_context.Feature.Service.Self != null) && (_stage.Access > _context.Feature.Service.DetermineAccess(_context' request))) { " is 167.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,EpilogueDreamOut,The length of the statement  "                request = new DreamMessage(request.Status' request.Headers' formatter.GetContentType(request.ToDocument())' stream.Length' stream); " is 131.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,PopulateActivities,The length of the statement  "                doc.Start("description").Attr("created"' description.Created).Attr("age"' (now - description.Created).TotalSeconds).Value(description.Description).End(); " is 153.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,GetMethodInfos,The length of the statement  "            result = (from m in type.GetMethods(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.InvokeMethod) where (m.GetCustomAttributes(typeof(DreamFeatureAttribute)' false).Length > 0) select m).ToLookup(methodInfo => methodInfo.Name); " is 263.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,GetErrorXsl,The length of the statement  "            Plug plug = Plug.New(string.Format("resource://mindtouch.core/MindTouch.Dream.resources.host.{0}"' resource)).With(DreamOutParam.TYPE' MimeType.FromFileExtension(resource).FullType); " is 182.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,GetStatus,The length of the statement  "            result.Start("host").Attr("created"' _created).Attr("age"' age).Attr("requests"' _requestCounter).Attr("rate"' _requestCounter / age); " is 134.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,GetStatus,The length of the statement  "            result.Start("connections").Attr("count"' _connectionCounter).Attr("pending"' (_requestQueue != null) ? _requestQueue.Count : 0).Attr("limit"' _connectionLimit).End(); " is 167.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,GetStatus,The length of the statement  "                    result.Start("info").Attr("source"' entry.Key).Attr("hits"' entry.Value.Item1).Attr("rate"' entry.Value.Item1 / age).Value(entry.Value.Item2).End(); " is 148.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,GetStatus,The length of the statement  "            AsyncUtil.GetAvailableThreads(out workerThreads' out completionThreads' out dispatcherThreads' out backgroundWorkerThreads); " is 124.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,GetStatus,The length of the statement  "            AsyncUtil.GetMaxThreads(out maxWorkerThreads' out maxCompletionThreads' out maxDispatcherThreads' out maxBackgroundWorkerThreads); " is 130.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,Start,The length of the statement  "            yield return Self.At("load").With("name"' "mindtouch.core").Post(new Result<DreamMessage>(TimeSpan.MaxValue)).Set(v => msg = v); " is 128.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,Start,The length of the statement  "            yield return Self.At("load").With("name"' "mindtouch.dream").Post(new Result<DreamMessage>(TimeSpan.MaxValue)).Set(v => msg = v); " is 129.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,The length of the statement  "                string requestedVerb = (uri.GetParam(DreamInParam.VERB' null) ?? request.Headers.MethodOverride ?? verb).ToUpperInvariant(); " is 124.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,The length of the statement  "                        string msg = verb + " URI: " + uri.ToString(false) + " LOCAL: " + localFeatureUri.ToString(false) + " PUBLIC: " + publicUri + " TRANSPORT: " + transport; " is 153.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,The length of the statement  "                        result = DreamMessage.MethodNotAllowed(methods.ToArray()' "allowed methods are " + string.Join("' "' methods.ToArray())); " is 121.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,The length of the statement  "                DreamContext context = new DreamContext(this' verb' localFeatureUri' feature' publicUri' _publicUri' request' CultureInfo.InvariantCulture' GetRequestLifetimeScopeFactory(feature.Service)); " is 189.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,The length of the statement  "                    // need to manually dispose of the context' since we're already attaching and detaching it by hand to TaskEnvs throughout the chain " is 131.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,The length of the statement  "                    var link = new DreamFeatureChain(feature.Stages[i]' i == feature.MainStageIndex' context' chain' (i > 0) ? feature.Stages[i - 1].Name : "first"); " is 145.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,CreateServiceLifetimeScope,The length of the statement  "                    throw new InvalidOperationException(string.Format("LifetimeScope for service  '{0}' at '{1}' has already been created."' service' service.Self.Uri)); " is 149.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,CreateServiceLifetimeScope,The length of the statement  "                var serviceLifetimeScope = _hostLifetimeScope.BeginLifetimeScope(DreamContainerScope.Service' b => registrationCallback(_container' b)); " is 136.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,BeginRequest,The length of the statement  "                        return new DreamMessage(DreamStatus.ServiceUnavailable' null' MimeType.TEXT' "The request exceeded the reentrancy limit for the server."); " is 138.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,GetRequestLifetimeScopeFactory,The length of the statement  "                        throw new InvalidOperationException(string.Format("Cannot create a request container for service  '{0}' at '{1}'. This error  normally occurs if DreamContext.Container is invoked in Service Start or Shutdown"' service' service.Self.Uri)); " is 238.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,StartService,The length of the statement  "                    // TODO (steveb): this operation may fail if two services attempt to register at the same uri; in which case the service should be stopped. " is 139.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,CreateServiceFeatureDirectory,The length of the statement  "                    var found = string.Join("' "' methods.Select(m => m.DeclaringType.FullName + "!" + m.Name + "(" + string.Join("' "' m.GetParameters().Select(p => p.ParameterType.Name + " " + p.Name).ToArray()) + ")").ToArray()); " is 212.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,CreateServiceFeatureDirectory,The length of the statement  "                var paramAttributes = method.GetCustomAttributes(typeof(DreamFeatureParamAttribute)' false).Cast<DreamFeatureParamAttribute>().ToArray(); " is 137.
Long Statement,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,CreateServiceFeatureDirectory,The length of the statement  "                DreamFeature feature = new DreamFeature(service' serviceUri' mainStageIndex' stages.ToArray()' verb' signature' paramAttributes); " is 129.
Long Statement,MindTouch.Dream,DreamApplication,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamApplication.cs,RegisterDefaultRoute,The length of the statement  "                    new RouteValueDictionary { { "controller"' "qwewqewqeqweq" } }' // that is also required to match' to circumvent matching by GetVirtualPath " is 139.
Long Statement,MindTouch.Dream.Http,RoutedHttpHandler,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\RoutedHttpHandler.cs,ProcessRequest,The length of the statement  "                request = new DreamMessage(DreamStatus.Ok' new DreamHeaders(httpContext.Request.Headers)' MimeType.New(httpContext.Request.ContentType)' httpContext.Request.ContentLength' httpContext.Request.InputStream); " is 205.
Long Statement,MindTouch.Dream.Http,RoutedHttpHandler,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\RoutedHttpHandler.cs,ProcessRequest,The length of the statement  "                DreamUtil.PrepareIncomingMessage(request' httpContext.Request.ContentEncoding' string.Format("{0}://{1}{2}"' httpContext.Request.Url.Scheme' httpContext.Request.Url.Authority' httpContext.Request.ApplicationPath)' httpContext.Request.UserHostAddress' httpContext.Request.UserAgent); " is 282.
Long Statement,MindTouch.Dream.Http,RoutedHttpHandler,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\RoutedHttpHandler.cs,ProcessRequest,The length of the statement  "                var response = _env.SubmitRequestAsync(verb' requestUri' httpContext.User' request' new Result<DreamMessage>(TimeSpan.MaxValue)).Block(); " is 137.
Long Statement,MindTouch.Dream.Http,RoutedHttpHandler,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\RoutedHttpHandler.cs,ProcessRequest,The length of the statement  "                    _log.ErrorExceptionFormat(response.Exception' "Request Failed [{0}:{1}]: {2}"' verb' requestUri.Path' response.Exception.Message); " is 130.
Long Statement,MindTouch.Dream.Http,RoutedHttpHandler,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\RoutedHttpHandler.cs,ProcessRequest,The length of the statement  "                    _log.DebugMethodCall("ProcessRequest[Status]"' item.Status' String.Format("{0}{1}"' httpContext.Request.Url.GetLeftPart(UriPartial.Authority)' httpContext.Request.RawUrl).Replace("/index.aspx"' "/")); " is 200.
Long Statement,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,RequestHandler,The length of the statement  "                _log.Debug("EndGetContext() failed' most likely because the I/O operation was aborted by either a thread exit or an application request"); " is 138.
Long Statement,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,RequestHandler,The length of the statement  "                request = new DreamMessage(DreamStatus.Ok' new DreamHeaders(httpContext.Request.Headers)' MimeType.New(httpContext.Request.ContentType)' httpContext.Request.ContentLength64' httpContext.Request.InputStream); " is 207.
Long Statement,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,RequestHandler,The length of the statement  "                DreamUtil.PrepareIncomingMessage(request' httpContext.Request.ContentEncoding' prefixes[0]' httpContext.Request.RemoteEndPoint.ToString()' httpContext.Request.UserAgent); " is 170.
Long Statement,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,RequestHandler,The length of the statement  "                string hostname = requestUri.GetParam(DreamInParam.HOST' null) ?? request.Headers.ForwardedHost ?? request.Headers.Host ?? requestUri.HostPort; " is 143.
Long Statement,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,RequestHandler,The length of the statement  "                activity = new ActivityState(_env' httpContext.Request.HttpMethod' httpContext.Request.Url.ToString()' hostname).Message; " is 121.
Long Statement,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,RequestHandler,The length of the statement  "                    .WhenDone(result => Coroutine.Invoke(ResponseHandler' verb' requestUri' request' result' httpContext' activity' new Result(TimeSpan.MaxValue))); " is 144.
Long Statement,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,RequestHandler,The length of the statement  "                        CopyStream(message => { }' stream' httpContext.Response.OutputStream' size' new Result<long>(DreamHostService.MAX_REQUEST_TIME)).Block(); " is 137.
Long Statement,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,ResponseHandler,The length of the statement  "                    _log.ErrorExceptionFormat(response.Exception' "Request Failed [{0}:{1}]: {2}"' verb' requestUri.Path' response.Exception.Message); " is 130.
Long Statement,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,ResponseHandler,The length of the statement  "                    yield return CopyStream(activity' stream' httpContext.Response.OutputStream' size' new Result<long>(DreamHostService.MAX_REQUEST_TIME)).CatchAndLog(_log); " is 154.
Long Statement,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,CopyStream,The length of the statement  "            // NOTE (steveb): intermediary copy steps already have a timeout operation' no need to limit the duration of the entire copy operation " is 134.
Long Statement,MindTouch.Dream.Http,ActivityState,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,Message,The length of the statement  "                            _activity.Description = string.Format("Incoming ({2}): {0} {1} [{3}]"' _verb' _uri' _hostname' string.Join(" -> "' _messages.ToArray())); " is 137.
Long Statement,MindTouch.Dream.IO,DreamResponseJsonFormatter,C:\repos\MindTouch_DReAM\src\mindtouch.core\ioformatter.cs,Format,The length of the statement  "                bytes = MimeType.JSON.CharSet.GetBytes(string.Format("{0}{1}({2});{3}"' _prefix' _callback' JsonUtil.ToJson(doc)' _postfix)); " is 125.
Long Statement,MindTouch.Dream.Services,EmailService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\EmailService.cs,ConfigureSmtp,The length of the statement  "                    // Note (arnec): ssl requires mono 2.0 and likely root certificate import via 'mozroots --import --ask-remove --machine' " is 120.
Long Statement,MindTouch.Dream.Services,EmailService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\EmailService.cs,Start,The length of the statement  "            // Note (arnec): ssl requires mono 2.0 and likely root certificate import via 'mozroots --import --ask-remove --machine' " is 120.
Long Statement,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,WriteMeta,The length of the statement  "                            //           we tried' otherwise we run the risk of bogging down the system b/c we're attempting to delete undeletable files. " is 125.
Long Statement,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,OnDelete,The length of the statement  "                _log.DebugFormat("Ignoring premature expiration event for '{0}' scheduled for '{1}'"' filepathEntry.Value' filepathEntry.When); " is 127.
Long Statement,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,OnDelete,The length of the statement  "                    //           we tried' otherwise we run the risk of bogging down the system b/c we're attempting to delete undeletable files. " is 125.
Long Statement,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,OnDelete,The length of the statement  "                    //           we tried' otherwise we run the risk of bogging down the system b/c we're attempting to delete undeletable files. " is 125.
Complex Conditional,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,SubmitRequestAsync,The conditional expression  "verb.EqualsInvariant(Verb.POST) || (                          verb.EqualsInvariant(Verb.GET) && (                              requestedVerb.EqualsInvariant(Verb.OPTIONS) ||                              requestedVerb.EqualsInvariant(Verb.HEAD)                          )                      )"  is complex.
Complex Conditional,MindTouch.Dream.Services,S3StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\S3StorageService.cs,GetPath,The conditional expression  "_privateRoot && (parts.Length == 0 || (parts.Length == 1 && !context.Uri.TrailingSlash))"  is complex.
Complex Conditional,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,GetPath,The conditional expression  "_privateRoot && (parts.Length == 0 || (parts.Length == 1 && !Directory.Exists(path)))"  is complex.
Empty Catch Block,MindTouch.Dream,DreamHost,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHost.cs,DreamHost,The method has an empty catch block.
Empty Catch Block,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,WriteMeta,The method has an empty catch block.
Empty Catch Block,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,OnDelete,The method has an empty catch block.
Empty Catch Block,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,OnDelete,The method has an empty catch block.
Magic Number,MindTouch.Dream,DreamApplicationConfigurationBuilder,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamApplicationConfigurationBuilder.cs,FromAppSettings,The following statement contains a magic number: config.Apikey = settings["dream.apikey"] ?? settings["apikey"] ?? StringUtil.CreateAlphaNumericKey(8);
Magic Number,MindTouch.Dream,DreamHost,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHost.cs,DreamHost,The following statement contains a magic number: try {                    // initialize environment                  string apikey = config["apikey"].AsText ?? StringUtil.CreateAlphaNumericKey(32);                  XDoc serviceConfig = new XDoc("config");                  var storageType = config["storage/@type"].AsText ?? "local";                  if("s3".EqualsInvariant(storageType)) {                      serviceConfig.Add(config["storage"]);                  } else {                      serviceConfig.Elem("storage-dir"' config["storage-dir"].AsText ?? config["service-dir"].AsText ?? appDirectory);                  }                  serviceConfig.Elem("apikey"' apikey);                  serviceConfig.Elem("uri.public"' publicUri);                  serviceConfig.Elem("connect-limit"' limit);                  serviceConfig.Elem("guid"' config["guid"].AsText);                  serviceConfig.AddAll(config["components"]);                  var memorize = config["memorize-aliases"];                  if(!memorize.IsEmpty) {                      serviceConfig.Elem("memorize-aliases"' memorize.AsBool);                  }                  _env.Initialize(serviceConfig);                    // initialize host plug                  _host = _env.Self.With("apikey"' apikey);                    // load assemblies in 'services' folder                  string servicesFolder = Path.Combine(AppDomain.CurrentDomain.BaseDirectory' "services");                  if(Directory.Exists(servicesFolder)) {                        // Note (arnec): Deprecated' but the suggested alternative really doesn't apply since we don't want to                      // load services into a separate appdomain.  #pragma warning disable 618'612                      AppDomain.CurrentDomain.AppendPrivatePath("services");  #pragma warning restore 618'612                      foreach(string file in Directory.GetFiles(servicesFolder' "*.dll")) {                            // register assembly blueprints                          DreamMessage response = _host.At("load").With("name"' Path.GetFileNameWithoutExtension(file)).Post(new Result<DreamMessage>(TimeSpan.MaxValue)).Wait();                          if(!response.IsSuccessful) {                              _log.WarnFormat("DreamHost: ERROR: assembly '{0}' failed to load"' file);                          }                      }                  }                    // read ip-addresses                  var addresses = new List<string>();                  foreach(XDoc ip in config["host|ip"]) {                      addresses.Add(ip.AsText);                  }                    // check if user prescribed a set of IP addresses to use                  if(addresses.Any()) {                        // add access-points                      AddListener(new XUri(String.Format("http://{0}:{1}/"' "localhost"' httpPort))' authenticationScheme);                        // listen to custom addresses (don't use the supplied port info' we expect that to be part of the address)                      foreach(string address in addresses) {                          if(!StringUtil.EqualsInvariantIgnoreCase(address' "localhost")) {                              AddListener(new XUri(String.Format("http://{0}/"' address))' authenticationScheme);                          }                      }                  } else {                      AddListener(new XUri(String.Format("http://*:{0}/"' httpPort))' authenticationScheme);                  }              } catch(Exception e) {                  if((e is HttpListenerException) && e.Message.EqualsInvariant("Access is denied")) {                      _log.ErrorExceptionMethodCall(e' "ctor"' "insufficient privileges to create HttpListener' make sure the application runs with Administrator rights");                  } else {                      _log.ErrorExceptionMethodCall(e' "ctor");                  }                  try {                      _env.Deinitialize();                  } catch { }                  throw;              }
Magic Number,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,Initialize,The following statement contains a magic number: try {                    // initialize container                  var containerConfig = config["components"];                  if(!containerConfig.IsEmpty) {                      _log.Debug("registering host level module");                      var builder = new ContainerBuilder();                      builder.RegisterModule(new XDocAutofacContainerConfigurator(containerConfig' DreamContainerScope.Host));                      builder.Update(_container);                  }                    // make sure we have an IServiceActivator                  if(!_container.IsRegistered<IServiceActivator>()) {                      var builder = new ContainerBuilder();                      builder.RegisterType<DefaultServiceActivator>().As<IServiceActivator>();                      builder.Update(_container);                  }                  _serviceActivator = _container.Resolve<IServiceActivator>();                  _running = true;                  _shutdown = new ManualResetEvent(false);                  _rootRedirect = config["root-redirect"].AsText;                  _debugMode = config["debug"].AsText.IfNullOrEmpty("false").ToLowerInvariant();                  _memorizeAliases = config["memorize-aliases"].AsBool ?? true;                    // add default prologues/epilogues                  _defaultPrologues = new[] {                       new DreamFeatureStage("dream.in.*"' PrologueDreamIn' DreamAccess.Public)                  };                  _defaultEpilogues = new[] {                       new DreamFeatureStage("dream.out.*"' EpilogueDreamOut' DreamAccess.Public)                   };                    // initialize identity                  _id = !config["guid"].IsEmpty ? new Guid(config["guid"].AsText) : Guid.NewGuid();                  _localMachineUri = new XUri(string.Format("local://{0}"' _id.ToString("N")));                  _aliases[_localMachineUri] = _localMachineUri;                    // initialize environment                  string path = config["host-path"].AsText ?? "host";                  _publicUri = config["uri.public"].AsUri ?? new XUri("http://localhost:8081");                  _aliases[_publicUri] = _publicUri;                  _connectionLimit = config["connect-limit"].AsInt ?? 0;                  if(_connectionLimit < 0) {                        // determine connection limit based on max thread count                      int maxThreads;                      int maxPorts;                      int maxDispatchers;                      int maxBackgroundThreads;                      AsyncUtil.GetMaxThreads(out maxThreads' out maxPorts' out maxDispatchers' out maxBackgroundThreads);                      if(maxDispatchers > 0) {                          _connectionLimit = maxDispatchers + _connectionLimit;                      } else {                          _connectionLimit = maxThreads + _connectionLimit;                      }                  }                  _reentrancyLimit = config["reentrancy-limit"].AsInt ?? 20;                  _storageType = config["storage/@type"].AsText ?? "local";                  if("s3".EqualsInvariant(_storageType)) {                      _storagePath = config["storage/root"].AsText ?? "";                      _storageConfig = config["storage"].Clone();                  } else {                      _storagePath = config["storage/path"].AsText ?? config["storage-dir"].AsText ?? config["service-dir"].AsText;                      if(!Path.IsPathRooted(_storagePath)) {                          throw new ArgumentException("missing or invalid storage-dir");                      }                  }                    // log initialization settings                  _log.DebugMethodCall("Initialize: guid"' _id);                  _log.DebugMethodCall("Initialize: apikey"' config["apikey"].AsText ?? "(auto)");                  _log.DebugMethodCall("Initialize: uri.public"' _publicUri);                  _log.DebugMethodCall("Initialize: storage-type"' _storageType);                  _log.DebugMethodCall("Initialize: storage-dir"' _storagePath);                  _log.DebugMethodCall("Initialize: host-path"' path);                  _log.DebugMethodCall("Initialize: connect-limit"' _connectionLimit);                    // add path & type information                  config = config.Root;                  config.Elem("path"' path);                  config.Elem("class"' GetType().FullName);                  config.Elem("sid"' "sid://mindtouch.com/2007/03/dream/host");                    // set root-uri                  Plug.AddEndpoint(this);                    // check if we need to fill in the TYPE information using the type                  XDoc blueprint = CreateServiceBlueprint(GetType());                    // start service                  if(_connectionLimit > 0) {                      _requestQueue = new ProcessingQueue<Action<Action>>(RequestQueueCallback' _connectionLimit);                  }                  Coroutine.Invoke(StartService' this' blueprint' path' config' new Result<XDoc>()).Wait();              } catch {                  _running = false;                  _shutdown.Set();                  throw;              }
Magic Number,MindTouch.Dream,DreamHostService,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHostService.cs,CreateServiceFeatureDirectory,The following statement contains a magic number: foreach(XDoc featureBlueprint in blueprint["features/feature"]) {                  string methodName = featureBlueprint["method"].Contents;                  string pattern = featureBlueprint["pattern"].AsText;                    // TODO (steveb): we should be a little more discerning here as this might trigger false positives                  bool atConfig = pattern.ContainsInvariantIgnoreCase("@config");                    // locate method                  var methods = methodInfos[methodName];                  if(methods.Count() > 1) {                      var found = string.Join("' "' methods.Select(m => m.DeclaringType.FullName + "!" + m.Name + "(" + string.Join("' "' m.GetParameters().Select(p => p.ParameterType.Name + " " + p.Name).ToArray()) + ")").ToArray());                      throw new MissingMethodException(string.Format("found multiple definitions for {0}: {1}"' methodName' found));                  }                  if(methods.None()) {                      throw new MissingMethodException(string.Format("could not find {0} in class {1}"' methodName' type.FullName));                  }                  MethodInfo method = methods.First();                    // determine access level                  DreamAccess access;                  switch(featureBlueprint["access"].AsText) {                  case null:                  case "public":                      access = DreamAccess.Public;                      break;                  case "internal":                      access = DreamAccess.Internal;                      break;                  case "private":                      access = DreamAccess.Private;                      break;                  default:                      throw new NotSupportedException(string.Format("access level is not supported ({0})"' methodName));                  }                    // parse pattern string                  string[] parts = pattern.Split(new[] { ':' }' 2);                  string verb = parts[0].Trim();                  string signature = parts[1].Trim();                  if(signature.Length == 0) {                      signature = string.Empty;                  }                    // add feature prologues                  List<DreamFeatureStage> stages = new List<DreamFeatureStage>();                  stages.AddRange(_defaultPrologues);                  if(!atConfig) {                      DreamFeatureStage[] custom = service.Prologues;                      if(!ArrayUtil.IsNullOrEmpty(custom)) {                          stages.AddRange(custom);                      }                  }                    // add feature handler                  int mainStageIndex = stages.Count;                  stages.Add(new DreamFeatureStage(service' method' access));                    // add feature epilogues                  if(!atConfig) {                      DreamFeatureStage[] custom = service.Epilogues;                      if(!ArrayUtil.IsNullOrEmpty(custom)) {                          stages.AddRange(custom);                      }                  }                  stages.AddRange(_defaultEpilogues);                    // create dream feature and add to service directory                  var paramAttributes = method.GetCustomAttributes(typeof(DreamFeatureParamAttribute)' false).Cast<DreamFeatureParamAttribute>().ToArray();                  DreamFeature feature = new DreamFeature(service' serviceUri' mainStageIndex' stages.ToArray()' verb' signature' paramAttributes);                  directory.Add(feature.PathSegments' serviceUriSegmentsLength' feature);              }
Magic Number,MindTouch.Dream.Http,HttpTransport,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,CopyStream_Handler,The following statement contains a magic number: while(length != 0) {                    // read first                  long count = (length >= 0) ? Math.Min(length' readBuffer.LongLength) : readBuffer.LongLength;                  if(source.IsStreamMemorized()) {                      activity("pre Stream.Read");                      count = source.Read(readBuffer' 0' (int)count);                      activity("post Stream.Read");                        // check if we failed to read                      if(count == 0) {                          break;                      }                  } else {                      activity("pre Read");                      yield return Read(activity' source' readBuffer' 0' (int)count' new Result<int>()).Set(v => count = v);                      activity("post Read");                        // check if we failed to read                      if(count == 0) {                            // let's abort after 10 tries to read more data                          if(++zero_read_counter > 10) {                              break;                          }                          continue;                      }                      zero_read_counter = 0;                  }                  total += count;                  length -= count;                    // swap buffers                  byte[] tmp = writeBuffer;                  writeBuffer = readBuffer;                  readBuffer = tmp;                    // write second                  if((target == Stream.Null) || target.IsStreamMemorized()) {                      activity("post Stream.Write");                      target.Write(writeBuffer' 0' (int)count);                      activity("post Stream.Write");                  } else {                      if(write != null) {                          activity("pre yield write 1");                          yield return write.Catch();                          activity("post yield write 1");                          write.Confirm();                      }                      activity("pre Write");                      write = Write(activity' target' writeBuffer' 0' (int)count' new Result());                      activity("post Write");                  }              }
Magic Number,MindTouch.Dream.Http,ActivityState,C:\repos\MindTouch_DReAM\src\mindtouch.core\http\httptransport.cs,Message,The following statement contains a magic number: lock(this) {                      if(message != null) {                          if(_messages != null) {                              _messages.Enqueue(message);                              if(_messages.Count > 10) {                                  _messages.Dequeue();                              }                              _activity.Description = string.Format("Incoming ({2}): {0} {1} [{3}]"' _verb' _uri' _hostname' string.Join(" -> "' _messages.ToArray()));                          }                      } else {                          _messages = null;                          _activity.Dispose();                      }                  }
Magic Number,MindTouch.Dream.Services,S3StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\S3StorageService.cs,GetFileOrFolderListing,The following statement contains a magic number: if(data.IsDirectory) {                    // Note (arnec): HEAD for a directory doesn't really mean anything' so we just return ok' to indicate that it exists                  result = head ? DreamMessage.Ok() : DreamMessage.Ok(data.AsDirectoryDocument());              } else {                    // dealing with a file request                   var filehandle = data.AsFileHandle();                    // check if request contains a 'if-modified-since' header                  if(request.CheckCacheRevalidation(filehandle.Modified) && (filehandle.Modified.Year >= 1900)) {                      response.Return(DreamMessage.NotModified());                      yield break;                  }                  result = head                               ? new DreamMessage(DreamStatus.Ok' null' filehandle.MimeType' filehandle.Size' Stream.Null)                               : DreamMessage.Ok(filehandle.MimeType' filehandle.Size' filehandle.Stream);                    // add caching headers if file was found                  if(!head && result.IsSuccessful) {                        // add caching information; this will avoid unnecessary data transfers by user-agents with caches                      result.SetCacheMustRevalidate(filehandle.Modified);                  }              }
Magic Number,MindTouch.Dream.Services,StorageService,C:\repos\MindTouch_DReAM\src\mindtouch.core\services\StorageService.cs,GetFileOrFolderListing,The following statement contains a magic number: if(File.Exists(path)) {                    // dealing with a file request                   TouchMeta(path);                    // check if request contains a 'if-modified-since' header                  var lastmodified = File.GetLastWriteTime(path);                  if(request.CheckCacheRevalidation(lastmodified) && (lastmodified.Year >= 1900)) {                      response.Return(DreamMessage.NotModified());                      yield break;                  }                    // retrieve file                  try {                      result = DreamMessage.FromFile(path' head);                  } catch(FileNotFoundException) {                      result = DreamMessage.NotFound("file not found");                  } catch(Exception) {                      result = DreamMessage.BadRequest("invalid path");                  }                    // add caching headers if file was found                  if(!head && result.IsSuccessful) {                        // add caching information; this will avoid unnecessary data transfers by user-agents with caches                      result.SetCacheMustRevalidate(lastmodified);                  }              } else if(Directory.Exists(path)) {                    // dealing with a directory request                  if(head) {                        // HEAD for a directory doesn't really mean anything' so we just return ok' to indicate that it exists                      result = DreamMessage.Ok();                  } else {                      var doc = new XDoc("files");                        // list directory contents                      var directories = Directory.GetDirectories(path);                      foreach(var dir in directories) {                          if(dir.EndsWithInvariantIgnoreCase(META)) {                              continue;                          }                          doc.Start("folder")                              .Elem("name"' Path.GetFileName(dir))                              .End();                      }                      foreach(var filepath in Directory.GetFiles(path)) {                          var file = new FileInfo(filepath);                          doc.Start("file")                              .Elem("name"' file.Name)                              .Elem("size"' file.Length)                              .Elem("date.created"' file.CreationTimeUtc)                              .Elem("date.modified"' file.LastWriteTimeUtc);                          var entry = SyncMeta(filepath);                          if(entry != null) {                              doc.Elem("date.expire"' entry.When);                              doc.Elem("date.ttl"' entry.TTL);                          }                          doc.End();                      }                      result = DreamMessage.Ok(doc);                  }              } else {                    // nothin here                  result = DreamMessage.NotFound("no such file or folder");              }
Missing Default,MindTouch.Dream,DreamHost,C:\repos\MindTouch_DReAM\src\mindtouch.core\DreamHost.cs,MakeUri,The following switch statement is missing a default case: switch(address.AddressFamily) {              case System.Net.Sockets.AddressFamily.InterNetwork:                  return new XUri(String.Format("http://{0}:{1}/"' address' port));              case System.Net.Sockets.AddressFamily.InterNetworkV6:                  return new XUri(String.Format("http://[{0}]:{1}/"' address' port));              }
