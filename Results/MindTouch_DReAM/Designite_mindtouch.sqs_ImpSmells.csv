Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MindTouch.Sqs,SqsClientConfig,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClientConfig.cs,SqsClientConfig,The method has 7 parameters. Parameters: privateKey' publicKey' accountId' endpoint' secure' proxyHost' proxyPort
Long Parameter List,MindTouch.Sqs,SqsPollingClientSettings,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsPollingClientSettings.cs,SqsPollingClientSettings,The method has 5 parameters. Parameters: queueName' callback' longPollInterval' maxNumberOfMessages' waitTimeOnError
Long Identifier,MindTouch.Sqs,SqsUtils,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsUtils.cs,,The length of the parameter MAX_NUMBER_OF_MESSAGES_TO_FETCH is 31.
Long Identifier,MindTouch.Sqs,SqsUtils,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsUtils.cs,,The length of the parameter MAX_NUMBER_OF_BATCH_DELETE_MESSAGES is 35.
Long Identifier,MindTouch.Sqs,SqsUtils,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsUtils.cs,,The length of the parameter MAX_NUMBER_OF_BATCH_SEND_MESSAGES is 33.
Long Statement,MindTouch.Sqs,InMemorySqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\InMemorySqsClient.cs,SendMessage,The length of the statement  "                var entry = new QueueEntry(new SqsMessage(new SqsMessageId(Guid.NewGuid().ToString())' new SqsMessageReceipt(Guid.NewGuid().ToString())' messageBody)' DateTime.MinValue); " is 170.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,AssertSuccessfulStatusCode,The length of the statement  "                throw new SqsException(string.Format("Got a '{0}' response while '{1}' from SQS queue '{2}'"' statusCode' sqsOperation' queueName.Value)' null); " is 144.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,Invoke,The length of the statement  "                throw new SqsException(string.Format("There was an SQS error '{0}'' from the '{1}' SQS queue"' sqsOperation' queueName.Value)' e); " is 130.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,Invoke,The length of the statement  "                throw new SqsException(string.Format("There was an error '{0}'' from the '{1}' SQS queue"' sqsOperation' queueName.Value)' e); " is 126.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,ReceiveMessages,The length of the statement  "                throw new ArgumentException(string.Format("The argument waitTimeSeconds is larger than '{0}'' which is the maximum value allowed"' SqsUtils.MAX_LONG_POLL_WAIT_TIME.TotalSeconds)); " is 179.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,ReceiveMessages,The length of the statement  "                throw new ArgumentException(string.Format("The argument maxNumberOfMessages is larger than '{0}'' which is the maximum value allowed"' SqsUtils.MAX_NUMBER_OF_MESSAGES_TO_FETCH)); " is 178.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,ReceiveMessages,The length of the statement  "            return response.Messages.Select(msg => new SqsMessage(new SqsMessageId(msg.MessageId)' new SqsMessageReceipt(msg.ReceiptHandle)' msg.Body)).ToArray(); " is 150.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,DeleteMessages,The length of the statement  "                throw new ArgumentException(string.Format("messageReceipts is larger than {0}' which is the maximum"' SqsUtils.MAX_NUMBER_OF_BATCH_DELETE_MESSAGES)); " is 149.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,DeleteMessages,The length of the statement  "            var deleteEntries = messages.Distinct(message => message.MessageId.Value).Select(message => new DeleteMessageBatchRequestEntry { Id = message.MessageId.Value' ReceiptHandle = message.MessageReceipt.Value }).ToList(); " is 216.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,SendMessages,The length of the statement  "                throw new ArgumentException(string.Format("messageBodies is larger than {0}' which is the maximum"' SqsUtils.MAX_NUMBER_OF_BATCH_SEND_MESSAGES)); " is 145.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,SendMessages,The length of the statement  "            var sendEntries = (from messageBody in messageBodies select new SendMessageBatchRequestEntry { MessageBody = messageBody' Id = string.Format("msg-{0}"' msgId++)' MessageAttributes = attributes }).ToList(); " is 205.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,SendMessages,The length of the statement  "            return response.Failed.Select(failed => messagesById.TryGetValue(failed.Id' null)).Where(messageBody => messageBody != null).ToArray(); " is 135.
Long Statement,MindTouch.Sqs,SqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsClient.cs,GetQueueNameAttribute,The length of the statement  "            return new  Dictionary<string' MessageAttributeValue> { { "QueueName"' new MessageAttributeValue { DataType = "String"' StringValue = queueName } } }; " is 150.
Long Statement,MindTouch.Sqs,Listener,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsPollingClient.cs,LongPollSqs,The length of the statement  "                        messages = _container._client.ReceiveMessages(settings.QueueName' settings.LongPollInterval' settings.MaxNumberOfMessages); " is 123.
Magic Number,MindTouch.Sqs,SqsQueueDelayedSendClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsQueueDelayedSendClient.cs,BatchSendMessages,The following statement contains a magic number: if(failedMessages.Any()) {                    // give failed messages up to 2 additional attempts                  var messageLookup = items.ToDictionary(item => item.Value' item => item.Key);                  foreach(var failedMessage in failedMessages) {                      int retryCount;                      if(messageLookup.TryGetValue(failedMessage' out retryCount) && (retryCount < 2)) {                          _timedSendAccumulator.Enqueue(new KeyValuePair<int' string>(retryCount + 1' failedMessage));                      } else {                            // attempts failed' log it into the error log in a format that may allow us to recover it at a later date                          _log.ErrorFormat("failed to send message on '{0}': {1}"' QueueName' failedMessage.EscapeString());                      }                  }              }
Magic Number,MindTouch.Sqs,InMemorySqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\InMemorySqsClient.cs,ReceiveMessages,The following statement contains a magic number: while(true) {                  var msgQueue = GetQueue(queueName);                  AssertQueueIsNotNull(queueName' msgQueue);                  QueueEntry[] entries;                  var now = GlobalClock.UtcNow;                  lock(msgQueue) {                      var visibilityTimeout = 30.Seconds();                      entries = msgQueue                          .Where(x => x.VisibleTime <= now)                          .OrderBy(x => _random.Next())                          .Take(10)                          .ToArray();                      foreach(var entry in entries) {                          entry.VisibleTime = now + visibilityTimeout;                      }                  }                  if(entries.Any()) {                      return entries.Select(e => new SqsMessage(e.Message.MessageId' e.Message.MessageReceipt' e.Message.Body)).ToArray();                  }                  if((now - start) > waitTimeSeconds) {                      return Enumerable.Empty<SqsMessage>();                                      }                    // no message found; go to sleep for 100ms and try again                  AsyncUtil.Sleep(100.Milliseconds());              }
Magic Number,MindTouch.Sqs,InMemorySqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\InMemorySqsClient.cs,ReceiveMessages,The following statement contains a magic number: while(true) {                  var msgQueue = GetQueue(queueName);                  AssertQueueIsNotNull(queueName' msgQueue);                  QueueEntry[] entries;                  var now = GlobalClock.UtcNow;                  lock(msgQueue) {                      var visibilityTimeout = 30.Seconds();                      entries = msgQueue                          .Where(x => x.VisibleTime <= now)                          .OrderBy(x => _random.Next())                          .Take(10)                          .ToArray();                      foreach(var entry in entries) {                          entry.VisibleTime = now + visibilityTimeout;                      }                  }                  if(entries.Any()) {                      return entries.Select(e => new SqsMessage(e.Message.MessageId' e.Message.MessageReceipt' e.Message.Body)).ToArray();                  }                  if((now - start) > waitTimeSeconds) {                      return Enumerable.Empty<SqsMessage>();                                      }                    // no message found; go to sleep for 100ms and try again                  AsyncUtil.Sleep(100.Milliseconds());              }
Magic Number,MindTouch.Sqs,InMemorySqsClient,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\InMemorySqsClient.cs,ReceiveMessages,The following statement contains a magic number: while(true) {                  var msgQueue = GetQueue(queueName);                  AssertQueueIsNotNull(queueName' msgQueue);                  QueueEntry[] entries;                  var now = GlobalClock.UtcNow;                  lock(msgQueue) {                      var visibilityTimeout = 30.Seconds();                      entries = msgQueue                          .Where(x => x.VisibleTime <= now)                          .OrderBy(x => _random.Next())                          .Take(10)                          .ToArray();                      foreach(var entry in entries) {                          entry.VisibleTime = now + visibilityTimeout;                      }                  }                  if(entries.Any()) {                      return entries.Select(e => new SqsMessage(e.Message.MessageId' e.Message.MessageReceipt' e.Message.Body)).ToArray();                  }                  if((now - start) > waitTimeSeconds) {                      return Enumerable.Empty<SqsMessage>();                                      }                    // no message found; go to sleep for 100ms and try again                  AsyncUtil.Sleep(100.Milliseconds());              }
Magic Number,MindTouch.Sqs,SqsPollingClientSettings,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsPollingClientSettings.cs,SqsPollingClientSettings,The following statement contains a magic number: if(longPollInterval > 20.Seconds()) {                  throw new ArgumentException("longPollInterval exceeds the limit allowed");              }
Magic Number,MindTouch.Sqs,SqsPollingClientSettings,C:\repos\MindTouch_DReAM\src\mindtouch.sqs\SqsPollingClientSettings.cs,SqsPollingClientSettings,The following statement contains a magic number: if(waitTimeOnError < 0.Seconds() || waitTimeOnError > 5.Minutes()) {                  throw new ArgumentException("waitTimeOnError must be greater than 0 up to 5 minutes");              }
