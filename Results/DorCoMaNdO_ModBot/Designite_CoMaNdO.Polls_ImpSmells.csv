Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,Cyclomatic complexity of the method is 8
Complex Method,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,Cyclomatic complexity of the method is 11
Complex Method,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Vote,Cyclomatic complexity of the method is 10
Long Parameter List,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Start,The method has 6 parameters.
Long Parameter List,CoMaNdO.Polls,Api,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Start,The method has 6 parameters.
Long Statement,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The length of the statement  "							int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]); " is 123.
Long Statement,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The length of the statement  "							return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild); " is 189.
Long Statement,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The length of the statement  "						if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) { " is 153.
Long Statement,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The length of the statement  "							Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}"); " is 124.
Long Statement,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Stop,The length of the statement  "				Chat.SendMessage ("The poll has ended! Winning option: " + WinningOption.Key + " with " + WinningOption.Value + " votes."); " is 123.
Long Statement,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Vote,The length of the statement  "				Chat.SendMessage (VotesGoal > 0 && Votes [option.ToLower ()] >= VotesGoal ? "The votes goal has been reached!" : "The total votes goal has been reached!"); " is 155.
Long Statement,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Vote,The length of the statement  "				Stop (VotesGoal > 0 && Votes [option.ToLower ()] >= VotesGoal ? option.ToLower () : ""' VotesGoal > 0 && Votes [option.ToLower ()] >= VotesGoal ? EndReason.Goal : EndReason.TotalGoal); " is 184.
Complex Conditional,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The conditional expression  "args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)"  is complex.
Complex Conditional,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Vote,The conditional expression  "VotesGoal > 0 && Votes [option.ToLower ()] >= VotesGoal || TotalVotesGoal > 0 && totalvotes >= TotalVotesGoal"  is complex.
Empty Catch Block,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The method has an empty catch block.
Magic Number,CoMaNdO.Polls,PollsWindow,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\PollsWindow.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (1024' 562);  
Magic Number,CoMaNdO.Polls,PollsWindow,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\PollsWindow.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (1024' 562);  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	w.Proxy = null;  	try {  		LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  		if (LatestVersion != "") {  			foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  				string[] data = Extension.Split (';');  				if (data.Length > 6) {  					if (data [3] == UniqueID) {  						LatestVersion = data [5];  						string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  						int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  						int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  						return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	w.Proxy = null;  	try {  		LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  		if (LatestVersion != "") {  			foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  				string[] data = Extension.Split (';');  				if (data.Length > 6) {  					if (data [3] == UniqueID) {  						LatestVersion = data [5];  						string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  						int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  						int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  						return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	w.Proxy = null;  	try {  		LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  		if (LatestVersion != "") {  			foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  				string[] data = Extension.Split (';');  				if (data.Length > 6) {  					if (data [3] == UniqueID) {  						LatestVersion = data [5];  						string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  						int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  						int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  						return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	w.Proxy = null;  	try {  		LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  		if (LatestVersion != "") {  			foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  				string[] data = Extension.Split (';');  				if (data.Length > 6) {  					if (data [3] == UniqueID) {  						LatestVersion = data [5];  						string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  						int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  						int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  						return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	w.Proxy = null;  	try {  		LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  		if (LatestVersion != "") {  			foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  				string[] data = Extension.Split (';');  				if (data.Length > 6) {  					if (data [3] == UniqueID) {  						LatestVersion = data [5];  						string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  						int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  						int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  						return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: try {  	LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  	if (LatestVersion != "") {  		foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  			string[] data = Extension.Split (';');  			if (data.Length > 6) {  				if (data [3] == UniqueID) {  					LatestVersion = data [5];  					string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  					int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  					int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  					return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  				}  			}  		}  	}  } catch {  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: try {  	LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  	if (LatestVersion != "") {  		foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  			string[] data = Extension.Split (';');  			if (data.Length > 6) {  				if (data [3] == UniqueID) {  					LatestVersion = data [5];  					string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  					int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  					int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  					return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  				}  			}  		}  	}  } catch {  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: try {  	LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  	if (LatestVersion != "") {  		foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  			string[] data = Extension.Split (';');  			if (data.Length > 6) {  				if (data [3] == UniqueID) {  					LatestVersion = data [5];  					string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  					int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  					int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  					return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  				}  			}  		}  	}  } catch {  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: try {  	LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  	if (LatestVersion != "") {  		foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  			string[] data = Extension.Split (';');  			if (data.Length > 6) {  				if (data [3] == UniqueID) {  					LatestVersion = data [5];  					string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  					int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  					int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  					return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  				}  			}  		}  	}  } catch {  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: try {  	LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  	if (LatestVersion != "") {  		foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  			string[] data = Extension.Split (';');  			if (data.Length > 6) {  				if (data [3] == UniqueID) {  					LatestVersion = data [5];  					string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  					int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  					int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  					return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  				}  			}  		}  	}  } catch {  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (LatestVersion != "") {  	foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  		string[] data = Extension.Split (';');  		if (data.Length > 6) {  			if (data [3] == UniqueID) {  				LatestVersion = data [5];  				string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  				int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  				int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  				return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (LatestVersion != "") {  	foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  		string[] data = Extension.Split (';');  		if (data.Length > 6) {  			if (data [3] == UniqueID) {  				LatestVersion = data [5];  				string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  				int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  				int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  				return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (LatestVersion != "") {  	foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  		string[] data = Extension.Split (';');  		if (data.Length > 6) {  			if (data [3] == UniqueID) {  				LatestVersion = data [5];  				string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  				int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  				int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  				return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (LatestVersion != "") {  	foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  		string[] data = Extension.Split (';');  		if (data.Length > 6) {  			if (data [3] == UniqueID) {  				LatestVersion = data [5];  				string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  				int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  				int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  				return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (LatestVersion != "") {  	foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  		string[] data = Extension.Split (';');  		if (data.Length > 6) {  			if (data [3] == UniqueID) {  				LatestVersion = data [5];  				string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  				int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  				int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  				return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  	string[] data = Extension.Split (';');  	if (data.Length > 6) {  		if (data [3] == UniqueID) {  			LatestVersion = data [5];  			string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  			int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  			int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  			return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  	string[] data = Extension.Split (';');  	if (data.Length > 6) {  		if (data [3] == UniqueID) {  			LatestVersion = data [5];  			string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  			int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  			int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  			return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  	string[] data = Extension.Split (';');  	if (data.Length > 6) {  		if (data [3] == UniqueID) {  			LatestVersion = data [5];  			string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  			int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  			int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  			return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  	string[] data = Extension.Split (';');  	if (data.Length > 6) {  		if (data [3] == UniqueID) {  			LatestVersion = data [5];  			string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  			int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  			int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  			return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  	string[] data = Extension.Split (';');  	if (data.Length > 6) {  		if (data [3] == UniqueID) {  			LatestVersion = data [5];  			string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  			int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  			int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  			return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (data.Length > 6) {  	if (data [3] == UniqueID) {  		LatestVersion = data [5];  		string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  		int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  		int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  		return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (data.Length > 6) {  	if (data [3] == UniqueID) {  		LatestVersion = data [5];  		string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  		int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  		int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  		return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (data.Length > 6) {  	if (data [3] == UniqueID) {  		LatestVersion = data [5];  		string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  		int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  		int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  		return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (data.Length > 6) {  	if (data [3] == UniqueID) {  		LatestVersion = data [5];  		string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  		int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  		int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  		return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (data.Length > 6) {  	if (data [3] == UniqueID) {  		LatestVersion = data [5];  		string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  		int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  		int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  		return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  	}  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (data [3] == UniqueID) {  	LatestVersion = data [5];  	string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  	int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  	int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  	return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (data [3] == UniqueID) {  	LatestVersion = data [5];  	string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  	int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  	int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  	return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (data [3] == UniqueID) {  	LatestVersion = data [5];  	string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  	int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  	int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  	return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: if (data [3] == UniqueID) {  	LatestVersion = data [5];  	string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  	int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  	int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  	return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  }  
Magic Number,CoMaNdO.Polls,Polls,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,UpdateCheck,The following statement contains a magic number: LatestVersion = data [5];  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length > 0) {  	if (args [0].ToLower () == "vote" && args.Length > 1) {  		Command_Vote (user' cmd' new string[] {  			args [1]  		}' origin);  		return;  	}  	if (Users.GetLevel (user) > 0) {  		if (args [0].ToLower () == "votes") {  			lock (Options) {  				if (Options.Count < 2)  					return;  				string text = "";  				Dictionary<string' int> Votes = new Dictionary<string' int> ();  				foreach (string voter in Voters.Keys) {  					if (!Votes.ContainsKey (Voters [voter]))  						Votes.Add (Voters [voter]' 0);  					Votes [Voters [voter]]++;  				}  				Votes.OrderByDescending (vote => vote.Value);  				int count = 0' max = 0;  				if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  					max = 0;  				if (max > 0 && max < Options.Count)  					text = "Leading " + max + "options: ";  				foreach (KeyValuePair<string' int> kv in Votes) {  					if (count >= max)  						break;  					//text += kv.Value + " votes for " + kv.Key + ". ";  					text += kv.Key + " with " + kv.Value + " votes. ";  					count++;  				}  				Chat.SendMessage (text);  				return;  			}  		}  		if (Users.GetLevel (user) > 1) {  			if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  				lock (Options) {  					if (Options.Count > 1) {  						Chat.SendMessage ("A poll is already running.");  						return;  					}  					args = Commands.GetArgs (args' 0' false);  					int cost' goal' totalgoal;  					if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  						Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  						return;  					}  					List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  					string title = lOptions [0];  					lOptions.Remove (title);  					if (title.StartsWith ("\"") && title.EndsWith ("\""))  						title.Substring (1' title.Length - 2);  					Start (cost' goal' totalgoal' title' lOptions' true);  				}  			} else if (args [0].ToLower () == "open") {  				Open (true);  			} else if (args [0].ToLower () == "close") {  				Close (true);  			} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  				Stop (""' EndReason.Manual' true);  			} else if (args [0].ToLower () == "cancel") {  				Cancel (true);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length > 0) {  	if (args [0].ToLower () == "vote" && args.Length > 1) {  		Command_Vote (user' cmd' new string[] {  			args [1]  		}' origin);  		return;  	}  	if (Users.GetLevel (user) > 0) {  		if (args [0].ToLower () == "votes") {  			lock (Options) {  				if (Options.Count < 2)  					return;  				string text = "";  				Dictionary<string' int> Votes = new Dictionary<string' int> ();  				foreach (string voter in Voters.Keys) {  					if (!Votes.ContainsKey (Voters [voter]))  						Votes.Add (Voters [voter]' 0);  					Votes [Voters [voter]]++;  				}  				Votes.OrderByDescending (vote => vote.Value);  				int count = 0' max = 0;  				if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  					max = 0;  				if (max > 0 && max < Options.Count)  					text = "Leading " + max + "options: ";  				foreach (KeyValuePair<string' int> kv in Votes) {  					if (count >= max)  						break;  					//text += kv.Value + " votes for " + kv.Key + ". ";  					text += kv.Key + " with " + kv.Value + " votes. ";  					count++;  				}  				Chat.SendMessage (text);  				return;  			}  		}  		if (Users.GetLevel (user) > 1) {  			if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  				lock (Options) {  					if (Options.Count > 1) {  						Chat.SendMessage ("A poll is already running.");  						return;  					}  					args = Commands.GetArgs (args' 0' false);  					int cost' goal' totalgoal;  					if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  						Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  						return;  					}  					List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  					string title = lOptions [0];  					lOptions.Remove (title);  					if (title.StartsWith ("\"") && title.EndsWith ("\""))  						title.Substring (1' title.Length - 2);  					Start (cost' goal' totalgoal' title' lOptions' true);  				}  			} else if (args [0].ToLower () == "open") {  				Open (true);  			} else if (args [0].ToLower () == "close") {  				Close (true);  			} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  				Stop (""' EndReason.Manual' true);  			} else if (args [0].ToLower () == "cancel") {  				Cancel (true);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length > 0) {  	if (args [0].ToLower () == "vote" && args.Length > 1) {  		Command_Vote (user' cmd' new string[] {  			args [1]  		}' origin);  		return;  	}  	if (Users.GetLevel (user) > 0) {  		if (args [0].ToLower () == "votes") {  			lock (Options) {  				if (Options.Count < 2)  					return;  				string text = "";  				Dictionary<string' int> Votes = new Dictionary<string' int> ();  				foreach (string voter in Voters.Keys) {  					if (!Votes.ContainsKey (Voters [voter]))  						Votes.Add (Voters [voter]' 0);  					Votes [Voters [voter]]++;  				}  				Votes.OrderByDescending (vote => vote.Value);  				int count = 0' max = 0;  				if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  					max = 0;  				if (max > 0 && max < Options.Count)  					text = "Leading " + max + "options: ";  				foreach (KeyValuePair<string' int> kv in Votes) {  					if (count >= max)  						break;  					//text += kv.Value + " votes for " + kv.Key + ". ";  					text += kv.Key + " with " + kv.Value + " votes. ";  					count++;  				}  				Chat.SendMessage (text);  				return;  			}  		}  		if (Users.GetLevel (user) > 1) {  			if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  				lock (Options) {  					if (Options.Count > 1) {  						Chat.SendMessage ("A poll is already running.");  						return;  					}  					args = Commands.GetArgs (args' 0' false);  					int cost' goal' totalgoal;  					if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  						Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  						return;  					}  					List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  					string title = lOptions [0];  					lOptions.Remove (title);  					if (title.StartsWith ("\"") && title.EndsWith ("\""))  						title.Substring (1' title.Length - 2);  					Start (cost' goal' totalgoal' title' lOptions' true);  				}  			} else if (args [0].ToLower () == "open") {  				Open (true);  			} else if (args [0].ToLower () == "close") {  				Close (true);  			} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  				Stop (""' EndReason.Manual' true);  			} else if (args [0].ToLower () == "cancel") {  				Cancel (true);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length > 0) {  	if (args [0].ToLower () == "vote" && args.Length > 1) {  		Command_Vote (user' cmd' new string[] {  			args [1]  		}' origin);  		return;  	}  	if (Users.GetLevel (user) > 0) {  		if (args [0].ToLower () == "votes") {  			lock (Options) {  				if (Options.Count < 2)  					return;  				string text = "";  				Dictionary<string' int> Votes = new Dictionary<string' int> ();  				foreach (string voter in Voters.Keys) {  					if (!Votes.ContainsKey (Voters [voter]))  						Votes.Add (Voters [voter]' 0);  					Votes [Voters [voter]]++;  				}  				Votes.OrderByDescending (vote => vote.Value);  				int count = 0' max = 0;  				if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  					max = 0;  				if (max > 0 && max < Options.Count)  					text = "Leading " + max + "options: ";  				foreach (KeyValuePair<string' int> kv in Votes) {  					if (count >= max)  						break;  					//text += kv.Value + " votes for " + kv.Key + ". ";  					text += kv.Key + " with " + kv.Value + " votes. ";  					count++;  				}  				Chat.SendMessage (text);  				return;  			}  		}  		if (Users.GetLevel (user) > 1) {  			if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  				lock (Options) {  					if (Options.Count > 1) {  						Chat.SendMessage ("A poll is already running.");  						return;  					}  					args = Commands.GetArgs (args' 0' false);  					int cost' goal' totalgoal;  					if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  						Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  						return;  					}  					List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  					string title = lOptions [0];  					lOptions.Remove (title);  					if (title.StartsWith ("\"") && title.EndsWith ("\""))  						title.Substring (1' title.Length - 2);  					Start (cost' goal' totalgoal' title' lOptions' true);  				}  			} else if (args [0].ToLower () == "open") {  				Open (true);  			} else if (args [0].ToLower () == "close") {  				Close (true);  			} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  				Stop (""' EndReason.Manual' true);  			} else if (args [0].ToLower () == "cancel") {  				Cancel (true);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length > 0) {  	if (args [0].ToLower () == "vote" && args.Length > 1) {  		Command_Vote (user' cmd' new string[] {  			args [1]  		}' origin);  		return;  	}  	if (Users.GetLevel (user) > 0) {  		if (args [0].ToLower () == "votes") {  			lock (Options) {  				if (Options.Count < 2)  					return;  				string text = "";  				Dictionary<string' int> Votes = new Dictionary<string' int> ();  				foreach (string voter in Voters.Keys) {  					if (!Votes.ContainsKey (Voters [voter]))  						Votes.Add (Voters [voter]' 0);  					Votes [Voters [voter]]++;  				}  				Votes.OrderByDescending (vote => vote.Value);  				int count = 0' max = 0;  				if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  					max = 0;  				if (max > 0 && max < Options.Count)  					text = "Leading " + max + "options: ";  				foreach (KeyValuePair<string' int> kv in Votes) {  					if (count >= max)  						break;  					//text += kv.Value + " votes for " + kv.Key + ". ";  					text += kv.Key + " with " + kv.Value + " votes. ";  					count++;  				}  				Chat.SendMessage (text);  				return;  			}  		}  		if (Users.GetLevel (user) > 1) {  			if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  				lock (Options) {  					if (Options.Count > 1) {  						Chat.SendMessage ("A poll is already running.");  						return;  					}  					args = Commands.GetArgs (args' 0' false);  					int cost' goal' totalgoal;  					if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  						Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  						return;  					}  					List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  					string title = lOptions [0];  					lOptions.Remove (title);  					if (title.StartsWith ("\"") && title.EndsWith ("\""))  						title.Substring (1' title.Length - 2);  					Start (cost' goal' totalgoal' title' lOptions' true);  				}  			} else if (args [0].ToLower () == "open") {  				Open (true);  			} else if (args [0].ToLower () == "close") {  				Close (true);  			} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  				Stop (""' EndReason.Manual' true);  			} else if (args [0].ToLower () == "cancel") {  				Cancel (true);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length > 0) {  	if (args [0].ToLower () == "vote" && args.Length > 1) {  		Command_Vote (user' cmd' new string[] {  			args [1]  		}' origin);  		return;  	}  	if (Users.GetLevel (user) > 0) {  		if (args [0].ToLower () == "votes") {  			lock (Options) {  				if (Options.Count < 2)  					return;  				string text = "";  				Dictionary<string' int> Votes = new Dictionary<string' int> ();  				foreach (string voter in Voters.Keys) {  					if (!Votes.ContainsKey (Voters [voter]))  						Votes.Add (Voters [voter]' 0);  					Votes [Voters [voter]]++;  				}  				Votes.OrderByDescending (vote => vote.Value);  				int count = 0' max = 0;  				if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  					max = 0;  				if (max > 0 && max < Options.Count)  					text = "Leading " + max + "options: ";  				foreach (KeyValuePair<string' int> kv in Votes) {  					if (count >= max)  						break;  					//text += kv.Value + " votes for " + kv.Key + ". ";  					text += kv.Key + " with " + kv.Value + " votes. ";  					count++;  				}  				Chat.SendMessage (text);  				return;  			}  		}  		if (Users.GetLevel (user) > 1) {  			if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  				lock (Options) {  					if (Options.Count > 1) {  						Chat.SendMessage ("A poll is already running.");  						return;  					}  					args = Commands.GetArgs (args' 0' false);  					int cost' goal' totalgoal;  					if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  						Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  						return;  					}  					List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  					string title = lOptions [0];  					lOptions.Remove (title);  					if (title.StartsWith ("\"") && title.EndsWith ("\""))  						title.Substring (1' title.Length - 2);  					Start (cost' goal' totalgoal' title' lOptions' true);  				}  			} else if (args [0].ToLower () == "open") {  				Open (true);  			} else if (args [0].ToLower () == "close") {  				Close (true);  			} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  				Stop (""' EndReason.Manual' true);  			} else if (args [0].ToLower () == "cancel") {  				Cancel (true);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length > 0) {  	if (args [0].ToLower () == "vote" && args.Length > 1) {  		Command_Vote (user' cmd' new string[] {  			args [1]  		}' origin);  		return;  	}  	if (Users.GetLevel (user) > 0) {  		if (args [0].ToLower () == "votes") {  			lock (Options) {  				if (Options.Count < 2)  					return;  				string text = "";  				Dictionary<string' int> Votes = new Dictionary<string' int> ();  				foreach (string voter in Voters.Keys) {  					if (!Votes.ContainsKey (Voters [voter]))  						Votes.Add (Voters [voter]' 0);  					Votes [Voters [voter]]++;  				}  				Votes.OrderByDescending (vote => vote.Value);  				int count = 0' max = 0;  				if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  					max = 0;  				if (max > 0 && max < Options.Count)  					text = "Leading " + max + "options: ";  				foreach (KeyValuePair<string' int> kv in Votes) {  					if (count >= max)  						break;  					//text += kv.Value + " votes for " + kv.Key + ". ";  					text += kv.Key + " with " + kv.Value + " votes. ";  					count++;  				}  				Chat.SendMessage (text);  				return;  			}  		}  		if (Users.GetLevel (user) > 1) {  			if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  				lock (Options) {  					if (Options.Count > 1) {  						Chat.SendMessage ("A poll is already running.");  						return;  					}  					args = Commands.GetArgs (args' 0' false);  					int cost' goal' totalgoal;  					if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  						Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  						return;  					}  					List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  					string title = lOptions [0];  					lOptions.Remove (title);  					if (title.StartsWith ("\"") && title.EndsWith ("\""))  						title.Substring (1' title.Length - 2);  					Start (cost' goal' totalgoal' title' lOptions' true);  				}  			} else if (args [0].ToLower () == "open") {  				Open (true);  			} else if (args [0].ToLower () == "close") {  				Close (true);  			} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  				Stop (""' EndReason.Manual' true);  			} else if (args [0].ToLower () == "cancel") {  				Cancel (true);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length > 0) {  	if (args [0].ToLower () == "vote" && args.Length > 1) {  		Command_Vote (user' cmd' new string[] {  			args [1]  		}' origin);  		return;  	}  	if (Users.GetLevel (user) > 0) {  		if (args [0].ToLower () == "votes") {  			lock (Options) {  				if (Options.Count < 2)  					return;  				string text = "";  				Dictionary<string' int> Votes = new Dictionary<string' int> ();  				foreach (string voter in Voters.Keys) {  					if (!Votes.ContainsKey (Voters [voter]))  						Votes.Add (Voters [voter]' 0);  					Votes [Voters [voter]]++;  				}  				Votes.OrderByDescending (vote => vote.Value);  				int count = 0' max = 0;  				if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  					max = 0;  				if (max > 0 && max < Options.Count)  					text = "Leading " + max + "options: ";  				foreach (KeyValuePair<string' int> kv in Votes) {  					if (count >= max)  						break;  					//text += kv.Value + " votes for " + kv.Key + ". ";  					text += kv.Key + " with " + kv.Value + " votes. ";  					count++;  				}  				Chat.SendMessage (text);  				return;  			}  		}  		if (Users.GetLevel (user) > 1) {  			if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  				lock (Options) {  					if (Options.Count > 1) {  						Chat.SendMessage ("A poll is already running.");  						return;  					}  					args = Commands.GetArgs (args' 0' false);  					int cost' goal' totalgoal;  					if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  						Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  						return;  					}  					List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  					string title = lOptions [0];  					lOptions.Remove (title);  					if (title.StartsWith ("\"") && title.EndsWith ("\""))  						title.Substring (1' title.Length - 2);  					Start (cost' goal' totalgoal' title' lOptions' true);  				}  			} else if (args [0].ToLower () == "open") {  				Open (true);  			} else if (args [0].ToLower () == "close") {  				Close (true);  			} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  				Stop (""' EndReason.Manual' true);  			} else if (args [0].ToLower () == "cancel") {  				Cancel (true);  			}  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 0) {  	if (args [0].ToLower () == "votes") {  		lock (Options) {  			if (Options.Count < 2)  				return;  			string text = "";  			Dictionary<string' int> Votes = new Dictionary<string' int> ();  			foreach (string voter in Voters.Keys) {  				if (!Votes.ContainsKey (Voters [voter]))  					Votes.Add (Voters [voter]' 0);  				Votes [Voters [voter]]++;  			}  			Votes.OrderByDescending (vote => vote.Value);  			int count = 0' max = 0;  			if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  				max = 0;  			if (max > 0 && max < Options.Count)  				text = "Leading " + max + "options: ";  			foreach (KeyValuePair<string' int> kv in Votes) {  				if (count >= max)  					break;  				//text += kv.Value + " votes for " + kv.Key + ". ";  				text += kv.Key + " with " + kv.Value + " votes. ";  				count++;  			}  			Chat.SendMessage (text);  			return;  		}  	}  	if (Users.GetLevel (user) > 1) {  		if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  			lock (Options) {  				if (Options.Count > 1) {  					Chat.SendMessage ("A poll is already running.");  					return;  				}  				args = Commands.GetArgs (args' 0' false);  				int cost' goal' totalgoal;  				if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  					Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  					return;  				}  				List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  				string title = lOptions [0];  				lOptions.Remove (title);  				if (title.StartsWith ("\"") && title.EndsWith ("\""))  					title.Substring (1' title.Length - 2);  				Start (cost' goal' totalgoal' title' lOptions' true);  			}  		} else if (args [0].ToLower () == "open") {  			Open (true);  		} else if (args [0].ToLower () == "close") {  			Close (true);  		} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  			Stop (""' EndReason.Manual' true);  		} else if (args [0].ToLower () == "cancel") {  			Cancel (true);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 0) {  	if (args [0].ToLower () == "votes") {  		lock (Options) {  			if (Options.Count < 2)  				return;  			string text = "";  			Dictionary<string' int> Votes = new Dictionary<string' int> ();  			foreach (string voter in Voters.Keys) {  				if (!Votes.ContainsKey (Voters [voter]))  					Votes.Add (Voters [voter]' 0);  				Votes [Voters [voter]]++;  			}  			Votes.OrderByDescending (vote => vote.Value);  			int count = 0' max = 0;  			if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  				max = 0;  			if (max > 0 && max < Options.Count)  				text = "Leading " + max + "options: ";  			foreach (KeyValuePair<string' int> kv in Votes) {  				if (count >= max)  					break;  				//text += kv.Value + " votes for " + kv.Key + ". ";  				text += kv.Key + " with " + kv.Value + " votes. ";  				count++;  			}  			Chat.SendMessage (text);  			return;  		}  	}  	if (Users.GetLevel (user) > 1) {  		if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  			lock (Options) {  				if (Options.Count > 1) {  					Chat.SendMessage ("A poll is already running.");  					return;  				}  				args = Commands.GetArgs (args' 0' false);  				int cost' goal' totalgoal;  				if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  					Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  					return;  				}  				List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  				string title = lOptions [0];  				lOptions.Remove (title);  				if (title.StartsWith ("\"") && title.EndsWith ("\""))  					title.Substring (1' title.Length - 2);  				Start (cost' goal' totalgoal' title' lOptions' true);  			}  		} else if (args [0].ToLower () == "open") {  			Open (true);  		} else if (args [0].ToLower () == "close") {  			Close (true);  		} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  			Stop (""' EndReason.Manual' true);  		} else if (args [0].ToLower () == "cancel") {  			Cancel (true);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 0) {  	if (args [0].ToLower () == "votes") {  		lock (Options) {  			if (Options.Count < 2)  				return;  			string text = "";  			Dictionary<string' int> Votes = new Dictionary<string' int> ();  			foreach (string voter in Voters.Keys) {  				if (!Votes.ContainsKey (Voters [voter]))  					Votes.Add (Voters [voter]' 0);  				Votes [Voters [voter]]++;  			}  			Votes.OrderByDescending (vote => vote.Value);  			int count = 0' max = 0;  			if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  				max = 0;  			if (max > 0 && max < Options.Count)  				text = "Leading " + max + "options: ";  			foreach (KeyValuePair<string' int> kv in Votes) {  				if (count >= max)  					break;  				//text += kv.Value + " votes for " + kv.Key + ". ";  				text += kv.Key + " with " + kv.Value + " votes. ";  				count++;  			}  			Chat.SendMessage (text);  			return;  		}  	}  	if (Users.GetLevel (user) > 1) {  		if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  			lock (Options) {  				if (Options.Count > 1) {  					Chat.SendMessage ("A poll is already running.");  					return;  				}  				args = Commands.GetArgs (args' 0' false);  				int cost' goal' totalgoal;  				if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  					Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  					return;  				}  				List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  				string title = lOptions [0];  				lOptions.Remove (title);  				if (title.StartsWith ("\"") && title.EndsWith ("\""))  					title.Substring (1' title.Length - 2);  				Start (cost' goal' totalgoal' title' lOptions' true);  			}  		} else if (args [0].ToLower () == "open") {  			Open (true);  		} else if (args [0].ToLower () == "close") {  			Close (true);  		} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  			Stop (""' EndReason.Manual' true);  		} else if (args [0].ToLower () == "cancel") {  			Cancel (true);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 0) {  	if (args [0].ToLower () == "votes") {  		lock (Options) {  			if (Options.Count < 2)  				return;  			string text = "";  			Dictionary<string' int> Votes = new Dictionary<string' int> ();  			foreach (string voter in Voters.Keys) {  				if (!Votes.ContainsKey (Voters [voter]))  					Votes.Add (Voters [voter]' 0);  				Votes [Voters [voter]]++;  			}  			Votes.OrderByDescending (vote => vote.Value);  			int count = 0' max = 0;  			if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  				max = 0;  			if (max > 0 && max < Options.Count)  				text = "Leading " + max + "options: ";  			foreach (KeyValuePair<string' int> kv in Votes) {  				if (count >= max)  					break;  				//text += kv.Value + " votes for " + kv.Key + ". ";  				text += kv.Key + " with " + kv.Value + " votes. ";  				count++;  			}  			Chat.SendMessage (text);  			return;  		}  	}  	if (Users.GetLevel (user) > 1) {  		if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  			lock (Options) {  				if (Options.Count > 1) {  					Chat.SendMessage ("A poll is already running.");  					return;  				}  				args = Commands.GetArgs (args' 0' false);  				int cost' goal' totalgoal;  				if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  					Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  					return;  				}  				List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  				string title = lOptions [0];  				lOptions.Remove (title);  				if (title.StartsWith ("\"") && title.EndsWith ("\""))  					title.Substring (1' title.Length - 2);  				Start (cost' goal' totalgoal' title' lOptions' true);  			}  		} else if (args [0].ToLower () == "open") {  			Open (true);  		} else if (args [0].ToLower () == "close") {  			Close (true);  		} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  			Stop (""' EndReason.Manual' true);  		} else if (args [0].ToLower () == "cancel") {  			Cancel (true);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 0) {  	if (args [0].ToLower () == "votes") {  		lock (Options) {  			if (Options.Count < 2)  				return;  			string text = "";  			Dictionary<string' int> Votes = new Dictionary<string' int> ();  			foreach (string voter in Voters.Keys) {  				if (!Votes.ContainsKey (Voters [voter]))  					Votes.Add (Voters [voter]' 0);  				Votes [Voters [voter]]++;  			}  			Votes.OrderByDescending (vote => vote.Value);  			int count = 0' max = 0;  			if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  				max = 0;  			if (max > 0 && max < Options.Count)  				text = "Leading " + max + "options: ";  			foreach (KeyValuePair<string' int> kv in Votes) {  				if (count >= max)  					break;  				//text += kv.Value + " votes for " + kv.Key + ". ";  				text += kv.Key + " with " + kv.Value + " votes. ";  				count++;  			}  			Chat.SendMessage (text);  			return;  		}  	}  	if (Users.GetLevel (user) > 1) {  		if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  			lock (Options) {  				if (Options.Count > 1) {  					Chat.SendMessage ("A poll is already running.");  					return;  				}  				args = Commands.GetArgs (args' 0' false);  				int cost' goal' totalgoal;  				if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  					Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  					return;  				}  				List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  				string title = lOptions [0];  				lOptions.Remove (title);  				if (title.StartsWith ("\"") && title.EndsWith ("\""))  					title.Substring (1' title.Length - 2);  				Start (cost' goal' totalgoal' title' lOptions' true);  			}  		} else if (args [0].ToLower () == "open") {  			Open (true);  		} else if (args [0].ToLower () == "close") {  			Close (true);  		} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  			Stop (""' EndReason.Manual' true);  		} else if (args [0].ToLower () == "cancel") {  			Cancel (true);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 0) {  	if (args [0].ToLower () == "votes") {  		lock (Options) {  			if (Options.Count < 2)  				return;  			string text = "";  			Dictionary<string' int> Votes = new Dictionary<string' int> ();  			foreach (string voter in Voters.Keys) {  				if (!Votes.ContainsKey (Voters [voter]))  					Votes.Add (Voters [voter]' 0);  				Votes [Voters [voter]]++;  			}  			Votes.OrderByDescending (vote => vote.Value);  			int count = 0' max = 0;  			if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  				max = 0;  			if (max > 0 && max < Options.Count)  				text = "Leading " + max + "options: ";  			foreach (KeyValuePair<string' int> kv in Votes) {  				if (count >= max)  					break;  				//text += kv.Value + " votes for " + kv.Key + ". ";  				text += kv.Key + " with " + kv.Value + " votes. ";  				count++;  			}  			Chat.SendMessage (text);  			return;  		}  	}  	if (Users.GetLevel (user) > 1) {  		if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  			lock (Options) {  				if (Options.Count > 1) {  					Chat.SendMessage ("A poll is already running.");  					return;  				}  				args = Commands.GetArgs (args' 0' false);  				int cost' goal' totalgoal;  				if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  					Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  					return;  				}  				List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  				string title = lOptions [0];  				lOptions.Remove (title);  				if (title.StartsWith ("\"") && title.EndsWith ("\""))  					title.Substring (1' title.Length - 2);  				Start (cost' goal' totalgoal' title' lOptions' true);  			}  		} else if (args [0].ToLower () == "open") {  			Open (true);  		} else if (args [0].ToLower () == "close") {  			Close (true);  		} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  			Stop (""' EndReason.Manual' true);  		} else if (args [0].ToLower () == "cancel") {  			Cancel (true);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 0) {  	if (args [0].ToLower () == "votes") {  		lock (Options) {  			if (Options.Count < 2)  				return;  			string text = "";  			Dictionary<string' int> Votes = new Dictionary<string' int> ();  			foreach (string voter in Voters.Keys) {  				if (!Votes.ContainsKey (Voters [voter]))  					Votes.Add (Voters [voter]' 0);  				Votes [Voters [voter]]++;  			}  			Votes.OrderByDescending (vote => vote.Value);  			int count = 0' max = 0;  			if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  				max = 0;  			if (max > 0 && max < Options.Count)  				text = "Leading " + max + "options: ";  			foreach (KeyValuePair<string' int> kv in Votes) {  				if (count >= max)  					break;  				//text += kv.Value + " votes for " + kv.Key + ". ";  				text += kv.Key + " with " + kv.Value + " votes. ";  				count++;  			}  			Chat.SendMessage (text);  			return;  		}  	}  	if (Users.GetLevel (user) > 1) {  		if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  			lock (Options) {  				if (Options.Count > 1) {  					Chat.SendMessage ("A poll is already running.");  					return;  				}  				args = Commands.GetArgs (args' 0' false);  				int cost' goal' totalgoal;  				if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  					Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  					return;  				}  				List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  				string title = lOptions [0];  				lOptions.Remove (title);  				if (title.StartsWith ("\"") && title.EndsWith ("\""))  					title.Substring (1' title.Length - 2);  				Start (cost' goal' totalgoal' title' lOptions' true);  			}  		} else if (args [0].ToLower () == "open") {  			Open (true);  		} else if (args [0].ToLower () == "close") {  			Close (true);  		} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  			Stop (""' EndReason.Manual' true);  		} else if (args [0].ToLower () == "cancel") {  			Cancel (true);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 0) {  	if (args [0].ToLower () == "votes") {  		lock (Options) {  			if (Options.Count < 2)  				return;  			string text = "";  			Dictionary<string' int> Votes = new Dictionary<string' int> ();  			foreach (string voter in Voters.Keys) {  				if (!Votes.ContainsKey (Voters [voter]))  					Votes.Add (Voters [voter]' 0);  				Votes [Voters [voter]]++;  			}  			Votes.OrderByDescending (vote => vote.Value);  			int count = 0' max = 0;  			if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  				max = 0;  			if (max > 0 && max < Options.Count)  				text = "Leading " + max + "options: ";  			foreach (KeyValuePair<string' int> kv in Votes) {  				if (count >= max)  					break;  				//text += kv.Value + " votes for " + kv.Key + ". ";  				text += kv.Key + " with " + kv.Value + " votes. ";  				count++;  			}  			Chat.SendMessage (text);  			return;  		}  	}  	if (Users.GetLevel (user) > 1) {  		if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  			lock (Options) {  				if (Options.Count > 1) {  					Chat.SendMessage ("A poll is already running.");  					return;  				}  				args = Commands.GetArgs (args' 0' false);  				int cost' goal' totalgoal;  				if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  					Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  					return;  				}  				List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  				string title = lOptions [0];  				lOptions.Remove (title);  				if (title.StartsWith ("\"") && title.EndsWith ("\""))  					title.Substring (1' title.Length - 2);  				Start (cost' goal' totalgoal' title' lOptions' true);  			}  		} else if (args [0].ToLower () == "open") {  			Open (true);  		} else if (args [0].ToLower () == "close") {  			Close (true);  		} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  			Stop (""' EndReason.Manual' true);  		} else if (args [0].ToLower () == "cancel") {  			Cancel (true);  		}  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args [0].ToLower () == "votes") {  	lock (Options) {  		if (Options.Count < 2)  			return;  		string text = "";  		Dictionary<string' int> Votes = new Dictionary<string' int> ();  		foreach (string voter in Voters.Keys) {  			if (!Votes.ContainsKey (Voters [voter]))  				Votes.Add (Voters [voter]' 0);  			Votes [Voters [voter]]++;  		}  		Votes.OrderByDescending (vote => vote.Value);  		int count = 0' max = 0;  		if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  			max = 0;  		if (max > 0 && max < Options.Count)  			text = "Leading " + max + "options: ";  		foreach (KeyValuePair<string' int> kv in Votes) {  			if (count >= max)  				break;  			//text += kv.Value + " votes for " + kv.Key + ". ";  			text += kv.Key + " with " + kv.Value + " votes. ";  			count++;  		}  		Chat.SendMessage (text);  		return;  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args [0].ToLower () == "votes") {  	lock (Options) {  		if (Options.Count < 2)  			return;  		string text = "";  		Dictionary<string' int> Votes = new Dictionary<string' int> ();  		foreach (string voter in Voters.Keys) {  			if (!Votes.ContainsKey (Voters [voter]))  				Votes.Add (Voters [voter]' 0);  			Votes [Voters [voter]]++;  		}  		Votes.OrderByDescending (vote => vote.Value);  		int count = 0' max = 0;  		if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  			max = 0;  		if (max > 0 && max < Options.Count)  			text = "Leading " + max + "options: ";  		foreach (KeyValuePair<string' int> kv in Votes) {  			if (count >= max)  				break;  			//text += kv.Value + " votes for " + kv.Key + ". ";  			text += kv.Key + " with " + kv.Value + " votes. ";  			count++;  		}  		Chat.SendMessage (text);  		return;  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args [0].ToLower () == "votes") {  	lock (Options) {  		if (Options.Count < 2)  			return;  		string text = "";  		Dictionary<string' int> Votes = new Dictionary<string' int> ();  		foreach (string voter in Voters.Keys) {  			if (!Votes.ContainsKey (Voters [voter]))  				Votes.Add (Voters [voter]' 0);  			Votes [Voters [voter]]++;  		}  		Votes.OrderByDescending (vote => vote.Value);  		int count = 0' max = 0;  		if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  			max = 0;  		if (max > 0 && max < Options.Count)  			text = "Leading " + max + "options: ";  		foreach (KeyValuePair<string' int> kv in Votes) {  			if (count >= max)  				break;  			//text += kv.Value + " votes for " + kv.Key + ". ";  			text += kv.Key + " with " + kv.Value + " votes. ";  			count++;  		}  		Chat.SendMessage (text);  		return;  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: lock (Options) {  	if (Options.Count < 2)  		return;  	string text = "";  	Dictionary<string' int> Votes = new Dictionary<string' int> ();  	foreach (string voter in Voters.Keys) {  		if (!Votes.ContainsKey (Voters [voter]))  			Votes.Add (Voters [voter]' 0);  		Votes [Voters [voter]]++;  	}  	Votes.OrderByDescending (vote => vote.Value);  	int count = 0' max = 0;  	if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  		max = 0;  	if (max > 0 && max < Options.Count)  		text = "Leading " + max + "options: ";  	foreach (KeyValuePair<string' int> kv in Votes) {  		if (count >= max)  			break;  		//text += kv.Value + " votes for " + kv.Key + ". ";  		text += kv.Key + " with " + kv.Value + " votes. ";  		count++;  	}  	Chat.SendMessage (text);  	return;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: lock (Options) {  	if (Options.Count < 2)  		return;  	string text = "";  	Dictionary<string' int> Votes = new Dictionary<string' int> ();  	foreach (string voter in Voters.Keys) {  		if (!Votes.ContainsKey (Voters [voter]))  			Votes.Add (Voters [voter]' 0);  		Votes [Voters [voter]]++;  	}  	Votes.OrderByDescending (vote => vote.Value);  	int count = 0' max = 0;  	if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  		max = 0;  	if (max > 0 && max < Options.Count)  		text = "Leading " + max + "options: ";  	foreach (KeyValuePair<string' int> kv in Votes) {  		if (count >= max)  			break;  		//text += kv.Value + " votes for " + kv.Key + ". ";  		text += kv.Key + " with " + kv.Value + " votes. ";  		count++;  	}  	Chat.SendMessage (text);  	return;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: lock (Options) {  	if (Options.Count < 2)  		return;  	string text = "";  	Dictionary<string' int> Votes = new Dictionary<string' int> ();  	foreach (string voter in Voters.Keys) {  		if (!Votes.ContainsKey (Voters [voter]))  			Votes.Add (Voters [voter]' 0);  		Votes [Voters [voter]]++;  	}  	Votes.OrderByDescending (vote => vote.Value);  	int count = 0' max = 0;  	if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  		max = 0;  	if (max > 0 && max < Options.Count)  		text = "Leading " + max + "options: ";  	foreach (KeyValuePair<string' int> kv in Votes) {  		if (count >= max)  			break;  		//text += kv.Value + " votes for " + kv.Key + ". ";  		text += kv.Key + " with " + kv.Value + " votes. ";  		count++;  	}  	Chat.SendMessage (text);  	return;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Options.Count < 2)  	return;  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  	max = 0;  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length < 3 || args [1].ToLower () != "top" || !int.TryParse (args [2]' out max))  	max = 0;  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 1) {  	if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  		lock (Options) {  			if (Options.Count > 1) {  				Chat.SendMessage ("A poll is already running.");  				return;  			}  			args = Commands.GetArgs (args' 0' false);  			int cost' goal' totalgoal;  			if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  				Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  				return;  			}  			List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  			string title = lOptions [0];  			lOptions.Remove (title);  			if (title.StartsWith ("\"") && title.EndsWith ("\""))  				title.Substring (1' title.Length - 2);  			Start (cost' goal' totalgoal' title' lOptions' true);  		}  	} else if (args [0].ToLower () == "open") {  		Open (true);  	} else if (args [0].ToLower () == "close") {  		Close (true);  	} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  		Stop (""' EndReason.Manual' true);  	} else if (args [0].ToLower () == "cancel") {  		Cancel (true);  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 1) {  	if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  		lock (Options) {  			if (Options.Count > 1) {  				Chat.SendMessage ("A poll is already running.");  				return;  			}  			args = Commands.GetArgs (args' 0' false);  			int cost' goal' totalgoal;  			if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  				Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  				return;  			}  			List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  			string title = lOptions [0];  			lOptions.Remove (title);  			if (title.StartsWith ("\"") && title.EndsWith ("\""))  				title.Substring (1' title.Length - 2);  			Start (cost' goal' totalgoal' title' lOptions' true);  		}  	} else if (args [0].ToLower () == "open") {  		Open (true);  	} else if (args [0].ToLower () == "close") {  		Close (true);  	} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  		Stop (""' EndReason.Manual' true);  	} else if (args [0].ToLower () == "cancel") {  		Cancel (true);  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 1) {  	if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  		lock (Options) {  			if (Options.Count > 1) {  				Chat.SendMessage ("A poll is already running.");  				return;  			}  			args = Commands.GetArgs (args' 0' false);  			int cost' goal' totalgoal;  			if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  				Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  				return;  			}  			List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  			string title = lOptions [0];  			lOptions.Remove (title);  			if (title.StartsWith ("\"") && title.EndsWith ("\""))  				title.Substring (1' title.Length - 2);  			Start (cost' goal' totalgoal' title' lOptions' true);  		}  	} else if (args [0].ToLower () == "open") {  		Open (true);  	} else if (args [0].ToLower () == "close") {  		Close (true);  	} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  		Stop (""' EndReason.Manual' true);  	} else if (args [0].ToLower () == "cancel") {  		Cancel (true);  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 1) {  	if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  		lock (Options) {  			if (Options.Count > 1) {  				Chat.SendMessage ("A poll is already running.");  				return;  			}  			args = Commands.GetArgs (args' 0' false);  			int cost' goal' totalgoal;  			if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  				Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  				return;  			}  			List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  			string title = lOptions [0];  			lOptions.Remove (title);  			if (title.StartsWith ("\"") && title.EndsWith ("\""))  				title.Substring (1' title.Length - 2);  			Start (cost' goal' totalgoal' title' lOptions' true);  		}  	} else if (args [0].ToLower () == "open") {  		Open (true);  	} else if (args [0].ToLower () == "close") {  		Close (true);  	} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  		Stop (""' EndReason.Manual' true);  	} else if (args [0].ToLower () == "cancel") {  		Cancel (true);  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (Users.GetLevel (user) > 1) {  	if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  		lock (Options) {  			if (Options.Count > 1) {  				Chat.SendMessage ("A poll is already running.");  				return;  			}  			args = Commands.GetArgs (args' 0' false);  			int cost' goal' totalgoal;  			if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  				Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  				return;  			}  			List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  			string title = lOptions [0];  			lOptions.Remove (title);  			if (title.StartsWith ("\"") && title.EndsWith ("\""))  				title.Substring (1' title.Length - 2);  			Start (cost' goal' totalgoal' title' lOptions' true);  		}  	} else if (args [0].ToLower () == "open") {  		Open (true);  	} else if (args [0].ToLower () == "close") {  		Close (true);  	} else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  		Stop (""' EndReason.Manual' true);  	} else if (args [0].ToLower () == "cancel") {  		Cancel (true);  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  	lock (Options) {  		if (Options.Count > 1) {  			Chat.SendMessage ("A poll is already running.");  			return;  		}  		args = Commands.GetArgs (args' 0' false);  		int cost' goal' totalgoal;  		if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  			Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  			return;  		}  		List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  		string title = lOptions [0];  		lOptions.Remove (title);  		if (title.StartsWith ("\"") && title.EndsWith ("\""))  			title.Substring (1' title.Length - 2);  		Start (cost' goal' totalgoal' title' lOptions' true);  	}  } else if (args [0].ToLower () == "open") {  	Open (true);  } else if (args [0].ToLower () == "close") {  	Close (true);  } else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  	Stop (""' EndReason.Manual' true);  } else if (args [0].ToLower () == "cancel") {  	Cancel (true);  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  	lock (Options) {  		if (Options.Count > 1) {  			Chat.SendMessage ("A poll is already running.");  			return;  		}  		args = Commands.GetArgs (args' 0' false);  		int cost' goal' totalgoal;  		if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  			Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  			return;  		}  		List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  		string title = lOptions [0];  		lOptions.Remove (title);  		if (title.StartsWith ("\"") && title.EndsWith ("\""))  			title.Substring (1' title.Length - 2);  		Start (cost' goal' totalgoal' title' lOptions' true);  	}  } else if (args [0].ToLower () == "open") {  	Open (true);  } else if (args [0].ToLower () == "close") {  	Close (true);  } else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  	Stop (""' EndReason.Manual' true);  } else if (args [0].ToLower () == "cancel") {  	Cancel (true);  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  	lock (Options) {  		if (Options.Count > 1) {  			Chat.SendMessage ("A poll is already running.");  			return;  		}  		args = Commands.GetArgs (args' 0' false);  		int cost' goal' totalgoal;  		if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  			Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  			return;  		}  		List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  		string title = lOptions [0];  		lOptions.Remove (title);  		if (title.StartsWith ("\"") && title.EndsWith ("\""))  			title.Substring (1' title.Length - 2);  		Start (cost' goal' totalgoal' title' lOptions' true);  	}  } else if (args [0].ToLower () == "open") {  	Open (true);  } else if (args [0].ToLower () == "close") {  	Close (true);  } else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  	Stop (""' EndReason.Manual' true);  } else if (args [0].ToLower () == "cancel") {  	Cancel (true);  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  	lock (Options) {  		if (Options.Count > 1) {  			Chat.SendMessage ("A poll is already running.");  			return;  		}  		args = Commands.GetArgs (args' 0' false);  		int cost' goal' totalgoal;  		if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  			Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  			return;  		}  		List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  		string title = lOptions [0];  		lOptions.Remove (title);  		if (title.StartsWith ("\"") && title.EndsWith ("\""))  			title.Substring (1' title.Length - 2);  		Start (cost' goal' totalgoal' title' lOptions' true);  	}  } else if (args [0].ToLower () == "open") {  	Open (true);  } else if (args [0].ToLower () == "close") {  	Close (true);  } else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  	Stop (""' EndReason.Manual' true);  } else if (args [0].ToLower () == "cancel") {  	Cancel (true);  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args [0].ToLower () == "create" || args [0].ToLower () == "start") {  	lock (Options) {  		if (Options.Count > 1) {  			Chat.SendMessage ("A poll is already running.");  			return;  		}  		args = Commands.GetArgs (args' 0' false);  		int cost' goal' totalgoal;  		if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  			Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  			return;  		}  		List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  		string title = lOptions [0];  		lOptions.Remove (title);  		if (title.StartsWith ("\"") && title.EndsWith ("\""))  			title.Substring (1' title.Length - 2);  		Start (cost' goal' totalgoal' title' lOptions' true);  	}  } else if (args [0].ToLower () == "open") {  	Open (true);  } else if (args [0].ToLower () == "close") {  	Close (true);  } else if (args [0].ToLower () == "stop" || args [0].ToLower () == "end") {  	Stop (""' EndReason.Manual' true);  } else if (args [0].ToLower () == "cancel") {  	Cancel (true);  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: lock (Options) {  	if (Options.Count > 1) {  		Chat.SendMessage ("A poll is already running.");  		return;  	}  	args = Commands.GetArgs (args' 0' false);  	int cost' goal' totalgoal;  	if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  		Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  		return;  	}  	List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  	string title = lOptions [0];  	lOptions.Remove (title);  	if (title.StartsWith ("\"") && title.EndsWith ("\""))  		title.Substring (1' title.Length - 2);  	Start (cost' goal' totalgoal' title' lOptions' true);  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: lock (Options) {  	if (Options.Count > 1) {  		Chat.SendMessage ("A poll is already running.");  		return;  	}  	args = Commands.GetArgs (args' 0' false);  	int cost' goal' totalgoal;  	if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  		Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  		return;  	}  	List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  	string title = lOptions [0];  	lOptions.Remove (title);  	if (title.StartsWith ("\"") && title.EndsWith ("\""))  		title.Substring (1' title.Length - 2);  	Start (cost' goal' totalgoal' title' lOptions' true);  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: lock (Options) {  	if (Options.Count > 1) {  		Chat.SendMessage ("A poll is already running.");  		return;  	}  	args = Commands.GetArgs (args' 0' false);  	int cost' goal' totalgoal;  	if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  		Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  		return;  	}  	List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  	string title = lOptions [0];  	lOptions.Remove (title);  	if (title.StartsWith ("\"") && title.EndsWith ("\""))  		title.Substring (1' title.Length - 2);  	Start (cost' goal' totalgoal' title' lOptions' true);  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: lock (Options) {  	if (Options.Count > 1) {  		Chat.SendMessage ("A poll is already running.");  		return;  	}  	args = Commands.GetArgs (args' 0' false);  	int cost' goal' totalgoal;  	if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  		Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  		return;  	}  	List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  	string title = lOptions [0];  	lOptions.Remove (title);  	if (title.StartsWith ("\"") && title.EndsWith ("\""))  		title.Substring (1' title.Length - 2);  	Start (cost' goal' totalgoal' title' lOptions' true);  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: lock (Options) {  	if (Options.Count > 1) {  		Chat.SendMessage ("A poll is already running.");  		return;  	}  	args = Commands.GetArgs (args' 0' false);  	int cost' goal' totalgoal;  	if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  		Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  		return;  	}  	List<string> lOptions = Commands.GetArgs (args' 4).ToList ();  	string title = lOptions [0];  	lOptions.Remove (title);  	if (title.StartsWith ("\"") && title.EndsWith ("\""))  		title.Substring (1' title.Length - 2);  	Start (cost' goal' totalgoal' title' lOptions' true);  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  	Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  	return;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  	Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  	return;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (args.Length < 7 || !int.TryParse (args [1]' out cost) || cost < 0 || !int.TryParse (args [2]' out goal) || !int.TryParse (args [3]' out totalgoal)) {  	Chat.SendMessage ("Syntax: !poll create {VoteCost} {VotesGoal} {TotalVotesGoal} {Title} {Option1} {Option2} ... {OptionN}");  	return;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: if (title.StartsWith ("\"") && title.EndsWith ("\""))  	title.Substring (1' title.Length - 2);  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Command_Poll,The following statement contains a magic number: title.Substring (1' title.Length - 2);  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Open,The following statement contains a magic number: if (Options.Count < 2 || IsOpen) {  	if (Announce)  		Chat.SendMessage ("A poll must be started and closed first.");  	return false;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Close,The following statement contains a magic number: if (Options.Count < 2 || !IsOpen) {  	if (Announce)  		Chat.SendMessage ("A poll must be started and open first.");  	return false;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Stop,The following statement contains a magic number: lock (Options) {  	if (Options.Count > 1) {  		IsOpen = false;  		Dictionary<string' int> Votes = new Dictionary<string' int> ();  		foreach (string voter in Voters.Keys) {  			if (!Votes.ContainsKey (Voters [voter]))  				Votes.Add (Voters [voter]' 0);  			Votes [Voters [voter]]++;  		}  		if (Winner == "") {  			Votes.OrderByDescending (vote => vote.Value);  			Winner = Votes.ElementAt (0).Key;  		}  		WinningOption = new KeyValuePair<string' int> (Winner' Votes [Winner]);  		OnPollEnd (WinningOption.Key' WinningOption.Value' Reason);  		if (Announce)  			Chat.SendMessage ("The poll has ended! Winning option: " + WinningOption.Key + " with " + WinningOption.Value + " votes.");  		VoteCost = 5;  		VotesGoal = 0;  		TotalVotesGoal = 0;  		Options.Clear ();  		Voters.Clear ();  		Winner = "";  	} else {  		if (Announce)  			Chat.SendMessage ("A poll must be started first.");  	}  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Stop,The following statement contains a magic number: if (Options.Count > 1) {  	IsOpen = false;  	Dictionary<string' int> Votes = new Dictionary<string' int> ();  	foreach (string voter in Voters.Keys) {  		if (!Votes.ContainsKey (Voters [voter]))  			Votes.Add (Voters [voter]' 0);  		Votes [Voters [voter]]++;  	}  	if (Winner == "") {  		Votes.OrderByDescending (vote => vote.Value);  		Winner = Votes.ElementAt (0).Key;  	}  	WinningOption = new KeyValuePair<string' int> (Winner' Votes [Winner]);  	OnPollEnd (WinningOption.Key' WinningOption.Value' Reason);  	if (Announce)  		Chat.SendMessage ("The poll has ended! Winning option: " + WinningOption.Key + " with " + WinningOption.Value + " votes.");  	VoteCost = 5;  	VotesGoal = 0;  	TotalVotesGoal = 0;  	Options.Clear ();  	Voters.Clear ();  	Winner = "";  } else {  	if (Announce)  		Chat.SendMessage ("A poll must be started first.");  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Stop,The following statement contains a magic number: VoteCost = 5;  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Cancel,The following statement contains a magic number: lock (Options) {  	if (Options.Count < 2) {  		if (Announce)  			Chat.SendMessage ("A poll must be started first.");  		return false;  	}  	IsOpen = false;  	VotesGoal = 0;  	TotalVotesGoal = 0;  	Options.Clear ();  	foreach (string voter in Voters.Keys)  		Currency.Add (voter' VoteCost);  	VoteCost = 5;  	Voters.Clear ();  	if (Announce)  		Chat.SendMessage ("The poll has been cancelled. All votes have been refunded.");  	return true;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Cancel,The following statement contains a magic number: lock (Options) {  	if (Options.Count < 2) {  		if (Announce)  			Chat.SendMessage ("A poll must be started first.");  		return false;  	}  	IsOpen = false;  	VotesGoal = 0;  	TotalVotesGoal = 0;  	Options.Clear ();  	foreach (string voter in Voters.Keys)  		Currency.Add (voter' VoteCost);  	VoteCost = 5;  	Voters.Clear ();  	if (Announce)  		Chat.SendMessage ("The poll has been cancelled. All votes have been refunded.");  	return true;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Cancel,The following statement contains a magic number: if (Options.Count < 2) {  	if (Announce)  		Chat.SendMessage ("A poll must be started first.");  	return false;  }  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Cancel,The following statement contains a magic number: VoteCost = 5;  
Magic Number,CoMaNdO.Polls,Poll,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Polls\Polls.cs,Vote,The following statement contains a magic number: if (!IsOpen || Options.Count < 2 || Voters.ContainsKey (user.ToLower ()))  	return false;  
