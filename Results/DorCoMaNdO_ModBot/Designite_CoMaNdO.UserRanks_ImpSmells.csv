Implementation smell,Namespace,Class,File,Method,Description
Long Method,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Command_Ranks,The method has 101 lines of code.
Long Statement,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Load,The length of the statement  "            while (File.Exists(this.GetDataPath() + "Data.sqlite") && Api.IsFileLocked(this.GetDataPath() + "Data.sqlite"' FileShare.Read)) if (MessageBox.Show("ModBot's database file is in use' Please close it in order to let ModBot use it."' "ModBot"' MessageBoxButtons.RetryCancel' MessageBoxIcon.Warning) == DialogResult.Cancel) Program.Close(); " is 337.
Long Statement,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Load,The length of the statement  "            using (SQLiteCommand query = new SQLiteCommand("CREATE TABLE IF NOT EXISTS 'ranks' (id INTEGER PRIMARY KEY AUTOINCREMENT' rank TEXT);"' DB)) query.ExecuteNonQuery(); " is 165.
Long Statement,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Load,The length of the statement  "            using (SQLiteCommand query = new SQLiteCommand("CREATE TABLE IF NOT EXISTS 'userdata' (id INTEGER PRIMARY KEY AUTOINCREMENT' user TEXT' rank TEXT);"' DB)) query.ExecuteNonQuery(); " is 179.
Long Statement,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Command_Ranks,The length of the statement  "                            using (SQLiteCommand query = new SQLiteCommand("INSERT INTO 'ranks' (rank) VALUES ('" + rank.Replace("'"' "''") + "');"' DB)) query.ExecuteNonQuery(); " is 150.
Long Statement,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Command_Ranks,The length of the statement  "                            using (SQLiteCommand query = new SQLiteCommand("DELETE FROM 'ranks' WHERE rank = '" + rank.Replace("'"' "''") + "' COLLATE NOCASE;"' DB)) query.ExecuteNonQuery(); " is 162.
Long Statement,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Events_OnCurrencyQueue,The length of the statement  "            using (SQLiteCommand query = new SQLiteCommand("SELECT * FROM 'userdata' WHERE user = '" + user + "' COLLATE NOCASE;"' DB)) " is 123.
Long Statement,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Events_OnCurrencyQueue,The length of the statement  "                                using (SQLiteCommand query2 = new SQLiteCommand("DELETE FROM 'userdata' WHERE user = '" + user + "' COLLATE NOCASE;"' DB)) query2.ExecuteNonQuery(); " is 148.
Long Statement,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Events_OnCurrencyQueue,The length of the statement  "                using (SQLiteCommand query = new SQLiteCommand("INSERT INTO 'userdata' (user' rank) VALUES ('" + user + "'' '" + rank.Replace("'"' "''") + "');"' DB)) query.ExecuteNonQuery(); " is 175.
Long Statement,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,UpdateCheck,The length of the statement  "                                    return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild); " is 189.
Empty Catch Block,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,UpdateCheck,The method has an empty catch block.
Magic Number,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Command_Ranks,The following statement contains a magic number: if (args.Length > 0)              {                  if (args[0].ToLower() == "add" && args.Length > 1)                  {                      string rank = "";                      for (int i = 1; i < args.Length; i++)                      {                          rank += args[i] + " ";                      }                                            if (rank != "")                      {                          rank = rank.Substring(0' rank.Length - 1);                            bool found = false;                          using (SQLiteCommand query = new SQLiteCommand("SELECT * FROM 'ranks';"' DB))                          {                              using (SQLiteDataReader r = query.ExecuteReader())                              {                                  while (r.Read())                                  {                                      if (r["rank"].ToString().ToLower() == rank.ToLower())                                      {                                          found = true;                                          break;                                      }                                  }                              }                          }                            if (!found)                          {                              using (SQLiteCommand query = new SQLiteCommand("INSERT INTO 'ranks' (rank) VALUES ('" + rank.Replace("'"' "''") + "');"' DB)) query.ExecuteNonQuery();                              Chat.SendMessage("The rank \"" + rank + "\" has been added.");                          }                          else                          {                              Chat.SendMessage("The rank \"" + rank + "\" already exists.");                          }                      }                  }                  else if (args[0].ToLower() == "remove" && args.Length > 1)                  {                      string rank = "";                      for (int i = 1; i < args.Length; i++)                      {                          rank += args[i] + " ";                      }                        if (rank != "")                      {                          rank = rank.Substring(0' rank.Length - 1);                            bool found = false;                          using (SQLiteCommand query = new SQLiteCommand("SELECT * FROM 'ranks';"' DB))                          {                              using (SQLiteDataReader r = query.ExecuteReader())                              {                                  while (r.Read())                                  {                                      if (r["rank"].ToString().ToLower() == rank.ToLower())                                      {                                          found = true;                                          break;                                      }                                  }                              }                          }                            if (found)                          {                              using (SQLiteCommand query = new SQLiteCommand("DELETE FROM 'ranks' WHERE rank = '" + rank.Replace("'"' "''") + "' COLLATE NOCASE;"' DB)) query.ExecuteNonQuery();                              Chat.SendMessage("The rank \"" + rank + "\" has been removed.");                          }                          else                          {                              Chat.SendMessage("The rank \"" + rank + "\" does not exist.");                          }                      }                  }                  else if (args[0].ToLower() == "list")                  {                      string output = "List of ranks: ";                      using (SQLiteCommand query = new SQLiteCommand("SELECT * FROM 'ranks';"' DB))                      {                          using (SQLiteDataReader r = query.ExecuteReader())                          {                              while (r.Read())                              {                                  output += r["rank"].ToString() + "' ";                              }                          }                      }                        if (output.EndsWith("' "))                      {                          output = output.Substring(0' output.Length - 2) + ".";                      }                      else                      {                          output = "No ranks were added.";                      }                        Chat.SendMessage(output);                  }              }
Magic Number,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient())              {                  w.Proxy = null;                  try                  {                      LatestVersion = w.DownloadString("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");                      if (LatestVersion != "")                      {                          foreach (string Extension in LatestVersion.Split(Environment.NewLine.ToCharArray()))                          {                              string[] data = Extension.Split(';');                              if (data.Length > 6)                              {                                  if (data[3] == UniqueID)                                  {                                      LatestVersion = data[5];                                        string[] Latest = LatestVersion.Split('.')' Current = Version.Split('.');                                      int LatestMajor = int.Parse(Latest[0])' LatestMinor = int.Parse(Latest[1])' LatestBuild = int.Parse(Latest[2]);                                      int CurrentMajor = int.Parse(Current[0])' CurrentMinor = int.Parse(Current[1])' CurrentBuild = int.Parse(Current[2]);                                      return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);                                  }                              }                          }                      }                  }                  catch                  {                  }              }
Magic Number,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient())              {                  w.Proxy = null;                  try                  {                      LatestVersion = w.DownloadString("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");                      if (LatestVersion != "")                      {                          foreach (string Extension in LatestVersion.Split(Environment.NewLine.ToCharArray()))                          {                              string[] data = Extension.Split(';');                              if (data.Length > 6)                              {                                  if (data[3] == UniqueID)                                  {                                      LatestVersion = data[5];                                        string[] Latest = LatestVersion.Split('.')' Current = Version.Split('.');                                      int LatestMajor = int.Parse(Latest[0])' LatestMinor = int.Parse(Latest[1])' LatestBuild = int.Parse(Latest[2]);                                      int CurrentMajor = int.Parse(Current[0])' CurrentMinor = int.Parse(Current[1])' CurrentBuild = int.Parse(Current[2]);                                      return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);                                  }                              }                          }                      }                  }                  catch                  {                  }              }
Magic Number,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient())              {                  w.Proxy = null;                  try                  {                      LatestVersion = w.DownloadString("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");                      if (LatestVersion != "")                      {                          foreach (string Extension in LatestVersion.Split(Environment.NewLine.ToCharArray()))                          {                              string[] data = Extension.Split(';');                              if (data.Length > 6)                              {                                  if (data[3] == UniqueID)                                  {                                      LatestVersion = data[5];                                        string[] Latest = LatestVersion.Split('.')' Current = Version.Split('.');                                      int LatestMajor = int.Parse(Latest[0])' LatestMinor = int.Parse(Latest[1])' LatestBuild = int.Parse(Latest[2]);                                      int CurrentMajor = int.Parse(Current[0])' CurrentMinor = int.Parse(Current[1])' CurrentBuild = int.Parse(Current[2]);                                      return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);                                  }                              }                          }                      }                  }                  catch                  {                  }              }
Magic Number,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient())              {                  w.Proxy = null;                  try                  {                      LatestVersion = w.DownloadString("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");                      if (LatestVersion != "")                      {                          foreach (string Extension in LatestVersion.Split(Environment.NewLine.ToCharArray()))                          {                              string[] data = Extension.Split(';');                              if (data.Length > 6)                              {                                  if (data[3] == UniqueID)                                  {                                      LatestVersion = data[5];                                        string[] Latest = LatestVersion.Split('.')' Current = Version.Split('.');                                      int LatestMajor = int.Parse(Latest[0])' LatestMinor = int.Parse(Latest[1])' LatestBuild = int.Parse(Latest[2]);                                      int CurrentMajor = int.Parse(Current[0])' CurrentMinor = int.Parse(Current[1])' CurrentBuild = int.Parse(Current[2]);                                      return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);                                  }                              }                          }                      }                  }                  catch                  {                  }              }
Magic Number,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient())              {                  w.Proxy = null;                  try                  {                      LatestVersion = w.DownloadString("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");                      if (LatestVersion != "")                      {                          foreach (string Extension in LatestVersion.Split(Environment.NewLine.ToCharArray()))                          {                              string[] data = Extension.Split(';');                              if (data.Length > 6)                              {                                  if (data[3] == UniqueID)                                  {                                      LatestVersion = data[5];                                        string[] Latest = LatestVersion.Split('.')' Current = Version.Split('.');                                      int LatestMajor = int.Parse(Latest[0])' LatestMinor = int.Parse(Latest[1])' LatestBuild = int.Parse(Latest[2]);                                      int CurrentMajor = int.Parse(Current[0])' CurrentMinor = int.Parse(Current[1])' CurrentBuild = int.Parse(Current[2]);                                      return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);                                  }                              }                          }                      }                  }                  catch                  {                  }              }
Duplicate Code,CoMaNdO.UserRanks,UserRanks,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.UserRanks\UserRanks.cs,Command_Ranks,The method contains a code clone-set at the following line numbers (starting from the method definition): ((5' 31)' (44' 70))
