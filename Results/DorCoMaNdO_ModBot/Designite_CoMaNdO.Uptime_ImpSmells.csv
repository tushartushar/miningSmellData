Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,Cyclomatic complexity of the method is 8
Long Statement,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,Command_Uptime,The length of the statement  "		Chat.SendMessage ("The stream is up for " + t.Days + " days' " + t.Hours + " hours' " + t.Minutes + " minutes and " + t.Seconds + " seconds."); " is 143.
Long Statement,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The length of the statement  "							int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]); " is 123.
Long Statement,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The length of the statement  "							return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild); " is 189.
Empty Catch Block,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The method has an empty catch block.
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,Events_Connected,The following statement contains a magic number: Commands.Add (this' "!uptime"' Command_Uptime' Users.UserLevel.Normal' 300' 900);  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,Events_Connected,The following statement contains a magic number: Commands.Add (this' "!uptime"' Command_Uptime' Users.UserLevel.Normal' 300' 900);  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	w.Proxy = null;  	try {  		LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  		if (LatestVersion != "") {  			foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  				string[] data = Extension.Split (';');  				if (data.Length > 6) {  					if (data [3] == UniqueID) {  						LatestVersion = data [5];  						string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  						int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  						int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  						return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	w.Proxy = null;  	try {  		LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  		if (LatestVersion != "") {  			foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  				string[] data = Extension.Split (';');  				if (data.Length > 6) {  					if (data [3] == UniqueID) {  						LatestVersion = data [5];  						string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  						int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  						int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  						return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	w.Proxy = null;  	try {  		LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  		if (LatestVersion != "") {  			foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  				string[] data = Extension.Split (';');  				if (data.Length > 6) {  					if (data [3] == UniqueID) {  						LatestVersion = data [5];  						string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  						int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  						int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  						return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	w.Proxy = null;  	try {  		LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  		if (LatestVersion != "") {  			foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  				string[] data = Extension.Split (';');  				if (data.Length > 6) {  					if (data [3] == UniqueID) {  						LatestVersion = data [5];  						string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  						int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  						int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  						return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient ()) {  	w.Proxy = null;  	try {  		LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  		if (LatestVersion != "") {  			foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  				string[] data = Extension.Split (';');  				if (data.Length > 6) {  					if (data [3] == UniqueID) {  						LatestVersion = data [5];  						string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  						int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  						int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  						return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: try {  	LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  	if (LatestVersion != "") {  		foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  			string[] data = Extension.Split (';');  			if (data.Length > 6) {  				if (data [3] == UniqueID) {  					LatestVersion = data [5];  					string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  					int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  					int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  					return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  				}  			}  		}  	}  } catch {  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: try {  	LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  	if (LatestVersion != "") {  		foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  			string[] data = Extension.Split (';');  			if (data.Length > 6) {  				if (data [3] == UniqueID) {  					LatestVersion = data [5];  					string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  					int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  					int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  					return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  				}  			}  		}  	}  } catch {  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: try {  	LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  	if (LatestVersion != "") {  		foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  			string[] data = Extension.Split (';');  			if (data.Length > 6) {  				if (data [3] == UniqueID) {  					LatestVersion = data [5];  					string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  					int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  					int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  					return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  				}  			}  		}  	}  } catch {  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: try {  	LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  	if (LatestVersion != "") {  		foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  			string[] data = Extension.Split (';');  			if (data.Length > 6) {  				if (data [3] == UniqueID) {  					LatestVersion = data [5];  					string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  					int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  					int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  					return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  				}  			}  		}  	}  } catch {  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: try {  	LatestVersion = w.DownloadString ("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");  	if (LatestVersion != "") {  		foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  			string[] data = Extension.Split (';');  			if (data.Length > 6) {  				if (data [3] == UniqueID) {  					LatestVersion = data [5];  					string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  					int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  					int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  					return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  				}  			}  		}  	}  } catch {  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (LatestVersion != "") {  	foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  		string[] data = Extension.Split (';');  		if (data.Length > 6) {  			if (data [3] == UniqueID) {  				LatestVersion = data [5];  				string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  				int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  				int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  				return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  			}  		}  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (LatestVersion != "") {  	foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  		string[] data = Extension.Split (';');  		if (data.Length > 6) {  			if (data [3] == UniqueID) {  				LatestVersion = data [5];  				string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  				int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  				int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  				return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  			}  		}  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (LatestVersion != "") {  	foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  		string[] data = Extension.Split (';');  		if (data.Length > 6) {  			if (data [3] == UniqueID) {  				LatestVersion = data [5];  				string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  				int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  				int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  				return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  			}  		}  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (LatestVersion != "") {  	foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  		string[] data = Extension.Split (';');  		if (data.Length > 6) {  			if (data [3] == UniqueID) {  				LatestVersion = data [5];  				string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  				int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  				int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  				return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  			}  		}  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (LatestVersion != "") {  	foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  		string[] data = Extension.Split (';');  		if (data.Length > 6) {  			if (data [3] == UniqueID) {  				LatestVersion = data [5];  				string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  				int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  				int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  				return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  			}  		}  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  	string[] data = Extension.Split (';');  	if (data.Length > 6) {  		if (data [3] == UniqueID) {  			LatestVersion = data [5];  			string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  			int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  			int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  			return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  		}  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  	string[] data = Extension.Split (';');  	if (data.Length > 6) {  		if (data [3] == UniqueID) {  			LatestVersion = data [5];  			string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  			int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  			int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  			return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  		}  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  	string[] data = Extension.Split (';');  	if (data.Length > 6) {  		if (data [3] == UniqueID) {  			LatestVersion = data [5];  			string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  			int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  			int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  			return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  		}  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  	string[] data = Extension.Split (';');  	if (data.Length > 6) {  		if (data [3] == UniqueID) {  			LatestVersion = data [5];  			string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  			int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  			int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  			return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  		}  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: foreach (string Extension in LatestVersion.Split (Environment.NewLine.ToCharArray ())) {  	string[] data = Extension.Split (';');  	if (data.Length > 6) {  		if (data [3] == UniqueID) {  			LatestVersion = data [5];  			string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  			int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  			int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  			return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  		}  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (data.Length > 6) {  	if (data [3] == UniqueID) {  		LatestVersion = data [5];  		string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  		int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  		int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  		return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (data.Length > 6) {  	if (data [3] == UniqueID) {  		LatestVersion = data [5];  		string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  		int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  		int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  		return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (data.Length > 6) {  	if (data [3] == UniqueID) {  		LatestVersion = data [5];  		string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  		int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  		int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  		return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (data.Length > 6) {  	if (data [3] == UniqueID) {  		LatestVersion = data [5];  		string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  		int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  		int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  		return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (data.Length > 6) {  	if (data [3] == UniqueID) {  		LatestVersion = data [5];  		string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  		int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  		int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  		return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  	}  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (data [3] == UniqueID) {  	LatestVersion = data [5];  	string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  	int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  	int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  	return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (data [3] == UniqueID) {  	LatestVersion = data [5];  	string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  	int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  	int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  	return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (data [3] == UniqueID) {  	LatestVersion = data [5];  	string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  	int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  	int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  	return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: if (data [3] == UniqueID) {  	LatestVersion = data [5];  	string[] Latest = LatestVersion.Split ('.')' Current = Version.Split ('.');  	int LatestMajor = int.Parse (Latest [0])' LatestMinor = int.Parse (Latest [1])' LatestBuild = int.Parse (Latest [2]);  	int CurrentMajor = int.Parse (Current [0])' CurrentMinor = int.Parse (Current [1])' CurrentBuild = int.Parse (Current [2]);  	return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);  }  
Magic Number,CoMaNdO.Uptime,Uptime,F:\newReposMay17\DorCoMaNdO_ModBot\CoMaNdO.Uptime\Uptime.cs,UpdateCheck,The following statement contains a magic number: LatestVersion = data [5];  
