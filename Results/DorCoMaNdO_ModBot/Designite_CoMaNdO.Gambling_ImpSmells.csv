Implementation smell,Namespace,Class,File,Method,Description
Long Method,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The method has 174 lines of code.
Complex Method,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,Cyclomatic complexity of the method is 11
Long Statement,CoMaNdO.Gambling,Gambling,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,UpdateCheck,The length of the statement  "                                    return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild); " is 189.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The length of the statement  "                                            Chat.SendMessage("New betting pool opened! Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + "."); " is 139.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The length of the statement  "                                            Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"!bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc."); " is 159.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The length of the statement  "                            Chat.SendMessage("Invalid syntax. Open a betting pool with: !gamble open {MinBet} {MaxBet} {WinReward} {option1} {option2} ... {optionN} (space delimited options)"); " is 165.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The length of the statement  "                            lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : ""); " is 253.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The length of the statement  "                                    //Console.WriteLine("TESTING: getTotalBetsOn(" + i + ") = " + getTotalBetsOn(i) + " --- getTotalBets() = " + getTotalBets() + " ---  (double)betsOn(i)/totalBets() = " + (double)(getTotalBetsOn(i) / getTotalBets()) + " --- *100 = " + (double)(getTotalBetsOn(i) / getTotalBets()) * 100 + " --- Converted to a double = " + (double)((getTotalBetsOn(i) / getTotalBets()) * 100) + " --- Rounded double = " + Math.Round((double)((getTotalBetsOn(i) / getTotalBets()) * 100))); " is 468.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The length of the statement  "                                        string msg = " " + wins.ElementAt(i).Key + " - " + wins.ElementAt(i).Value + " (Bet " + bets[wins.ElementAt(i).Key].Value + ")"; " is 128.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The length of the statement  "                        Chat.SendMessage("Betting pool must be running and bets must be locked before you can specify a winner' lock the bets by using \"!gamble close\"."); " is 148.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The length of the statement  "                        Chat.SendMessage("Pick a winning option by typing \"!gamble winner #1\" if option 1 won' \"!gamble winner #2\" for option 2' etc."); " is 132.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Bet,The length of the statement  "                            lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : ""); " is 253.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Bet,The length of the statement  "                            Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc."); " is 158.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Bet,The length of the statement  "                            lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : ""); " is 253.
Long Statement,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,BetQueueHandler,The length of the statement  "                        lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + (i + 1 < Options.Count ? "' " : ""); " is 146.
Empty Catch Block,CoMaNdO.Gambling,Gambling,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,UpdateCheck,The method has an empty catch block.
Magic Number,CoMaNdO.Gambling,Gambling,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient())              {                  w.Proxy = null;                  try                  {                      LatestVersion = w.DownloadString("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");                      if (LatestVersion != "")                      {                          foreach (string Extension in LatestVersion.Split(Environment.NewLine.ToCharArray()))                          {                              string[] data = Extension.Split(';');                              if (data.Length > 6)                              {                                  if (data[3] == UniqueID)                                  {                                      LatestVersion = data[5];                                        string[] Latest = LatestVersion.Split('.')' Current = Version.Split('.');                                      int LatestMajor = int.Parse(Latest[0])' LatestMinor = int.Parse(Latest[1])' LatestBuild = int.Parse(Latest[2]);                                      int CurrentMajor = int.Parse(Current[0])' CurrentMinor = int.Parse(Current[1])' CurrentBuild = int.Parse(Current[2]);                                      return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);                                  }                              }                          }                      }                  }                  catch                  {                  }              }
Magic Number,CoMaNdO.Gambling,Gambling,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient())              {                  w.Proxy = null;                  try                  {                      LatestVersion = w.DownloadString("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");                      if (LatestVersion != "")                      {                          foreach (string Extension in LatestVersion.Split(Environment.NewLine.ToCharArray()))                          {                              string[] data = Extension.Split(';');                              if (data.Length > 6)                              {                                  if (data[3] == UniqueID)                                  {                                      LatestVersion = data[5];                                        string[] Latest = LatestVersion.Split('.')' Current = Version.Split('.');                                      int LatestMajor = int.Parse(Latest[0])' LatestMinor = int.Parse(Latest[1])' LatestBuild = int.Parse(Latest[2]);                                      int CurrentMajor = int.Parse(Current[0])' CurrentMinor = int.Parse(Current[1])' CurrentBuild = int.Parse(Current[2]);                                      return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);                                  }                              }                          }                      }                  }                  catch                  {                  }              }
Magic Number,CoMaNdO.Gambling,Gambling,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient())              {                  w.Proxy = null;                  try                  {                      LatestVersion = w.DownloadString("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");                      if (LatestVersion != "")                      {                          foreach (string Extension in LatestVersion.Split(Environment.NewLine.ToCharArray()))                          {                              string[] data = Extension.Split(';');                              if (data.Length > 6)                              {                                  if (data[3] == UniqueID)                                  {                                      LatestVersion = data[5];                                        string[] Latest = LatestVersion.Split('.')' Current = Version.Split('.');                                      int LatestMajor = int.Parse(Latest[0])' LatestMinor = int.Parse(Latest[1])' LatestBuild = int.Parse(Latest[2]);                                      int CurrentMajor = int.Parse(Current[0])' CurrentMinor = int.Parse(Current[1])' CurrentBuild = int.Parse(Current[2]);                                      return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);                                  }                              }                          }                      }                  }                  catch                  {                  }              }
Magic Number,CoMaNdO.Gambling,Gambling,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient())              {                  w.Proxy = null;                  try                  {                      LatestVersion = w.DownloadString("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");                      if (LatestVersion != "")                      {                          foreach (string Extension in LatestVersion.Split(Environment.NewLine.ToCharArray()))                          {                              string[] data = Extension.Split(';');                              if (data.Length > 6)                              {                                  if (data[3] == UniqueID)                                  {                                      LatestVersion = data[5];                                        string[] Latest = LatestVersion.Split('.')' Current = Version.Split('.');                                      int LatestMajor = int.Parse(Latest[0])' LatestMinor = int.Parse(Latest[1])' LatestBuild = int.Parse(Latest[2]);                                      int CurrentMajor = int.Parse(Current[0])' CurrentMinor = int.Parse(Current[1])' CurrentBuild = int.Parse(Current[2]);                                      return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);                                  }                              }                          }                      }                  }                  catch                  {                  }              }
Magic Number,CoMaNdO.Gambling,Gambling,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,UpdateCheck,The following statement contains a magic number: using (WebClient w = new WebClient())              {                  w.Proxy = null;                  try                  {                      LatestVersion = w.DownloadString("https://dl.dropboxusercontent.com/u/60356733/ModBot/Extensions/Extensions.txt");                      if (LatestVersion != "")                      {                          foreach (string Extension in LatestVersion.Split(Environment.NewLine.ToCharArray()))                          {                              string[] data = Extension.Split(';');                              if (data.Length > 6)                              {                                  if (data[3] == UniqueID)                                  {                                      LatestVersion = data[5];                                        string[] Latest = LatestVersion.Split('.')' Current = Version.Split('.');                                      int LatestMajor = int.Parse(Latest[0])' LatestMinor = int.Parse(Latest[1])' LatestBuild = int.Parse(Latest[2]);                                      int CurrentMajor = int.Parse(Current[0])' CurrentMinor = int.Parse(Current[1])' CurrentBuild = int.Parse(Current[2]);                                      return (LatestMajor > CurrentMajor || LatestMajor == CurrentMajor && LatestMinor > CurrentMinor || LatestMajor == CurrentMajor && LatestMinor == CurrentMinor && LatestBuild > CurrentBuild);                                  }                              }                          }                      }                  }                  catch                  {                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,placeBet,The following statement contains a magic number: if (Running && !Locked)              {                  lock (bets)                  {                      lock (FalseEntries)                      {                          lock (Options)                          {                              if (!FalseEntries.ContainsKey(user) && !bets.ContainsKey(user)) BetQueue.Change(10000' Timeout.Infinite);                                if (Options.Contains(option))                              {                                  if (amount >= MinBet && amount <= MaxBet)                                  {                                      int paid = 0;                                      if (bets.ContainsKey(user)) paid = bets[user].Value;                                        if (Currency.Check(user) + paid >= amount)                                      {                                          if (bets.ContainsKey(user)) bets.Remove(user);                                            Currency.Add(user' paid);                                          Currency.Remove(user' amount);                                          bets.Add(user' new KeyValuePair<string' int>(option' amount));                                            if (FalseEntries.ContainsKey(user)) FalseEntries.Remove(user);                                            return true;                                      }                                      else                                      {                                          if (!FalseEntries.ContainsKey(user)) FalseEntries.Add(user' 3);                                      }                                  }                                  else                                  {                                      if (!FalseEntries.ContainsKey(user)) FalseEntries.Add(user' 2);                                  }                              }                              else                              {                                  if (!FalseEntries.ContainsKey(user)) FalseEntries.Add(user' 1);                              }                          }                      }                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,placeBet,The following statement contains a magic number: if (Running && !Locked)              {                  lock (bets)                  {                      lock (FalseEntries)                      {                          lock (Options)                          {                              if (!FalseEntries.ContainsKey(user) && !bets.ContainsKey(user)) BetQueue.Change(10000' Timeout.Infinite);                                if (Options.Contains(option))                              {                                  if (amount >= MinBet && amount <= MaxBet)                                  {                                      int paid = 0;                                      if (bets.ContainsKey(user)) paid = bets[user].Value;                                        if (Currency.Check(user) + paid >= amount)                                      {                                          if (bets.ContainsKey(user)) bets.Remove(user);                                            Currency.Add(user' paid);                                          Currency.Remove(user' amount);                                          bets.Add(user' new KeyValuePair<string' int>(option' amount));                                            if (FalseEntries.ContainsKey(user)) FalseEntries.Remove(user);                                            return true;                                      }                                      else                                      {                                          if (!FalseEntries.ContainsKey(user)) FalseEntries.Add(user' 3);                                      }                                  }                                  else                                  {                                      if (!FalseEntries.ContainsKey(user)) FalseEntries.Add(user' 2);                                  }                              }                              else                              {                                  if (!FalseEntries.ContainsKey(user)) FalseEntries.Add(user' 1);                              }                          }                      }                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,placeBet,The following statement contains a magic number: if (Running && !Locked)              {                  lock (bets)                  {                      lock (FalseEntries)                      {                          lock (Options)                          {                              if (!FalseEntries.ContainsKey(user) && !bets.ContainsKey(user)) BetQueue.Change(10000' Timeout.Infinite);                                if (Options.Contains(option))                              {                                  if (amount >= MinBet && amount <= MaxBet)                                  {                                      int paid = 0;                                      if (bets.ContainsKey(user)) paid = bets[user].Value;                                        if (Currency.Check(user) + paid >= amount)                                      {                                          if (bets.ContainsKey(user)) bets.Remove(user);                                            Currency.Add(user' paid);                                          Currency.Remove(user' amount);                                          bets.Add(user' new KeyValuePair<string' int>(option' amount));                                            if (FalseEntries.ContainsKey(user)) FalseEntries.Remove(user);                                            return true;                                      }                                      else                                      {                                          if (!FalseEntries.ContainsKey(user)) FalseEntries.Add(user' 3);                                      }                                  }                                  else                                  {                                      if (!FalseEntries.ContainsKey(user)) FalseEntries.Add(user' 2);                                  }                              }                              else                              {                                  if (!FalseEntries.ContainsKey(user)) FalseEntries.Add(user' 1);                              }                          }                      }                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The following statement contains a magic number: if (args.Length > 0)              {                  if (args[0].ToLower() == "open" && args.Length > 4)                  {                      if (!Running)                      {                          int min' max' reward;                          if (int.TryParse(args[1]' out min) && int.TryParse(args[2]' out max) && int.TryParse(args[3]' out reward))                          {                              if (min > 0)                              {                                  if (max >= min)                                  {                                      if (reward >= 0)                                      {                                          List<string> lOptions = buildBetOptions(args' 4);                                          if (lOptions.Count > 1)                                          {                                              LastUsedHelp = Api.GetUnixTimeNow();                                                CreatePool(min' max' reward' lOptions);                                              Chat.SendMessage("New betting pool opened! Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                                              string temp = "Betting open for: ";                                              for (int i = 0; i < lOptions.Count; i++)                                              {                                                  temp += "(" + (i + 1).ToString() + ") " + lOptions[i];                                                  if (i + 1 < lOptions.Count)                                                  {                                                      temp += "' ";                                                  }                                              }                                              Chat.SendMessage(temp + ".");                                              Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"!bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc.");                                          }                                          else                                          {                                              Chat.SendMessage("You need at least two betting options in order to start a betting pool!");                                          }                                      }                                      else                                      {                                          Chat.SendMessage("WinReward can not be lower than 0!");                                      }                                  }                                  else                                  {                                      Chat.SendMessage("MaxBet can not be lower than MinBet!");                                  }                              }                              else                              {                                  Chat.SendMessage("MinBet can not be lower than 1!");                              }                          }                          else                          {                              Chat.SendMessage("Invalid syntax. Open a betting pool with: !gamble open {MinBet} {MaxBet} {WinReward} {option1} {option2} ... {optionN} (space delimited options)");                          }                      }                      else                      {                          Chat.SendMessage("Betting pool already opened. Close or cancel the current one before starting a new one.");                      }                  }                  else if (args[0].ToLower() == "close")                  {                      if (Running)                      {                          if (!Locked)                          {                              Locked = true;                              BetQueue.Change(0' Timeout.Infinite);                              Chat.SendMessage("Bets locked in. Good luck everyone!");                              string temp = "The following options were open for betting: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                          }                          else                          {                              Chat.SendMessage("Pool is already locked.");                          }                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }                  else if (args[0].ToLower() == "winner" && args.Length > 1)                  {                      if (Running && Locked)                      {                          string option = "";                          List<string> compiledargs = Commands.GetArgs(args' 1).ToList();                          if (compiledargs.Count > 0) option = compiledargs[0];                            if (option.ToLower() == args[1].ToLower())                          {                              if (option.StartsWith("#"))                              {                                  int optionnumber = 0;                                  if (int.TryParse(option.Substring(1)' out optionnumber))                                  {                                      option = GetOptionFromNumber(optionnumber);                                  }                              }                          }                            lock (Options)                          {                              if (Options.Contains(option))                              {                                  closePool(option);                                  Chat.SendMessage("Betting pool closed! A total of " + getTotalBets() + " " + Currency.Name + " were bet.");                                  string output = "Bets for:";                                  for (int i = 0; i < Options.Count; i++)                                  {                                      double x = ((double)getTotalBetsOn(Options[i]) / getTotalBets()) * 100;                                      output += " " + Options[i] + " - " + getNumberOfBets(Options[i]) + " (" + Math.Round(x) + "%);";                                      //Console.WriteLine("TESTING: getTotalBetsOn(" + i + ") = " + getTotalBetsOn(i) + " --- getTotalBets() = " + getTotalBets() + " ---  (double)betsOn(i)/totalBets() = " + (double)(getTotalBetsOn(i) / getTotalBets()) + " --- *100 = " + (double)(getTotalBetsOn(i) / getTotalBets()) * 100 + " --- Converted to a double = " + (double)((getTotalBetsOn(i) / getTotalBets()) * 100) + " --- Rounded double = " + Math.Round((double)((getTotalBetsOn(i) / getTotalBets()) * 100)));                                  }                                  Chat.SendMessage(output);                                  Dictionary<string' int> wins = Winners;                                  output = "Winners:";                                  if (wins.Count == 0)                                  {                                      output = "No one won!";                                      //output += " No One!";                                  }                                  else if (wins.Count <= 20)                                  {                                      for (int i = 0; i < wins.Count; i++)                                      {                                          Currency.Add(wins.ElementAt(i).Key' wins.ElementAt(i).Value);                                          string msg = " " + wins.ElementAt(i).Key + " - " + wins.ElementAt(i).Value + " (Bet " + bets[wins.ElementAt(i).Key].Value + ")";                                          if (output.Length + msg.Length > 996)                                          {                                              Chat.SendMessage(output);                                              output = "Winners:";                                          }                                          output += msg;                                      }                                  }                                  else                                  {                                      output = wins.Count + " gamblers have won!";                                  }                                    Chat.SendMessage(output);                                    Clear();                              }                              else                              {                                  Chat.SendMessage("The option you specified is not available in the current pool!");                              }                          }                      }                      else                      {                          Chat.SendMessage("Betting pool must be running and bets must be locked before you can specify a winner' lock the bets by using \"!gamble close\".");                          Chat.SendMessage("Pick a winning option by typing \"!gamble winner #1\" if option 1 won' \"!gamble winner #2\" for option 2' etc.");                          Chat.SendMessage("You can type \"!bet help\" to get a list of the options as a reminder.");                      }                  }                  else if (args[0].ToLower() == "cancel")                  {                      if (Running)                      {                          Cancel();                          Chat.SendMessage("Betting pool canceled. All bets refunded");                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The following statement contains a magic number: if (args.Length > 0)              {                  if (args[0].ToLower() == "open" && args.Length > 4)                  {                      if (!Running)                      {                          int min' max' reward;                          if (int.TryParse(args[1]' out min) && int.TryParse(args[2]' out max) && int.TryParse(args[3]' out reward))                          {                              if (min > 0)                              {                                  if (max >= min)                                  {                                      if (reward >= 0)                                      {                                          List<string> lOptions = buildBetOptions(args' 4);                                          if (lOptions.Count > 1)                                          {                                              LastUsedHelp = Api.GetUnixTimeNow();                                                CreatePool(min' max' reward' lOptions);                                              Chat.SendMessage("New betting pool opened! Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                                              string temp = "Betting open for: ";                                              for (int i = 0; i < lOptions.Count; i++)                                              {                                                  temp += "(" + (i + 1).ToString() + ") " + lOptions[i];                                                  if (i + 1 < lOptions.Count)                                                  {                                                      temp += "' ";                                                  }                                              }                                              Chat.SendMessage(temp + ".");                                              Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"!bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc.");                                          }                                          else                                          {                                              Chat.SendMessage("You need at least two betting options in order to start a betting pool!");                                          }                                      }                                      else                                      {                                          Chat.SendMessage("WinReward can not be lower than 0!");                                      }                                  }                                  else                                  {                                      Chat.SendMessage("MaxBet can not be lower than MinBet!");                                  }                              }                              else                              {                                  Chat.SendMessage("MinBet can not be lower than 1!");                              }                          }                          else                          {                              Chat.SendMessage("Invalid syntax. Open a betting pool with: !gamble open {MinBet} {MaxBet} {WinReward} {option1} {option2} ... {optionN} (space delimited options)");                          }                      }                      else                      {                          Chat.SendMessage("Betting pool already opened. Close or cancel the current one before starting a new one.");                      }                  }                  else if (args[0].ToLower() == "close")                  {                      if (Running)                      {                          if (!Locked)                          {                              Locked = true;                              BetQueue.Change(0' Timeout.Infinite);                              Chat.SendMessage("Bets locked in. Good luck everyone!");                              string temp = "The following options were open for betting: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                          }                          else                          {                              Chat.SendMessage("Pool is already locked.");                          }                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }                  else if (args[0].ToLower() == "winner" && args.Length > 1)                  {                      if (Running && Locked)                      {                          string option = "";                          List<string> compiledargs = Commands.GetArgs(args' 1).ToList();                          if (compiledargs.Count > 0) option = compiledargs[0];                            if (option.ToLower() == args[1].ToLower())                          {                              if (option.StartsWith("#"))                              {                                  int optionnumber = 0;                                  if (int.TryParse(option.Substring(1)' out optionnumber))                                  {                                      option = GetOptionFromNumber(optionnumber);                                  }                              }                          }                            lock (Options)                          {                              if (Options.Contains(option))                              {                                  closePool(option);                                  Chat.SendMessage("Betting pool closed! A total of " + getTotalBets() + " " + Currency.Name + " were bet.");                                  string output = "Bets for:";                                  for (int i = 0; i < Options.Count; i++)                                  {                                      double x = ((double)getTotalBetsOn(Options[i]) / getTotalBets()) * 100;                                      output += " " + Options[i] + " - " + getNumberOfBets(Options[i]) + " (" + Math.Round(x) + "%);";                                      //Console.WriteLine("TESTING: getTotalBetsOn(" + i + ") = " + getTotalBetsOn(i) + " --- getTotalBets() = " + getTotalBets() + " ---  (double)betsOn(i)/totalBets() = " + (double)(getTotalBetsOn(i) / getTotalBets()) + " --- *100 = " + (double)(getTotalBetsOn(i) / getTotalBets()) * 100 + " --- Converted to a double = " + (double)((getTotalBetsOn(i) / getTotalBets()) * 100) + " --- Rounded double = " + Math.Round((double)((getTotalBetsOn(i) / getTotalBets()) * 100)));                                  }                                  Chat.SendMessage(output);                                  Dictionary<string' int> wins = Winners;                                  output = "Winners:";                                  if (wins.Count == 0)                                  {                                      output = "No one won!";                                      //output += " No One!";                                  }                                  else if (wins.Count <= 20)                                  {                                      for (int i = 0; i < wins.Count; i++)                                      {                                          Currency.Add(wins.ElementAt(i).Key' wins.ElementAt(i).Value);                                          string msg = " " + wins.ElementAt(i).Key + " - " + wins.ElementAt(i).Value + " (Bet " + bets[wins.ElementAt(i).Key].Value + ")";                                          if (output.Length + msg.Length > 996)                                          {                                              Chat.SendMessage(output);                                              output = "Winners:";                                          }                                          output += msg;                                      }                                  }                                  else                                  {                                      output = wins.Count + " gamblers have won!";                                  }                                    Chat.SendMessage(output);                                    Clear();                              }                              else                              {                                  Chat.SendMessage("The option you specified is not available in the current pool!");                              }                          }                      }                      else                      {                          Chat.SendMessage("Betting pool must be running and bets must be locked before you can specify a winner' lock the bets by using \"!gamble close\".");                          Chat.SendMessage("Pick a winning option by typing \"!gamble winner #1\" if option 1 won' \"!gamble winner #2\" for option 2' etc.");                          Chat.SendMessage("You can type \"!bet help\" to get a list of the options as a reminder.");                      }                  }                  else if (args[0].ToLower() == "cancel")                  {                      if (Running)                      {                          Cancel();                          Chat.SendMessage("Betting pool canceled. All bets refunded");                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The following statement contains a magic number: if (args.Length > 0)              {                  if (args[0].ToLower() == "open" && args.Length > 4)                  {                      if (!Running)                      {                          int min' max' reward;                          if (int.TryParse(args[1]' out min) && int.TryParse(args[2]' out max) && int.TryParse(args[3]' out reward))                          {                              if (min > 0)                              {                                  if (max >= min)                                  {                                      if (reward >= 0)                                      {                                          List<string> lOptions = buildBetOptions(args' 4);                                          if (lOptions.Count > 1)                                          {                                              LastUsedHelp = Api.GetUnixTimeNow();                                                CreatePool(min' max' reward' lOptions);                                              Chat.SendMessage("New betting pool opened! Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                                              string temp = "Betting open for: ";                                              for (int i = 0; i < lOptions.Count; i++)                                              {                                                  temp += "(" + (i + 1).ToString() + ") " + lOptions[i];                                                  if (i + 1 < lOptions.Count)                                                  {                                                      temp += "' ";                                                  }                                              }                                              Chat.SendMessage(temp + ".");                                              Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"!bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc.");                                          }                                          else                                          {                                              Chat.SendMessage("You need at least two betting options in order to start a betting pool!");                                          }                                      }                                      else                                      {                                          Chat.SendMessage("WinReward can not be lower than 0!");                                      }                                  }                                  else                                  {                                      Chat.SendMessage("MaxBet can not be lower than MinBet!");                                  }                              }                              else                              {                                  Chat.SendMessage("MinBet can not be lower than 1!");                              }                          }                          else                          {                              Chat.SendMessage("Invalid syntax. Open a betting pool with: !gamble open {MinBet} {MaxBet} {WinReward} {option1} {option2} ... {optionN} (space delimited options)");                          }                      }                      else                      {                          Chat.SendMessage("Betting pool already opened. Close or cancel the current one before starting a new one.");                      }                  }                  else if (args[0].ToLower() == "close")                  {                      if (Running)                      {                          if (!Locked)                          {                              Locked = true;                              BetQueue.Change(0' Timeout.Infinite);                              Chat.SendMessage("Bets locked in. Good luck everyone!");                              string temp = "The following options were open for betting: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                          }                          else                          {                              Chat.SendMessage("Pool is already locked.");                          }                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }                  else if (args[0].ToLower() == "winner" && args.Length > 1)                  {                      if (Running && Locked)                      {                          string option = "";                          List<string> compiledargs = Commands.GetArgs(args' 1).ToList();                          if (compiledargs.Count > 0) option = compiledargs[0];                            if (option.ToLower() == args[1].ToLower())                          {                              if (option.StartsWith("#"))                              {                                  int optionnumber = 0;                                  if (int.TryParse(option.Substring(1)' out optionnumber))                                  {                                      option = GetOptionFromNumber(optionnumber);                                  }                              }                          }                            lock (Options)                          {                              if (Options.Contains(option))                              {                                  closePool(option);                                  Chat.SendMessage("Betting pool closed! A total of " + getTotalBets() + " " + Currency.Name + " were bet.");                                  string output = "Bets for:";                                  for (int i = 0; i < Options.Count; i++)                                  {                                      double x = ((double)getTotalBetsOn(Options[i]) / getTotalBets()) * 100;                                      output += " " + Options[i] + " - " + getNumberOfBets(Options[i]) + " (" + Math.Round(x) + "%);";                                      //Console.WriteLine("TESTING: getTotalBetsOn(" + i + ") = " + getTotalBetsOn(i) + " --- getTotalBets() = " + getTotalBets() + " ---  (double)betsOn(i)/totalBets() = " + (double)(getTotalBetsOn(i) / getTotalBets()) + " --- *100 = " + (double)(getTotalBetsOn(i) / getTotalBets()) * 100 + " --- Converted to a double = " + (double)((getTotalBetsOn(i) / getTotalBets()) * 100) + " --- Rounded double = " + Math.Round((double)((getTotalBetsOn(i) / getTotalBets()) * 100)));                                  }                                  Chat.SendMessage(output);                                  Dictionary<string' int> wins = Winners;                                  output = "Winners:";                                  if (wins.Count == 0)                                  {                                      output = "No one won!";                                      //output += " No One!";                                  }                                  else if (wins.Count <= 20)                                  {                                      for (int i = 0; i < wins.Count; i++)                                      {                                          Currency.Add(wins.ElementAt(i).Key' wins.ElementAt(i).Value);                                          string msg = " " + wins.ElementAt(i).Key + " - " + wins.ElementAt(i).Value + " (Bet " + bets[wins.ElementAt(i).Key].Value + ")";                                          if (output.Length + msg.Length > 996)                                          {                                              Chat.SendMessage(output);                                              output = "Winners:";                                          }                                          output += msg;                                      }                                  }                                  else                                  {                                      output = wins.Count + " gamblers have won!";                                  }                                    Chat.SendMessage(output);                                    Clear();                              }                              else                              {                                  Chat.SendMessage("The option you specified is not available in the current pool!");                              }                          }                      }                      else                      {                          Chat.SendMessage("Betting pool must be running and bets must be locked before you can specify a winner' lock the bets by using \"!gamble close\".");                          Chat.SendMessage("Pick a winning option by typing \"!gamble winner #1\" if option 1 won' \"!gamble winner #2\" for option 2' etc.");                          Chat.SendMessage("You can type \"!bet help\" to get a list of the options as a reminder.");                      }                  }                  else if (args[0].ToLower() == "cancel")                  {                      if (Running)                      {                          Cancel();                          Chat.SendMessage("Betting pool canceled. All bets refunded");                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The following statement contains a magic number: if (args.Length > 0)              {                  if (args[0].ToLower() == "open" && args.Length > 4)                  {                      if (!Running)                      {                          int min' max' reward;                          if (int.TryParse(args[1]' out min) && int.TryParse(args[2]' out max) && int.TryParse(args[3]' out reward))                          {                              if (min > 0)                              {                                  if (max >= min)                                  {                                      if (reward >= 0)                                      {                                          List<string> lOptions = buildBetOptions(args' 4);                                          if (lOptions.Count > 1)                                          {                                              LastUsedHelp = Api.GetUnixTimeNow();                                                CreatePool(min' max' reward' lOptions);                                              Chat.SendMessage("New betting pool opened! Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                                              string temp = "Betting open for: ";                                              for (int i = 0; i < lOptions.Count; i++)                                              {                                                  temp += "(" + (i + 1).ToString() + ") " + lOptions[i];                                                  if (i + 1 < lOptions.Count)                                                  {                                                      temp += "' ";                                                  }                                              }                                              Chat.SendMessage(temp + ".");                                              Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"!bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc.");                                          }                                          else                                          {                                              Chat.SendMessage("You need at least two betting options in order to start a betting pool!");                                          }                                      }                                      else                                      {                                          Chat.SendMessage("WinReward can not be lower than 0!");                                      }                                  }                                  else                                  {                                      Chat.SendMessage("MaxBet can not be lower than MinBet!");                                  }                              }                              else                              {                                  Chat.SendMessage("MinBet can not be lower than 1!");                              }                          }                          else                          {                              Chat.SendMessage("Invalid syntax. Open a betting pool with: !gamble open {MinBet} {MaxBet} {WinReward} {option1} {option2} ... {optionN} (space delimited options)");                          }                      }                      else                      {                          Chat.SendMessage("Betting pool already opened. Close or cancel the current one before starting a new one.");                      }                  }                  else if (args[0].ToLower() == "close")                  {                      if (Running)                      {                          if (!Locked)                          {                              Locked = true;                              BetQueue.Change(0' Timeout.Infinite);                              Chat.SendMessage("Bets locked in. Good luck everyone!");                              string temp = "The following options were open for betting: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                          }                          else                          {                              Chat.SendMessage("Pool is already locked.");                          }                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }                  else if (args[0].ToLower() == "winner" && args.Length > 1)                  {                      if (Running && Locked)                      {                          string option = "";                          List<string> compiledargs = Commands.GetArgs(args' 1).ToList();                          if (compiledargs.Count > 0) option = compiledargs[0];                            if (option.ToLower() == args[1].ToLower())                          {                              if (option.StartsWith("#"))                              {                                  int optionnumber = 0;                                  if (int.TryParse(option.Substring(1)' out optionnumber))                                  {                                      option = GetOptionFromNumber(optionnumber);                                  }                              }                          }                            lock (Options)                          {                              if (Options.Contains(option))                              {                                  closePool(option);                                  Chat.SendMessage("Betting pool closed! A total of " + getTotalBets() + " " + Currency.Name + " were bet.");                                  string output = "Bets for:";                                  for (int i = 0; i < Options.Count; i++)                                  {                                      double x = ((double)getTotalBetsOn(Options[i]) / getTotalBets()) * 100;                                      output += " " + Options[i] + " - " + getNumberOfBets(Options[i]) + " (" + Math.Round(x) + "%);";                                      //Console.WriteLine("TESTING: getTotalBetsOn(" + i + ") = " + getTotalBetsOn(i) + " --- getTotalBets() = " + getTotalBets() + " ---  (double)betsOn(i)/totalBets() = " + (double)(getTotalBetsOn(i) / getTotalBets()) + " --- *100 = " + (double)(getTotalBetsOn(i) / getTotalBets()) * 100 + " --- Converted to a double = " + (double)((getTotalBetsOn(i) / getTotalBets()) * 100) + " --- Rounded double = " + Math.Round((double)((getTotalBetsOn(i) / getTotalBets()) * 100)));                                  }                                  Chat.SendMessage(output);                                  Dictionary<string' int> wins = Winners;                                  output = "Winners:";                                  if (wins.Count == 0)                                  {                                      output = "No one won!";                                      //output += " No One!";                                  }                                  else if (wins.Count <= 20)                                  {                                      for (int i = 0; i < wins.Count; i++)                                      {                                          Currency.Add(wins.ElementAt(i).Key' wins.ElementAt(i).Value);                                          string msg = " " + wins.ElementAt(i).Key + " - " + wins.ElementAt(i).Value + " (Bet " + bets[wins.ElementAt(i).Key].Value + ")";                                          if (output.Length + msg.Length > 996)                                          {                                              Chat.SendMessage(output);                                              output = "Winners:";                                          }                                          output += msg;                                      }                                  }                                  else                                  {                                      output = wins.Count + " gamblers have won!";                                  }                                    Chat.SendMessage(output);                                    Clear();                              }                              else                              {                                  Chat.SendMessage("The option you specified is not available in the current pool!");                              }                          }                      }                      else                      {                          Chat.SendMessage("Betting pool must be running and bets must be locked before you can specify a winner' lock the bets by using \"!gamble close\".");                          Chat.SendMessage("Pick a winning option by typing \"!gamble winner #1\" if option 1 won' \"!gamble winner #2\" for option 2' etc.");                          Chat.SendMessage("You can type \"!bet help\" to get a list of the options as a reminder.");                      }                  }                  else if (args[0].ToLower() == "cancel")                  {                      if (Running)                      {                          Cancel();                          Chat.SendMessage("Betting pool canceled. All bets refunded");                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The following statement contains a magic number: if (args.Length > 0)              {                  if (args[0].ToLower() == "open" && args.Length > 4)                  {                      if (!Running)                      {                          int min' max' reward;                          if (int.TryParse(args[1]' out min) && int.TryParse(args[2]' out max) && int.TryParse(args[3]' out reward))                          {                              if (min > 0)                              {                                  if (max >= min)                                  {                                      if (reward >= 0)                                      {                                          List<string> lOptions = buildBetOptions(args' 4);                                          if (lOptions.Count > 1)                                          {                                              LastUsedHelp = Api.GetUnixTimeNow();                                                CreatePool(min' max' reward' lOptions);                                              Chat.SendMessage("New betting pool opened! Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                                              string temp = "Betting open for: ";                                              for (int i = 0; i < lOptions.Count; i++)                                              {                                                  temp += "(" + (i + 1).ToString() + ") " + lOptions[i];                                                  if (i + 1 < lOptions.Count)                                                  {                                                      temp += "' ";                                                  }                                              }                                              Chat.SendMessage(temp + ".");                                              Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"!bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc.");                                          }                                          else                                          {                                              Chat.SendMessage("You need at least two betting options in order to start a betting pool!");                                          }                                      }                                      else                                      {                                          Chat.SendMessage("WinReward can not be lower than 0!");                                      }                                  }                                  else                                  {                                      Chat.SendMessage("MaxBet can not be lower than MinBet!");                                  }                              }                              else                              {                                  Chat.SendMessage("MinBet can not be lower than 1!");                              }                          }                          else                          {                              Chat.SendMessage("Invalid syntax. Open a betting pool with: !gamble open {MinBet} {MaxBet} {WinReward} {option1} {option2} ... {optionN} (space delimited options)");                          }                      }                      else                      {                          Chat.SendMessage("Betting pool already opened. Close or cancel the current one before starting a new one.");                      }                  }                  else if (args[0].ToLower() == "close")                  {                      if (Running)                      {                          if (!Locked)                          {                              Locked = true;                              BetQueue.Change(0' Timeout.Infinite);                              Chat.SendMessage("Bets locked in. Good luck everyone!");                              string temp = "The following options were open for betting: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                          }                          else                          {                              Chat.SendMessage("Pool is already locked.");                          }                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }                  else if (args[0].ToLower() == "winner" && args.Length > 1)                  {                      if (Running && Locked)                      {                          string option = "";                          List<string> compiledargs = Commands.GetArgs(args' 1).ToList();                          if (compiledargs.Count > 0) option = compiledargs[0];                            if (option.ToLower() == args[1].ToLower())                          {                              if (option.StartsWith("#"))                              {                                  int optionnumber = 0;                                  if (int.TryParse(option.Substring(1)' out optionnumber))                                  {                                      option = GetOptionFromNumber(optionnumber);                                  }                              }                          }                            lock (Options)                          {                              if (Options.Contains(option))                              {                                  closePool(option);                                  Chat.SendMessage("Betting pool closed! A total of " + getTotalBets() + " " + Currency.Name + " were bet.");                                  string output = "Bets for:";                                  for (int i = 0; i < Options.Count; i++)                                  {                                      double x = ((double)getTotalBetsOn(Options[i]) / getTotalBets()) * 100;                                      output += " " + Options[i] + " - " + getNumberOfBets(Options[i]) + " (" + Math.Round(x) + "%);";                                      //Console.WriteLine("TESTING: getTotalBetsOn(" + i + ") = " + getTotalBetsOn(i) + " --- getTotalBets() = " + getTotalBets() + " ---  (double)betsOn(i)/totalBets() = " + (double)(getTotalBetsOn(i) / getTotalBets()) + " --- *100 = " + (double)(getTotalBetsOn(i) / getTotalBets()) * 100 + " --- Converted to a double = " + (double)((getTotalBetsOn(i) / getTotalBets()) * 100) + " --- Rounded double = " + Math.Round((double)((getTotalBetsOn(i) / getTotalBets()) * 100)));                                  }                                  Chat.SendMessage(output);                                  Dictionary<string' int> wins = Winners;                                  output = "Winners:";                                  if (wins.Count == 0)                                  {                                      output = "No one won!";                                      //output += " No One!";                                  }                                  else if (wins.Count <= 20)                                  {                                      for (int i = 0; i < wins.Count; i++)                                      {                                          Currency.Add(wins.ElementAt(i).Key' wins.ElementAt(i).Value);                                          string msg = " " + wins.ElementAt(i).Key + " - " + wins.ElementAt(i).Value + " (Bet " + bets[wins.ElementAt(i).Key].Value + ")";                                          if (output.Length + msg.Length > 996)                                          {                                              Chat.SendMessage(output);                                              output = "Winners:";                                          }                                          output += msg;                                      }                                  }                                  else                                  {                                      output = wins.Count + " gamblers have won!";                                  }                                    Chat.SendMessage(output);                                    Clear();                              }                              else                              {                                  Chat.SendMessage("The option you specified is not available in the current pool!");                              }                          }                      }                      else                      {                          Chat.SendMessage("Betting pool must be running and bets must be locked before you can specify a winner' lock the bets by using \"!gamble close\".");                          Chat.SendMessage("Pick a winning option by typing \"!gamble winner #1\" if option 1 won' \"!gamble winner #2\" for option 2' etc.");                          Chat.SendMessage("You can type \"!bet help\" to get a list of the options as a reminder.");                      }                  }                  else if (args[0].ToLower() == "cancel")                  {                      if (Running)                      {                          Cancel();                          Chat.SendMessage("Betting pool canceled. All bets refunded");                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The following statement contains a magic number: if (args.Length > 0)              {                  if (args[0].ToLower() == "open" && args.Length > 4)                  {                      if (!Running)                      {                          int min' max' reward;                          if (int.TryParse(args[1]' out min) && int.TryParse(args[2]' out max) && int.TryParse(args[3]' out reward))                          {                              if (min > 0)                              {                                  if (max >= min)                                  {                                      if (reward >= 0)                                      {                                          List<string> lOptions = buildBetOptions(args' 4);                                          if (lOptions.Count > 1)                                          {                                              LastUsedHelp = Api.GetUnixTimeNow();                                                CreatePool(min' max' reward' lOptions);                                              Chat.SendMessage("New betting pool opened! Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                                              string temp = "Betting open for: ";                                              for (int i = 0; i < lOptions.Count; i++)                                              {                                                  temp += "(" + (i + 1).ToString() + ") " + lOptions[i];                                                  if (i + 1 < lOptions.Count)                                                  {                                                      temp += "' ";                                                  }                                              }                                              Chat.SendMessage(temp + ".");                                              Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"!bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc.");                                          }                                          else                                          {                                              Chat.SendMessage("You need at least two betting options in order to start a betting pool!");                                          }                                      }                                      else                                      {                                          Chat.SendMessage("WinReward can not be lower than 0!");                                      }                                  }                                  else                                  {                                      Chat.SendMessage("MaxBet can not be lower than MinBet!");                                  }                              }                              else                              {                                  Chat.SendMessage("MinBet can not be lower than 1!");                              }                          }                          else                          {                              Chat.SendMessage("Invalid syntax. Open a betting pool with: !gamble open {MinBet} {MaxBet} {WinReward} {option1} {option2} ... {optionN} (space delimited options)");                          }                      }                      else                      {                          Chat.SendMessage("Betting pool already opened. Close or cancel the current one before starting a new one.");                      }                  }                  else if (args[0].ToLower() == "close")                  {                      if (Running)                      {                          if (!Locked)                          {                              Locked = true;                              BetQueue.Change(0' Timeout.Infinite);                              Chat.SendMessage("Bets locked in. Good luck everyone!");                              string temp = "The following options were open for betting: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                          }                          else                          {                              Chat.SendMessage("Pool is already locked.");                          }                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }                  else if (args[0].ToLower() == "winner" && args.Length > 1)                  {                      if (Running && Locked)                      {                          string option = "";                          List<string> compiledargs = Commands.GetArgs(args' 1).ToList();                          if (compiledargs.Count > 0) option = compiledargs[0];                            if (option.ToLower() == args[1].ToLower())                          {                              if (option.StartsWith("#"))                              {                                  int optionnumber = 0;                                  if (int.TryParse(option.Substring(1)' out optionnumber))                                  {                                      option = GetOptionFromNumber(optionnumber);                                  }                              }                          }                            lock (Options)                          {                              if (Options.Contains(option))                              {                                  closePool(option);                                  Chat.SendMessage("Betting pool closed! A total of " + getTotalBets() + " " + Currency.Name + " were bet.");                                  string output = "Bets for:";                                  for (int i = 0; i < Options.Count; i++)                                  {                                      double x = ((double)getTotalBetsOn(Options[i]) / getTotalBets()) * 100;                                      output += " " + Options[i] + " - " + getNumberOfBets(Options[i]) + " (" + Math.Round(x) + "%);";                                      //Console.WriteLine("TESTING: getTotalBetsOn(" + i + ") = " + getTotalBetsOn(i) + " --- getTotalBets() = " + getTotalBets() + " ---  (double)betsOn(i)/totalBets() = " + (double)(getTotalBetsOn(i) / getTotalBets()) + " --- *100 = " + (double)(getTotalBetsOn(i) / getTotalBets()) * 100 + " --- Converted to a double = " + (double)((getTotalBetsOn(i) / getTotalBets()) * 100) + " --- Rounded double = " + Math.Round((double)((getTotalBetsOn(i) / getTotalBets()) * 100)));                                  }                                  Chat.SendMessage(output);                                  Dictionary<string' int> wins = Winners;                                  output = "Winners:";                                  if (wins.Count == 0)                                  {                                      output = "No one won!";                                      //output += " No One!";                                  }                                  else if (wins.Count <= 20)                                  {                                      for (int i = 0; i < wins.Count; i++)                                      {                                          Currency.Add(wins.ElementAt(i).Key' wins.ElementAt(i).Value);                                          string msg = " " + wins.ElementAt(i).Key + " - " + wins.ElementAt(i).Value + " (Bet " + bets[wins.ElementAt(i).Key].Value + ")";                                          if (output.Length + msg.Length > 996)                                          {                                              Chat.SendMessage(output);                                              output = "Winners:";                                          }                                          output += msg;                                      }                                  }                                  else                                  {                                      output = wins.Count + " gamblers have won!";                                  }                                    Chat.SendMessage(output);                                    Clear();                              }                              else                              {                                  Chat.SendMessage("The option you specified is not available in the current pool!");                              }                          }                      }                      else                      {                          Chat.SendMessage("Betting pool must be running and bets must be locked before you can specify a winner' lock the bets by using \"!gamble close\".");                          Chat.SendMessage("Pick a winning option by typing \"!gamble winner #1\" if option 1 won' \"!gamble winner #2\" for option 2' etc.");                          Chat.SendMessage("You can type \"!bet help\" to get a list of the options as a reminder.");                      }                  }                  else if (args[0].ToLower() == "cancel")                  {                      if (Running)                      {                          Cancel();                          Chat.SendMessage("Betting pool canceled. All bets refunded");                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Gamble,The following statement contains a magic number: if (args.Length > 0)              {                  if (args[0].ToLower() == "open" && args.Length > 4)                  {                      if (!Running)                      {                          int min' max' reward;                          if (int.TryParse(args[1]' out min) && int.TryParse(args[2]' out max) && int.TryParse(args[3]' out reward))                          {                              if (min > 0)                              {                                  if (max >= min)                                  {                                      if (reward >= 0)                                      {                                          List<string> lOptions = buildBetOptions(args' 4);                                          if (lOptions.Count > 1)                                          {                                              LastUsedHelp = Api.GetUnixTimeNow();                                                CreatePool(min' max' reward' lOptions);                                              Chat.SendMessage("New betting pool opened! Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                                              string temp = "Betting open for: ";                                              for (int i = 0; i < lOptions.Count; i++)                                              {                                                  temp += "(" + (i + 1).ToString() + ") " + lOptions[i];                                                  if (i + 1 < lOptions.Count)                                                  {                                                      temp += "' ";                                                  }                                              }                                              Chat.SendMessage(temp + ".");                                              Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"!bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc.");                                          }                                          else                                          {                                              Chat.SendMessage("You need at least two betting options in order to start a betting pool!");                                          }                                      }                                      else                                      {                                          Chat.SendMessage("WinReward can not be lower than 0!");                                      }                                  }                                  else                                  {                                      Chat.SendMessage("MaxBet can not be lower than MinBet!");                                  }                              }                              else                              {                                  Chat.SendMessage("MinBet can not be lower than 1!");                              }                          }                          else                          {                              Chat.SendMessage("Invalid syntax. Open a betting pool with: !gamble open {MinBet} {MaxBet} {WinReward} {option1} {option2} ... {optionN} (space delimited options)");                          }                      }                      else                      {                          Chat.SendMessage("Betting pool already opened. Close or cancel the current one before starting a new one.");                      }                  }                  else if (args[0].ToLower() == "close")                  {                      if (Running)                      {                          if (!Locked)                          {                              Locked = true;                              BetQueue.Change(0' Timeout.Infinite);                              Chat.SendMessage("Bets locked in. Good luck everyone!");                              string temp = "The following options were open for betting: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                          }                          else                          {                              Chat.SendMessage("Pool is already locked.");                          }                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }                  else if (args[0].ToLower() == "winner" && args.Length > 1)                  {                      if (Running && Locked)                      {                          string option = "";                          List<string> compiledargs = Commands.GetArgs(args' 1).ToList();                          if (compiledargs.Count > 0) option = compiledargs[0];                            if (option.ToLower() == args[1].ToLower())                          {                              if (option.StartsWith("#"))                              {                                  int optionnumber = 0;                                  if (int.TryParse(option.Substring(1)' out optionnumber))                                  {                                      option = GetOptionFromNumber(optionnumber);                                  }                              }                          }                            lock (Options)                          {                              if (Options.Contains(option))                              {                                  closePool(option);                                  Chat.SendMessage("Betting pool closed! A total of " + getTotalBets() + " " + Currency.Name + " were bet.");                                  string output = "Bets for:";                                  for (int i = 0; i < Options.Count; i++)                                  {                                      double x = ((double)getTotalBetsOn(Options[i]) / getTotalBets()) * 100;                                      output += " " + Options[i] + " - " + getNumberOfBets(Options[i]) + " (" + Math.Round(x) + "%);";                                      //Console.WriteLine("TESTING: getTotalBetsOn(" + i + ") = " + getTotalBetsOn(i) + " --- getTotalBets() = " + getTotalBets() + " ---  (double)betsOn(i)/totalBets() = " + (double)(getTotalBetsOn(i) / getTotalBets()) + " --- *100 = " + (double)(getTotalBetsOn(i) / getTotalBets()) * 100 + " --- Converted to a double = " + (double)((getTotalBetsOn(i) / getTotalBets()) * 100) + " --- Rounded double = " + Math.Round((double)((getTotalBetsOn(i) / getTotalBets()) * 100)));                                  }                                  Chat.SendMessage(output);                                  Dictionary<string' int> wins = Winners;                                  output = "Winners:";                                  if (wins.Count == 0)                                  {                                      output = "No one won!";                                      //output += " No One!";                                  }                                  else if (wins.Count <= 20)                                  {                                      for (int i = 0; i < wins.Count; i++)                                      {                                          Currency.Add(wins.ElementAt(i).Key' wins.ElementAt(i).Value);                                          string msg = " " + wins.ElementAt(i).Key + " - " + wins.ElementAt(i).Value + " (Bet " + bets[wins.ElementAt(i).Key].Value + ")";                                          if (output.Length + msg.Length > 996)                                          {                                              Chat.SendMessage(output);                                              output = "Winners:";                                          }                                          output += msg;                                      }                                  }                                  else                                  {                                      output = wins.Count + " gamblers have won!";                                  }                                    Chat.SendMessage(output);                                    Clear();                              }                              else                              {                                  Chat.SendMessage("The option you specified is not available in the current pool!");                              }                          }                      }                      else                      {                          Chat.SendMessage("Betting pool must be running and bets must be locked before you can specify a winner' lock the bets by using \"!gamble close\".");                          Chat.SendMessage("Pick a winning option by typing \"!gamble winner #1\" if option 1 won' \"!gamble winner #2\" for option 2' etc.");                          Chat.SendMessage("You can type \"!bet help\" to get a list of the options as a reminder.");                      }                  }                  else if (args[0].ToLower() == "cancel")                  {                      if (Running)                      {                          Cancel();                          Chat.SendMessage("Betting pool canceled. All bets refunded");                      }                      else                      {                          Chat.SendMessage("The betting pool is not running.");                      }                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Bet,The following statement contains a magic number: if (Running)              {                  if (args.Length > 0)                  {                      int Value;                      if (args[0] == "help")                      {                          if (Api.GetUnixTimeNow() - LastUsedHelp < 60 && Users.GetLevel(user) < 1) return;                            LastUsedHelp = Api.GetUnixTimeNow();                            if (!Locked)                          {                              string temp = "Betting open for: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                              Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc.");                          }                          else                          {                              string temp = "The pool is now closed' the following options were open for betting: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                          }                      }                      else if (!Locked && int.TryParse(args[0]' out Value) && args.Length > 1)                      {                          string option = "";                          List<string> compiledargs = Commands.GetArgs(args' 1).ToList();                          if (compiledargs.Count > 0) option = compiledargs[0];                            if (option.ToLower() == args[1].ToLower())                          {                              if (option.StartsWith("#"))                              {                                  int optionnumber = 0;                                  if (int.TryParse(option.Substring(1)' out optionnumber))                                  {                                      option = GetOptionFromNumber(optionnumber);                                      if (option == "")                                      {                                          //Chat.SendMessage(user + " the option number does not exist");                                          lock (FalseEntries)                                          {                                              if (!FalseEntries.ContainsKey(user))                                              {                                                  FalseEntries.Add(user' 0);                                                  BetQueue.Change(10000' Timeout.Infinite);                                              }                                          }                                            return;                                      }                                  }                              }                          }                            placeBet(user' option' Value);                      }                  }                  else                  {                      //if (isInPool(user)) Chat.SendMessage(user + ": " + bets[user].Key + " (" + bets[user].Value + ")");                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,Command_Bet,The following statement contains a magic number: if (Running)              {                  if (args.Length > 0)                  {                      int Value;                      if (args[0] == "help")                      {                          if (Api.GetUnixTimeNow() - LastUsedHelp < 60 && Users.GetLevel(user) < 1) return;                            LastUsedHelp = Api.GetUnixTimeNow();                            if (!Locked)                          {                              string temp = "Betting open for: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                              Chat.SendMessage("Bet by typing \"!bet 50 #1\" to bet 50 " + Currency.Name + " on option 1' \"bet 25 #2\" to bet 25 " + Currency.Name + " on option 2' etc.");                          }                          else                          {                              string temp = "The pool is now closed' the following options were open for betting: ";                              lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + " - " + getNumberOfBets(Options[i]) + " bets (" + getTotalBetsOn(Options[i]) + " " + Currency.Name + ")" + (i + 1 < Options.Count ? "' " : "");                              Chat.SendMessage(temp + ".");                          }                      }                      else if (!Locked && int.TryParse(args[0]' out Value) && args.Length > 1)                      {                          string option = "";                          List<string> compiledargs = Commands.GetArgs(args' 1).ToList();                          if (compiledargs.Count > 0) option = compiledargs[0];                            if (option.ToLower() == args[1].ToLower())                          {                              if (option.StartsWith("#"))                              {                                  int optionnumber = 0;                                  if (int.TryParse(option.Substring(1)' out optionnumber))                                  {                                      option = GetOptionFromNumber(optionnumber);                                      if (option == "")                                      {                                          //Chat.SendMessage(user + " the option number does not exist");                                          lock (FalseEntries)                                          {                                              if (!FalseEntries.ContainsKey(user))                                              {                                                  FalseEntries.Add(user' 0);                                                  BetQueue.Change(10000' Timeout.Infinite);                                              }                                          }                                            return;                                      }                                  }                              }                          }                            placeBet(user' option' Value);                      }                  }                  else                  {                      //if (isInPool(user)) Chat.SendMessage(user + ": " + bets[user].Key + " (" + bets[user].Value + ")");                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,BetQueueHandler,The following statement contains a magic number: if (Running)              {                  lock (bets)                  {                      if (bets.Count > 0)                      {                          Chat.SendMessage("A total of " + bets.Count + " bets have been placed!");                            string finalmessage = "";                          lock (FalseEntries)                          {                              foreach (string user in FalseEntries.Keys)                              {                                  string msg = "the option number does not exist";                                  if (FalseEntries[user] == 1)                                  {                                      msg = "the option does not exist";                                  }                                  else if (FalseEntries[user] == 2)                                  {                                      msg = "the amount you put is invalid";                                  }                                  else if (FalseEntries[user] == 3)                                  {                                      msg = "you have insufficient " + Currency.Name;                                  }                                    if (finalmessage.Length + msg.Length > 996)                                  {                                      Chat.SendMessage(finalmessage);                                      finalmessage = "";                                  }                                  finalmessage += user + "' " + msg + ". ";                              }                                FalseEntries.Clear();                              if (finalmessage != "") Chat.SendMessage(finalmessage);                          }                      }                  }                    if(Api.GetUnixTimeNow() - LastAnnouncedCost > 60)                  {                      LastAnnouncedCost = Api.GetUnixTimeNow();                        if (!Locked)                      {                          string temp = "Betting open for: ";                          lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + (i + 1 < Options.Count ? "' " : "");                          Chat.SendMessage(temp + ".");                      }                      Chat.SendMessage("Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,BetQueueHandler,The following statement contains a magic number: if (Running)              {                  lock (bets)                  {                      if (bets.Count > 0)                      {                          Chat.SendMessage("A total of " + bets.Count + " bets have been placed!");                            string finalmessage = "";                          lock (FalseEntries)                          {                              foreach (string user in FalseEntries.Keys)                              {                                  string msg = "the option number does not exist";                                  if (FalseEntries[user] == 1)                                  {                                      msg = "the option does not exist";                                  }                                  else if (FalseEntries[user] == 2)                                  {                                      msg = "the amount you put is invalid";                                  }                                  else if (FalseEntries[user] == 3)                                  {                                      msg = "you have insufficient " + Currency.Name;                                  }                                    if (finalmessage.Length + msg.Length > 996)                                  {                                      Chat.SendMessage(finalmessage);                                      finalmessage = "";                                  }                                  finalmessage += user + "' " + msg + ". ";                              }                                FalseEntries.Clear();                              if (finalmessage != "") Chat.SendMessage(finalmessage);                          }                      }                  }                    if(Api.GetUnixTimeNow() - LastAnnouncedCost > 60)                  {                      LastAnnouncedCost = Api.GetUnixTimeNow();                        if (!Locked)                      {                          string temp = "Betting open for: ";                          lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + (i + 1 < Options.Count ? "' " : "");                          Chat.SendMessage(temp + ".");                      }                      Chat.SendMessage("Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,BetQueueHandler,The following statement contains a magic number: if (Running)              {                  lock (bets)                  {                      if (bets.Count > 0)                      {                          Chat.SendMessage("A total of " + bets.Count + " bets have been placed!");                            string finalmessage = "";                          lock (FalseEntries)                          {                              foreach (string user in FalseEntries.Keys)                              {                                  string msg = "the option number does not exist";                                  if (FalseEntries[user] == 1)                                  {                                      msg = "the option does not exist";                                  }                                  else if (FalseEntries[user] == 2)                                  {                                      msg = "the amount you put is invalid";                                  }                                  else if (FalseEntries[user] == 3)                                  {                                      msg = "you have insufficient " + Currency.Name;                                  }                                    if (finalmessage.Length + msg.Length > 996)                                  {                                      Chat.SendMessage(finalmessage);                                      finalmessage = "";                                  }                                  finalmessage += user + "' " + msg + ". ";                              }                                FalseEntries.Clear();                              if (finalmessage != "") Chat.SendMessage(finalmessage);                          }                      }                  }                    if(Api.GetUnixTimeNow() - LastAnnouncedCost > 60)                  {                      LastAnnouncedCost = Api.GetUnixTimeNow();                        if (!Locked)                      {                          string temp = "Betting open for: ";                          lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + (i + 1 < Options.Count ? "' " : "");                          Chat.SendMessage(temp + ".");                      }                      Chat.SendMessage("Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                  }              }
Magic Number,CoMaNdO.Gambling,Pool,C:\repos\DorCoMaNdO_ModBot\CoMaNdO.Gambling\Gambling.cs,BetQueueHandler,The following statement contains a magic number: if (Running)              {                  lock (bets)                  {                      if (bets.Count > 0)                      {                          Chat.SendMessage("A total of " + bets.Count + " bets have been placed!");                            string finalmessage = "";                          lock (FalseEntries)                          {                              foreach (string user in FalseEntries.Keys)                              {                                  string msg = "the option number does not exist";                                  if (FalseEntries[user] == 1)                                  {                                      msg = "the option does not exist";                                  }                                  else if (FalseEntries[user] == 2)                                  {                                      msg = "the amount you put is invalid";                                  }                                  else if (FalseEntries[user] == 3)                                  {                                      msg = "you have insufficient " + Currency.Name;                                  }                                    if (finalmessage.Length + msg.Length > 996)                                  {                                      Chat.SendMessage(finalmessage);                                      finalmessage = "";                                  }                                  finalmessage += user + "' " + msg + ". ";                              }                                FalseEntries.Clear();                              if (finalmessage != "") Chat.SendMessage(finalmessage);                          }                      }                  }                    if(Api.GetUnixTimeNow() - LastAnnouncedCost > 60)                  {                      LastAnnouncedCost = Api.GetUnixTimeNow();                        if (!Locked)                      {                          string temp = "Betting open for: ";                          lock (Options) for (int i = 0; i < Options.Count; i++) temp += "(" + (i + 1).ToString() + ") " + Options[i] + (i + 1 < Options.Count ? "' " : "");                          Chat.SendMessage(temp + ".");                      }                      Chat.SendMessage("Min bet: " + MinBet + " " + Currency.Name + "' Max bet: " + MaxBet + " " + Currency.Name + ".");                  }              }
