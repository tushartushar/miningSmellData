Implementation smell,Namespace,Class,File,Method,Description
Long Method,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveCameraInfoAsync,The method has 110 lines of code.
Long Method,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,LoadData,The method has 150 lines of code.
Complex Method,PhoneInfo,App,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\App.xaml.cs,OnLaunched,Cyclomatic complexity of the method is 8
Complex Method,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveCameraInfoAsync,Cyclomatic complexity of the method is 9
Complex Method,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,LoadData,Cyclomatic complexity of the method is 11
Long Identifier,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,,The length of the parameter _numberOfAsyncOperationsToComplete is 34.
Long Identifier,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,,The length of the parameter _numberOfAsyncOperationsCompleted is 33.
Long Statement,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveCameraInfoAsync,The length of the statement  "                Windows.Media.Devices.MediaDeviceControlCapabilities focusCaps = _mediaCapture.VideoDeviceController.Focus.Capabilities; " is 120.
Long Statement,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveMemoryInfo,The length of the statement  "                + "\n - ApplicationCurrentMemoryUsage: " + TransformBytes(ApplicationCurrentMemoryUsageInBytes' UnitPrefixes.Mega' 1) + " MB" " is 125.
Long Statement,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveMemoryInfo,The length of the statement  "                + "\n - ApplicationMemoryUsageLimit: " + TransformBytes(ApplicationMemoryUsageLimitInBytes' UnitPrefixes.Mega' 1) + " MB" " is 121.
Long Statement,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveScreenResolutionAsync,The length of the statement  "                    screenResolutionX = Windows.ApplicationModel.Core.CoreApplication.MainView.CoreWindow.Bounds.Width * rawPixelsPerViewPixel; " is 123.
Long Statement,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveScreenResolutionAsync,The length of the statement  "                    screenResolutionY = Windows.ApplicationModel.Core.CoreApplication.MainView.CoreWindow.Bounds.Height * rawPixelsPerViewPixel; " is 124.
Long Statement,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,DumpDeviceInformation,The length of the statement  "                Debug.WriteLine("Found device: " /*+ device.Id + ": "*/ + device.Name + (device.IsEnabled ? " (enabled) " : " (disabled)")); " is 124.
Long Statement,PhoneInfo,PivotPage,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\PivotPage.xaml.cs,OnPropertiesResolvedChanged,The length of the statement  "                RemainingBatteryChargeTextBlock.Text = string.Format(CultureInfo.CurrentCulture' _resourceLoader.GetString("PercentageOfBatteryChargeRemaining/Text")' App.ViewModel.RemainingBatteryCharge); " is 189.
Long Statement,PhoneInfo,PivotPage,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\PivotPage.xaml.cs,OnPropertiesResolvedChanged,The length of the statement  "                ProcessorCoreCountTextBlock.Text = string.Format(CultureInfo.CurrentCulture' _resourceLoader.GetString("NumberOfCores/Text")' App.ViewModel.ProcessorCoreCount); " is 160.
Long Statement,PhoneInfo.Common,SuspensionManager,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(SessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,PhoneInfo.Common,SuspensionManager,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,LoadData,The length of the statement  "                string backCameraResolutions = properties.BackCameraPhotoResolutions.Aggregate("Photo capture:\n"' (current' size) => current + ("  " + size.Width + "x" + size.Height + "\n")); " is 176.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,LoadData,The length of the statement  "                backCameraResolutions = properties.BackCameraVideoResolutions.Aggregate(backCameraResolutions' (current' size) => current + ("  " + size.Width + "x" + size.Height + "\n")); " is 172.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,LoadData,The length of the statement  "                string frontCameraResolutions = properties.FrontCameraPhotoResolutions.Aggregate("Photo capture:\n"' (current' size) => current + ("  " + size.Width + "x" + size.Height + "\n")); " is 178.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,LoadData,The length of the statement  "                frontCameraResolutions = properties.FrontCameraVideoResolutions.Aggregate(frontCameraResolutions' (current' size) => current + ("  " + size.Width + "x" + size.Height + "\n")); " is 175.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,LoadData,The length of the statement  "            SDCardPresent = properties.HasSDCardPresent ? _resourceLoader.GetString("Yes/Text") : _resourceLoader.GetString("NoCardPresent/Text"); " is 134.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,LoadData,The length of the statement  "            Theme = _resourceLoader.GetString("Theme/Text") + ": " + ((properties.AppTheme == Windows.UI.Xaml.ApplicationTheme.Dark) ? _resourceLoader.GetString("Dark/Text") : _resourceLoader.GetString("Light/Text")); " is 205.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,LoadData,The length of the statement  "            VibrationDeviceAvailable = properties.HasVibrationDevice ? _resourceLoader.GetString("Available/Text") : _resourceLoader.GetString("NotAvailable/Text"); " is 152.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            SensorItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("Accelerometer/Text") }); " is 133.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            SensorItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("Compass/Text") }); " is 127.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            SensorItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("Gyroscope/Text") }); " is 129.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            SensorItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("Inclinometer/Text") }); " is 132.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            SensorItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("OrientationSensor/Text") }); " is 137.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            SensorItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("NFC/Text") }); " is 123.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            CameraItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("BackCamera/Text") }); " is 130.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            CameraItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("BackCameraFlash/Text") }); " is 135.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            CameraItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("BackCameraAutoFocus/Text") }); " is 139.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            CameraItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("FrontCamera/Text") }); " is 131.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            CameraItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("FrontCameraFlash/Text") }); " is 136.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            //CameraItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("FrontCameraAutoFocus/Text") }); " is 142.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            SensorCoreItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("ActivityMonitor/Text") }); " is 139.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            SensorCoreItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("PlaceMonitor/Text") }); " is 136.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            SensorCoreItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("StepCounter/Text") }); " is 135.
Long Statement,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,CreateItems,The length of the statement  "            SensorCoreItems.Add(new BoolItemModel() { BooleanValue = false' HardwareFeatureText = _resourceLoader.GetString("TrackPointMonitor/Text") }); " is 141.
Complex Conditional,PhoneInfo.Common,NavigationHelper,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,PhoneInfo.Common,NavigationHelper,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,PhoneInfo.Common,NavigationHelper,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,PhoneInfo,App,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\App.xaml.cs,OnLaunched,The method has an empty catch block.
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,Resolve,The following statement contains a magic number: if (!IsReady)              {                  _numberOfAsyncOperationsToComplete = 5; // This must match the number of async method calls!                  _numberOfAsyncOperationsCompleted = 0;                    ResolveDeviceInformation(); // ResolveCameraInfoAsync() depends on this to be run first!                  ResolveCameraInfoAsync();                  ResolveMemoryInfo();                  ResolvePowerInfo();                  ResolveProcessorCoreCount();                  ResolveScreenResolutionAsync();                  ResolveSDCardInfoAsync();                  ResolveSensorCoreAvailabilityAsync();                  ResolveSensorInfo();                  ResolveUiThemeAsync();                  ResolveVibrationDeviceInfo();              }              else              {                  // Refreshing dynamic properties                  Debug.WriteLine(DebugTag + "Resolve(): Already resolved once' refreshing dynamic properties...");                  IsReady = false;                    if (IsReadyChanged != null)                  {                      IsReadyChanged(this' IsReady);                  }                    _numberOfAsyncOperationsToComplete = 2; // This must match the number of async method calls!                  _numberOfAsyncOperationsCompleted = 0;                    ResolveMemoryInfo();                  ResolvePowerInfo();                  ResolveSDCardInfoAsync();                  ResolveUiThemeAsync();              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,Resolve,The following statement contains a magic number: if (!IsReady)              {                  _numberOfAsyncOperationsToComplete = 5; // This must match the number of async method calls!                  _numberOfAsyncOperationsCompleted = 0;                    ResolveDeviceInformation(); // ResolveCameraInfoAsync() depends on this to be run first!                  ResolveCameraInfoAsync();                  ResolveMemoryInfo();                  ResolvePowerInfo();                  ResolveProcessorCoreCount();                  ResolveScreenResolutionAsync();                  ResolveSDCardInfoAsync();                  ResolveSensorCoreAvailabilityAsync();                  ResolveSensorInfo();                  ResolveUiThemeAsync();                  ResolveVibrationDeviceInfo();              }              else              {                  // Refreshing dynamic properties                  Debug.WriteLine(DebugTag + "Resolve(): Already resolved once' refreshing dynamic properties...");                  IsReady = false;                    if (IsReadyChanged != null)                  {                      IsReadyChanged(this' IsReady);                  }                    _numberOfAsyncOperationsToComplete = 2; // This must match the number of async method calls!                  _numberOfAsyncOperationsCompleted = 0;                    ResolveMemoryInfo();                  ResolvePowerInfo();                  ResolveSDCardInfoAsync();                  ResolveUiThemeAsync();              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (screenResolutionY < 960)              {                  ScreenResolution = Resolutions.WVGA;              }              else if (screenResolutionY < 1280)              {                  ScreenResolution = Resolutions.qHD;              }              else if (screenResolutionY < 1920)              {                  if (screenResolutionX < 768)                  {                      ScreenResolution = Resolutions.HD720;                  }                  else                  {                      ScreenResolution = Resolutions.WXGA;                  }              }              else if (screenResolutionY > 1280)              {                  ScreenResolution = Resolutions.HD1080;              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (screenResolutionY < 960)              {                  ScreenResolution = Resolutions.WVGA;              }              else if (screenResolutionY < 1280)              {                  ScreenResolution = Resolutions.qHD;              }              else if (screenResolutionY < 1920)              {                  if (screenResolutionX < 768)                  {                      ScreenResolution = Resolutions.HD720;                  }                  else                  {                      ScreenResolution = Resolutions.WXGA;                  }              }              else if (screenResolutionY > 1280)              {                  ScreenResolution = Resolutions.HD1080;              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (screenResolutionY < 960)              {                  ScreenResolution = Resolutions.WVGA;              }              else if (screenResolutionY < 1280)              {                  ScreenResolution = Resolutions.qHD;              }              else if (screenResolutionY < 1920)              {                  if (screenResolutionX < 768)                  {                      ScreenResolution = Resolutions.HD720;                  }                  else                  {                      ScreenResolution = Resolutions.WXGA;                  }              }              else if (screenResolutionY > 1280)              {                  ScreenResolution = Resolutions.HD1080;              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (screenResolutionY < 960)              {                  ScreenResolution = Resolutions.WVGA;              }              else if (screenResolutionY < 1280)              {                  ScreenResolution = Resolutions.qHD;              }              else if (screenResolutionY < 1920)              {                  if (screenResolutionX < 768)                  {                      ScreenResolution = Resolutions.HD720;                  }                  else                  {                      ScreenResolution = Resolutions.WXGA;                  }              }              else if (screenResolutionY > 1280)              {                  ScreenResolution = Resolutions.HD1080;              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (screenResolutionY < 960)              {                  ScreenResolution = Resolutions.WVGA;              }              else if (screenResolutionY < 1280)              {                  ScreenResolution = Resolutions.qHD;              }              else if (screenResolutionY < 1920)              {                  if (screenResolutionX < 768)                  {                      ScreenResolution = Resolutions.HD720;                  }                  else                  {                      ScreenResolution = Resolutions.WXGA;                  }              }              else if (screenResolutionY > 1280)              {                  ScreenResolution = Resolutions.HD1080;              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (rawDpiX > 0 && rawDpiY > 0)              {                  // Calculate screen diagonal in inches.                  DisplaySizeInInches =                      Math.Sqrt(Math.Pow(ScreenResolutionSize.Width / rawDpiX' 2) +                                Math.Pow(ScreenResolutionSize.Height / rawDpiY' 2));                  DisplaySizeInInches = Math.Round(DisplaySizeInInches' 1); // One decimal is enough              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (rawDpiX > 0 && rawDpiY > 0)              {                  // Calculate screen diagonal in inches.                  DisplaySizeInInches =                      Math.Sqrt(Math.Pow(ScreenResolutionSize.Width / rawDpiX' 2) +                                Math.Pow(ScreenResolutionSize.Height / rawDpiY' 2));                  DisplaySizeInInches = Math.Round(DisplaySizeInInches' 1); // One decimal is enough              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,TransformBytes,The following statement contains a magic number: switch (toUnit)              {                  case UnitPrefixes.Kilo:                      denominator = 1024;                      break;                  case UnitPrefixes.Mega:                      denominator = 1024 * 1024;                      break;                  case UnitPrefixes.Giga:                      denominator = Math.Pow(1024' 3);                      break;                  default:                      break;              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,TransformBytes,The following statement contains a magic number: switch (toUnit)              {                  case UnitPrefixes.Kilo:                      denominator = 1024;                      break;                  case UnitPrefixes.Mega:                      denominator = 1024 * 1024;                      break;                  case UnitPrefixes.Giga:                      denominator = Math.Pow(1024' 3);                      break;                  default:                      break;              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,TransformBytes,The following statement contains a magic number: switch (toUnit)              {                  case UnitPrefixes.Kilo:                      denominator = 1024;                      break;                  case UnitPrefixes.Mega:                      denominator = 1024 * 1024;                      break;                  case UnitPrefixes.Giga:                      denominator = Math.Pow(1024' 3);                      break;                  default:                      break;              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,TransformBytes,The following statement contains a magic number: switch (toUnit)              {                  case UnitPrefixes.Kilo:                      denominator = 1024;                      break;                  case UnitPrefixes.Mega:                      denominator = 1024 * 1024;                      break;                  case UnitPrefixes.Giga:                      denominator = Math.Pow(1024' 3);                      break;                  default:                      break;              }
Magic Number,PhoneInfo,DeviceProperties,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DeviceProperties.cs,TransformBytes,The following statement contains a magic number: switch (toUnit)              {                  case UnitPrefixes.Kilo:                      denominator = 1024;                      break;                  case UnitPrefixes.Mega:                      denominator = 1024 * 1024;                      break;                  case UnitPrefixes.Giga:                      denominator = Math.Pow(1024' 3);                      break;                  default:                      break;              }
Magic Number,PhoneInfo,PivotPage,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\PivotPage.xaml.cs,OnPivotSelectionChanged,The following statement contains a magic number: foreach (PivotItem pivotItem in MyPivot.Items)              {                  if (pivotItem == MyPivot.Items[MyPivot.SelectedIndex])                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 255' 255' 255));                  }                  else                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 220' 220' 220));                  }              }
Magic Number,PhoneInfo,PivotPage,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\PivotPage.xaml.cs,OnPivotSelectionChanged,The following statement contains a magic number: foreach (PivotItem pivotItem in MyPivot.Items)              {                  if (pivotItem == MyPivot.Items[MyPivot.SelectedIndex])                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 255' 255' 255));                  }                  else                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 220' 220' 220));                  }              }
Magic Number,PhoneInfo,PivotPage,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\PivotPage.xaml.cs,OnPivotSelectionChanged,The following statement contains a magic number: foreach (PivotItem pivotItem in MyPivot.Items)              {                  if (pivotItem == MyPivot.Items[MyPivot.SelectedIndex])                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 255' 255' 255));                  }                  else                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 220' 220' 220));                  }              }
Magic Number,PhoneInfo,PivotPage,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\PivotPage.xaml.cs,OnPivotSelectionChanged,The following statement contains a magic number: foreach (PivotItem pivotItem in MyPivot.Items)              {                  if (pivotItem == MyPivot.Items[MyPivot.SelectedIndex])                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 255' 255' 255));                  }                  else                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 220' 220' 220));                  }              }
Magic Number,PhoneInfo,PivotPage,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\PivotPage.xaml.cs,OnPivotSelectionChanged,The following statement contains a magic number: foreach (PivotItem pivotItem in MyPivot.Items)              {                  if (pivotItem == MyPivot.Items[MyPivot.SelectedIndex])                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 255' 255' 255));                  }                  else                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 220' 220' 220));                  }              }
Magic Number,PhoneInfo,PivotPage,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\PivotPage.xaml.cs,OnPivotSelectionChanged,The following statement contains a magic number: foreach (PivotItem pivotItem in MyPivot.Items)              {                  if (pivotItem == MyPivot.Items[MyPivot.SelectedIndex])                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 255' 255' 255));                  }                  else                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 220' 220' 220));                  }              }
Magic Number,PhoneInfo,PivotPage,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\PivotPage.xaml.cs,OnPivotSelectionChanged,The following statement contains a magic number: foreach (PivotItem pivotItem in MyPivot.Items)              {                  if (pivotItem == MyPivot.Items[MyPivot.SelectedIndex])                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 255' 255' 255));                  }                  else                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 220' 220' 220));                  }              }
Magic Number,PhoneInfo,PivotPage,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\PivotPage.xaml.cs,OnPivotSelectionChanged,The following statement contains a magic number: foreach (PivotItem pivotItem in MyPivot.Items)              {                  if (pivotItem == MyPivot.Items[MyPivot.SelectedIndex])                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 255' 255' 255));                  }                  else                  {                      ((TextBlock)pivotItem.Header).Foreground = new SolidColorBrush(Windows.UI.Color.FromArgb(255' 220' 220' 220));                  }              }
Magic Number,PhoneInfo.Common,NavigationHelper,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,PhoneInfo.Common,NavigationHelper,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,PhoneInfo.Common,NavigationHelper,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,PhoneInfo.Common,NavigationHelper,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,PhoneInfo.DataModel,MainViewModel,C:\repos\Microsoft_phone-info\PhoneInfoWP8_1\PhoneInfo\DataModel\MainViewModel.cs,LoadData,The following statement contains a magic number: try              {                  MemoryUsedInPercentages =                      (int)Math.Round((double)(100 * properties.ApplicationCurrentMemoryUsageInBytes                      / properties.ApplicationMemoryUsageLimitInBytes));                  MemoryStatus =                      DeviceProperties.TransformBytes(properties.ApplicationCurrentMemoryUsageInBytes' DeviceProperties.UnitPrefixes.Mega' 1)                      + " MB " + _resourceLoader.GetString("CurrentlyInUseOf/Text") + " "                      + DeviceProperties.TransformBytes(properties.ApplicationMemoryUsageLimitInBytes' DeviceProperties.UnitPrefixes.Mega' 1)                      + " MB";              }              catch (Exception)              {                  MemoryStatus = _resourceLoader.GetString("NotAvailable/Text");              }
