Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OSAE.Email,Email,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Email\Email.cs,ProcessCommand,Cyclomatic complexity of the method is 8
Long Statement,OSAE.Email,Email,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Email\Email.cs,ProcessCommand,The length of the statement  "                SmtpClient smtpClient = new SmtpClient(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "SMTP Server").Value' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "SMTP Port").Value)); " is 210.
Long Statement,OSAE.Email,Email,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Email\Email.cs,ProcessCommand,The length of the statement  "                smtpClient.Credentials = new NetworkCredential(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Username").Value' OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Password").Value); " is 203.
Long Statement,OSAE.Email,Email,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Email\Email.cs,OwnTypes,The length of the statement  "                OSAEObjectTypeManager.ObjectTypeUpdate(oType.Name' oType.Name' oType.Description' gAppName' oType.BaseType' oType.Owner' oType.SysType' oType.Container' oType.HideRedundant' oType.Tooltip); " is 189.
Magic Number,OSAE.Email,Email,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Email\Email.cs,ProcessCommand,The following statement contains a magic number: try              {                                    string parameter2 = string.Empty;                  string subject = string.Empty;                  string body = string.Empty;                    // To                  MailAddress to;                  OSAEObjectProperty prop = OSAEObjectPropertyManager.GetObjectPropertyValue(method.Parameter1' "Email Address");                  if (prop != null)                  {                      if (prop.Value == string.Empty) to = new MailAddress(method.Parameter1);                      else to = new MailAddress(prop.Value);                  }                  else                      to = new MailAddress(method.Parameter1);                    // From                  MailAddress from = new MailAddress(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "From Address").Value);                    MailMessage mailMsg = new MailMessage(from' to);                    // Subject and Body                  mailMsg.Subject = "Message from OSAE";                  mailMsg.Body = Common.PatternParse(method.Parameter2);                  mailMsg.BodyEncoding = System.Text.Encoding.UTF8;                    parameter2 = Common.PatternParse(method.Parameter2);                    // Make sure there is a body of text.                  if (parameter2.Equals(string.Empty)) throw new ArgumentOutOfRangeException("Message body missing.");                    // See if there is a subject.                  // Opening delimiter in first char is good indication of subject.                  if (parameter2[0] == ':')                  {                      // Find clossing delimiter                      int i = parameter2.IndexOf(':'' 1);                      if (i != -1)                      {                          subject = parameter2.Substring(1' i - 1);                          body = parameter2.Substring(i + 1' parameter2.Length - i - 1);                      }                  }                    if (subject.Equals(string.Empty))                  {                      mailMsg.Subject = "Message from OSAE";                      mailMsg.SubjectEncoding = System.Text.Encoding.UTF8;                        mailMsg.Body = parameter2;                  }                  else                  {                      mailMsg.Subject = subject;                      mailMsg.Body = body;                  }                                  // Init SmtpClient and send                  SmtpClient smtpClient = new SmtpClient(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "SMTP Server").Value' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "SMTP Port").Value));                  if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "ssl").Value == "TRUE")                      smtpClient.EnableSsl = true;                  else                      smtpClient.EnableSsl = false;                    smtpClient.Timeout = 20000;                  smtpClient.DeliveryMethod = SmtpDeliveryMethod.Network;                  smtpClient.UseDefaultCredentials = false;                  smtpClient.Credentials = new NetworkCredential(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Username").Value' OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Password").Value);                                    Log.Info("to: " + mailMsg.To);                  Log.Info("from: " + mailMsg.From);                  Log.Info("subject: " + mailMsg.Subject);                  Log.Info("body: " + mailMsg.Body);                  Log.Info("smtpServer: " + smtpClient.Host);                  Log.Info("smtpPort: " + smtpClient.Port);                  Log.Info("username: " + OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Username").Value);                  Log.Info("password: " + OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Password").Value);                  Log.Info("ssl: " + smtpClient.EnableSsl);                  smtpClient.SendCompleted += new SendCompletedEventHandler(SendCompletedCallback);                  string userState = "test message1";                  smtpClient.SendAsync(mailMsg' userState);                    //smtpClient.Send(mailMsg);              }              catch (Exception ex)              { Log.Error("Error Sending email" ' ex); }
