Implementation smell,Namespace,Class,File,Method,Description
Long Statement,OSAE.RadioThermostat,RadioThermostat,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RadioThermostat\RadioThermostat.cs,RunInterface,The length of the statement  "            OSAEObjectTypeManager.ObjectTypeUpdate(objt.Name' objt.Name' "Radio Thermostat Device"' pName' "RADIO THERMOSTAT DEVICE"' objt.Owner' objt.SysType' objt.Container' objt.HideRedundant' objt.Tooltip); " is 198.
Long Statement,OSAE.RadioThermostat,RadioThermostat,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RadioThermostat\RadioThermostat.cs,PollDevices,The length of the statement  "                if (status.Hold) OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Hold"' "Yes"' pName); else OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Hold"' "No"' pName); " is 174.
Long Statement,OSAE.RadioThermostat,RadioThermostat,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RadioThermostat\RadioThermostat.cs,PollDevices,The length of the statement  "                if (status.Override) OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Override"' "Yes"' pName); else OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Override"' "No"' pName); " is 186.
Magic Number,OSAE.RadioThermostat,RadioThermostat,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RadioThermostat\RadioThermostat.cs,RunInterface,The following statement contains a magic number: Clock.Interval = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Poll Interval").Value) * 60000;
Missing Default,OSAE.RadioThermostat,RadioThermostat,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RadioThermostat\RadioThermostat.cs,ProcessCommand,The following switch statement is missing a default case: switch (method.MethodName)              {                  case "SET TEMPORARY COOL":                      ThermostatLib.ThermostatInfo.SetTemporaryCool(method.Address' Double.Parse(method.Parameter1));                      break;                  case "SET TEMPORARY HEAT":                      ThermostatLib.ThermostatInfo.SetTemporaryHeat(method.Address' Double.Parse(method.Parameter1));                      break;                  case "SET HOLD":                      ThermostatLib.ThermostatInfo.SetHold(method.Address' true);                      break;                  case "REMOVE HOLD":                      ThermostatLib.ThermostatInfo.SetHold(method.Address' false);                      break;                  case "REBOOT":                      ThermostatLib.SystemInfo.Reboot(method.Address);                      break;                  case "SET LED":                      ThermostatLib.SystemInfo.SetLED(method.Address' method.Parameter1);                      break;              }
