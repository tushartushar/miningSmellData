Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OSAE.SysLog,SysLog,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\SysLog\SysLog.cs,ProcessEvent,Cyclomatic complexity of the method is 8
Long Statement,OSAE.SysLog,SysLog,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\SysLog\SysLog.cs,RunInterface,The length of the statement  "                    OSAEObjectManager.ObjectAdd("SysLog Tigger - Example"' "This is an an example trigger created by the plugin which can be deleted"' "SysLog-Trigger"' ""' ""' true);" is 163.
Long Statement,OSAE.SysLog,SysLog,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\SysLog\SysLog.cs,RunInterface,The length of the statement  "                    OSAEObjectPropertyManager.ObjectPropertySet("SysLog Tigger - Example"' "Trigger String"' "The string to look for"' pName);" is 122.
Magic Number,OSAE.SysLog,SysLog,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\SysLog\SysLog.cs,RunInterface,The following statement contains a magic number: task = Task.Factory.StartNew(() =>                 {                     while (!token.IsCancellationRequested)                     {                         if (udpListener.Available > 0)                         {                             try                             {                                 byte[] bReceive = udpListener.Receive(ref anyIP);                                 string sReceive = Encoding.ASCII.GetString(bReceive);                                 string sourceIP = anyIP.Address.ToString();                                  Task messageProcessor = new Task(() => ProcessEvent(sourceIP' sReceive));                                 messageProcessor.Start();                             }                             catch (Exception ex)                             {                                 logging.AddToLog("Exception occurred in SysLog details: " + ex.Message' true);                             }                         }                         else                         {                             token.WaitHandle.WaitOne(300);                         }                     }                      if (token.IsCancellationRequested)                     {                         logging.AddToLog("Cancellation Token Set"' false);                     }                 }' token);
