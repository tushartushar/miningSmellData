Implementation smell,Namespace,Class,File,Method,Description
Long Method,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The method has 162 lines of code.
Complex Method,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,LoadPlugins,Cyclomatic complexity of the method is 10
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,CheckServiceObject,The length of the statement  "                //  OSAEObjectStateManager.ObjectStateSet("SERVICE-" + Common.ComputerName' "ON"' "OSAE Service");   This is some kind of hack " is 126.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The length of the statement  "                        Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2); " is 162.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The length of the statement  "                                    UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051)); " is 157.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The length of the statement  "                                    UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051)); " is 168.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The length of the statement  "                                //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin " is 122.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The length of the statement  "                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id); " is 203.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The length of the statement  "                                            UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051)); " is 258.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The length of the statement  "                                    if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower()) " is 158.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The length of the statement  "                                    Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id); " is 203.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,StopPlugin,The length of the statement  "                        UDPConnection.SendObject("Plugin"' p.PluginName + " | " + p.Enabled.ToString() + " | " + p.PluginVersion + " | Stopped | " + p.LatestAvailableVersion + " | " + p.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051)); " is 248.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,PluginMessageReceived,The length of the statement  "                            UDPConnection.SendObject("Plugin"' p.PluginName + " | " + p.Enabled.ToString() + " | " + p.PluginVersion + " | Running | " + p.LatestAvailableVersion + " | " + p.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051)); " is 248.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,PluginMessageReceived,The length of the statement  "                            UDPConnection.SendObject("Plugin"' p.PluginName + " | " + p.Enabled.ToString() + " | " + p.PluginVersion + " | Stopped | " + p.LatestAvailableVersion + " | " + p.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051)); " is 248.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,startPlugin,The length of the statement  "            //Enabe and start seemed to be mixed' changed to start' enabe is handled at the Webui for now' maybe a method in the future " is 123.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,startPlugin,The length of the statement  "            //OSAEObjectManager.ObjectUpdate(plugin.PluginName' plugin.PluginName' obj.Alias' obj.Description' obj.Type' obj.Address' obj.Container' obj.MinTrustLevel' true); " is 162.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,stopPlugin,The length of the statement  "          //  OSAEObjectManager.ObjectUpdate(p.PluginName' p.PluginName' obj.Alias' obj.Description' obj.Type' obj.Address' obj.Container' obj.MinTrustLevel' false); " is 155.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,LoadPlugins,The length of the statement  "                                OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' serviceName' 50' false); " is 138.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,LoadPlugins,The length of the statement  "                            //OSAEObjectManager.ObjectUpdate(plugin.PluginName'plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' serviceName' 50' true); " is 160.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,LoadPlugins,The length of the statement  "                            OSAEObjectManager.ObjectUpdate(plugin.PluginName' plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' obj.Address' serviceName' 50' plugin.Enabled); " is 178.
Long Statement,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,LoadPlugins,The length of the statement  "                            //UDPConnection.SendObject("Plugin"' plugin.PluginName + " | " + plugin.Enabled.ToString() + " | " + plugin.PluginVersion + " | Stopped | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051)); " is 275.
Empty Catch Block,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,ShutDownSystems,The method has an empty catch block.
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,CheckServiceObject,The following statement contains a magic number: try              {                  bool found = OSAEObjectManager.ObjectExists("SERVICE");                  if (!found)                  {                      OSAEObjectManager.ObjectAdd("SERVICE"' ""' "SERVICE"' "SERVICE"' ""' "SYSTEM"' 50' true);                      //Log.Debug("Created Service Object called " + "SERVICE-" + Common.ComputerName);                  }                  //else                     //Log.Debug("Found Service Object called " + "SERVICE-" + Common.ComputerName);                    return "SERVICE";                    //  OSAEObjectStateManager.ObjectStateSet("SERVICE-" + Common.ComputerName' "ON"' "OSAE Service");   This is some kind of hack              }              catch (Exception ex)              {                  //Log.Error("Error creating service object!"' ex);                  return null;              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following statement contains a magic number: while (running)              {                  try                  {                      foreach (OSAEMethod method in OSAEMethodManager.GetMethodsInQueue())                      {                          Log.Debug("Method in queue for: " + method.Owner + " Method: " + method.ObjectName + "." + method.MethodName + "'" + method.Parameter1 + "'" + method.Parameter2);                            if (method.ObjectName == "SERVICE") // This Service                          {                              switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }                                                                                                          OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] == "SERVICE") // Client Services                          {                              Log.Debug("Method for client service.  Sending Broadcast.");                              switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }                              OSAEMethodManager.MethodQueueDelete(method.Id);                          }                          else if (method.ObjectName.Split('-')[0] != "SERVICE")                          {// THIS IS NOT GOOD ENOUGH.   it intercepts all plugins not just local service ones....                              //Look up the basetype' if it is a plugin' THEN you can parse on and off for the intercept.                               //You must also look at the container and see if it is this service like above.                                OSAEObject tempObj = OSAEObjectManager.GetObjectByName(method.ObjectName);                              string isContainerService = tempObj.Container.Split('-')[0];                              if (tempObj.BaseType == "PLUGIN" && tempObj.Container == ("SERVICE"))  // Plugins on the localhost                              {                                  switch (method.MethodName)                                  {                                      case "ON":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Start for: " + method.Owner);                                          StartPlugin(serviceObject' method);                                          break;                                      case "OFF":                                          OSAEMethodManager.MethodQueueDelete(method.Id);                                          Log.Info("Recieved Stop for: " + method.Owner);                                          StopPlugin(serviceObject' method);                                          break;                                      default:                                          {                                              foreach (Plugin plugin in plugins)                                              {                                                  if (method.ObjectName == plugin.PluginName)                                                  {                                                      plugin.ExecuteCommand(method);                                                      break;                                                  }                                              }                                              break;                                          }                                  }                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else if (tempObj.BaseType == "PLUGIN" && isContainerService == "SERVICE")  // Plugins on a remote Client Service                              {                                  //We can translate the the Object from the method to a parameter and just tell the client service to start/stop the plugin                                  switch (method.MethodName)                                  {                                      case "ON":                                          Log.Info("Sending Remote Start for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                          break;                                      case "OFF":                                          Log.Info("Sending Remote Stop for: " + method.Owner);                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                          Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                          break;                                      default:                                          {                                              Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                              UDPConnection.SendObject("Method"' method.ObjectName + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Owner + " | " + method.FromObject' new IPEndPoint(IPAddress.Broadcast' 10051));                                              break;                                          }                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                              }                              else                              {                                  bool processed = false;                                  foreach (Plugin plugin in plugins)                                  {                                      if (string.IsNullOrEmpty(method.Owner) || method.Owner.ToLower() == plugin.PluginName.ToLower() || method.ObjectName.ToLower() == plugin.PluginName.ToLower())                                      {                                          plugin.ExecuteCommand(method);                                          processed = true;                                          break;                                      }                                  }                                    if (!processed)                                  {                                      Log.Debug("Method found for client service plugin.  Sending Broadcast.");                                          UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                            Log.Debug("-> UDP: Command' " + method.ObjectName + " | " + method.Owner + " | " + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | " + method.Address + " | " + method.Id);                                      UDPConnection.SendObject("Command"' method.ObjectName + " | " + method.Owner + " | "                                          + method.MethodName + " | " + method.Parameter1 + " | " + method.Parameter2 + " | "                                          + method.Address + " | " + method.Id' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Command"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Method"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      UDPConnection.SendObject("Plugin"' "Testing"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Debug("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");                                  }                                  Log.Debug("Removing method from queue with ID: " + method.Id);                                  OSAEMethodManager.MethodQueueDelete(method.Id);                                  break;                              }                         }                      }                  }                  catch (Exception ex)                  { Log.Error("Error in QueryCommandQueue!"' ex); }                    Thread.Sleep(100);              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,StopPlugin,The following statement contains a magic number: foreach (Plugin p in plugins)              {                  if (p.PluginName == method.ObjectName)                  {                      OSAEObject obj = OSAEObjectManager.GetObjectByName(p.PluginName);                      if (obj != null)                      {                          stopPlugin(serviceName' p);                          UDPConnection.SendObject("Plugin"' p.PluginName + " | " + p.Enabled.ToString() + " | " + p.PluginVersion + " | Stopped | " + p.LatestAvailableVersion + " | " + p.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                      }                  }              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,StartNetworkListener,The following statement contains a magic number: try              {                  string ip = Common.LocalIPAddress();                  NetworkComms.AppendGlobalIncomingPacketHandler<string>("Plugin"' PluginMessageReceived);                  NetworkComms.AppendGlobalIncomingPacketHandler<string>("Method"' MethodMessageReceived);                  //Start listening for incoming connections                  TCPConnection.StartListening(new IPEndPoint(IPAddress.Parse(ip)' 10051));                  //TCPConnection.StartListening(true);                    foreach (System.Net.IPEndPoint localEndPoint in TCPConnection.ExistingLocalListenEndPoints())                       Log.Info("Service listening for TCP connection on: " + localEndPoint.Address + ":" + localEndPoint.Port);              }              catch (Exception ex)              { Log.Error("Error starting TCP Listener: " + ex.Message' ex); }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,PluginMessageReceived,The following statement contains a magic number: foreach (Plugin p in plugins)              {                  if (p.PluginName == arguments[0])                  {                      local = true;                        OSAEObject obj = OSAEObjectManager.GetObjectByName(p.PluginName);                      if (obj != null)                      {                          if (arguments[1] == "True")                          {                              // enablePlugin(p);                              // maybe this call should be enable/disable' not sure' moving on                              startPlugin("SYSTEM"' p);                              UDPConnection.SendObject("Plugin"' p.PluginName + " | " + p.Enabled.ToString() + " | " + p.PluginVersion + " | Running | " + p.LatestAvailableVersion + " | " + p.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                          }                          else if (arguments[1] == "False")                          {                              stopPlugin("SYSTEM"' p);                              UDPConnection.SendObject("Plugin"' p.PluginName + " | " + p.Enabled.ToString() + " | " + p.PluginVersion + " | Stopped | " + p.LatestAvailableVersion + " | " + p.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                          }                      }                  }              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,PluginMessageReceived,The following statement contains a magic number: foreach (Plugin p in plugins)              {                  if (p.PluginName == arguments[0])                  {                      local = true;                        OSAEObject obj = OSAEObjectManager.GetObjectByName(p.PluginName);                      if (obj != null)                      {                          if (arguments[1] == "True")                          {                              // enablePlugin(p);                              // maybe this call should be enable/disable' not sure' moving on                              startPlugin("SYSTEM"' p);                              UDPConnection.SendObject("Plugin"' p.PluginName + " | " + p.Enabled.ToString() + " | " + p.PluginVersion + " | Running | " + p.LatestAvailableVersion + " | " + p.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                          }                          else if (arguments[1] == "False")                          {                              stopPlugin("SYSTEM"' p);                              UDPConnection.SendObject("Plugin"' p.PluginName + " | " + p.Enabled.ToString() + " | " + p.PluginVersion + " | Stopped | " + p.LatestAvailableVersion + " | " + p.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                          }                      }                  }              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,PluginMessageReceived,The following statement contains a magic number: if (!local) UDPConnection.SendObject("Plugin"' message' new IPEndPoint(IPAddress.Broadcast' 10051));
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,LoadPlugins,The following statement contains a magic number: foreach (Plugin plugin in newPlugins)              {                  try                  {                      Log.Info("----------------------------------------------------");                      if (plugin.PluginName != "")                      {                          OSAEObject obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                          if (obj == null)                          {                              bool found = OSAEObjectTypeManager.ObjectTypeExists(plugin.PluginType);                              if (found)                              {                                  OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' serviceName' 50' false);                                                                    obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                                  if (obj == null)                                      Log.Info(plugin.PluginName + ":  I failed to create the Plugin Object!");                                  else                                      Log.Info(obj.Name + ":  Plugin Object was Not found' so I created a new Plugin Object.");                              }                              else                                  Log.Info(":  Plugin Object Type Not found for: " + plugin.PluginType + ".  Plugin Object Cannot be Created.");                          }                            if (obj != null)                          {                              Log.Info(obj.Name + ":  Plugin Object found.  Plugin Object Enabled = " + obj.Enabled.ToString());                              //No idea why the following line would run                              //OSAEObjectManager.ObjectUpdate(plugin.PluginName'plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' serviceName' 50' true);                              if (obj.Enabled == true)                              {                                  plugin.Enabled = true;                                  startPlugin(serviceObject' plugin);                              }                              else                              {                                  plugin.Enabled = false;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' serviceObject);                              }                                Log.Info(obj.Name + ":  Plugin Enabled = " + plugin.Enabled.ToString());                              Log.Info(obj.Name + ":  Plugin Version = " + plugin.PluginVersion);                              OSAEObjectManager.ObjectUpdate(plugin.PluginName' plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' obj.Address' serviceName' 50' plugin.Enabled);                              OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Version"' plugin.PluginVersion' serviceName);                              OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Author"' plugin.PluginAuthor' serviceName);                          }                      }                      else                      {                          bool found = OSAEObjectTypeManager.ObjectTypeExists(plugin.PluginType);                          if (found)                          {                              plugin.PluginName = plugin.PluginType;                              Log.Info(plugin.PluginName + ":  Plugin object does not exist in DB!");                              OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName' plugin.PluginType' ""' "System"' 50' false);                              OSAEObjectPropertyManager.ObjectPropertySet(plugin.PluginName' "Version"' plugin.PluginVersion' serviceName);                              OSAEObjectPropertyManager.ObjectPropertySet(plugin.PluginName' "Author"' plugin.PluginAuthor' serviceName);                              Log.Info(plugin.PluginName + ":  Plugin added to DB.");                              //Uh' this still looks wrong below.   I don't think it is needed' besides' any new plugin is disabled...                              //UDPConnection.SendObject("Plugin"' plugin.PluginName + " | " + plugin.Enabled.ToString() + " | " + plugin.PluginVersion + " | Stopped | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                          }                          else                              Log.Info(":  Plugin Object Type Not found for: " + plugin.PluginType + ".  Plugin Object Cannot be Created!");                      }                      plugins.Add(plugin);                      masterPlugins.Add(plugin);                  }                  catch (Exception ex)                  { Log.Error("Error loading plugin: " + ex.Message' ex); }              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,LoadPlugins,The following statement contains a magic number: foreach (Plugin plugin in newPlugins)              {                  try                  {                      Log.Info("----------------------------------------------------");                      if (plugin.PluginName != "")                      {                          OSAEObject obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                          if (obj == null)                          {                              bool found = OSAEObjectTypeManager.ObjectTypeExists(plugin.PluginType);                              if (found)                              {                                  OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' serviceName' 50' false);                                                                    obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                                  if (obj == null)                                      Log.Info(plugin.PluginName + ":  I failed to create the Plugin Object!");                                  else                                      Log.Info(obj.Name + ":  Plugin Object was Not found' so I created a new Plugin Object.");                              }                              else                                  Log.Info(":  Plugin Object Type Not found for: " + plugin.PluginType + ".  Plugin Object Cannot be Created.");                          }                            if (obj != null)                          {                              Log.Info(obj.Name + ":  Plugin Object found.  Plugin Object Enabled = " + obj.Enabled.ToString());                              //No idea why the following line would run                              //OSAEObjectManager.ObjectUpdate(plugin.PluginName'plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' serviceName' 50' true);                              if (obj.Enabled == true)                              {                                  plugin.Enabled = true;                                  startPlugin(serviceObject' plugin);                              }                              else                              {                                  plugin.Enabled = false;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' serviceObject);                              }                                Log.Info(obj.Name + ":  Plugin Enabled = " + plugin.Enabled.ToString());                              Log.Info(obj.Name + ":  Plugin Version = " + plugin.PluginVersion);                              OSAEObjectManager.ObjectUpdate(plugin.PluginName' plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' obj.Address' serviceName' 50' plugin.Enabled);                              OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Version"' plugin.PluginVersion' serviceName);                              OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Author"' plugin.PluginAuthor' serviceName);                          }                      }                      else                      {                          bool found = OSAEObjectTypeManager.ObjectTypeExists(plugin.PluginType);                          if (found)                          {                              plugin.PluginName = plugin.PluginType;                              Log.Info(plugin.PluginName + ":  Plugin object does not exist in DB!");                              OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName' plugin.PluginType' ""' "System"' 50' false);                              OSAEObjectPropertyManager.ObjectPropertySet(plugin.PluginName' "Version"' plugin.PluginVersion' serviceName);                              OSAEObjectPropertyManager.ObjectPropertySet(plugin.PluginName' "Author"' plugin.PluginAuthor' serviceName);                              Log.Info(plugin.PluginName + ":  Plugin added to DB.");                              //Uh' this still looks wrong below.   I don't think it is needed' besides' any new plugin is disabled...                              //UDPConnection.SendObject("Plugin"' plugin.PluginName + " | " + plugin.Enabled.ToString() + " | " + plugin.PluginVersion + " | Stopped | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                          }                          else                              Log.Info(":  Plugin Object Type Not found for: " + plugin.PluginType + ".  Plugin Object Cannot be Created!");                      }                      plugins.Add(plugin);                      masterPlugins.Add(plugin);                  }                  catch (Exception ex)                  { Log.Error("Error loading plugin: " + ex.Message' ex); }              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,LoadPlugins,The following statement contains a magic number: foreach (Plugin plugin in newPlugins)              {                  try                  {                      Log.Info("----------------------------------------------------");                      if (plugin.PluginName != "")                      {                          OSAEObject obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                          if (obj == null)                          {                              bool found = OSAEObjectTypeManager.ObjectTypeExists(plugin.PluginType);                              if (found)                              {                                  OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' serviceName' 50' false);                                                                    obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                                  if (obj == null)                                      Log.Info(plugin.PluginName + ":  I failed to create the Plugin Object!");                                  else                                      Log.Info(obj.Name + ":  Plugin Object was Not found' so I created a new Plugin Object.");                              }                              else                                  Log.Info(":  Plugin Object Type Not found for: " + plugin.PluginType + ".  Plugin Object Cannot be Created.");                          }                            if (obj != null)                          {                              Log.Info(obj.Name + ":  Plugin Object found.  Plugin Object Enabled = " + obj.Enabled.ToString());                              //No idea why the following line would run                              //OSAEObjectManager.ObjectUpdate(plugin.PluginName'plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' serviceName' 50' true);                              if (obj.Enabled == true)                              {                                  plugin.Enabled = true;                                  startPlugin(serviceObject' plugin);                              }                              else                              {                                  plugin.Enabled = false;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' serviceObject);                              }                                Log.Info(obj.Name + ":  Plugin Enabled = " + plugin.Enabled.ToString());                              Log.Info(obj.Name + ":  Plugin Version = " + plugin.PluginVersion);                              OSAEObjectManager.ObjectUpdate(plugin.PluginName' plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' obj.Address' serviceName' 50' plugin.Enabled);                              OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Version"' plugin.PluginVersion' serviceName);                              OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Author"' plugin.PluginAuthor' serviceName);                          }                      }                      else                      {                          bool found = OSAEObjectTypeManager.ObjectTypeExists(plugin.PluginType);                          if (found)                          {                              plugin.PluginName = plugin.PluginType;                              Log.Info(plugin.PluginName + ":  Plugin object does not exist in DB!");                              OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName' plugin.PluginType' ""' "System"' 50' false);                              OSAEObjectPropertyManager.ObjectPropertySet(plugin.PluginName' "Version"' plugin.PluginVersion' serviceName);                              OSAEObjectPropertyManager.ObjectPropertySet(plugin.PluginName' "Author"' plugin.PluginAuthor' serviceName);                              Log.Info(plugin.PluginName + ":  Plugin added to DB.");                              //Uh' this still looks wrong below.   I don't think it is needed' besides' any new plugin is disabled...                              //UDPConnection.SendObject("Plugin"' plugin.PluginName + " | " + plugin.Enabled.ToString() + " | " + plugin.PluginVersion + " | Stopped | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                          }                          else                              Log.Info(":  Plugin Object Type Not found for: " + plugin.PluginType + ".  Plugin Object Cannot be Created!");                      }                      plugins.Add(plugin);                      masterPlugins.Add(plugin);                  }                  catch (Exception ex)                  { Log.Error("Error loading plugin: " + ex.Message' ex); }              }
Magic Number,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,OnStart,The following statement contains a magic number: checkLog = new System.Timers.Timer(60000);
Missing Default,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following switch statement is missing a default case: switch (method.MethodName)                              {                                  case "BROADCAST":                                      Log.Info("-> UDP: " + method.Parameter1 + "' " + method.Parameter2);                                      UDPConnection.SendObject(method.Parameter1' method.Parameter2' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "EXECUTE" :                                       Log.Info("Received Execute Method");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      StartPlugin(serviceObject' method);                                      break;                                  case "STOP PLUGIN":                                      StopPlugin(serviceObject' method);                                      break;                                  case "RELOAD PLUGINS":                                      LoadPlugins(serviceObject);                                      break;                              }
Missing Default,OSAE.Service,OSAEService,C:\repos\opensourceautomation_Open-Source-Automation\Services\OSA.Service\OSAEService.HelperCode.cs,QueryCommandQueue,The following switch statement is missing a default case: switch (method.MethodName)                              {                                  case "ON":                                      Log.Info("-> UDP " + method.ObjectName + " | ON");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "OFF":                                      Log.Info("-> UDP " + method.ObjectName + " | OFF");                                      UDPConnection.SendObject("Manager"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10052));                                      break;                                  case "EXECUTE":                                      Log.Info("Recieved Execute Method Name");                                      UDPConnection.SendObject("Command"' method.Parameter1 + " | " + method.Parameter2 + " | " + method.ObjectName.Substring(8)' new IPEndPoint(IPAddress.Broadcast' 10051));                                      break;                                  case "START PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | ON"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | ON");                                      //object name | owner | method name | param1 | param 2 | address | from object                                       //StartPlugin(method);                                      break;                                  case "STOP PLUGIN":                                      UDPConnection.SendObject("Plugin"' method.ObjectName + " | OFF"' new IPEndPoint(IPAddress.Broadcast' 10051));                                      Log.Info("-> UDP: Plugin' " + method.ObjectName + " | OFF");                                      //StopPlugin(method);                                      break;                              }
