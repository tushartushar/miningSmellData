Implementation smell,Namespace,Class,File,Method,Description
Long Method,PubNubMessaging.Core,ClientNetworkStatus,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\ClientNetworkStatus.cs,CheckSocketConnect,The method has 109 lines of code.
Long Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The method has 186 lines of code.
Long Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,The method has 148 lines of code.
Long Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The method has 200 lines of code.
Long Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,AddOrUpdateOrDeleteLocalUserState,The method has 107 lines of code.
Long Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The method has 124 lines of code.
Long Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The method has 204 lines of code.
Long Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The method has 214 lines of code.
Long Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildRestApiRequest,The method has 185 lines of code.
Long Method,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The method has 429 lines of code.
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,Cyclomatic complexity of the method is 8
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResetInternetCheckSettings,Cyclomatic complexity of the method is 8
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminatePendingWebRequest,Cyclomatic complexity of the method is 10
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,Cyclomatic complexity of the method is 13
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Publish,Cyclomatic complexity of the method is 8
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Subscribe,Cyclomatic complexity of the method is 8
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,Cyclomatic complexity of the method is 24
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,Cyclomatic complexity of the method is 26
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,AddOrUpdateOrDeleteLocalUserState,Cyclomatic complexity of the method is 12
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildJsonUserState,Cyclomatic complexity of the method is 13
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildJsonUserState,Cyclomatic complexity of the method is 10
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserState,Cyclomatic complexity of the method is 8
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,Cyclomatic complexity of the method is 21
Complex Method,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildRestApiRequest,Cyclomatic complexity of the method is 10
Complex Method,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,Cyclomatic complexity of the method is 11
Long Parameter List,PubNubMessaging.Core,ClientNetworkStatus,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\ClientNetworkStatus.cs,ParseCheckSocketConnectException,The method has 5 parameters. Parameters: ex' channels' channelGroups' errorCallback' callback
Long Parameter List,PubNubMessaging.Core,PubnubClientError,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubClientError,The method has 11 parameters. Parameters: statusCode' errorSeverity' isDotNetException' message' detailedDotNetException' source' pubnubWebRequest' pubnubWebResponse' description' channel' channelGroup
Long Parameter List,PubNubMessaging.Core,PubnubClientError,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubClientError,The method has 9 parameters. Parameters: statusCode' errorSeverity' message' source' pubnubWebRequest' pubnubWebResponse' description' channel' channelGroup
Long Parameter List,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,FF,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,GG,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HH,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,II,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Encode,The method has 5 parameters. Parameters: output' outputOffset' input' inputOffset' count
Long Parameter List,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Decode,The method has 5 parameters. Parameters: output' outputOffset' input' inputOffset' count
Long Parameter List,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Subscribe,The method has 5 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Subscribe,The method has 5 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Publish,The method has 5 parameters. Parameters: channel' message' storeInHistory' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Publish,The method has 5 parameters. Parameters: channel' message' storeInHistory' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Presence,The method has 5 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Presence,The method has 5 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,DetailedHistory,The method has 7 parameters. Parameters: channel' start' end' count' reverse' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,DetailedHistory,The method has 7 parameters. Parameters: channel' start' end' count' reverse' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,DetailedHistory,The method has 5 parameters. Parameters: channel' start' userCallback' errorCallback' reverse
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,DetailedHistory,The method has 5 parameters. Parameters: channel' start' userCallback' errorCallback' reverse
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,HereNow,The method has 5 parameters. Parameters: channel' showUUIDList' includeUserState' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,HereNow,The method has 5 parameters. Parameters: channel' showUUIDList' includeUserState' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Unsubscribe,The method has 6 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Unsubscribe,The method has 6 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Unsubscribe,The method has 5 parameters. Parameters: channel' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Unsubscribe,The method has 5 parameters. Parameters: channel' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,PresenceUnsubscribe,The method has 6 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,PresenceUnsubscribe,The method has 6 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,PresenceUnsubscribe,The method has 5 parameters. Parameters: channel' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,PresenceUnsubscribe,The method has 5 parameters. Parameters: channel' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,GrantAccess,The method has 6 parameters. Parameters: channel' read' write' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,GrantAccess,The method has 5 parameters. Parameters: channel' read' write' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,GrantAccess,The method has 7 parameters. Parameters: channel' authenticationKey' read' write' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,GrantAccess,The method has 6 parameters. Parameters: channel' authenticationKey' read' write' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,GrantPresenceAccess,The method has 5 parameters. Parameters: channel' read' write' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,GrantPresenceAccess,The method has 6 parameters. Parameters: channel' read' write' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,GrantPresenceAccess,The method has 6 parameters. Parameters: channel' authenticationKey' read' write' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,GrantPresenceAccess,The method has 7 parameters. Parameters: channel' authenticationKey' read' write' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantAccess,The method has 6 parameters. Parameters: channelGroup' read' manage' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantAccess,The method has 5 parameters. Parameters: channelGroup' read' manage' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantAccess,The method has 7 parameters. Parameters: channelGroup' authenticationKey' read' manage' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantAccess,The method has 6 parameters. Parameters: channelGroup' authenticationKey' read' manage' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantPresenceAccess,The method has 5 parameters. Parameters: channelGroup' read' manage' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantPresenceAccess,The method has 6 parameters. Parameters: channelGroup' read' manage' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantPresenceAccess,The method has 6 parameters. Parameters: channelGroup' authenticationKey' read' manage' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantPresenceAccess,The method has 7 parameters. Parameters: channelGroup' authenticationKey' read' manage' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,SetUserState,The method has 6 parameters. Parameters: channel' channelGroup' uuid' jsonUserState' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,SetUserState,The method has 5 parameters. Parameters: channel' channelGroup' jsonUserState' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,SetUserState,The method has 6 parameters. Parameters: channel' channelGroup' uuid' keyValuePair' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,SetUserState,The method has 5 parameters. Parameters: channel' channelGroup' keyValuePair' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,GetUserState,The method has 5 parameters. Parameters: channel' channelGroup' uuid' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,RegisterDeviceForPush,The method has 5 parameters. Parameters: channel' pushType' pushToken' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,RegisterDeviceForPush,The method has 5 parameters. Parameters: channel' pushType' pushToken' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,RemoveChannelForDevicePush,The method has 5 parameters. Parameters: channel' pushType' pushToken' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,RemoveChannelForDevicePush,The method has 5 parameters. Parameters: channel' pushType' pushToken' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,AddChannelsToChannelGroup,The method has 5 parameters. Parameters: channels' nameSpace' groupName' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,AddChannelsToChannelGroup,The method has 5 parameters. Parameters: channels' nameSpace' groupName' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,RemoveChannelsFromChannelGroup,The method has 5 parameters. Parameters: channels' nameSpace' groupName' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,RemoveChannelsFromChannelGroup,The method has 5 parameters. Parameters: channels' nameSpace' groupName' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,Pubnub,The method has 5 parameters. Parameters: publishKey' subscribeKey' secretKey' cipherKey' sslOn
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Init,The method has 5 parameters. Parameters: publishKey' subscribeKey' secretKey' cipherKey' sslOn
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,InternetConnectionStatusWithUnitTestCheck,The method has 5 parameters. Parameters: channel' channelGroup' errorCallback' rawChannels' rawChannelGroups
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,InternetConnectionStatus,The method has 5 parameters. Parameters: channel' channelGroup' errorCallback' rawChannels' rawChannelGroups
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The method has 7 parameters. Parameters: type' channels' channelGroups' timetoken' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,CallErrorCallback,The method has 9 parameters. Parameters: errSeverity' msgSource' channel' channelGroup' errorCallback' message' errorType' req' res
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,CallErrorCallback,The method has 10 parameters. Parameters: errSeverity' msgSource' channel' channelGroup' errorCallback' message' currentHttpStatusCode' statusMessage' req' res
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,CallErrorCallback,The method has 8 parameters. Parameters: errSeverity' msgSource' channel' channelGroup' errorCallback' ex' req' res
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,CallErrorCallback,The method has 8 parameters. Parameters: errSeverity' msgSource' channel' channelGroup' errorCallback' webex' req' res
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PubnubCore,The method has 5 parameters. Parameters: publishKey' subscribeKey' secretKey' cipherKey' sslOn
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,DetailedHistory,The method has 7 parameters. Parameters: channel' start' end' count' reverse' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,DetailedHistory,The method has 7 parameters. Parameters: channel' start' end' count' reverse' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,DetailedHistory,The method has 5 parameters. Parameters: channel' start' userCallback' errorCallback' reverse
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,DetailedHistory,The method has 5 parameters. Parameters: channel' start' userCallback' errorCallback' reverse
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildDetailedHistoryRequest,The method has 5 parameters. Parameters: channel' start' end' count' reverse
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RegisterDeviceForPush,The method has 5 parameters. Parameters: channel' pushType' pushToken' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RegisterDeviceForPush,The method has 5 parameters. Parameters: channel' pushType' pushToken' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelForDevicePush,The method has 5 parameters. Parameters: channel' pushType' pushToken' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelForDevicePush,The method has 5 parameters. Parameters: channel' pushType' pushToken' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,AddChannelsToChannelGroup,The method has 5 parameters. Parameters: channels' nameSpace' groupName' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,AddChannelsToChannelGroup,The method has 5 parameters. Parameters: channels' nameSpace' groupName' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelsFromChannelGroup,The method has 5 parameters. Parameters: channels' nameSpace' groupName' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelsFromChannelGroup,The method has 5 parameters. Parameters: channels' nameSpace' groupName' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Publish,The method has 5 parameters. Parameters: channel' message' storeInHistory' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Publish,The method has 5 parameters. Parameters: channel' message' storeInHistory' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Subscribe,The method has 5 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Subscribe,The method has 5 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Presence,The method has 5 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Presence,The method has 5 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,The method has 6 parameters. Parameters: type' rawChannels' rawChannelGroups' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The method has 8 parameters. Parameters: type' channels' channelGroups' timetoken' userCallback' connectCallback' errorCallback' reconnect
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PresenceUnsubscribe,The method has 6 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PresenceUnsubscribe,The method has 6 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PresenceUnsubscribe,The method has 5 parameters. Parameters: channel' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PresenceUnsubscribe,The method has 5 parameters. Parameters: channel' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The method has 7 parameters. Parameters: type' channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Unsubscribe,The method has 5 parameters. Parameters: channel' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Unsubscribe,The method has 5 parameters. Parameters: channel' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Unsubscribe,The method has 6 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Unsubscribe,The method has 6 parameters. Parameters: channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,HereNow,The method has 5 parameters. Parameters: channel' showUUIDList' includeUserState' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserState,The method has 5 parameters. Parameters: channel' uuid' jsonUserState' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserState,The method has 6 parameters. Parameters: channel' channelGroup' uuid' jsonUserState' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserState,The method has 5 parameters. Parameters: channel' uuid' keyValuePair' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserState,The method has 6 parameters. Parameters: channel' channelGroup' uuid' keyValuePair' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SharedSetUserState,The method has 7 parameters. Parameters: channel' channelGroup' uuid' jsonChannelUserState' jsonChannelGroupUserState' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetUserState,The method has 5 parameters. Parameters: channel' channelGroup' uuid' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlRequestCommonExceptionHandler,The method has 8 parameters. Parameters: type' channels' channelGroups' requestTimeout' userCallback' connectCallback' errorCallback' resumeOnReconnect
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The method has 8 parameters. Parameters: type' channels' channelGroups' userCallback' connectCallback' errorCallback' reconnectMaxTried' resumeOnReconnect
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexInternalCallback,The method has 5 parameters. Parameters: type' multiplexResult' userCallback' connectCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToConnectCallback,The method has 5 parameters. Parameters: result' type' channels' channelGroups' connectCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The method has 5 parameters. Parameters: result' type' channels' channelGroups' userCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildGrantAccessRequest,The method has 5 parameters. Parameters: channel' authenticationKey' read' write' ttl
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GrantAccess,The method has 5 parameters. Parameters: channel' read' write' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GrantAccess,The method has 6 parameters. Parameters: channel' read' write' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GrantAccess,The method has 6 parameters. Parameters: channel' authenticationKey' read' write' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GrantAccess,The method has 7 parameters. Parameters: channel' authenticationKey' read' write' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GrantPresenceAccess,The method has 5 parameters. Parameters: channel' read' write' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GrantPresenceAccess,The method has 6 parameters. Parameters: channel' read' write' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GrantPresenceAccess,The method has 6 parameters. Parameters: channel' authenticationKey' read' write' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GrantPresenceAccess,The method has 7 parameters. Parameters: channel' authenticationKey' read' write' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildChannelGroupGrantAccessRequest,The method has 6 parameters. Parameters: channelGroup' authenticationKey' read' write' manage' ttl
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupGrantAccess,The method has 6 parameters. Parameters: channelGroup' read' write' manage' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupGrantAccess,The method has 7 parameters. Parameters: channelGroup' read' write' manage' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupGrantAccess,The method has 7 parameters. Parameters: channelGroup' authenticationKey' read' write' manage' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupGrantAccess,The method has 8 parameters. Parameters: channelGroup' authenticationKey' read' write' manage' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupGrantPresenceAccess,The method has 6 parameters. Parameters: channelGroup' read' write' manage' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupGrantPresenceAccess,The method has 7 parameters. Parameters: channelGroup' read' write' manage' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupGrantPresenceAccess,The method has 7 parameters. Parameters: channelGroup' authenticationKey' read' write' manage' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupGrantPresenceAccess,The method has 8 parameters. Parameters: channelGroup' authenticationKey' read' write' manage' ttl' userCallback' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The method has 7 parameters. Parameters: type' jsonString' channels' channelGroups' reconnect' lastTimetoken' errorCallback
Long Parameter List,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,PubnubWin,The method has 5 parameters. Parameters: publishKey' subscribeKey' secretKey' cipherKey' sslOn
Long Parameter List,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,Init,The method has 5 parameters. Parameters: publishKey' subscribeKey' secretKey' cipherKey' sslOn
Long Parameter List,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,InternetConnectionStatus,The method has 5 parameters. Parameters: channel' channelGroup' errorCallback' rawChannels' rawChannelGroups
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the parameter channelLocalUserStateCollection is 31.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the parameter channelGroupLocalUserStateCollection is 36.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the parameter channelGroupUserStateCollection is 31.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateReconnectTimer,The length of the parameter channelGroupReconnectCollection is 31.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,AddOrUpdateOrDeleteLocalUserState,The length of the parameter channelGroupUserStateDictionary is 31.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildJsonUserState,The length of the parameter channelGroupUserStateDictionary is 31.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SharedSetUserState,The length of the parameter deserializeChannelGroupUserState is 32.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,,The length of the parameter _pubnubWebRequestCallbackIntervalInSeconds is 42.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,,The length of the parameter _pubnubOperationTimeoutIntervalInSeconds is 40.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,,The length of the parameter _pubnubNetworkTcpCheckIntervalInSeconds is 39.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,,The length of the parameter _pubnubWebRequestRetryIntervalInSeconds is 39.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,,The length of the parameter _pubnubPresenceHeartbeatInSeconds is 33.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,,The length of the parameter _presenceHeartbeatIntervalInSeconds is 35.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,,The length of the parameter channelLocalClientHeartbeatTimer is 32.
Long Identifier,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,,The length of the parameter pushUnregisterDeviceParameters is 30.
Long Identifier,PubNubMessaging.Core,PubnubWebAsyncResult,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,,The length of the parameter pubnubDefaultLatencyInMilliSeconds is 34.
Long Statement,OSAE.OSAPubNub,OSAPUBNUB,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\OSAPubNub.cs,OwnTypes,The length of the statement  "                OSAEObjectTypeManager.ObjectTypeUpdate(oType.Name' oType.Name' oType.Description' gAppName' oType.BaseType' oType.Owner' oType.SysType' oType.Container' oType.HideRedundant); " is 174.
Long Statement,PubNubMessaging.Core,ClientNetworkStatus,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "									LoggingMethod.WriteToLog(string.Format("DateTime {0}' Response:{1}"' DateTime.Now.ToString()' responseFromServer)' LoggingMethod.LevelInfo); " is 140.
Long Statement,PubNubMessaging.Core,ClientNetworkStatus,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "					LoggingMethod.WriteToLog(string.Format("DateTime {0} checkInternetStatus LocalIP: {1}' RemoteEndPoint:{2}"' DateTime.Now.ToString()' localAddress.ToString()' remoteAddress)' LoggingMethod.LevelVerbose); " is 202.
Long Statement,PubNubMessaging.Core,ClientNetworkStatus,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "					LoggingMethod.WriteToLog(string.Format("DateTime {0} checkInternetStatus LocalIP: {1}' RemoteEndPoint:{2}"' DateTime.Now.ToString()' localAddress.ToString()' remoteAddress)' LoggingMethod.LevelVerbose); " is 202.
Long Statement,PubNubMessaging.Core,ClientNetworkStatus,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\ClientNetworkStatus.cs,ParseCheckSocketConnectException,The length of the statement  "            PubnubClientError error = new PubnubClientError(statusCode' PubnubErrorSeverity.Warn' true' ex.Message' ex' PubnubMessageSource.Client' null' null' errorDescription' string.Join("'"' channels)' string.Join("'"' channelGroups)); " is 227.
Long Statement,PubNubMessaging.Core,ClientNetworkStatus,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\ClientNetworkStatus.cs,ParseCheckSocketConnectException,The length of the statement  "			LoggingMethod.WriteToLog(string.Format("DateTime {0} checkInternetStatus Error. {1}"' DateTime.Now.ToString()' ex.ToString())' LoggingMethod.LevelError); " is 153.
Long Statement,PubNubMessaging.Core,PubnubClientError,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,ToString,The length of the statement  "			errorBuilder.AppendFormat("DetailedDotNetException={0} "' (_detailedDotNetException != null) ? _detailedDotNetException.ToString() : ""); " is 137.
Long Statement,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The length of the statement  "			else if (errorType == "System.FormatException" && errorMessage == "The input is not a valid Base-64 string as it contains a non-base 64 character' more than two padding characters' or an illegal character among the padding characters. ") " is 237.
Long Statement,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The length of the statement  "			else if (errorType == "System.Net.Sockets.SocketException" && errorMessage == "The requested name is valid' but no data of the requested type was found") " is 153.
Long Statement,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The length of the statement  "			else if (errorType == "System.Security.Cryptography.CryptographicException" && errorMessage == "Padding is invalid and cannot be removed.") " is 139.
Long Statement,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The length of the statement  "			else if (errorType == "System.Runtime.InteropServices.SEHException" && errorMessage == "External component has thrown an exception.") " is 133.
Long Statement,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantAccess,The length of the statement  "            return pubnub.ChannelGroupGrantAccess<T>(channelGroup' authenticationKey' read' false' manage' ttl' userCallback' errorCallback); " is 129.
Long Statement,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantAccess,The length of the statement  "            return pubnub.ChannelGroupGrantAccess<T>(channelGroup' authenticationKey' read' false' manage' userCallback' errorCallback); " is 124.
Long Statement,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantPresenceAccess,The length of the statement  "            return pubnub.ChannelGroupGrantPresenceAccess<T>(channelGroup' authenticationKey' read' false' manage' userCallback' errorCallback); " is 132.
Long Statement,PubNubMessaging.Core,Pubnub,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\Pubnub.cs,ChannelGroupGrantPresenceAccess,The length of the statement  "            return pubnub.ChannelGroupGrantPresenceAccess(channelGroup' authenticationKey' read' false' manage' ttl' userCallback' errorCallback); " is 134.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetwork,The length of the statement  "            if (netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))) " is 159.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                if (netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0)))  " is 159.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' channel={1} {2} reconnectNetworkCallback. Retry {3} of {4}"' DateTime.Now.ToString()' channel' netState.Type' channelInternetRetry[channel]' _pubnubNetworkCheckRetries)' LoggingMethod.LevelInfo); " is 249.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                        string activeChannel = (netState.Channels != null && netState.Channels.Length > 0) ? netState.Channels[index].ToString() : ""; " is 126.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                        string activeChannelGroup = (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0) ? netState.ChannelGroups[index].ToString() : ""; " is 146.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                        string message = string.Format("Detected internet connection problem. Retrying connection attempt {0} of {1}"' channelInternetRetry[channel]' _pubnubNetworkCheckRetries); " is 170.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0}' {1} {2} reconnectNetworkCallback. Internet Available : {3}"' DateTime.Now.ToString()' channel' netState.Type' channelInternetStatus[channel])' LoggingMethod.LevelInfo); " is 222.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                    MultiChannelSubscribeRequest<T>(netState.Type' netState.Channels' netState.ChannelGroups' netState.Timetoken' netState.Callback' netState.ConnectCallback' netState.ErrorCallback' true); " is 185.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                    MultiplexExceptionHandler(netState.Type' netState.Channels' netState.ChannelGroups' netState.Callback' netState.ConnectCallback' netState.ErrorCallback' true' false); " is 166.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' channelgroup={1} {2} reconnectNetworkCallback. Retry {3} of {4}"' DateTime.Now.ToString()' channelGroup' netState.Type' channelGroupInternetRetry[channelGroup]' _pubnubNetworkCheckRetries)' LoggingMethod.LevelInfo); " is 269.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                        string activeChannel = (netState.Channels != null && netState.Channels.Length > 0) ? netState.Channels[index].ToString() : ""; " is 126.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                        string activeChannelGroup = (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0) ? netState.ChannelGroups[index].ToString() : ""; " is 146.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                        string message = string.Format("Detected internet connection problem. Retrying connection attempt {0} of {1}"' channelGroupInternetRetry[channelGroup]' _pubnubNetworkCheckRetries); " is 180.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                            PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackKey] as PubnubChannelGroupCallback<T>; " is 122.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0}' channelgroup={1} {2} reconnectNetworkCallback. Internet Available : {3}"' DateTime.Now.ToString()' channelGroup' netState.Type' channelGroupInternetRetry[channelGroup])' LoggingMethod.LevelInfo); " is 249.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                    MultiChannelSubscribeRequest<T>(netState.Type' netState.Channels' netState.ChannelGroups' netState.Timetoken' netState.Callback' netState.ConnectCallback' netState.ErrorCallback' true); " is 185.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "                                    MultiplexExceptionHandler(netState.Type' netState.Channels' netState.ChannelGroups' netState.Callback' netState.ConnectCallback' netState.ErrorCallback' true' false); " is 166.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "					LoggingMethod.WriteToLog(string.Format("DateTime {0}' Unknown request state in reconnectNetworkCallback"' DateTime.Now.ToString())' LoggingMethod.LevelError); " is 158.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The length of the statement  "				LoggingMethod.WriteToLog(string.Format("DateTime {0} method:reconnectNetworkCallback \n Exception Details={1}"' DateTime.Now.ToString()' ex.ToString())' LoggingMethod.LevelError); " is 179.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,InternetConnectionStatus,The length of the statement  "			networkConnection = ClientNetworkStatus.CheckInternetStatus<T>(pubnetSystemActive' errorCallback' rawChannels' rawChannelGroups); " is 129.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The length of the statement  "                LoggingMethod.WriteToLog(string.Format("DateTime {0}' Subscribe - No internet connection for channel={1} and channelgroup={2}"' DateTime.Now.ToString()' string.Join("'"' channels)' ((channelGroups != null) ? string.Join("'"' channelGroups) : ""))' LoggingMethod.LevelInfo); " is 273.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectFromSuspendModeCallback,The length of the statement  "            LoggingMethod.WriteToLog(string.Format("DateTime {0}' Reconnect from Machine Suspend Mode."' DateTime.Now.ToString())' LoggingMethod.LevelInfo); " is 144.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectFromSuspendModeCallback,The length of the statement  "                            MultiChannelSubscribeRequest<T>(netState.Type' netState.Channels' netState.ChannelGroups' netState.Timetoken' netState.Callback' netState.ConnectCallback' netState.ErrorCallback' netState.Reconnect); " is 199.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectFromSuspendModeCallback,The length of the statement  "                    LoggingMethod.WriteToLog(string.Format("DateTime {0}' Unknown request state in ReconnectFromSuspendModeCallback"' DateTime.Now.ToString())' LoggingMethod.LevelError); " is 166.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectFromSuspendModeCallback,The length of the statement  "                LoggingMethod.WriteToLog(string.Format("DateTime {0} method:ReconnectFromSuspendModeCallback \n Exception Details={1}"' DateTime.Now.ToString()' ex.ToString())' LoggingMethod.LevelError); " is 187.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,CallErrorCallback,The length of the statement  "			PubnubClientError error = new PubnubClientError (statusCode' errSeverity' message' msgSource' req' res' errorDescription' channel' channelGroup); " is 145.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,CallErrorCallback,The length of the statement  "			PubnubClientError error = new PubnubClientError (statusCode' errSeverity' message' msgSource' req' res' errorDescription' channel' channelGroup); " is 145.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,CallErrorCallback,The length of the statement  "			PubnubClientError error = new PubnubClientError (statusCode' errSeverity' true' ex.Message' ex' msgSource' req' res' errorDescription' channel' channelGroup); " is 158.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,CallErrorCallback,The length of the statement  "			PubnubClientError error = new PubnubClientError (statusCode' errSeverity' true' webex.Message' webex' msgSource' req' res' errorDescription' channel' channelGroup); " is 164.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminatePendingWebRequest,The length of the statement  "                    callbackKey.ChannelGroup = (state.Type == ResponseType.Subscribe) ? activeChannelGroup.Replace("-pnpres"' "") : activeChannelGroup; " is 131.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelDictionary,The length of the statement  "						LoggingMethod.WriteToLog (string.Format ("DateTime {0} Remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString ()' channel)' LoggingMethod.LevelInfo); " is 197.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelDictionary,The length of the statement  "						LoggingMethod.WriteToLog (string.Format ("DateTime {0} Unable to remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString ()' channel)' LoggingMethod.LevelError); " is 208.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelDictionary,The length of the statement  "							LoggingMethod.WriteToLog (string.Format ("DateTime {0} Remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString ()' key)' LoggingMethod.LevelInfo); " is 193.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelDictionary,The length of the statement  "							LoggingMethod.WriteToLog (string.Format ("DateTime {0} Unable to remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString ()' key)' LoggingMethod.LevelError); " is 204.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelCallback,The length of the statement  "						LoggingMethod.WriteToLog (string.Format ("DateTime {0} RemoveChannelCallback from dictionary in RemoveChannelCallback for channel= {1}"' DateTime.Now.ToString ()' removeKey)' LoggingMethod.LevelInfo); " is 200.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelCallback,The length of the statement  "						LoggingMethod.WriteToLog (string.Format ("DateTime {0} Unable to RemoveChannelCallback from dictionary in RemoveChannelCallback for channel= {1}"' DateTime.Now.ToString ()' removeKey)' LoggingMethod.LevelError); " is 211.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelGroupCallback,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} RemoveChannelGroupCallback from dictionary in RemoveChannelGroupCallback for channelgroup= {1}"' DateTime.Now.ToString()' keyChannelGroup)' LoggingMethod.LevelInfo); " is 218.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveChannelGroupCallback,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} Unable to RemoveChannelGroupCallback from dictionary in RemoveChannelGroupCallback for channelgroup= {1}"' DateTime.Now.ToString()' keyChannelGroup)' LoggingMethod.LevelError); " is 229.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} RemoveUserState from local user state dictionary for channel= {1}"' DateTime.Now.ToString()' key)' LoggingMethod.LevelInfo); " is 177.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} Unable to RemoveUserState from local user state dictionary for channel= {1}"' DateTime.Now.ToString()' key)' LoggingMethod.LevelError); " is 188.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} RemoveUserState from user state dictionary for channel= {1}"' DateTime.Now.ToString()' key)' LoggingMethod.LevelInfo); " is 171.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} Unable to RemoveUserState from user state dictionary for channel= {1}"' DateTime.Now.ToString()' key)' LoggingMethod.LevelError); " is 182.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} RemoveUserState from local user state dictionary for channelgroup= {1}"' DateTime.Now.ToString()' key)' LoggingMethod.LevelInfo); " is 182.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} Unable to RemoveUserState from local user state dictionary for channelgroup= {1}"' DateTime.Now.ToString()' key)' LoggingMethod.LevelError); " is 193.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} RemoveUserState from user state dictionary for channelgroup= {1}"' DateTime.Now.ToString()' key)' LoggingMethod.LevelInfo); " is 176.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,RemoveUserState,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} Unable to RemoveUserState from user state dictionary for channelgroup= {1}"' DateTime.Now.ToString()' key)' LoggingMethod.LevelError); " is 187.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateLocalClientHeartbeatTimer,The length of the statement  "                            //LoggingMethod.WriteToLog (string.Format ("DateTime {0} Error while accessing requestHeatbeatTimer object in TerminateLocalClientHeartbeatTimer {1}"' DateTime.Now.ToString ()' ex.ToString ())' LoggingMethod.LevelInfo); " is 219.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateLocalClientHeartbeatTimer,The length of the statement  "							LoggingMethod.WriteToLog (string.Format ("DateTime {0} Remove local client heartbeat reference from collection for {1}"' DateTime.Now.ToString ()' requestUri.ToString ())' LoggingMethod.LevelInfo); " is 197.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateLocalClientHeartbeatTimer,The length of the statement  "							LoggingMethod.WriteToLog (string.Format ("DateTime {0} Unable to remove local client heartbeat reference from collection for {1}"' DateTime.Now.ToString ()' requestUri.ToString ())' LoggingMethod.LevelInfo); " is 207.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateLocalClientHeartbeatTimer,The length of the statement  "							LoggingMethod.WriteToLog (string.Format ("DateTime {0} TerminateLocalClientHeartbeatTimer(null) - Unable to remove local client heartbeat reference from collection for {1}"' DateTime.Now.ToString ()' key.ToString ())' LoggingMethod.LevelInfo); " is 243.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateReconnectTimer,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} TerminateReconnectTimer(null) - Unable to remove channel reconnect timer reference from collection for {1}"' DateTime.Now.ToString()' key.ToString())' LoggingMethod.LevelInfo); " is 229.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateReconnectTimer,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0} TerminateReconnectTimer(null) - Unable to remove channelgroup reconnect timer reference from collection for {1}"' DateTime.Now.ToString()' key.ToString())' LoggingMethod.LevelInfo); " is 234.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateCurrentSubscriberRequest,The length of the statement  "					LoggingMethod.WriteToLog (string.Format ("DateTime {0} TerminateCurrentSubsciberRequest {1}"' DateTime.Now.ToString ()' request.RequestUri.ToString ())' LoggingMethod.LevelInfo); " is 178.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildDetailedHistoryRequest,The length of the statement  "                parameterBuilder.AppendFormat("&auth={0}"' EncodeUricomponent(_authenticationKey' ResponseType.DetailedHistory' false' false)); " is 127.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildDetailedHistoryRequest,The length of the statement  "            parameterBuilder.AppendFormat("&uuid={0}"' EncodeUricomponent(sessionUUID' ResponseType.DetailedHistory' false' false)); " is 120.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildDetailedHistoryRequest,The length of the statement  "            parameterBuilder.AppendFormat("&pnsdk={0}"' EncodeUricomponent(_pnsdkVersion' ResponseType.DetailedHistory' false' true)); " is 122.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Publish,The length of the statement  "            if (string.IsNullOrEmpty(this.publishKey) || string.IsNullOrEmpty(this.publishKey.Trim()) || this.publishKey.Length <= 0) " is 121.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildPublishRequest,The length of the statement  "			string message = (_enableJsonEncodingForPublish) ? JsonEncodePublishMsg (originalMessage) : originalMessage.ToString (); " is 120.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,DecodeDecryptLoop,The length of the statement  "						object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : _jsonPluggableLibrary.DeserializeToObject (decryptMessage); " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,EncodeUricomponent,The length of the statement  "			if (type == ResponseType.Here_Now || type == ResponseType.DetailedHistory || type == ResponseType.Leave || type == ResponseType.PresenceHeartbeat || type == ResponseType.PushRegister || type == ResponseType.PushRemove || type == ResponseType.PushGet || type == ResponseType.PushUnregister)  " is 289.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Subscribe,The length of the statement  "			LoggingMethod.WriteToLog (string.Format ("DateTime {0}' requested subscribe for channel={1}"' DateTime.Now.ToString ()' channel)' LoggingMethod.LevelInfo); " is 155.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Subscribe,The length of the statement  "            if ((string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)) " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Subscribe,The length of the statement  "            LoggingMethod.WriteToLog(string.Format("DateTime {0}' requested subscribe for channel={1} and channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo); " is 188.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Subscribe,The length of the statement  "            MultiChannelSubscribeInit<T>(ResponseType.Subscribe' arrayChannel' arrayChannelGroup' userCallback' connectCallback' errorCallback); " is 132.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Presence,The length of the statement  "			LoggingMethod.WriteToLog (string.Format ("DateTime {0}' requested presence for channel={1}"' DateTime.Now.ToString ()' channel)' LoggingMethod.LevelInfo); " is 154.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Presence,The length of the statement  "            if ((string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)) " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Presence,The length of the statement  "            LoggingMethod.WriteToLog(string.Format("DateTime {0}' requested presence for channel={1} and channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo); " is 187.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Presence,The length of the statement  "            MultiChannelSubscribeInit<T>(ResponseType.Presence' arrayChannel' arrayChannelGroup' userCallback' connectCallback' errorCallback); " is 131.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,The length of the statement  "			bool networkConnection = InternetConnectionStatusWithUnitTestCheck<T> (channel' channelGroup' errorCallback' rawChannels' rawChannelGroups); " is 140.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,The length of the statement  "							PubnubErrorCode errorType = (IsPresenceChannel (channelName)) ? PubnubErrorCode.AlreadyPresenceSubscribed : PubnubErrorCode.AlreadySubscribed; " is 142.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,The length of the statement  "                            PubnubErrorCode errorType = (IsPresenceChannel(channelGroupName)) ? PubnubErrorCode.AlreadyPresenceSubscribed : PubnubErrorCode.AlreadySubscribed; " is 146.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0}' Aborting previous subscribe/presence requests having channel(s)={1}; channelgroup(s)={2}"' DateTime.Now.ToString()' multiChannelName' multiChannelGroupName)' LoggingMethod.LevelInfo); " is 237.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0}' Success to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelSubscribeInit)."' DateTime.Now.ToString()' multiChannelName' multiChannelGroupName)' LoggingMethod.LevelInfo); " is 252.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0}' Unable to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelSubscribeInit)."' DateTime.Now.ToString()' multiChannelName' multiChannelGroupName)' LoggingMethod.LevelInfo); " is 251.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0}' Unable to capture channel(s)={1}; channelgroup(s)={2} from _channelRequest to abort request."' DateTime.Now.ToString()' multiChannelName' multiChannelGroupName)' LoggingMethod.LevelInfo); " is 241.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "			if (multiChannelSubscribe != null && multiChannelSubscribe.Count <= 0 && multiChannelGroupSubscribe != null && multiChannelGroupSubscribe.Count <= 0) { " is 151.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' All channels are Unsubscribed. Further subscription was stopped"' DateTime.Now.ToString ())' LoggingMethod.LevelInfo); " is 174.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "                || (multiChannelGroup != "" && channelGroupInternetStatus.ContainsKey(multiChannelGroup) && !channelGroupInternetStatus[multiChannelGroup])) " is 140.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "				if (channelInternetRetry.ContainsKey (multiChannel) && (channelInternetRetry[multiChannel] >= _pubnubNetworkCheckRetries)) { " is 124.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "					LoggingMethod.WriteToLog (string.Format ("DateTime {0}' Subscribe channel={1} - No internet connection. MAXed retries for internet "' DateTime.Now.ToString ()' multiChannel)' LoggingMethod.LevelInfo); " is 200.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "					MultiplexExceptionHandler<T> (type' channels' channelGroups' userCallback' connectCallback' errorCallback' true' false); " is 120.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "                else if (channelGroupInternetRetry.ContainsKey(multiChannelGroup) && (channelGroupInternetRetry[multiChannelGroup] >= _pubnubNetworkCheckRetries)) " is 146.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "                    LoggingMethod.WriteToLog(string.Format("DateTime {0}' Subscribe channelgroup={1} - No internet connection. MAXed retries for internet "' DateTime.Now.ToString()' multiChannelGroup)' LoggingMethod.LevelInfo); " is 207.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "				if (ReconnectNetworkIfOverrideTcpKeepAlive<T>(type' channels' channelGroups' timetoken' userCallback' connectCallback' errorCallback)) { " is 136.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "                long minimumTimetoken2 = (multiChannelGroupSubscribe.Count > 0) ? multiChannelGroupSubscribe.Min(token => token.Value) : 0; " is 123.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "                long maximumTimetoken2 = (multiChannelGroupSubscribe.Count > 0) ? multiChannelGroupSubscribe.Max(token => token.Value) : 0; " is 123.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(string.Format("DateTime {0}' Building request for channel(s)={1}' channelgroup(s)={2} with timetoken={3}"' DateTime.Now.ToString()' multiChannel' multiChannelGroup' lastTimetoken)' LoggingMethod.LevelInfo); " is 231.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "                Uri requestUrl = BuildMultiChannelSubscribeRequest(channels' channelGroups'(Convert.ToInt64(timetoken.ToString()) == 0) ? Convert.ToInt64(timetoken.ToString()) : lastTimetoken); " is 177.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0} method:_subscribe \n channel={1} \n timetoken={2} \n Exception Details={3}"' DateTime.Now.ToString ()' string.Join ("'"' channels)' timetoken.ToString ()' ex.ToString ())' LoggingMethod.LevelError); " is 253.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The length of the statement  "				this.MultiChannelSubscribeRequest<T> (type' channels' channelGroups' timetoken' userCallback' connectCallback' errorCallback' false); " is 133.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildMultiChannelSubscribeRequest,The length of the statement  "                subscribeParamBuilder.AppendFormat("&state={0}"' EncodeUricomponent(channelsJsonState' ResponseType.Subscribe' false' false)); " is 126.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PresenceUnsubscribe,The length of the statement  "            if ((string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)) " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PresenceUnsubscribe,The length of the statement  "            LoggingMethod.WriteToLog(string.Format("DateTime {0}' requested presence-unsubscribe for channel(s)={1}"' DateTime.Now.ToString()' channel)' LoggingMethod.LevelInfo); " is 166.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PresenceUnsubscribe,The length of the statement  "            MultiChannelUnSubscribeInit<T>(ResponseType.PresenceUnsubscribe' channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback); " is 154.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PresenceUnsubscribe,The length of the statement  "			LoggingMethod.WriteToLog (string.Format ("DateTime {0}' requested presence-unsubscribe for channel(s)={1}"' DateTime.Now.ToString ()' channel)' LoggingMethod.LevelInfo); " is 169.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PresenceUnsubscribe,The length of the statement  "			MultiChannelUnSubscribeInit<T> (ResponseType.PresenceUnsubscribe' channel' null' userCallback' connectCallback' disconnectCallback' errorCallback); " is 147.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "            string[] rawChannelGroups = (channelGroup != null && channelGroup.Trim().Length > 0) ? channelGroup.Split(''') : new string[] { }; " is 130.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "							PubnubErrorCode errorType = (IsPresenceChannel (channelName)) ? PubnubErrorCode.NotPresenceSubscribed : PubnubErrorCode.NotSubscribed; " is 134.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "							LoggingMethod.WriteToLog (string.Format ("DateTime {0}' channel={1} unsubscribe response={2}"' DateTime.Now.ToString ()' channelName' message)' LoggingMethod.LevelInfo); " is 169.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "						LoggingMethod.WriteToLog (string.Format ("DateTime {0}' channel={1} unsubscribe response={2}"' DateTime.Now.ToString ()' rawChannels [index]' message)' LoggingMethod.LevelInfo); " is 177.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            string message = string.Format("{0}ChannelGroup Not Subscribed"' (IsPresenceChannel(channelGroupName)) ? "Presence " : ""); " is 123.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            PubnubErrorCode errorType = (IsPresenceChannel(channelGroupName)) ? PubnubErrorCode.NotPresenceSubscribed : PubnubErrorCode.NotSubscribed; " is 138.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0}' channelgroup={1} unsubscribe response={2}"' DateTime.Now.ToString()' channelGroupName' message)' LoggingMethod.LevelInfo); " is 176.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0}' channelgroup={1} unsubscribe response={2}"' DateTime.Now.ToString()' rawChannelGroups[index]' message)' LoggingMethod.LevelInfo); " is 183.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "						LoggingMethod.WriteToLog (string.Format ("DateTime {0}' Aborting previous subscribe/presence requests having channel(s)={1}; channelgroup(s)={2}"' DateTime.Now.ToString ()' multiChannelName' multiChannelGroupName)' LoggingMethod.LevelInfo); " is 240.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "							LoggingMethod.WriteToLog (string.Format ("DateTime {0}' Success to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelUnSubscribeInit)."' DateTime.Now.ToString ()' multiChannelName' multiChannelGroupName)' LoggingMethod.LevelInfo); " is 257.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0}' Unable to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelUnSubscribeInit)."' DateTime.Now.ToString()' multiChannelName' multiChannelGroupName)' LoggingMethod.LevelInfo); " is 253.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0}' Unable to capture channel(s)={1}; channelgroup(s)={2} from _channelRequest to abort request."' DateTime.Now.ToString()' multiChannelName' multiChannelGroupName)' LoggingMethod.LevelInfo); " is 241.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "						string jsonString = string.Format ("[1' \"Channel {0}Unsubscribed from {1}\"]"' (IsPresenceChannel (channelToBeRemoved)) ? "Presence " : ""' channelToBeRemoved.Replace ("-pnpres"' "")); " is 185.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "						LoggingMethod.WriteToLog (string.Format ("DateTime {0}' JSON response={1}"' DateTime.Now.ToString ()' jsonString)' LoggingMethod.LevelInfo); " is 140.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "						PubnubErrorCode errorType = (IsPresenceChannel (channelToBeRemoved)) ? PubnubErrorCode.PresenceUnsubscribeFailed : PubnubErrorCode.UnsubscribeFailed; " is 149.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "						LoggingMethod.WriteToLog (string.Format ("DateTime {0}' channel={1} unsubscribe error"' DateTime.Now.ToString ()' channelToBeRemoved)' LoggingMethod.LevelInfo); " is 160.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        string jsonString = string.Format("[1' \"ChannelGroup {0}Unsubscribed from {1}\"]"' (IsPresenceChannel(channelGroupToBeRemoved)) ? "Presence " : ""' channelGroupToBeRemoved.Replace("-pnpres"' "")); " is 197.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON response={1}"' DateTime.Now.ToString()' jsonString)' LoggingMethod.LevelInfo); " is 137.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        PubnubErrorCode errorType = (IsPresenceChannel(channelGroupToBeRemoved)) ? PubnubErrorCode.PresenceUnsubscribeFailed : PubnubErrorCode.UnsubscribeFailed; " is 153.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0}' channelgroup={1} unsubscribe error"' DateTime.Now.ToString()' channelGroupToBeRemoved)' LoggingMethod.LevelInfo); " is 167.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "					MultiChannelSubscribeRequest<T> (type' channels' channelGroups' 0' userCallback' connectCallback' errorCallback' false); " is 120.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelUnSubscribeInit,The length of the statement  "					LoggingMethod.WriteToLog (string.Format ("DateTime {0}' All channels are Unsubscribed. Further subscription was stopped"' DateTime.Now.ToString ())' LoggingMethod.LevelInfo); " is 174.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Unsubscribe,The length of the statement  "            LoggingMethod.WriteToLog(string.Format("DateTime {0}' requested unsubscribe for channel(s)={1}"' DateTime.Now.ToString()' channel)' LoggingMethod.LevelInfo); " is 157.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Unsubscribe,The length of the statement  "            MultiChannelUnSubscribeInit<T>(ResponseType.Unsubscribe' channel' null' userCallback' connectCallback' disconnectCallback' errorCallback); " is 138.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Unsubscribe,The length of the statement  "			if ((string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)) " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Unsubscribe,The length of the statement  "			LoggingMethod.WriteToLog (string.Format ("DateTime {0}' requested unsubscribe for channel(s)={1}"' DateTime.Now.ToString ()' channel)' LoggingMethod.LevelInfo); " is 160.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Unsubscribe,The length of the statement  "            MultiChannelUnSubscribeInit<T>(ResponseType.Unsubscribe' channel' channelGroup' userCallback' connectCallback' disconnectCallback' errorCallback); " is 146.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildMultiChannelLeaveRequest,The length of the statement  "                unsubscribeParamBuilder.AppendFormat("&state={0}"' EncodeUricomponent(channelsJsonState' ResponseType.Leave' false' false)); " is 124.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildPresenceHeartbeatRequest,The length of the statement  "                presenceHeartbeatBuilder.AppendFormat("&state={0}"' EncodeUricomponent(channelsJsonState' ResponseType.PresenceHeartbeat' false' false)); " is 137.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                    _channelLocalUserState.AddOrUpdate(channel' channelUserStateDictionary' (oldData' newData) => channelUserStateDictionary); " is 122.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                        _channelLocalUserState.AddOrUpdate(channel' channelUserStateDictionary' (oldData' newData) => channelUserStateDictionary); " is 122.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                    _channelGroupLocalUserState.AddOrUpdate(channelGroup' channelGroupUserStateDictionary' (oldData' newData) => channelGroupUserStateDictionary); " is 142.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                        _channelGroupLocalUserState.AddOrUpdate(channelGroup' channelGroupUserStateDictionary' (oldData' newData) => channelGroupUserStateDictionary); " is 142.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                retJsonUserState = string.Format("{{\"{0}\":{{{1}}}'\"{2}\":{{{3}}}}}"' channel' jsonChannelUserState' channelGroup' jsonChannelGroupUserState); " is 144.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildJsonUserState,The length of the statement  "                throw new ArgumentException("BuildJsonUserState takes either channel or channelGroup at one time. Send one at a time by passing empty value for other."); " is 153.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildJsonUserState,The length of the statement  "                        jsonStateBuilder.AppendFormat("\"{0}\":{1}"' channelUserStateKey' (channelUserStateValue.GetType().ToString() == "System.String") ? string.Format("\"{0}\""' channelUserStateValue) : channelUserStateValue); " is 205.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildJsonUserState,The length of the statement  "                        jsonStateBuilder.AppendFormat("\"{0}\":{1}"' channelGroupUserStateKey' (channelGroupUserStateValue.GetType().ToString() == "System.String") ? string.Format("\"{0}\""' channelGroupUserStateValue) : channelGroupUserStateValue); " is 225.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetLocalUserState,The length of the statement  "                jsonStateBuilder.AppendFormat("{0}:{1}'{2}:{3}"' channel' channelJsonUserState' channelGroup' channelGroupJsonUserState); " is 121.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserState,The length of the statement  "            if ((string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)) " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserState,The length of the statement  "            if ((string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)) " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserState,The length of the statement  "            SharedSetUserState<T>(channel' channelGroup' uuid' currentChannelUserState' currentChannelGroupUserState' userCallback' errorCallback); " is 135.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SharedSetUserState,The length of the statement  "            Dictionary<string' object> deserializeChannelUserState = _jsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonChannelUserState); " is 133.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SharedSetUserState,The length of the statement  "            Dictionary<string' object> deserializeChannelGroupUserState = _jsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonChannelGroupUserState); " is 143.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SharedSetUserState,The length of the statement  "                _channelUserState.AddOrUpdate(channel.Trim()' deserializeChannelUserState' (oldState' newState) => deserializeChannelUserState); " is 128.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SharedSetUserState,The length of the statement  "                _channelLocalUserState.AddOrUpdate(channel.Trim()' deserializeChannelUserState' (oldState' newState) => deserializeChannelUserState); " is 133.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SharedSetUserState,The length of the statement  "                _channelGroupUserState.AddOrUpdate(channelGroup.Trim()' deserializeChannelGroupUserState' (oldState' newState) => deserializeChannelGroupUserState); " is 148.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SharedSetUserState,The length of the statement  "                _channelGroupLocalUserState.AddOrUpdate(channelGroup.Trim()' deserializeChannelGroupUserState' (oldState' newState) => deserializeChannelGroupUserState); " is 153.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SharedSetUserState,The length of the statement  "                jsonUserState = string.Format("{{\"{0}\":{{{1}}}'\"{2}\":{{{3}}}}}"' channel' jsonChannelUserState' channelGroup' jsonChannelGroupUserState); " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetUserState,The length of the statement  "            if ((string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)) " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildSetUserStateRequest,The length of the statement  "                setUserStateParameters = string.Format("?state={0}&channel-group={1}"' EncodeUricomponent(jsonUserState' ResponseType.SetUserState' false' false)' EncodeUricomponent(channelGroup' ResponseType.SetUserState' false' false)); " is 222.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildSetUserStateRequest,The length of the statement  "                setUserStateParameters = string.Format("?state={0}"' EncodeUricomponent(jsonUserState' ResponseType.SetUserState' false' false)); " is 129.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildGetUserStateRequest,The length of the statement  "                getUserStateParameters = string.Format("&channel-group={0}"' EncodeUricomponent(channelGroup' ResponseType.GetUserState' false' false)); " is 136.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlRequestCommonExceptionHandler,The length of the statement  "                MultiplexExceptionHandler<T>(type' channels' channelGroups' userCallback' connectCallback' errorCallback' false' resumeOnReconnect); " is 132.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlRequestCommonExceptionHandler,The length of the statement  "            else if (type == ResponseType.ChannelGroupGrantAccess || type == ResponseType.ChannelGroupAuditAccess || type == ResponseType.ChannelGroupRevokeAccess) " is 151.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlRequestCommonExceptionHandler,The length of the statement  "            else if (type == ResponseType.PushRegister || type == ResponseType.PushRemove || type == ResponseType.PushGet || type == ResponseType.PushUnregister) " is 149.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlRequestCommonExceptionHandler,The length of the statement  "            else if (type == ResponseType.ChannelGroupAdd || type == ResponseType.ChannelGroupRemove || type == ResponseType.ChannelGroupGet) " is 129.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' MAX retries reached. Exiting the subscribe for channel(s) = {1}; channelgroup(s)={2}"' DateTime.Now.ToString ()' channel' channelGroup)' LoggingMethod.LevelInfo); " is 218.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "                MultiChannelUnSubscribeInit<T>(ResponseType.Unsubscribe' string.Join("'"' activeChannels)' string.Join("'"' activeChannelGroups)' null' null' null' null); " is 154.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "                if (channelInternetStatus.ContainsKey(string.Join("'"' activeChannels)) || channelGroupInternetStatus.ContainsKey(string.Join("'"' activeChannelGroups))) " is 153.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "                string[] subscribeChannelGroups = activeChannelGroups.Where(filterChannelGroup => !filterChannelGroup.Contains("-pnpres")).ToArray(); " is 133.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "                string[] presenceChannelGroups = activeChannelGroups.Where(filterChannelGroup => filterChannelGroup.Contains("-pnpres")).ToArray(); " is 131.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "						LoggingMethod.WriteToLog (string.Format ("DateTime {0}' Channel Subscribe JSON network error response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 169.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "						string message = string.Format ("Channel(s) Presence Unsubscribed after {0} failed retries"' _pubnubNetworkCheckRetries); " is 121.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "						LoggingMethod.WriteToLog (string.Format ("DateTime {0}' Channel(s) Presence-Subscribe JSON network error response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 181.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "                            PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackKey] as PubnubChannelGroupCallback<T>; " is 122.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0}' ChannelGroup(s) Subscribe JSON network error response={1}"' DateTime.Now.ToString()' message)' LoggingMethod.LevelInfo); " is 174.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "                        string message = string.Format("ChannelGroup(s) Presence Unsubscribed after {0} failed retries"' _pubnubNetworkCheckRetries); " is 125.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "                            PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackKey] as PubnubChannelGroupCallback<T>; " is 122.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexExceptionHandler,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime {0}' ChannelGroup(s) Presence-Subscribe JSON network error response={1}"' DateTime.Now.ToString()' message)' LoggingMethod.LevelInfo); " is 183.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PublishExceptionHandler,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' JSON publish response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 145.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PAMAccessExceptionHandler,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' PAMAccessExceptionHandler response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 158.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WhereNowExceptionHandler,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' WhereNowExceptionHandler response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 157.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,HereNowExceptionHandler,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' HereNowExceptionHandler response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 156.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GlobalHereNowExceptionHandler,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' GlobalHereNowExceptionHandler response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 162.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,DetailedHistoryExceptionHandler,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' DetailedHistoryExceptionHandler response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 164.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TimeExceptionHandler,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' TimeExceptionHandler response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 153.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserStateExceptionHandler,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' SetUserStateExceptionHandler response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 161.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetUserStateExceptionHandler,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' GetUserStateExceptionHandler response={1}"' DateTime.Now.ToString ()' message)' LoggingMethod.LevelInfo); " is 161.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PushNotificationExceptionHandler,The length of the statement  "                LoggingMethod.WriteToLog(string.Format("DateTime {0}' PushExceptionHandler response={1}"' DateTime.Now.ToString()' message)' LoggingMethod.LevelInfo); " is 150.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupExceptionHandler,The length of the statement  "                LoggingMethod.WriteToLog(string.Format("DateTime {0}' ChannelGroupExceptionHandler response={1}"' DateTime.Now.ToString()' message)' LoggingMethod.LevelInfo); " is 158.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                    networkConnection = CheckInternetConnectionStatus<T>(pubnetSystemActive' currentState.ErrorCallback' currentState.Channels' currentState.ChannelGroups); " is 152.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "						string[] subscriberChannels = (currentState.Channels != null) ? currentState.Channels.Where (s => s.Contains ("-pnpres") == false).ToArray() : null; " is 148.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                        string[] subscriberChannelGroups = (currentState.ChannelGroups != null) ? currentState.ChannelGroups.Where(s => s.Contains("-pnpres") == false).ToArray() : null; " is 161.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "						if ((subscriberChannels != null && subscriberChannels.Length > 0) || (subscriberChannelGroups != null && subscriberChannelGroups.Length > 0)) " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPubnubLocalClientHeartBeatTimeoutCallback,The length of the statement  "				        && (currentState.Type == ResponseType.Subscribe || currentState.Type == ResponseType.Presence || currentState.Type == ResponseType.PresenceHeartbeat) " is 149.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPubnubLocalClientHeartBeatTimeoutCallback,The length of the statement  "                        networkConnection = CheckInternetConnectionStatus<T>(pubnetSystemActive' currentState.ErrorCallback' currentState.Channels' currentState.ChannelGroups); " is 152.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPubnubLocalClientHeartBeatTimeoutCallback,The length of the statement  "					LoggingMethod.WriteToLog(string.Format ("DateTime: {0}' OnPubnubLocalClientHeartBeatTimeoutCallback - Internet connection = {1}"' DateTime.Now.ToString ()' networkConnection)' LoggingMethod.LevelVerbose); " is 204.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexInternalCallback,The length of the statement  "                LoggingMethod.WriteToLog(string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString())' LoggingMethod.LevelError); " is 142.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexInternalCallback,The length of the statement  "                MultiChannelSubscribeRequest<T>(type' channels' channelGroups' (object)message[1]' userCallback' connectCallback' errorCallback' false); //ATTENTION: null HARDCODED " is 164.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToConnectCallback,The length of the statement  "                                PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackKey] as PubnubChannelGroupCallback<T>; " is 122.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToConnectCallback,The length of the statement  "                                PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[pCallbackKey] as PubnubChannelGroupCallback<T>; " is 123.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ProcessResponseCallbacks,The length of the statement  "				ResponseToConnectCallback<T>(result' asynchRequestState.Type' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.ConnectCallback); " is 161.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ProcessResponseCallbacks,The length of the statement  "				ResponseToUserCallback<T> (result' asynchRequestState.Type' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.UserCallback); " is 156.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The length of the statement  "							string currentChannel = (messageChannels.Length == 1) ? (string)messageChannels [0] : (string)messageChannels [messageIndex]; " is 125.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The length of the statement  "                                currentChannelGroup = (messageChannelGroups.Length == 1) ? (string)messageChannelGroups[0] : (string)messageChannelGroups[messageIndex]; " is 136.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The length of the statement  "									object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : _jsonPluggableLibrary.DeserializeToObject (decryptMessage); " is 141.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The length of the statement  "                            callbackGroupKey.Type = (currentChannelGroup.LastIndexOf("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence; " is 124.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The length of the statement  "                                if ((typeof(T) == typeof(string) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.String]")) || " is 122.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The length of the statement  "                                    PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<T>; " is 127.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The length of the statement  "                                    PubnubChannelGroupCallback<string> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<string>; " is 135.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The length of the statement  "                                    PubnubChannelGroupCallback<object> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<object>; " is 135.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GoToCallback,The length of the statement  "				if ((int)error.Severity <= (int)_errorLevel) { //Checks whether the error serverity falls in the range of error filter level " is 124.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildGrantAccessRequest,The length of the statement  "                queryStringBuilder.AppendFormat("auth={0}"' EncodeUricomponent(authenticationKey' ResponseType.GrantAccess' false' false)); " is 123.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildGrantAccessRequest,The length of the statement  "				queryStringBuilder.AppendFormat ("{0}channel={1}"' (queryStringBuilder.Length > 0) ? "&" : ""' EncodeUricomponent(channel' ResponseType.GrantAccess' false'false)); " is 163.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildAuditAccessRequest,The length of the statement  "                queryStringBuilder.AppendFormat("auth={0}"' EncodeUricomponent(authenticationKey' ResponseType.AuditAccess' false' false)); " is 123.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildAuditAccessRequest,The length of the statement  "				queryStringBuilder.AppendFormat ("{0}channel={1}"' (queryStringBuilder.Length > 0) ? "&" : ""' EncodeUricomponent (channel' ResponseType.AuditAccess' false' false)); " is 165.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildAuditAccessRequest,The length of the statement  "            queryStringBuilder.AppendFormat("{0}pnsdk={1}"' (queryStringBuilder.Length > 0) ? "&" : ""' EncodeUricomponent(_pnsdkVersion' ResponseType.AuditAccess' false' true)); " is 166.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildAuditAccessRequest,The length of the statement  "            queryStringBuilder.AppendFormat("{0}uuid={1}"' (queryStringBuilder.Length > 0) ? "&" : ""' EncodeUricomponent(sessionUUID' ResponseType.AuditAccess' false' false)); " is 164.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GrantAccess,The length of the statement  "			if (string.IsNullOrEmpty (this.secretKey) || string.IsNullOrEmpty (this.secretKey.Trim ()) || this.secretKey.Length <= 0) { " is 123.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildChannelGroupGrantAccessRequest,The length of the statement  "                queryStringBuilder.AppendFormat("auth={0}"' EncodeUricomponent(authenticationKey' ResponseType.ChannelGroupGrantAccess' false' false)); " is 135.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildChannelGroupGrantAccessRequest,The length of the statement  "                queryStringBuilder.AppendFormat("{0}channel-group={1}"' (queryStringBuilder.Length > 0) ? "&" : ""' EncodeUricomponent(channelGroup' ResponseType.ChannelGroupGrantAccess' false' false)); " is 186.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildChannelGroupGrantAccessRequest,The length of the statement  "            queryStringBuilder.AppendFormat("&pnsdk={0}"' EncodeUricomponent(_pnsdkVersion' ResponseType.ChannelGroupGrantAccess' false' true)); " is 132.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildChannelGroupGrantAccessRequest,The length of the statement  "            queryStringBuilder.AppendFormat("&uuid={0}"' EncodeUricomponent(sessionUUID' ResponseType.ChannelGroupGrantAccess' false' false)); " is 130.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildChannelGroupAuditAccessRequest,The length of the statement  "                queryStringBuilder.AppendFormat("auth={0}"' EncodeUricomponent(authenticationKey' ResponseType.ChannelGroupAuditAccess' false' false)); " is 135.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildChannelGroupAuditAccessRequest,The length of the statement  "                queryStringBuilder.AppendFormat("{0}channel-group={1}"' (queryStringBuilder.Length > 0) ? "&" : ""' EncodeUricomponent(channelGroup' ResponseType.ChannelGroupAuditAccess' false' false)); " is 186.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildChannelGroupAuditAccessRequest,The length of the statement  "            queryStringBuilder.AppendFormat("{0}pnsdk={1}"' (queryStringBuilder.Length > 0) ? "&" : ""' EncodeUricomponent(_pnsdkVersion' ResponseType.ChannelGroupAuditAccess' false' true)); " is 178.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildChannelGroupAuditAccessRequest,The length of the statement  "            queryStringBuilder.AppendFormat("{0}uuid={1}"' (queryStringBuilder.Length > 0) ? "&" : ""' EncodeUricomponent(sessionUUID' ResponseType.ChannelGroupAuditAccess' false' false)); " is 176.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupGrantPresenceAccess,The length of the statement  "            return ChannelGroupGrantPresenceAccess<T>(channelGroup' authenticationKey' read' write' manage' -1' userCallback' errorCallback); " is 129.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ChannelGroupGrantPresenceAccess,The length of the statement  "            return ChannelGroupGrantAccess(presenceChannel' authenticationKey' read' write' manage' ttl' userCallback' errorCallback); " is 122.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPubnubWebRequestTimeout,The length of the statement  "                        string currentMultiChannelGroup = (currentState.ChannelGroups == null) ? "" : string.Join("'"' currentState.ChannelGroups); " is 123.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPubnubWebRequestTimeout,The length of the statement  "                        LoggingMethod.WriteToLog(string.Format("DateTime: {0}' OnPubnubWebRequestTimeout: client request timeout reached.Request abort for channel={1} ;channelgroup={2}"' DateTime.Now.ToString()' currentMultiChannel' currentMultiChannelGroup)' LoggingMethod.LevelInfo); " is 261.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPubnubWebRequestTimeout,The length of the statement  "					LoggingMethod.WriteToLog (string.Format ("DateTime: {0}' OnPubnubWebRequestTimeout: client request timeout reached. However state is unknown"' DateTime.Now.ToString ())' LoggingMethod.LevelError); " is 196.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPubnubWebRequestTimeout,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime: {0}' **WP7 OnPubnubWebRequestTimeout**"' DateTime.Now.ToString ())' LoggingMethod.LevelError); " is 146.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The length of the statement  "							Dictionary<string' object> globalHereNowDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString); " is 120.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The length of the statement  "                            long minimumTimetoken2 = (multiChannelGroupSubscribe.Count > 0) ? multiChannelGroupSubscribe.Min(token => token.Value) : 0; " is 123.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The length of the statement  "                            long maximumTimetoken2 = (multiChannelGroupSubscribe.Count > 0) ? multiChannelGroupSubscribe.Max(token => token.Value) : 0; " is 123.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The length of the statement  "                            Dictionary<string' object> channelGroupPAMDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString); " is 121.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The length of the statement  "                                PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackKey] as PubnubChannelGroupCallback<T>; " is 122.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TimerWhenOverrideTcpKeepAlive,The length of the statement  "			channelLocalClientHeartbeatTimer.AddOrUpdate (requestUri' localClientHeartBeatTimer' (key' oldState) => localClientHeartBeatTimer); " is 131.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlProcessRequest,The length of the statement  "				if (!_channelRequest.ContainsKey (channel) && (pubnubRequestState.Type == ResponseType.Subscribe || pubnubRequestState.Type == ResponseType.Presence)) { " is 152.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlProcessRequest,The length of the statement  "				LoggingMethod.WriteToLog (string.Format ("DateTime {0}' Request={1}"' DateTime.Now.ToString ()' requestUri.ToString ())' LoggingMethod.LevelInfo); " is 146.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlProcessRequest,The length of the statement  "                        string multiChannelGroup = (pubnubRequestState.ChannelGroups != null) ? string.Join("'"' pubnubRequestState.ChannelGroups) : ""; " is 128.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlProcessRequest,The length of the statement  "                            multiChannel' multiChannelGroup' pubnubRequestState.ErrorCallback' ex' pubnubRequestState.Request' pubnubRequestState.Response); " is 128.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlProcessRequest,The length of the statement  "                    LoggingMethod.WriteToLog(string.Format("DateTime {0} Exception={1}"' DateTime.Now.ToString()' ex.ToString())' LoggingMethod.LevelError); " is 136.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlProcessRequest,The length of the statement  "                    UrlRequestCommonExceptionHandler<T>(pubnubRequestState.Type' pubnubRequestState.Channels' pubnubRequestState.ChannelGroups' false' pubnubRequestState.UserCallback' pubnubRequestState.ConnectCallback' pubnubRequestState.ErrorCallback' false); " is 241.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildRestApiRequest,The length of the statement  "            else if (type == ResponseType.PushRegister || type == ResponseType.PushRemove || type == ResponseType.PushGet || type == ResponseType.PushUnregister) " is 149.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildRestApiRequest,The length of the statement  "            else if (type == ResponseType.ChannelGroupAdd || type == ResponseType.ChannelGroupRemove || type == ResponseType.ChannelGroupGet) " is 129.
Long Statement,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildRestApiRequest,The length of the statement  "                || type == ResponseType.ChannelGroupGrantAccess || type == ResponseType.ChannelGroupAuditAccess || type == ResponseType.ChannelGroupRevokeAccess) " is 145.
Long Statement,PubNubMessaging.Core,PubnubWebRequestBase,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Abort,The length of the statement  "						PubnubClientError error = new PubnubClientError (pubnubStatusCode' PubnubErrorSeverity.Critical' true' webEx.Message' webEx' PubnubMessageSource.Client' null' null' errorDescription' ""'""); " is 190.
Long Statement,PubNubMessaging.Core,PubnubWebRequestBase,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Abort,The length of the statement  "						PubnubClientError error = new PubnubClientError (statusCode' PubnubErrorSeverity.Critical' true' ex.Message' ex' PubnubMessageSource.Client' null' null' errorDescription' ""'""); " is 178.
Long Statement,PubNubMessaging.Core,PubnubWebRequestBase,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GoToCallback,The length of the statement  "				if ((int)error.Severity <= (int)filterErrorLevel) { //Checks whether the error serverity falls in the range of error filter level " is 129.
Long Statement,PubNubMessaging.Core,PubnubWebRequestBase,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,EndGetResponse,The length of the statement  "				WebException simulateException = new WebException ("Machine suspend mode enabled. No request will be processed."' WebExceptionStatus.Pending); " is 142.
Long Statement,PubNubMessaging.Core,PubnubWebRequestBase,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,EndGetResponse,The length of the statement  "				WebException simulateException = new WebException ("For simulating network fail' the remote name could not be resolved"' WebExceptionStatus.ConnectFailure); " is 156.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SetProxy,The length of the statement  "                LoggingMethod.WriteToLog(string.Format("DateTime {0}' ProxyServer={1}; ProxyPort={2}; ProxyUserName={3}"' DateTime.Now.ToString()' _pubnubProxy.ProxyServer' _pubnubProxy.ProxyPort' _pubnubProxy.ProxyUserName)' LoggingMethod.LevelInfo); " is 235.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,GeneratePowerSuspendEvent,The length of the statement  "#if (!SILVERLIGHT && !WINDOWS_PHONE && !MONOTOUCH && !__IOS__ && !MONODROID && !__ANDROID__ && !UNITY_STANDALONE && !UNITY_WEBPLAYER && !UNITY_IOS && !UNITY_ANDROID && !NETFX_CORE) " is 180.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,GeneratePowerResumeEvent,The length of the statement  "#if (!SILVERLIGHT && !WINDOWS_PHONE && !MONOTOUCH && !__IOS__ && !MONODROID && !__ANDROID__ && !UNITY_STANDALONE && !UNITY_WEBPLAYER && !UNITY_IOS && !UNITY_ANDROID && !NETFX_CORE) " is 180.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,InternetConnectionStatus,The length of the statement  "            networkConnection = ClientNetworkStatus.CheckInternetStatus<T>(pubnetSystemActive' errorCallback' rawChannels' rawChannelGroups); " is 129.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,ForceCanonicalPathAndQuery,The length of the statement  "#elif ((!__MonoCS__) && (!SILVERLIGHT) && !WINDOWS_PHONE && !UNITY_STANDALONE && !UNITY_WEBPLAYER && !UNITY_IOS && !UNITY_ANDROID) " is 130.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The length of the statement  "            //For SL' Ensure that the RequestURI length <= 1482 for Large Text Message. If RequestURI Length < 1343' Successful Publish occurs " is 130.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The length of the statement  "            IAsyncResult asyncResult = request.BeginGetResponse(new AsyncCallback(UrlProcessResponseCallback<T>)' pubnubRequestState); " is 122.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The length of the statement  "            Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.Type) * 1000' Timeout.Infinite); " is 170.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The length of the statement  "                IAsyncResult asyncResult = request.BeginGetResponse(new AsyncCallback(UrlProcessResponseCallback<T>)' pubnubRequestState); " is 122.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The length of the statement  "                ThreadPool.RegisterWaitForSingleObject(asyncResult.AsyncWaitHandle' new WaitOrTimerCallback(OnPubnubWebRequestTimeout<T>)' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.Type) * 1000' true); " is 217.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The length of the statement  "                if ((pubnubRequestState.Channels != null && pubnubRequestState.Channels.Length > 0 && pubnubRequestState.Channels.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0) " is 178.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The length of the statement  "                    || (pubnubRequestState.ChannelGroups != null && pubnubRequestState.ChannelGroups.Length > 0 && pubnubRequestState.ChannelGroups.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0)) " is 193.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The length of the statement  "                        presenceHeartbeatTimer = new Timer(OnPresenceHeartbeatIntervalTimeout<T>' presenceHeartbeatState' base.PresenceHeartbeatInterval * 1000' base.PresenceHeartbeatInterval * 1000); " is 176.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,TimerWhenOverrideTcpKeepAlive,The length of the statement  "			localClientHeartBeatTimer = new Timer(new TimerCallback(OnPubnubLocalClientHeartBeatTimeoutCallback<T>)' pubnubRequestState' 0' " is 127.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,TimerWhenOverrideTcpKeepAlive,The length of the statement  "			channelLocalClientHeartbeatTimer.AddOrUpdate(requestUri' localClientHeartBeatTimer' (key' oldState) => localClientHeartBeatTimer); " is 130.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,ProcessResponseCallbackExceptionHandler,The length of the statement  "            LoggingMethod.WriteToLog(string.Format("DateTime {0} Exception= {1} for URL: {2}"' DateTime.Now.ToString()' ex.ToString()' asynchRequestState.Request.RequestUri.ToString())' LoggingMethod.LevelError); " is 200.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,ProcessResponseCallbackExceptionHandler,The length of the statement  "            UrlRequestCommonExceptionHandler<T>(asynchRequestState.Type' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Timeout' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback' false); " is 262.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The length of the statement  "                LoggingMethod.WriteToLog(string.Format("DateTime {0}' _urlRequest - Internet connection problem"' DateTime.Now.ToString())' LoggingMethod.LevelError); " is 150.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The length of the statement  "                            string multiChannelGroup = (asynchRequestState.ChannelGroups != null) ? string.Join("'"' asynchRequestState.ChannelGroups) : ""; " is 128.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0} {1} channel = {2} _urlRequest - Internet connection retry {3} of {4}"' DateTime.Now.ToString()' asynchRequestState.Type' multiChannel' channelInternetRetry[channel]' base.NetworkCheckMaxRetries)' LoggingMethod.LevelInfo); " is 274.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The length of the statement  "                            string message = string.Format("Detected internet connection problem. Retrying connection attempt {0} of {1}"' channelInternetRetry[channel]' base.NetworkCheckMaxRetries); " is 171.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The length of the statement  "                            CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client' multiChannel' multiChannelGroup' asynchRequestState.ErrorCallback' message' PubnubErrorCode.NoInternetRetryConnect' null' null); " is 200.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The length of the statement  "                            string multiChannelGroup = (asynchRequestState.ChannelGroups != null) ? string.Join("'"' asynchRequestState.ChannelGroups) : ""; " is 128.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0} {1} channelgroup = {2} _urlRequest - Internet connection retry {3} of {4}"' DateTime.Now.ToString()' asynchRequestState.Type' multiChannelGroup' channelGroupInternetRetry[channelGroup]' base.NetworkCheckMaxRetries)' LoggingMethod.LevelInfo); " is 294.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The length of the statement  "                            string message = string.Format("Detected internet connection problem. Retrying connection attempt {0} of {1}"' channelGroupInternetRetry[channelGroup]' base.NetworkCheckMaxRetries); " is 181.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The length of the statement  "                            CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client' multiChannel' multiChannelGroup' asynchRequestState.ErrorCallback' message' PubnubErrorCode.NoInternetRetryConnect' null' null); " is 200.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,ProcessResponseCallbackWebExceptionHandler,The length of the statement  "            LoggingMethod.WriteToLog(string.Format("DateTime {0}' WebException: {1}"' DateTime.Now.ToString()' webEx.ToString())' LoggingMethod.LevelError); " is 144.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,ProcessResponseCallbackWebExceptionHandler,The length of the statement  "            UrlRequestCommonExceptionHandler<T>(asynchRequestState.Type' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Timeout' " is 151.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo); " is 196.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                            PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup); " is 237.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                            PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup); " is 237.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback); " is 236.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                    LoggingMethod.WriteToLog(string.Format("DateTime {0}' Request aborted for channel={1}' channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo); " is 181.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0)) " is 150.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                            multiChannelSubscribe.AddOrUpdate(currentChannel' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString())); " is 147.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                            multiChannelGroupSubscribe.AddOrUpdate(currentChannelGroup' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString())); " is 157.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                        MultiplexInternalCallback<T>(asynchRequestState.Type' result' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback); " is 165.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo); " is 196.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                if ((int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414) " is 186.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                    string statusMessage = deserializeStatus.ContainsKey("message") ? deserializeStatus["message"].ToString() : (deserializeStatus.ContainsKey("error") ? deserializeStatus["error"].ToString() : jsonString); " is 202.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' jsonString' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup); " is 234.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback); " is 236.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                    if (asynchRequestState.Channels != null || asynchRequestState.ChannelGroups != null || asynchRequestState.Type == ResponseType.Time) " is 132.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                            LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo); " is 149.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo); " is 149.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                            LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo); " is 149.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                if (!pubnetSystemActive && ex.Message.IndexOf("The IAsyncResult object was not returned from the corresponding asynchronous method on this class.") == -1) " is 154.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                            activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response); " is 133.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The length of the statement  "                                            activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response); " is 133.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,InitiatePowerModeCheck,The length of the statement  "#if (!SILVERLIGHT && !WINDOWS_PHONE && !MONOTOUCH && !__IOS__ && !MONODROID && !__ANDROID__ && !UNITY_STANDALONE && !UNITY_WEBPLAYER && !UNITY_IOS && !UNITY_ANDROID && !NETFX_CORE) " is 180.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,InitiatePowerModeCheck,The length of the statement  "				LoggingMethod.WriteToLog(string.Format("DateTime {0}' Initiated System Event - PowerModeChanged."' DateTime.Now.ToString())' LoggingMethod.LevelInfo); " is 150.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,InitiatePowerModeCheck,The length of the statement  "				LoggingMethod.WriteToLog(string.Format("DateTime {0} No support for System Event - PowerModeChanged."' DateTime.Now.ToString())' LoggingMethod.LevelError); " is 155.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,InitiatePowerModeCheck,The length of the statement  "				LoggingMethod.WriteToLog(string.Format("DateTime {0} {1}"' DateTime.Now.ToString()' ex.ToString())' LoggingMethod.LevelError); " is 126.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SystemEvents_PowerModeChanged,The length of the statement  "				LoggingMethod.WriteToLog(string.Format("DateTime {0}' System entered into Suspend Mode."' DateTime.Now.ToString())' LoggingMethod.LevelInfo); " is 141.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SystemEvents_PowerModeChanged,The length of the statement  "					LoggingMethod.WriteToLog(string.Format("DateTime {0}' Disabled Timer for heartbeat "' DateTime.Now.ToString())' LoggingMethod.LevelInfo); " is 137.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SystemEvents_PowerModeChanged,The length of the statement  "				LoggingMethod.WriteToLog(string.Format("DateTime {0}' System entered into Resume/Awake Mode."' DateTime.Now.ToString())' LoggingMethod.LevelInfo); " is 146.
Long Statement,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SystemEvents_PowerModeChanged,The length of the statement  "					LoggingMethod.WriteToLog(string.Format("DateTime {0}' Enabled Timer for heartbeat "' DateTime.Now.ToString())' LoggingMethod.LevelInfo); " is 136.
Long Statement,PubNubMessaging.Core,PubnubWebRequestCreator,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SetUserAgent,The length of the statement  "            req.Headers["UserAgent"] = string.Format("ua_string=({0} {1}) PubNub-csharp/3.6"' userOS.Platform.ToString()' userOS.Version.ToString()); " is 137.
Long Statement,PubNubMessaging.Core,PubnubCrypto,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,ComputeHashRaw,The length of the statement  "#if (SILVERLIGHT || WINDOWS_PHONE || MONOTOUCH || __IOS__ || MONODROID || __ANDROID__ || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_IOS || UNITY_ANDROID) " is 155.
Long Statement,PubNubMessaging.Core,PubnubCrypto,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,EncryptOrDecrypt,The length of the statement  "            SymmetricKeyAlgorithmProvider algoritmProvider = SymmetricKeyAlgorithmProvider.OpenAlgorithm(SymmetricAlgorithmNames.AesCbcPkcs7); " is 130.
Long Statement,PubNubMessaging.Core,PubnubCrypto,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,EncryptOrDecrypt,The length of the statement  "                    decrypted = System.Text.Encoding.ASCII.GetString(decrypto.TransformFinalBlock(decryptedBytes' 0' decryptedBytes.Length)); " is 121.
Long Statement,PubNubMessaging.Core,PubnubCrypto,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,EncryptOrDecrypt,The length of the statement  "                    LoggingMethod.WriteToLog(string.Format("DateTime {0} Decrypt Error. {1}"' DateTime.Now.ToString()' ex.ToString())' LoggingMethod.LevelVerbose); " is 143.
Long Statement,PubNubMessaging.Core,PubnubCrypto,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,EncryptOrDecrypt,The length of the statement  "                    //LoggingMethod.WriteToLog(string.Format("DateTime {0} Decrypt Error. {1}"' DateTime.Now.ToString()' ex.ToString())' LoggingMethod.LevelVerbose); " is 145.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetwork,The conditional expression  "netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The conditional expression  "netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetworkCallback,The conditional expression  "channelGroup != "" && channelGroupInternetStatus.ContainsKey(channelGroup)                                   && (netState.Type == ResponseType.Subscribe || netState.Type == ResponseType.Presence)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,EncodeUricomponent,The conditional expression  "type == ResponseType.Here_Now || type == ResponseType.DetailedHistory || type == ResponseType.Leave || type == ResponseType.PresenceHeartbeat || type == ResponseType.PushRegister || type == ResponseType.PushRemove || type == ResponseType.PushGet || type == ResponseType.PushUnregister"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Subscribe,The conditional expression  "(string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Presence,The conditional expression  "(string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeInit,The conditional expression  "rawChannels != null && rawChannels.Length == 0 && rawChannelGroups != null && rawChannelGroups.Length > 0"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The conditional expression  "multiChannelSubscribe != null && multiChannelSubscribe.Count <= 0 && multiChannelGroupSubscribe != null && multiChannelGroupSubscribe.Count <= 0"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiChannelSubscribeRequest,The conditional expression  "((channelInternetStatus.ContainsKey(multiChannel) && !channelInternetStatus[multiChannel])                  || (multiChannelGroup != "" && channelGroupInternetStatus.ContainsKey(multiChannelGroup) && !channelGroupInternetStatus[multiChannelGroup]))                  && pubnetSystemActive"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PresenceUnsubscribe,The conditional expression  "(string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,Unsubscribe,The conditional expression  "(string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserState,The conditional expression  "(string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,SetUserState,The conditional expression  "(string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetUserState,The conditional expression  "(string.IsNullOrEmpty(channel) || channel.Trim().Length <= 0) && (string.IsNullOrEmpty(channelGroup) || channelGroup.Trim().Length <= 0)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,UrlRequestCommonExceptionHandler,The conditional expression  "type == ResponseType.PushRegister || type == ResponseType.PushRemove || type == ResponseType.PushGet || type == ResponseType.PushUnregister"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPresenceHeartbeatIntervalTimeout,The conditional expression  "(subscriberChannels != null && subscriberChannels.Length > 0) || (subscriberChannelGroups != null && subscriberChannelGroups.Length > 0)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,OnPubnubLocalClientHeartBeatTimeoutCallback,The conditional expression  "(channelInternetStatus.ContainsKey(channel) || channelGroupInternetStatus.ContainsKey(channelGroup))  				        && (currentState.Type == ResponseType.Subscribe || currentState.Type == ResponseType.Presence || currentState.Type == ResponseType.PresenceHeartbeat)  				        && overrideTcpKeepAlive"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The conditional expression  "(typeof(T) == typeof(string) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.String]")) ||  								            (typeof(T) == typeof(object) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.Object]"))"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The conditional expression  "(typeof(T) == typeof(string) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.String]")) ||                                              (typeof(T) == typeof(object) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.Object]"))"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GoToCallback,The conditional expression  "error.StatusCode != 107                          && error.StatusCode != 105                          && error.StatusCode != 130                          && error.StatusCode != 4040"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The conditional expression  "result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == """  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildRestApiRequest,The conditional expression  "type == ResponseType.PushRegister || type == ResponseType.PushRemove || type == ResponseType.PushGet || type == ResponseType.PushUnregister"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildRestApiRequest,The conditional expression  "type == ResponseType.DetailedHistory                   || type == ResponseType.GrantAccess || type == ResponseType.AuditAccess || type == ResponseType.RevokeAccess                  || type == ResponseType.ChannelGroupGrantAccess || type == ResponseType.ChannelGroupAuditAccess || type == ResponseType.ChannelGroupRevokeAccess"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The conditional expression  "(pubnubRequestState.Channels != null && pubnubRequestState.Channels.Length > 0 && pubnubRequestState.Channels.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0)                      || (pubnubRequestState.ChannelGroups != null && pubnubRequestState.ChannelGroups.Length > 0 && pubnubRequestState.ChannelGroups.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The conditional expression  "(webEx.Status == WebExceptionStatus.NameResolutionFailure //No network              || webEx.Status == WebExceptionStatus.ConnectFailure //Sending Keep-alive packet failed (No network)/Server is down.              || webEx.Status == WebExceptionStatus.ServerProtocolViolation //Problem with proxy or ISP              || webEx.Status == WebExceptionStatus.ProtocolError) && (!overrideTcpKeepAlive)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The conditional expression  "!overrideTcpKeepAlive && (                                              (channelInternetStatus.ContainsKey(channel) && !channelInternetStatus[channel])                                                   || (channelGroupInternetStatus.ContainsKey(channelGroup) && !channelGroupInternetStatus[channelGroup])                                                  )"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The conditional expression  "(asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0)"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The conditional expression  "(int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414"  is complex.
Complex Conditional,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The conditional expression  "result == null && currentHttpStatusCode == HttpStatusCode.NotFound                          && (asynchRequestState.Type == ResponseType.Presence || asynchRequestState.Type == ResponseType.Subscribe)                          && webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse""  is complex.
Virtual Method Call from Constructor,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,MD5,The constructor "MD5" calls a virtual method "Initialize".
Virtual Method Call from Constructor,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PubnubCore,The constructor "PubnubCore" calls a virtual method "Init".
Virtual Method Call from Constructor,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PubnubCore,The constructor "PubnubCore" calls a virtual method "Init".
Virtual Method Call from Constructor,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,PubnubCore,The constructor "PubnubCore" calls a virtual method "Init".
Empty Catch Block,PubNubMessaging.Core,LoggingMethod,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,WriteToLog,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateLocalClientHeartbeatTimer,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SystemEvents_PowerModeChanged,The method has an empty catch block.
Magic Number,OSAE.OSAPubNub,OSAPUBNUB,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\OSAPubNub.cs,ProcessCommand,The following statement contains a magic number: if (sMethod == "SENDMESSAGE")              {                  string sText = Common.PatternParse(sParam1);                  OSAEObjectPropertyManager.ObjectPropertySet(gAppName' "Speaking"' "TRUE"' gAppName);                  Thread.Sleep(500);                  OSAEObjectPropertyManager.ObjectPropertySet(gAppName' "Speaking"' "FALSE"' gAppName);              }
Magic Number,PubNubMessaging.Core,ClientNetworkStatus,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\ClientNetworkStatus.cs,CheckSocketConnect,The following statement contains a magic number: try  			{  				#if (SILVERLIGHT || WINDOWS_PHONE)  				using (Socket socket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp))  				{  					SocketAsyncEventArgs sae = new SocketAsyncEventArgs();  					sae.UserToken = state;  					sae.RemoteEndPoint = new DnsEndPoint("pubsub.pubnub.com"' 80);  					sae.Completed += new EventHandler<SocketAsyncEventArgs>(socketAsync_Completed<T>);  					bool test = socket.ConnectAsync(sae);    					mreSocketAsync.WaitOne(1000);  					sae.Completed -= new EventHandler<SocketAsyncEventArgs>(socketAsync_Completed<T>);  					socket.Close();  				}                  #elif NETFX_CORE                  CheckSocketConnectAsync();                  #elif (UNITY_IOS || UNITY_ANDROID)  				request = (HttpWebRequest)WebRequest.Create("http://pubsub.pubnub.com");  				if(request!= null){  					request.Timeout = HeartbeatInterval * 1000;  					request.ContentType = "application/json";  					response = request.GetResponse ();  					if(response != null){  						if(((HttpWebResponse)response).ContentLength <= 0){  							_status = false;  							throw new Exception("Failed to connect");  						} else {  							using(Stream dataStream = response.GetResponseStream ()){  								using(StreamReader reader = new StreamReader (dataStream)){  									string responseFromServer = reader.ReadToEnd ();  									LoggingMethod.WriteToLog(string.Format("DateTime {0}' Response:{1}"' DateTime.Now.ToString()' responseFromServer)' LoggingMethod.LevelInfo);  									_status = true;  									callback(true);  									reader.Close();  								}  								dataStream.Close();  							}  						}  					}   				}  				#elif(__MonoCS__)  				udp = new UdpClient("pubsub.pubnub.com"' 80);  				IPAddress localAddress = ((IPEndPoint)udp.Client.LocalEndPoint).Address;  				if(udp != null && udp.Client != null){  					EndPoint remotepoint = udp.Client.RemoteEndPoint;  					string remoteAddress = (remotepoint != null) ? remotepoint.ToString() : "";  					LoggingMethod.WriteToLog(string.Format("DateTime {0} checkInternetStatus LocalIP: {1}' RemoteEndPoint:{2}"' DateTime.Now.ToString()' localAddress.ToString()' remoteAddress)' LoggingMethod.LevelVerbose);  					_status =true;  					callback(true);  				}  				#else  				using (UdpClient udp = new UdpClient("pubsub.pubnub.com"' 80))  				{  					IPAddress localAddress = ((IPEndPoint)udp.Client.LocalEndPoint).Address;  					EndPoint remotepoint = udp.Client.RemoteEndPoint;  					string remoteAddress = (remotepoint != null) ? remotepoint.ToString() : "";  					udp.Close();    					LoggingMethod.WriteToLog(string.Format("DateTime {0} checkInternetStatus LocalIP: {1}' RemoteEndPoint:{2}"' DateTime.Now.ToString()' localAddress.ToString()' remoteAddress)' LoggingMethod.LevelVerbose);  					callback(true);  				}  				#endif  			}  			#if (UNITY_IOS || UNITY_ANDROID)  			catch (WebException webEx){    				if(webEx.Message.Contains("404")){  					_status =true;  					callback(true);  				} else {  					_status =false;  					ParseCheckSocketConnectException<T>(webEx' channels' errorCallback' callback);  				}  			}  			#endif  			catch (Exception ex)  			{  				#if(__MonoCS__)  				_status = false;  				#endif  				ParseCheckSocketConnectException<T>(ex' channels' channelGroups' errorCallback' callback);  			}  			finally  			{  				#if (UNITY_IOS || UNITY_ANDROID)  				if(response!=null){  					response.Close();    					response = null;  				}    				if(request!=null){  					request = null;  				}  				#elif(__MonoCS__)  				if(udp!=null){  					udp.Close();  				}  				#endif  				#if(UNITY_IOS)  				GC.Collect();  				#endif  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The following statement contains a magic number: switch (statusCode)  			{  				case 400:  				if (httpErrorCodeMessage.ToUpper() == "MESSAGE TOO LARGE")  				{  					ret = PubnubErrorCode.MessageTooLarge;  				}  				else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY")  				{  					ret = PubnubErrorCode.InvalidKey;  				}  				else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")  				{  					ret = PubnubErrorCode.BadRequest;  				}                  else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                  {                      ret = PubnubErrorCode.NoUuidSpecified;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                  {                      ret = PubnubErrorCode.InvalidTimestamp;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                  {                      ret = PubnubErrorCode.InvalidTypeArgument;                  }                  else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                  {                      ret = PubnubErrorCode.EmptyGroupSubscription;                  }                  else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                  {                      ret = PubnubErrorCode.CouldNotParseRequest;                  }  				break;  				case 401:  				    ret = PubnubErrorCode.InvalidSubscribeKey;  				break;  				case 402:  				if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")  				{  					ret = PubnubErrorCode.PamNotEnabled;  				}  				break;  				case 403:  				if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")  				{  					ret = PubnubErrorCode.Forbidden;  				}  				else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")  				{  					ret = PubnubErrorCode.SignatureDoesNotMatch;  				}  				break;                  case 404:                  ret = PubnubErrorCode.NotFound;                  break;                  case 414:  				ret = PubnubErrorCode.RequestUriTooLong;  				break;  				case 500:  				ret = PubnubErrorCode.InternalServerError;  				break;  				case 502:  				ret = PubnubErrorCode.BadGateway;  				break;                  case 503:                  ret = PubnubErrorCode.ServiceUnavailable;                  break;  				case 504:  				ret = PubnubErrorCode.GatewayTimeout;  				break;  				default:                  ret = PubnubErrorCode.None;  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The following statement contains a magic number: switch (statusCode)  			{  				case 400:  				if (httpErrorCodeMessage.ToUpper() == "MESSAGE TOO LARGE")  				{  					ret = PubnubErrorCode.MessageTooLarge;  				}  				else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY")  				{  					ret = PubnubErrorCode.InvalidKey;  				}  				else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")  				{  					ret = PubnubErrorCode.BadRequest;  				}                  else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                  {                      ret = PubnubErrorCode.NoUuidSpecified;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                  {                      ret = PubnubErrorCode.InvalidTimestamp;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                  {                      ret = PubnubErrorCode.InvalidTypeArgument;                  }                  else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                  {                      ret = PubnubErrorCode.EmptyGroupSubscription;                  }                  else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                  {                      ret = PubnubErrorCode.CouldNotParseRequest;                  }  				break;  				case 401:  				    ret = PubnubErrorCode.InvalidSubscribeKey;  				break;  				case 402:  				if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")  				{  					ret = PubnubErrorCode.PamNotEnabled;  				}  				break;  				case 403:  				if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")  				{  					ret = PubnubErrorCode.Forbidden;  				}  				else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")  				{  					ret = PubnubErrorCode.SignatureDoesNotMatch;  				}  				break;                  case 404:                  ret = PubnubErrorCode.NotFound;                  break;                  case 414:  				ret = PubnubErrorCode.RequestUriTooLong;  				break;  				case 500:  				ret = PubnubErrorCode.InternalServerError;  				break;  				case 502:  				ret = PubnubErrorCode.BadGateway;  				break;                  case 503:                  ret = PubnubErrorCode.ServiceUnavailable;                  break;  				case 504:  				ret = PubnubErrorCode.GatewayTimeout;  				break;  				default:                  ret = PubnubErrorCode.None;  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The following statement contains a magic number: switch (statusCode)  			{  				case 400:  				if (httpErrorCodeMessage.ToUpper() == "MESSAGE TOO LARGE")  				{  					ret = PubnubErrorCode.MessageTooLarge;  				}  				else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY")  				{  					ret = PubnubErrorCode.InvalidKey;  				}  				else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")  				{  					ret = PubnubErrorCode.BadRequest;  				}                  else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                  {                      ret = PubnubErrorCode.NoUuidSpecified;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                  {                      ret = PubnubErrorCode.InvalidTimestamp;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                  {                      ret = PubnubErrorCode.InvalidTypeArgument;                  }                  else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                  {                      ret = PubnubErrorCode.EmptyGroupSubscription;                  }                  else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                  {                      ret = PubnubErrorCode.CouldNotParseRequest;                  }  				break;  				case 401:  				    ret = PubnubErrorCode.InvalidSubscribeKey;  				break;  				case 402:  				if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")  				{  					ret = PubnubErrorCode.PamNotEnabled;  				}  				break;  				case 403:  				if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")  				{  					ret = PubnubErrorCode.Forbidden;  				}  				else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")  				{  					ret = PubnubErrorCode.SignatureDoesNotMatch;  				}  				break;                  case 404:                  ret = PubnubErrorCode.NotFound;                  break;                  case 414:  				ret = PubnubErrorCode.RequestUriTooLong;  				break;  				case 500:  				ret = PubnubErrorCode.InternalServerError;  				break;  				case 502:  				ret = PubnubErrorCode.BadGateway;  				break;                  case 503:                  ret = PubnubErrorCode.ServiceUnavailable;                  break;  				case 504:  				ret = PubnubErrorCode.GatewayTimeout;  				break;  				default:                  ret = PubnubErrorCode.None;  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The following statement contains a magic number: switch (statusCode)  			{  				case 400:  				if (httpErrorCodeMessage.ToUpper() == "MESSAGE TOO LARGE")  				{  					ret = PubnubErrorCode.MessageTooLarge;  				}  				else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY")  				{  					ret = PubnubErrorCode.InvalidKey;  				}  				else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")  				{  					ret = PubnubErrorCode.BadRequest;  				}                  else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                  {                      ret = PubnubErrorCode.NoUuidSpecified;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                  {                      ret = PubnubErrorCode.InvalidTimestamp;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                  {                      ret = PubnubErrorCode.InvalidTypeArgument;                  }                  else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                  {                      ret = PubnubErrorCode.EmptyGroupSubscription;                  }                  else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                  {                      ret = PubnubErrorCode.CouldNotParseRequest;                  }  				break;  				case 401:  				    ret = PubnubErrorCode.InvalidSubscribeKey;  				break;  				case 402:  				if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")  				{  					ret = PubnubErrorCode.PamNotEnabled;  				}  				break;  				case 403:  				if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")  				{  					ret = PubnubErrorCode.Forbidden;  				}  				else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")  				{  					ret = PubnubErrorCode.SignatureDoesNotMatch;  				}  				break;                  case 404:                  ret = PubnubErrorCode.NotFound;                  break;                  case 414:  				ret = PubnubErrorCode.RequestUriTooLong;  				break;  				case 500:  				ret = PubnubErrorCode.InternalServerError;  				break;  				case 502:  				ret = PubnubErrorCode.BadGateway;  				break;                  case 503:                  ret = PubnubErrorCode.ServiceUnavailable;                  break;  				case 504:  				ret = PubnubErrorCode.GatewayTimeout;  				break;  				default:                  ret = PubnubErrorCode.None;  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The following statement contains a magic number: switch (statusCode)  			{  				case 400:  				if (httpErrorCodeMessage.ToUpper() == "MESSAGE TOO LARGE")  				{  					ret = PubnubErrorCode.MessageTooLarge;  				}  				else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY")  				{  					ret = PubnubErrorCode.InvalidKey;  				}  				else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")  				{  					ret = PubnubErrorCode.BadRequest;  				}                  else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                  {                      ret = PubnubErrorCode.NoUuidSpecified;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                  {                      ret = PubnubErrorCode.InvalidTimestamp;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                  {                      ret = PubnubErrorCode.InvalidTypeArgument;                  }                  else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                  {                      ret = PubnubErrorCode.EmptyGroupSubscription;                  }                  else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                  {                      ret = PubnubErrorCode.CouldNotParseRequest;                  }  				break;  				case 401:  				    ret = PubnubErrorCode.InvalidSubscribeKey;  				break;  				case 402:  				if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")  				{  					ret = PubnubErrorCode.PamNotEnabled;  				}  				break;  				case 403:  				if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")  				{  					ret = PubnubErrorCode.Forbidden;  				}  				else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")  				{  					ret = PubnubErrorCode.SignatureDoesNotMatch;  				}  				break;                  case 404:                  ret = PubnubErrorCode.NotFound;                  break;                  case 414:  				ret = PubnubErrorCode.RequestUriTooLong;  				break;  				case 500:  				ret = PubnubErrorCode.InternalServerError;  				break;  				case 502:  				ret = PubnubErrorCode.BadGateway;  				break;                  case 503:                  ret = PubnubErrorCode.ServiceUnavailable;                  break;  				case 504:  				ret = PubnubErrorCode.GatewayTimeout;  				break;  				default:                  ret = PubnubErrorCode.None;  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The following statement contains a magic number: switch (statusCode)  			{  				case 400:  				if (httpErrorCodeMessage.ToUpper() == "MESSAGE TOO LARGE")  				{  					ret = PubnubErrorCode.MessageTooLarge;  				}  				else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY")  				{  					ret = PubnubErrorCode.InvalidKey;  				}  				else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")  				{  					ret = PubnubErrorCode.BadRequest;  				}                  else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                  {                      ret = PubnubErrorCode.NoUuidSpecified;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                  {                      ret = PubnubErrorCode.InvalidTimestamp;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                  {                      ret = PubnubErrorCode.InvalidTypeArgument;                  }                  else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                  {                      ret = PubnubErrorCode.EmptyGroupSubscription;                  }                  else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                  {                      ret = PubnubErrorCode.CouldNotParseRequest;                  }  				break;  				case 401:  				    ret = PubnubErrorCode.InvalidSubscribeKey;  				break;  				case 402:  				if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")  				{  					ret = PubnubErrorCode.PamNotEnabled;  				}  				break;  				case 403:  				if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")  				{  					ret = PubnubErrorCode.Forbidden;  				}  				else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")  				{  					ret = PubnubErrorCode.SignatureDoesNotMatch;  				}  				break;                  case 404:                  ret = PubnubErrorCode.NotFound;                  break;                  case 414:  				ret = PubnubErrorCode.RequestUriTooLong;  				break;  				case 500:  				ret = PubnubErrorCode.InternalServerError;  				break;  				case 502:  				ret = PubnubErrorCode.BadGateway;  				break;                  case 503:                  ret = PubnubErrorCode.ServiceUnavailable;                  break;  				case 504:  				ret = PubnubErrorCode.GatewayTimeout;  				break;  				default:                  ret = PubnubErrorCode.None;  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The following statement contains a magic number: switch (statusCode)  			{  				case 400:  				if (httpErrorCodeMessage.ToUpper() == "MESSAGE TOO LARGE")  				{  					ret = PubnubErrorCode.MessageTooLarge;  				}  				else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY")  				{  					ret = PubnubErrorCode.InvalidKey;  				}  				else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")  				{  					ret = PubnubErrorCode.BadRequest;  				}                  else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                  {                      ret = PubnubErrorCode.NoUuidSpecified;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                  {                      ret = PubnubErrorCode.InvalidTimestamp;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                  {                      ret = PubnubErrorCode.InvalidTypeArgument;                  }                  else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                  {                      ret = PubnubErrorCode.EmptyGroupSubscription;                  }                  else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                  {                      ret = PubnubErrorCode.CouldNotParseRequest;                  }  				break;  				case 401:  				    ret = PubnubErrorCode.InvalidSubscribeKey;  				break;  				case 402:  				if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")  				{  					ret = PubnubErrorCode.PamNotEnabled;  				}  				break;  				case 403:  				if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")  				{  					ret = PubnubErrorCode.Forbidden;  				}  				else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")  				{  					ret = PubnubErrorCode.SignatureDoesNotMatch;  				}  				break;                  case 404:                  ret = PubnubErrorCode.NotFound;                  break;                  case 414:  				ret = PubnubErrorCode.RequestUriTooLong;  				break;  				case 500:  				ret = PubnubErrorCode.InternalServerError;  				break;  				case 502:  				ret = PubnubErrorCode.BadGateway;  				break;                  case 503:                  ret = PubnubErrorCode.ServiceUnavailable;                  break;  				case 504:  				ret = PubnubErrorCode.GatewayTimeout;  				break;  				default:                  ret = PubnubErrorCode.None;  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The following statement contains a magic number: switch (statusCode)  			{  				case 400:  				if (httpErrorCodeMessage.ToUpper() == "MESSAGE TOO LARGE")  				{  					ret = PubnubErrorCode.MessageTooLarge;  				}  				else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY")  				{  					ret = PubnubErrorCode.InvalidKey;  				}  				else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")  				{  					ret = PubnubErrorCode.BadRequest;  				}                  else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                  {                      ret = PubnubErrorCode.NoUuidSpecified;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                  {                      ret = PubnubErrorCode.InvalidTimestamp;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                  {                      ret = PubnubErrorCode.InvalidTypeArgument;                  }                  else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                  {                      ret = PubnubErrorCode.EmptyGroupSubscription;                  }                  else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                  {                      ret = PubnubErrorCode.CouldNotParseRequest;                  }  				break;  				case 401:  				    ret = PubnubErrorCode.InvalidSubscribeKey;  				break;  				case 402:  				if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")  				{  					ret = PubnubErrorCode.PamNotEnabled;  				}  				break;  				case 403:  				if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")  				{  					ret = PubnubErrorCode.Forbidden;  				}  				else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")  				{  					ret = PubnubErrorCode.SignatureDoesNotMatch;  				}  				break;                  case 404:                  ret = PubnubErrorCode.NotFound;                  break;                  case 414:  				ret = PubnubErrorCode.RequestUriTooLong;  				break;  				case 500:  				ret = PubnubErrorCode.InternalServerError;  				break;  				case 502:  				ret = PubnubErrorCode.BadGateway;  				break;                  case 503:                  ret = PubnubErrorCode.ServiceUnavailable;                  break;  				case 504:  				ret = PubnubErrorCode.GatewayTimeout;  				break;  				default:                  ret = PubnubErrorCode.None;  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The following statement contains a magic number: switch (statusCode)  			{  				case 400:  				if (httpErrorCodeMessage.ToUpper() == "MESSAGE TOO LARGE")  				{  					ret = PubnubErrorCode.MessageTooLarge;  				}  				else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY")  				{  					ret = PubnubErrorCode.InvalidKey;  				}  				else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")  				{  					ret = PubnubErrorCode.BadRequest;  				}                  else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                  {                      ret = PubnubErrorCode.NoUuidSpecified;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                  {                      ret = PubnubErrorCode.InvalidTimestamp;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                  {                      ret = PubnubErrorCode.InvalidTypeArgument;                  }                  else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                  {                      ret = PubnubErrorCode.EmptyGroupSubscription;                  }                  else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                  {                      ret = PubnubErrorCode.CouldNotParseRequest;                  }  				break;  				case 401:  				    ret = PubnubErrorCode.InvalidSubscribeKey;  				break;  				case 402:  				if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")  				{  					ret = PubnubErrorCode.PamNotEnabled;  				}  				break;  				case 403:  				if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")  				{  					ret = PubnubErrorCode.Forbidden;  				}  				else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")  				{  					ret = PubnubErrorCode.SignatureDoesNotMatch;  				}  				break;                  case 404:                  ret = PubnubErrorCode.NotFound;                  break;                  case 414:  				ret = PubnubErrorCode.RequestUriTooLong;  				break;  				case 500:  				ret = PubnubErrorCode.InternalServerError;  				break;  				case 502:  				ret = PubnubErrorCode.BadGateway;  				break;                  case 503:                  ret = PubnubErrorCode.ServiceUnavailable;                  break;  				case 504:  				ret = PubnubErrorCode.GatewayTimeout;  				break;  				default:                  ret = PubnubErrorCode.None;  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeHelper,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,GetErrorType,The following statement contains a magic number: switch (statusCode)  			{  				case 400:  				if (httpErrorCodeMessage.ToUpper() == "MESSAGE TOO LARGE")  				{  					ret = PubnubErrorCode.MessageTooLarge;  				}  				else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY")  				{  					ret = PubnubErrorCode.InvalidKey;  				}  				else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")  				{  					ret = PubnubErrorCode.BadRequest;  				}                  else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                  {                      ret = PubnubErrorCode.NoUuidSpecified;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                  {                      ret = PubnubErrorCode.InvalidTimestamp;                  }                  else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                  {                      ret = PubnubErrorCode.InvalidTypeArgument;                  }                  else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                  {                      ret = PubnubErrorCode.EmptyGroupSubscription;                  }                  else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                  {                      ret = PubnubErrorCode.CouldNotParseRequest;                  }  				break;  				case 401:  				    ret = PubnubErrorCode.InvalidSubscribeKey;  				break;  				case 402:  				if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")  				{  					ret = PubnubErrorCode.PamNotEnabled;  				}  				break;  				case 403:  				if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")  				{  					ret = PubnubErrorCode.Forbidden;  				}  				else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")  				{  					ret = PubnubErrorCode.SignatureDoesNotMatch;  				}  				break;                  case 404:                  ret = PubnubErrorCode.NotFound;                  break;                  case 414:  				ret = PubnubErrorCode.RequestUriTooLong;  				break;  				case 500:  				ret = PubnubErrorCode.InternalServerError;  				break;  				case 502:  				ret = PubnubErrorCode.BadGateway;  				break;                  case 503:                  ret = PubnubErrorCode.ServiceUnavailable;                  break;  				case 504:  				ret = PubnubErrorCode.GatewayTimeout;  				break;  				default:                  ret = PubnubErrorCode.None;  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4000' "If you must publish a message greater than the default of max message size of 1.8K (post-URLEncoded) please enable the elastic message size feature from your admin portal at admin.pubnub.com.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4001' "Bad Request. Please check the entered inputs or web request URL");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4002' "Invalid Key. Please verify your pub and sub keys");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4003' "No UUID specified. Please ensure that UUID is being passed to server for heartbeat");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4004' "Invalid Timestamp. Please try again. If the issue continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4005' "Invalid Key. Please verify your pub and sub keys");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4006' "Channel group or groups result in empty subscription set. Please ensure that channels are added to the channel group before subscribe.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4007' "Invalid Key. Please verify your pub/sub/secret/cipher keys");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4010' "Please provide a valid subscribe key");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4020' "PAM is not enabled for this keyset. Please contact PubNub support for instructions on enabling PAM.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4030' "Not authorized. Please ensure that the channel has the correct PAM permission' your authentication key is set correctly' then try again via unsub and re-sub. For further assistance' contact PubNub support.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4031' "Please verify pub' sub' and secret keys. For assistance' contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4040' "HTTP 404 - Not Found Occured. Please try again. If the issue continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(4140' "The URL request too long. Reduce the length by reducing subscription/presence channels or grant/revoke/audit channels/auth key list. Hint: You may spread the load across multiple PubNub instances to prevent this message.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(5000' "Internal Server Error. Please try again. If the issue continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(5020' "Bad Gateway. Please try again. If the issue continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(5030' "Service Unavailable. Please try again. If the issue continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(5040' "Gateway Timeout. Please try again. If the issue continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(103' "Please verify origin' host name' and internet connectivity");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(104' "Please verify your cipher key");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(105' "Web Request was cancelled due to change in subsciber/presence channel list or cancelled for object cleaning at the end of Pubnub object session");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(106' "Please check network/internet connection");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(107' "Internal exception. Please ignore");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(108' "Please check network/internet connection");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(109' "No network/internet connection. Please check network/internet connection");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(110' "Network/internet connection is back. Active subscriber/presence channels will be restored.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(111' "Duplicate channel subscription is not allowed. Internally Pubnub API removes the duplicates before processing");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(112' "Channel Already Subscribed. Duplicate channel subscription not allowed");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(113' "Channel Already Presence-Subscribed. Duplicate channel presence-subscription not allowed");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(114' "Please verify your cipher key");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(115' "Protocol Error. Please contact PubNub with log' use-case' and error details.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(116' "ServerProtocolViolation. Please contact PubNub with error details.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(117' "Input contains invalid channel name");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(118' "Channel not subscribed yet");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(119' "Channel not subscribed for presence yet");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(120' "Incomplete unsubscribe. Try again for unsubscribe.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(121' "Incomplete presence-unsubscribe. Try again for presence-unsubscribe.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(122' "Network/Internet connection not available. C# client retrying again to verify connection. No action is needed from your side.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(123' "During non-availability of network/internet' max retries for connection were attempted. So unsubscribed the channel.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(124' "During non-availability of network/internet' max retries for connection were attempted. So presence-unsubscribed the channel.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(125' "Publish operation timeout occured.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(126' "HereNow operation timeout occured.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(127' "Detailed History operation timeout occured.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(128' "Time operation timeout occured.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(129' "Error occured in external component. Please contact PubNub support with full error object details for further investigation");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(130' "Client machine is sleeping. Please check your machine.");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(131' "Timeout occured while setting user state. Please try again. If it continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(132' "Timeout occured while getting user state. Please try again. If it continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(133' "Timeout occured while running WhereNow. Please try again. If it continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(134' "Timeout occured while running GlobalHereNow. Please try again. If it continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(135' "Timeout occured while running PAM operations. Please try again. If it continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(136' "User State Unchanged");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(137' "Timeout occured while registering device for push notifications. Please try again. If it continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(138' "Timeout occured while performing operation related to channel group. Please try again. If it continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(139' "Duplicate channel group subscription is not allowed. Internally Pubnub API removes the duplicates before processing");
Magic Number,PubNubMessaging.Core,PubnubErrorCodeDescription,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\LoggingMethod.cs,PubnubErrorCodeDescription,The following statement contains a magic number: dictionaryCodes.Add(140' "WebExcepton. The underlying connection was closed: An unexpected error occurred on a receive. If it continues' please contact PubNub support");
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,ROTATE_LEFT,The following statement contains a magic number: return (((x) << (n)) | ((x) >> (32 - (n))));
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Initialize,The following statement contains a magic number: state[2] = 0x98badcfe;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Initialize,The following statement contains a magic number: state[3] = 0x10325476;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashCore,The following statement contains a magic number: index = (int)((this.count[0] >> 3) & 0x3F);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashCore,The following statement contains a magic number: if ((this.count[0] += (uint)((uint)count << 3)) < ((uint)count << 3))  				this.count[1]++;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashCore,The following statement contains a magic number: if ((this.count[0] += (uint)((uint)count << 3)) < ((uint)count << 3))  				this.count[1]++;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashCore,The following statement contains a magic number: this.count[1] += ((uint)count >> 29);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashCore,The following statement contains a magic number: partLen = 64 - index;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashCore,The following statement contains a magic number: if (count >= partLen)  			{  				System.Buffer.BlockCopy(input' offset' this.buffer' index' partLen);  				Transform(this.buffer' 0);    				for (i = partLen; i + 63 < count; i += 64)  					Transform(input' offset + i);    				index = 0;  			}  			else  				i = 0;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashCore,The following statement contains a magic number: if (count >= partLen)  			{  				System.Buffer.BlockCopy(input' offset' this.buffer' index' partLen);  				Transform(this.buffer' 0);    				for (i = partLen; i + 63 < count; i += 64)  					Transform(input' offset + i);    				index = 0;  			}  			else  				i = 0;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: byte[] digest = new byte[16];
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: byte[] bits = new byte[8];
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: Encode(bits' 0' this.count' 0' 8);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: index = (int)((uint)(this.count[0] >> 3) & 0x3f);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: HashCore(bits' 0' 8);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: Encode(digest' 0' state' 0' 16);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: state[2] = 0;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,HashFinal,The following statement contains a magic number: state[3] = 0;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: uint a = state[0]' b = state[1]' c = state[2]' d = state[3];
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: uint a = state[0]' b = state[1]' c = state[2]' d = state[3];
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: uint[] x = new uint[16];
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: Decode(x' 0' block' offset' 64);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[2]' S13' 0x242070db);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[3]' S14' 0xc1bdceee);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[4]' S11' 0xf57c0faf);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[5]' S12' 0x4787c62a);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[6]' S13' 0xa8304613);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[7]' S14' 0xfd469501);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[8]' S11' 0x698098d8);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[9]' S12' 0x8b44f7af);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[10]' S13' 0xffff5bb1);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[11]' S14' 0x895cd7be);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[12]' S11' 0x6b901122);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[13]' S12' 0xfd987193);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[14]' S13' 0xa679438e);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[15]' S14' 0x49b40821);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[6]' S22' 0xc040b340);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[11]' S23' 0x265e5a51);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[5]' S21' 0xd62f105d);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[10]' S22' 0x2441453);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[15]' S23' 0xd8a1e681);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[4]' S24' 0xe7d3fbc8);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[9]' S21' 0x21e1cde6);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[14]' S22' 0xc33707d6);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[3]' S23' 0xf4d50d87);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[8]' S24' 0x455a14ed);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[13]' S21' 0xa9e3e905);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[2]' S22' 0xfcefa3f8);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[7]' S23' 0x676f02d9);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[12]' S24' 0x8d2a4c8a);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[5]' S31' 0xfffa3942);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[8]' S32' 0x8771f681);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[11]' S33' 0x6d9d6122);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[14]' S34' 0xfde5380c);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[4]' S32' 0x4bdecfa9);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[7]' S33' 0xf6bb4b60);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[10]' S34' 0xbebfbc70);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[13]' S31' 0x289b7ec6);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[3]' S33' 0xd4ef3085);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[6]' S34' 0x4881d05);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[9]' S31' 0xd9d4d039);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[12]' S32' 0xe6db99e5);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[15]' S33' 0x1fa27cf8);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[2]' S34' 0xc4ac5665);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[7]' S42' 0x432aff97);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[14]' S43' 0xab9423a7);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[5]' S44' 0xfc93a039);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[12]' S41' 0x655b59c3);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[3]' S42' 0x8f0ccc92);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[10]' S43' 0xffeff47d);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[8]' S41' 0x6fa87e4f);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[15]' S42' 0xfe2ce6e0);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[6]' S43' 0xa3014314);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[13]' S44' 0x4e0811a1);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[4]' S41' 0xf7537e82);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[11]' S42' 0xbd3af235);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[2]' S43' 0x2ad7d2bb);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[9]' S44' 0xeb86d391);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: state[2] += c;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Transform,The following statement contains a magic number: state[3] += d;
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,ComputeHash,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,PubNubMessaging.Core,MD5,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,ComputeHash,The following statement contains a magic number: while (0 < (count = inputStream.Read(buffer' 0' 4096)))  			{  				HashCore(buffer' 0' count);  			}
Magic Number,PubNubMessaging.Core,PubnubCryptoBase,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,GetEncryptionKey,The following statement contains a magic number: string strKeySHA256Hash = (strKeySHA256HashRaw.Replace("-"' "")).Substring(0' 32);
Magic Number,PubNubMessaging.Core,PubnubCryptoBase,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\MD5.cs,EncodeNonAsciiCharacters,The following statement contains a magic number: foreach (char c in value)  			{  				if (c > 127)  				{  					// This character is too big for ASCII  					string encodedValue = "\\u" + ((int)c).ToString("x4");  					sb.Append(encodedValue);  				}  				else  				{  					sb.Append(c);  				}  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ReconnectNetwork,The following statement contains a magic number: if (netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0)))              {                  System.Threading.Timer timer = new Timer(new TimerCallback(ReconnectNetworkCallback<T>)' netState' 0'                                                        (-1 == _pubnubNetworkTcpCheckIntervalInSeconds) ? Timeout.Infinite : _pubnubNetworkTcpCheckIntervalInSeconds * 1000);                    if (netState.Channels != null && netState.Channels.Length > 0)                  {                      _channelReconnectTimer.AddOrUpdate(string.Join("'"' netState.Channels)' timer' (key' oldState) => timer);                  }                  if (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0)                  {                      _channelGroupReconnectTimer.AddOrUpdate(string.Join("'"' netState.ChannelGroups)' timer' (key' oldState) => timer);                  }  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateLocalClientHeartbeatTimer,The following statement contains a magic number: if (requestUri != null) {  				if (channelLocalClientHeartbeatTimer.ContainsKey (requestUri)) {  					Timer requestHeatbeatTimer = channelLocalClientHeartbeatTimer [requestUri];  					if (requestHeatbeatTimer != null) {  						try {  							requestHeatbeatTimer.Change (  								(-1 == _pubnubNetworkTcpCheckIntervalInSeconds) ? -1 : _pubnubNetworkTcpCheckIntervalInSeconds * 1000'  								(-1 == _pubnubNetworkTcpCheckIntervalInSeconds) ? -1 : _pubnubNetworkTcpCheckIntervalInSeconds * 1000);  							requestHeatbeatTimer.Dispose ();  						} catch (ObjectDisposedException ex) {  							//Known exception to be ignored                              //LoggingMethod.WriteToLog (string.Format ("DateTime {0} Error while accessing requestHeatbeatTimer object in TerminateLocalClientHeartbeatTimer {1}"' DateTime.Now.ToString ()' ex.ToString ())' LoggingMethod.LevelInfo);  						}    						Timer removedTimer = null;  						bool removed = channelLocalClientHeartbeatTimer.TryRemove (requestUri' out removedTimer);  						if (removed) {  							LoggingMethod.WriteToLog (string.Format ("DateTime {0} Remove local client heartbeat reference from collection for {1}"' DateTime.Now.ToString ()' requestUri.ToString ())' LoggingMethod.LevelInfo);  						} else {  							LoggingMethod.WriteToLog (string.Format ("DateTime {0} Unable to remove local client heartbeat reference from collection for {1}"' DateTime.Now.ToString ()' requestUri.ToString ())' LoggingMethod.LevelInfo);  						}  					}  				}  			} else {  				ConcurrentDictionary<Uri' Timer> timerCollection = channelLocalClientHeartbeatTimer;  				ICollection<Uri> keyCollection = timerCollection.Keys;  				foreach (Uri key in keyCollection) {  					if (channelLocalClientHeartbeatTimer.ContainsKey (key)) {  						Timer currentTimer = channelLocalClientHeartbeatTimer [key];  						currentTimer.Dispose ();  						Timer removedTimer = null;  						bool removed = channelLocalClientHeartbeatTimer.TryRemove (key' out removedTimer);  						if (!removed) {  							LoggingMethod.WriteToLog (string.Format ("DateTime {0} TerminateLocalClientHeartbeatTimer(null) - Unable to remove local client heartbeat reference from collection for {1}"' DateTime.Now.ToString ()' key.ToString ())' LoggingMethod.LevelInfo);  						}  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TerminateLocalClientHeartbeatTimer,The following statement contains a magic number: if (requestUri != null) {  				if (channelLocalClientHeartbeatTimer.ContainsKey (requestUri)) {  					Timer requestHeatbeatTimer = channelLocalClientHeartbeatTimer [requestUri];  					if (requestHeatbeatTimer != null) {  						try {  							requestHeatbeatTimer.Change (  								(-1 == _pubnubNetworkTcpCheckIntervalInSeconds) ? -1 : _pubnubNetworkTcpCheckIntervalInSeconds * 1000'  								(-1 == _pubnubNetworkTcpCheckIntervalInSeconds) ? -1 : _pubnubNetworkTcpCheckIntervalInSeconds * 1000);  							requestHeatbeatTimer.Dispose ();  						} catch (ObjectDisposedException ex) {  							//Known exception to be ignored                              //LoggingMethod.WriteToLog (string.Format ("DateTime {0} Error while accessing requestHeatbeatTimer object in TerminateLocalClientHeartbeatTimer {1}"' DateTime.Now.ToString ()' ex.ToString ())' LoggingMethod.LevelInfo);  						}    						Timer removedTimer = null;  						bool removed = channelLocalClientHeartbeatTimer.TryRemove (requestUri' out removedTimer);  						if (removed) {  							LoggingMethod.WriteToLog (string.Format ("DateTime {0} Remove local client heartbeat reference from collection for {1}"' DateTime.Now.ToString ()' requestUri.ToString ())' LoggingMethod.LevelInfo);  						} else {  							LoggingMethod.WriteToLog (string.Format ("DateTime {0} Unable to remove local client heartbeat reference from collection for {1}"' DateTime.Now.ToString ()' requestUri.ToString ())' LoggingMethod.LevelInfo);  						}  					}  				}  			} else {  				ConcurrentDictionary<Uri' Timer> timerCollection = channelLocalClientHeartbeatTimer;  				ICollection<Uri> keyCollection = timerCollection.Keys;  				foreach (Uri key in keyCollection) {  					if (channelLocalClientHeartbeatTimer.ContainsKey (key)) {  						Timer currentTimer = channelLocalClientHeartbeatTimer [key];  						currentTimer.Dispose ();  						Timer removedTimer = null;  						bool removed = channelLocalClientHeartbeatTimer.TryRemove (key' out removedTimer);  						if (!removed) {  							LoggingMethod.WriteToLog (string.Format ("DateTime {0} TerminateLocalClientHeartbeatTimer(null) - Unable to remove local client heartbeat reference from collection for {1}"' DateTime.Now.ToString ()' key.ToString ())' LoggingMethod.LevelInfo);  						}  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildDetailedHistoryRequest,The following statement contains a magic number: if (count <= -1)  				count = 100;
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,EncodeUricomponent,The following statement contains a magic number: foreach (char ch in s) {  				if (IsUnsafe (ch' ignoreComma)) {  					o.Append ('%');  					o.Append (ToHex (ch / 16));  					o.Append (ToHex (ch % 16));  				} else {  					if (ch == ''' && ignoreComma) {  						o.Append (ch.ToString ());  					} else if (Char.IsSurrogate (ch)) {  						o.Append (ch);  					} else {  						string escapeChar = System.Uri.EscapeDataString (ch.ToString ());  						o.Append (escapeChar);  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,EncodeUricomponent,The following statement contains a magic number: foreach (char ch in s) {  				if (IsUnsafe (ch' ignoreComma)) {  					o.Append ('%');  					o.Append (ToHex (ch / 16));  					o.Append (ToHex (ch % 16));  				} else {  					if (ch == ''' && ignoreComma) {  						o.Append (ch.ToString ());  					} else if (Char.IsSurrogate (ch)) {  						o.Append (ch);  					} else {  						string escapeChar = System.Uri.EscapeDataString (ch.ToString ());  						o.Append (escapeChar);  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ToHex,The following statement contains a magic number: return (char)(ch < 10 ? '0' + ch : 'A' + ch - 10);
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ToHex,The following statement contains a magic number: return (char)(ch < 10 ? '0' + ch : 'A' + ch - 10);
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''') as string[];                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''') as string[];                      }                  }              }              else              {                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString())' LoggingMethod.LevelError);                  return;              }
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''') as string[];                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''') as string[];                      }                  }              }              else              {                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString())' LoggingMethod.LevelError);                  return;              }
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''') as string[];                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''') as string[];                      }                  }              }              else              {                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString())' LoggingMethod.LevelError);                  return;              }
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''') as string[];                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''') as string[];                      }                  }              }              else              {                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString())' LoggingMethod.LevelError);                  return;              }
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''') as string[];                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''') as string[];                      }                  }              }              else              {                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString())' LoggingMethod.LevelError);                  return;              }
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''') as string[];                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''') as string[];                      }                  }              }              else              {                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString())' LoggingMethod.LevelError);                  return;              }
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  MultiChannelSubscribeRequest<T>(type' channels' channelGroups' (object)message[1]' userCallback' connectCallback' errorCallback' false); //ATTENTION: null HARDCODED              }
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)               {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				var messages = (from item in result  				                    select item as object).ToArray ();  				if (messages != null && messages.Length > 0)                   {  					object[] messageList = messages [0] as object[];  					#if (USE_MiniJSON)  										int i=0;  										foreach (object o in result){  											if(i==0)  											{  												IList collection = (IList)o;  												messageList = new object[collection.Count];  												collection.CopyTo(messageList' 0);  											}  											i++;  										}  					#endif  					if (messageList != null && messageList.Length > 0)                       {                          if ((messages.Length == 4) || (messages.Length == 6))                          {                              messageChannelGroups = messages[2].ToString().Split(''');                              messageChannels = messages[3].ToString().Split(''');                          }                          else                          {                              messageChannels = messages[2].ToString().Split(''');                              messageChannelGroups = null;                          }                          for (int messageIndex = 0; messageIndex < messageList.Length; messageIndex++)                           {  							string currentChannel = (messageChannels.Length == 1) ? (string)messageChannels [0] : (string)messageChannels [messageIndex];                              string currentChannelGroup = "";                              if (messageChannelGroups != null && messageChannelGroups.Length > 0)                              {                                  currentChannelGroup = (messageChannelGroups.Length == 1) ? (string)messageChannelGroups[0] : (string)messageChannelGroups[messageIndex];                              }  							List<object> itemMessage = new List<object> ();  							if (currentChannel.Contains ("-pnpres")) {  								itemMessage.Add (messageList [messageIndex]);  							} else {  								//decrypt the subscriber message if cipherkey is available  								if (this.cipherKey.Length > 0) {  									PubnubCrypto aes = new PubnubCrypto (this.cipherKey);  									string decryptMessage = aes.Decrypt (messageList [messageIndex].ToString ());  									object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : _jsonPluggableLibrary.DeserializeToObject (decryptMessage);    									itemMessage.Add (decodeMessage);  								} else {  									itemMessage.Add (messageList [messageIndex]);  								}  							}  							itemMessage.Add (messages [1].ToString ());                                if (currentChannel == currentChannelGroup)                              {                                  itemMessage.Add(currentChannel.Replace("-pnpres"' ""));                              }                              else                              {                                  if (currentChannelGroup != "")                                  {                                      itemMessage.Add(currentChannelGroup.Replace("-pnpres"' ""));                                  }                                  if (currentChannel != "")                                  {                                      itemMessage.Add(currentChannel.Replace("-pnpres"' ""));                                  }                              }    							PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey ();  							callbackKey.Channel = currentChannel;  							callbackKey.Type = (currentChannel.LastIndexOf ("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence;    							if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey (callbackKey))                               {  								if ((typeof(T) == typeof(string) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.String]")) ||  								            (typeof(T) == typeof(object) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.Object]")))                                   {  									PubnubChannelCallback<T> currentPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<T>;  									if (currentPubnubCallback != null && currentPubnubCallback.Callback != null)                                       {  										GoToCallback<T>(itemMessage' currentPubnubCallback.Callback);  									}  								}                                   else if (channelCallbacks [callbackKey].GetType ().FullName.Contains("[System.String"))                                   {  									PubnubChannelCallback<string> retryPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<string>;  									if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                       {  										GoToCallback(itemMessage' retryPubnubCallback.Callback);  									}  								}                                  else if (channelCallbacks[callbackKey].GetType().FullName.Contains("[System.Object"))                                  {                                      PubnubChannelCallback<object> retryPubnubCallback = channelCallbacks[callbackKey] as PubnubChannelCallback<object>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }  							}                                PubnubChannelGroupCallbackKey callbackGroupKey = new PubnubChannelGroupCallbackKey();                              callbackGroupKey.ChannelGroup = currentChannelGroup;                              callbackGroupKey.Type = (currentChannelGroup.LastIndexOf("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence;                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackGroupKey))                              {                                  if ((typeof(T) == typeof(string) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.String]")) ||                                              (typeof(T) == typeof(object) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.Object]")))                                  {                                      PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<T>;                                      if (currentPubnubCallback != null && currentPubnubCallback.Callback != null)                                      {                                          GoToCallback<T>(itemMessage' currentPubnubCallback.Callback);                                      }                                  }                                  else if (channelGroupCallbacks[callbackGroupKey].GetType().FullName.Contains("[System.String"))                                  {                                      PubnubChannelGroupCallback<string> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<string>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }                                  else if (channelGroupCallbacks[callbackGroupKey].GetType().FullName.Contains("[System.Object"))                                  {                                      PubnubChannelGroupCallback<object> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<object>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }                              }                            }  					}  				}  				break;  			case ResponseType.Publish:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.DetailedHistory:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Here_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.GlobalHere_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Where_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Time:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Leave:  				    //No response to callback  				break;  			case ResponseType.GrantAccess:  			case ResponseType.AuditAccess:  			case ResponseType.RevokeAccess:              case ResponseType.ChannelGroupGrantAccess:              case ResponseType.ChannelGroupAuditAccess:              case ResponseType.ChannelGroupRevokeAccess:              case ResponseType.GetUserState:  			case ResponseType.SetUserState:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;              case ResponseType.PushRegister:              case ResponseType.PushRemove:              case ResponseType.PushGet:              case ResponseType.PushUnregister:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}                  break;              case ResponseType.ChannelGroupAdd:              case ResponseType.ChannelGroupRemove:              case ResponseType.ChannelGroupGet:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}                  break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)               {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				var messages = (from item in result  				                    select item as object).ToArray ();  				if (messages != null && messages.Length > 0)                   {  					object[] messageList = messages [0] as object[];  					#if (USE_MiniJSON)  										int i=0;  										foreach (object o in result){  											if(i==0)  											{  												IList collection = (IList)o;  												messageList = new object[collection.Count];  												collection.CopyTo(messageList' 0);  											}  											i++;  										}  					#endif  					if (messageList != null && messageList.Length > 0)                       {                          if ((messages.Length == 4) || (messages.Length == 6))                          {                              messageChannelGroups = messages[2].ToString().Split(''');                              messageChannels = messages[3].ToString().Split(''');                          }                          else                          {                              messageChannels = messages[2].ToString().Split(''');                              messageChannelGroups = null;                          }                          for (int messageIndex = 0; messageIndex < messageList.Length; messageIndex++)                           {  							string currentChannel = (messageChannels.Length == 1) ? (string)messageChannels [0] : (string)messageChannels [messageIndex];                              string currentChannelGroup = "";                              if (messageChannelGroups != null && messageChannelGroups.Length > 0)                              {                                  currentChannelGroup = (messageChannelGroups.Length == 1) ? (string)messageChannelGroups[0] : (string)messageChannelGroups[messageIndex];                              }  							List<object> itemMessage = new List<object> ();  							if (currentChannel.Contains ("-pnpres")) {  								itemMessage.Add (messageList [messageIndex]);  							} else {  								//decrypt the subscriber message if cipherkey is available  								if (this.cipherKey.Length > 0) {  									PubnubCrypto aes = new PubnubCrypto (this.cipherKey);  									string decryptMessage = aes.Decrypt (messageList [messageIndex].ToString ());  									object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : _jsonPluggableLibrary.DeserializeToObject (decryptMessage);    									itemMessage.Add (decodeMessage);  								} else {  									itemMessage.Add (messageList [messageIndex]);  								}  							}  							itemMessage.Add (messages [1].ToString ());                                if (currentChannel == currentChannelGroup)                              {                                  itemMessage.Add(currentChannel.Replace("-pnpres"' ""));                              }                              else                              {                                  if (currentChannelGroup != "")                                  {                                      itemMessage.Add(currentChannelGroup.Replace("-pnpres"' ""));                                  }                                  if (currentChannel != "")                                  {                                      itemMessage.Add(currentChannel.Replace("-pnpres"' ""));                                  }                              }    							PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey ();  							callbackKey.Channel = currentChannel;  							callbackKey.Type = (currentChannel.LastIndexOf ("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence;    							if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey (callbackKey))                               {  								if ((typeof(T) == typeof(string) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.String]")) ||  								            (typeof(T) == typeof(object) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.Object]")))                                   {  									PubnubChannelCallback<T> currentPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<T>;  									if (currentPubnubCallback != null && currentPubnubCallback.Callback != null)                                       {  										GoToCallback<T>(itemMessage' currentPubnubCallback.Callback);  									}  								}                                   else if (channelCallbacks [callbackKey].GetType ().FullName.Contains("[System.String"))                                   {  									PubnubChannelCallback<string> retryPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<string>;  									if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                       {  										GoToCallback(itemMessage' retryPubnubCallback.Callback);  									}  								}                                  else if (channelCallbacks[callbackKey].GetType().FullName.Contains("[System.Object"))                                  {                                      PubnubChannelCallback<object> retryPubnubCallback = channelCallbacks[callbackKey] as PubnubChannelCallback<object>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }  							}                                PubnubChannelGroupCallbackKey callbackGroupKey = new PubnubChannelGroupCallbackKey();                              callbackGroupKey.ChannelGroup = currentChannelGroup;                              callbackGroupKey.Type = (currentChannelGroup.LastIndexOf("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence;                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackGroupKey))                              {                                  if ((typeof(T) == typeof(string) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.String]")) ||                                              (typeof(T) == typeof(object) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.Object]")))                                  {                                      PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<T>;                                      if (currentPubnubCallback != null && currentPubnubCallback.Callback != null)                                      {                                          GoToCallback<T>(itemMessage' currentPubnubCallback.Callback);                                      }                                  }                                  else if (channelGroupCallbacks[callbackGroupKey].GetType().FullName.Contains("[System.String"))                                  {                                      PubnubChannelGroupCallback<string> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<string>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }                                  else if (channelGroupCallbacks[callbackGroupKey].GetType().FullName.Contains("[System.Object"))                                  {                                      PubnubChannelGroupCallback<object> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<object>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }                              }                            }  					}  				}  				break;  			case ResponseType.Publish:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.DetailedHistory:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Here_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.GlobalHere_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Where_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Time:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Leave:  				    //No response to callback  				break;  			case ResponseType.GrantAccess:  			case ResponseType.AuditAccess:  			case ResponseType.RevokeAccess:              case ResponseType.ChannelGroupGrantAccess:              case ResponseType.ChannelGroupAuditAccess:              case ResponseType.ChannelGroupRevokeAccess:              case ResponseType.GetUserState:  			case ResponseType.SetUserState:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;              case ResponseType.PushRegister:              case ResponseType.PushRemove:              case ResponseType.PushGet:              case ResponseType.PushUnregister:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}                  break;              case ResponseType.ChannelGroupAdd:              case ResponseType.ChannelGroupRemove:              case ResponseType.ChannelGroupGet:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}                  break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)               {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				var messages = (from item in result  				                    select item as object).ToArray ();  				if (messages != null && messages.Length > 0)                   {  					object[] messageList = messages [0] as object[];  					#if (USE_MiniJSON)  										int i=0;  										foreach (object o in result){  											if(i==0)  											{  												IList collection = (IList)o;  												messageList = new object[collection.Count];  												collection.CopyTo(messageList' 0);  											}  											i++;  										}  					#endif  					if (messageList != null && messageList.Length > 0)                       {                          if ((messages.Length == 4) || (messages.Length == 6))                          {                              messageChannelGroups = messages[2].ToString().Split(''');                              messageChannels = messages[3].ToString().Split(''');                          }                          else                          {                              messageChannels = messages[2].ToString().Split(''');                              messageChannelGroups = null;                          }                          for (int messageIndex = 0; messageIndex < messageList.Length; messageIndex++)                           {  							string currentChannel = (messageChannels.Length == 1) ? (string)messageChannels [0] : (string)messageChannels [messageIndex];                              string currentChannelGroup = "";                              if (messageChannelGroups != null && messageChannelGroups.Length > 0)                              {                                  currentChannelGroup = (messageChannelGroups.Length == 1) ? (string)messageChannelGroups[0] : (string)messageChannelGroups[messageIndex];                              }  							List<object> itemMessage = new List<object> ();  							if (currentChannel.Contains ("-pnpres")) {  								itemMessage.Add (messageList [messageIndex]);  							} else {  								//decrypt the subscriber message if cipherkey is available  								if (this.cipherKey.Length > 0) {  									PubnubCrypto aes = new PubnubCrypto (this.cipherKey);  									string decryptMessage = aes.Decrypt (messageList [messageIndex].ToString ());  									object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : _jsonPluggableLibrary.DeserializeToObject (decryptMessage);    									itemMessage.Add (decodeMessage);  								} else {  									itemMessage.Add (messageList [messageIndex]);  								}  							}  							itemMessage.Add (messages [1].ToString ());                                if (currentChannel == currentChannelGroup)                              {                                  itemMessage.Add(currentChannel.Replace("-pnpres"' ""));                              }                              else                              {                                  if (currentChannelGroup != "")                                  {                                      itemMessage.Add(currentChannelGroup.Replace("-pnpres"' ""));                                  }                                  if (currentChannel != "")                                  {                                      itemMessage.Add(currentChannel.Replace("-pnpres"' ""));                                  }                              }    							PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey ();  							callbackKey.Channel = currentChannel;  							callbackKey.Type = (currentChannel.LastIndexOf ("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence;    							if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey (callbackKey))                               {  								if ((typeof(T) == typeof(string) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.String]")) ||  								            (typeof(T) == typeof(object) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.Object]")))                                   {  									PubnubChannelCallback<T> currentPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<T>;  									if (currentPubnubCallback != null && currentPubnubCallback.Callback != null)                                       {  										GoToCallback<T>(itemMessage' currentPubnubCallback.Callback);  									}  								}                                   else if (channelCallbacks [callbackKey].GetType ().FullName.Contains("[System.String"))                                   {  									PubnubChannelCallback<string> retryPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<string>;  									if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                       {  										GoToCallback(itemMessage' retryPubnubCallback.Callback);  									}  								}                                  else if (channelCallbacks[callbackKey].GetType().FullName.Contains("[System.Object"))                                  {                                      PubnubChannelCallback<object> retryPubnubCallback = channelCallbacks[callbackKey] as PubnubChannelCallback<object>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }  							}                                PubnubChannelGroupCallbackKey callbackGroupKey = new PubnubChannelGroupCallbackKey();                              callbackGroupKey.ChannelGroup = currentChannelGroup;                              callbackGroupKey.Type = (currentChannelGroup.LastIndexOf("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence;                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackGroupKey))                              {                                  if ((typeof(T) == typeof(string) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.String]")) ||                                              (typeof(T) == typeof(object) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.Object]")))                                  {                                      PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<T>;                                      if (currentPubnubCallback != null && currentPubnubCallback.Callback != null)                                      {                                          GoToCallback<T>(itemMessage' currentPubnubCallback.Callback);                                      }                                  }                                  else if (channelGroupCallbacks[callbackGroupKey].GetType().FullName.Contains("[System.String"))                                  {                                      PubnubChannelGroupCallback<string> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<string>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }                                  else if (channelGroupCallbacks[callbackGroupKey].GetType().FullName.Contains("[System.Object"))                                  {                                      PubnubChannelGroupCallback<object> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<object>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }                              }                            }  					}  				}  				break;  			case ResponseType.Publish:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.DetailedHistory:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Here_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.GlobalHere_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Where_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Time:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Leave:  				    //No response to callback  				break;  			case ResponseType.GrantAccess:  			case ResponseType.AuditAccess:  			case ResponseType.RevokeAccess:              case ResponseType.ChannelGroupGrantAccess:              case ResponseType.ChannelGroupAuditAccess:              case ResponseType.ChannelGroupRevokeAccess:              case ResponseType.GetUserState:  			case ResponseType.SetUserState:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;              case ResponseType.PushRegister:              case ResponseType.PushRemove:              case ResponseType.PushGet:              case ResponseType.PushUnregister:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}                  break;              case ResponseType.ChannelGroupAdd:              case ResponseType.ChannelGroupRemove:              case ResponseType.ChannelGroupGet:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}                  break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)               {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				var messages = (from item in result  				                    select item as object).ToArray ();  				if (messages != null && messages.Length > 0)                   {  					object[] messageList = messages [0] as object[];  					#if (USE_MiniJSON)  										int i=0;  										foreach (object o in result){  											if(i==0)  											{  												IList collection = (IList)o;  												messageList = new object[collection.Count];  												collection.CopyTo(messageList' 0);  											}  											i++;  										}  					#endif  					if (messageList != null && messageList.Length > 0)                       {                          if ((messages.Length == 4) || (messages.Length == 6))                          {                              messageChannelGroups = messages[2].ToString().Split(''');                              messageChannels = messages[3].ToString().Split(''');                          }                          else                          {                              messageChannels = messages[2].ToString().Split(''');                              messageChannelGroups = null;                          }                          for (int messageIndex = 0; messageIndex < messageList.Length; messageIndex++)                           {  							string currentChannel = (messageChannels.Length == 1) ? (string)messageChannels [0] : (string)messageChannels [messageIndex];                              string currentChannelGroup = "";                              if (messageChannelGroups != null && messageChannelGroups.Length > 0)                              {                                  currentChannelGroup = (messageChannelGroups.Length == 1) ? (string)messageChannelGroups[0] : (string)messageChannelGroups[messageIndex];                              }  							List<object> itemMessage = new List<object> ();  							if (currentChannel.Contains ("-pnpres")) {  								itemMessage.Add (messageList [messageIndex]);  							} else {  								//decrypt the subscriber message if cipherkey is available  								if (this.cipherKey.Length > 0) {  									PubnubCrypto aes = new PubnubCrypto (this.cipherKey);  									string decryptMessage = aes.Decrypt (messageList [messageIndex].ToString ());  									object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : _jsonPluggableLibrary.DeserializeToObject (decryptMessage);    									itemMessage.Add (decodeMessage);  								} else {  									itemMessage.Add (messageList [messageIndex]);  								}  							}  							itemMessage.Add (messages [1].ToString ());                                if (currentChannel == currentChannelGroup)                              {                                  itemMessage.Add(currentChannel.Replace("-pnpres"' ""));                              }                              else                              {                                  if (currentChannelGroup != "")                                  {                                      itemMessage.Add(currentChannelGroup.Replace("-pnpres"' ""));                                  }                                  if (currentChannel != "")                                  {                                      itemMessage.Add(currentChannel.Replace("-pnpres"' ""));                                  }                              }    							PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey ();  							callbackKey.Channel = currentChannel;  							callbackKey.Type = (currentChannel.LastIndexOf ("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence;    							if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey (callbackKey))                               {  								if ((typeof(T) == typeof(string) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.String]")) ||  								            (typeof(T) == typeof(object) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.Object]")))                                   {  									PubnubChannelCallback<T> currentPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<T>;  									if (currentPubnubCallback != null && currentPubnubCallback.Callback != null)                                       {  										GoToCallback<T>(itemMessage' currentPubnubCallback.Callback);  									}  								}                                   else if (channelCallbacks [callbackKey].GetType ().FullName.Contains("[System.String"))                                   {  									PubnubChannelCallback<string> retryPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<string>;  									if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                       {  										GoToCallback(itemMessage' retryPubnubCallback.Callback);  									}  								}                                  else if (channelCallbacks[callbackKey].GetType().FullName.Contains("[System.Object"))                                  {                                      PubnubChannelCallback<object> retryPubnubCallback = channelCallbacks[callbackKey] as PubnubChannelCallback<object>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }  							}                                PubnubChannelGroupCallbackKey callbackGroupKey = new PubnubChannelGroupCallbackKey();                              callbackGroupKey.ChannelGroup = currentChannelGroup;                              callbackGroupKey.Type = (currentChannelGroup.LastIndexOf("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence;                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackGroupKey))                              {                                  if ((typeof(T) == typeof(string) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.String]")) ||                                              (typeof(T) == typeof(object) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.Object]")))                                  {                                      PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<T>;                                      if (currentPubnubCallback != null && currentPubnubCallback.Callback != null)                                      {                                          GoToCallback<T>(itemMessage' currentPubnubCallback.Callback);                                      }                                  }                                  else if (channelGroupCallbacks[callbackGroupKey].GetType().FullName.Contains("[System.String"))                                  {                                      PubnubChannelGroupCallback<string> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<string>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }                                  else if (channelGroupCallbacks[callbackGroupKey].GetType().FullName.Contains("[System.Object"))                                  {                                      PubnubChannelGroupCallback<object> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<object>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }                              }                            }  					}  				}  				break;  			case ResponseType.Publish:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.DetailedHistory:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Here_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.GlobalHere_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Where_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Time:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Leave:  				    //No response to callback  				break;  			case ResponseType.GrantAccess:  			case ResponseType.AuditAccess:  			case ResponseType.RevokeAccess:              case ResponseType.ChannelGroupGrantAccess:              case ResponseType.ChannelGroupAuditAccess:              case ResponseType.ChannelGroupRevokeAccess:              case ResponseType.GetUserState:  			case ResponseType.SetUserState:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;              case ResponseType.PushRegister:              case ResponseType.PushRemove:              case ResponseType.PushGet:              case ResponseType.PushUnregister:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}                  break;              case ResponseType.ChannelGroupAdd:              case ResponseType.ChannelGroupRemove:              case ResponseType.ChannelGroupGet:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}                  break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)               {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				var messages = (from item in result  				                    select item as object).ToArray ();  				if (messages != null && messages.Length > 0)                   {  					object[] messageList = messages [0] as object[];  					#if (USE_MiniJSON)  										int i=0;  										foreach (object o in result){  											if(i==0)  											{  												IList collection = (IList)o;  												messageList = new object[collection.Count];  												collection.CopyTo(messageList' 0);  											}  											i++;  										}  					#endif  					if (messageList != null && messageList.Length > 0)                       {                          if ((messages.Length == 4) || (messages.Length == 6))                          {                              messageChannelGroups = messages[2].ToString().Split(''');                              messageChannels = messages[3].ToString().Split(''');                          }                          else                          {                              messageChannels = messages[2].ToString().Split(''');                              messageChannelGroups = null;                          }                          for (int messageIndex = 0; messageIndex < messageList.Length; messageIndex++)                           {  							string currentChannel = (messageChannels.Length == 1) ? (string)messageChannels [0] : (string)messageChannels [messageIndex];                              string currentChannelGroup = "";                              if (messageChannelGroups != null && messageChannelGroups.Length > 0)                              {                                  currentChannelGroup = (messageChannelGroups.Length == 1) ? (string)messageChannelGroups[0] : (string)messageChannelGroups[messageIndex];                              }  							List<object> itemMessage = new List<object> ();  							if (currentChannel.Contains ("-pnpres")) {  								itemMessage.Add (messageList [messageIndex]);  							} else {  								//decrypt the subscriber message if cipherkey is available  								if (this.cipherKey.Length > 0) {  									PubnubCrypto aes = new PubnubCrypto (this.cipherKey);  									string decryptMessage = aes.Decrypt (messageList [messageIndex].ToString ());  									object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : _jsonPluggableLibrary.DeserializeToObject (decryptMessage);    									itemMessage.Add (decodeMessage);  								} else {  									itemMessage.Add (messageList [messageIndex]);  								}  							}  							itemMessage.Add (messages [1].ToString ());                                if (currentChannel == currentChannelGroup)                              {                                  itemMessage.Add(currentChannel.Replace("-pnpres"' ""));                              }                              else                              {                                  if (currentChannelGroup != "")                                  {                                      itemMessage.Add(currentChannelGroup.Replace("-pnpres"' ""));                                  }                                  if (currentChannel != "")                                  {                                      itemMessage.Add(currentChannel.Replace("-pnpres"' ""));                                  }                              }    							PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey ();  							callbackKey.Channel = currentChannel;  							callbackKey.Type = (currentChannel.LastIndexOf ("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence;    							if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey (callbackKey))                               {  								if ((typeof(T) == typeof(string) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.String]")) ||  								            (typeof(T) == typeof(object) && channelCallbacks [callbackKey].GetType().Name.Contains ("[System.Object]")))                                   {  									PubnubChannelCallback<T> currentPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<T>;  									if (currentPubnubCallback != null && currentPubnubCallback.Callback != null)                                       {  										GoToCallback<T>(itemMessage' currentPubnubCallback.Callback);  									}  								}                                   else if (channelCallbacks [callbackKey].GetType ().FullName.Contains("[System.String"))                                   {  									PubnubChannelCallback<string> retryPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<string>;  									if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                       {  										GoToCallback(itemMessage' retryPubnubCallback.Callback);  									}  								}                                  else if (channelCallbacks[callbackKey].GetType().FullName.Contains("[System.Object"))                                  {                                      PubnubChannelCallback<object> retryPubnubCallback = channelCallbacks[callbackKey] as PubnubChannelCallback<object>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }  							}                                PubnubChannelGroupCallbackKey callbackGroupKey = new PubnubChannelGroupCallbackKey();                              callbackGroupKey.ChannelGroup = currentChannelGroup;                              callbackGroupKey.Type = (currentChannelGroup.LastIndexOf("-pnpres") == -1) ? ResponseType.Subscribe : ResponseType.Presence;                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackGroupKey))                              {                                  if ((typeof(T) == typeof(string) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.String]")) ||                                              (typeof(T) == typeof(object) && channelGroupCallbacks[callbackGroupKey].GetType().Name.Contains("[System.Object]")))                                  {                                      PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<T>;                                      if (currentPubnubCallback != null && currentPubnubCallback.Callback != null)                                      {                                          GoToCallback<T>(itemMessage' currentPubnubCallback.Callback);                                      }                                  }                                  else if (channelGroupCallbacks[callbackGroupKey].GetType().FullName.Contains("[System.String"))                                  {                                      PubnubChannelGroupCallback<string> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<string>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }                                  else if (channelGroupCallbacks[callbackGroupKey].GetType().FullName.Contains("[System.Object"))                                  {                                      PubnubChannelGroupCallback<object> retryPubnubCallback = channelGroupCallbacks[callbackGroupKey] as PubnubChannelGroupCallback<object>;                                      if (retryPubnubCallback != null && retryPubnubCallback.Callback != null)                                      {                                          GoToCallback(itemMessage' retryPubnubCallback.Callback);                                      }                                  }                              }                            }  					}  				}  				break;  			case ResponseType.Publish:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.DetailedHistory:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Here_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.GlobalHere_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Where_Now:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Time:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;  			case ResponseType.Leave:  				    //No response to callback  				break;  			case ResponseType.GrantAccess:  			case ResponseType.AuditAccess:  			case ResponseType.RevokeAccess:              case ResponseType.ChannelGroupGrantAccess:              case ResponseType.ChannelGroupAuditAccess:              case ResponseType.ChannelGroupRevokeAccess:              case ResponseType.GetUserState:  			case ResponseType.SetUserState:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}  				break;              case ResponseType.PushRegister:              case ResponseType.PushRemove:              case ResponseType.PushGet:              case ResponseType.PushUnregister:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}                  break;              case ResponseType.ChannelGroupAdd:              case ResponseType.ChannelGroupRemove:              case ResponseType.ChannelGroupGet:  				if (result != null && result.Count > 0) {  					GoToCallback<T> (result' userCallback);  				}                  break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GoToCallback,The following statement contains a magic number: if (Callback != null && error != null) {  				if ((int)error.Severity <= (int)_errorLevel) { //Checks whether the error serverity falls in the range of error filter level  					//Do not send 107 = PubnubObjectDisposedException  					//Do not send 105 = WebRequestCancelled  					//Do not send 130 = PubnubClientMachineSleep                      if (error.StatusCode != 107                          && error.StatusCode != 105                          && error.StatusCode != 130                          && error.StatusCode != 4040) //Error Code that should not go out                      {   						Callback (error);  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GoToCallback,The following statement contains a magic number: if (Callback != null && error != null) {  				if ((int)error.Severity <= (int)_errorLevel) { //Checks whether the error serverity falls in the range of error filter level  					//Do not send 107 = PubnubObjectDisposedException  					//Do not send 105 = WebRequestCancelled  					//Do not send 130 = PubnubClientMachineSleep                      if (error.StatusCode != 107                          && error.StatusCode != 105                          && error.StatusCode != 130                          && error.StatusCode != 4040) //Error Code that should not go out                      {   						Callback (error);  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GoToCallback,The following statement contains a magic number: if (Callback != null && error != null) {  				if ((int)error.Severity <= (int)_errorLevel) { //Checks whether the error serverity falls in the range of error filter level  					//Do not send 107 = PubnubObjectDisposedException  					//Do not send 105 = WebRequestCancelled  					//Do not send 130 = PubnubClientMachineSleep                      if (error.StatusCode != 107                          && error.StatusCode != 105                          && error.StatusCode != 130                          && error.StatusCode != 4040) //Error Code that should not go out                      {   						Callback (error);  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GoToCallback,The following statement contains a magic number: if (Callback != null && error != null) {  				if ((int)error.Severity <= (int)_errorLevel) { //Checks whether the error serverity falls in the range of error filter level  					//Do not send 107 = PubnubObjectDisposedException  					//Do not send 105 = WebRequestCancelled  					//Do not send 130 = PubnubClientMachineSleep                      if (error.StatusCode != 107                          && error.StatusCode != 105                          && error.StatusCode != 130                          && error.StatusCode != 4040) //Error Code that should not go out                      {   						Callback (error);  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TranslateDateTimeToSeconds,The following statement contains a magic number: TimeSpan timeSpan = dotNetUTCDateTime - new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TranslateDateTimeToPubnubUnixNanoSeconds,The following statement contains a magic number: TimeSpan timeSpan = dotNetUTCDateTime - new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TranslateDateTimeToPubnubUnixNanoSeconds,The following statement contains a magic number: long timeStamp = Convert.ToInt64 (timeSpan.TotalSeconds) * 10000000;
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TranslatePubnubUnixNanoSecondsToDateTime,The following statement contains a magic number: double timeStamp = unixNanoSecondTime / 10000000;
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TranslatePubnubUnixNanoSecondsToDateTime,The following statement contains a magic number: DateTime dateTime = new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds (timeStamp);
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetChannelName,The following statement contains a magic number: switch (type) {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				channelName = urlComponents [2];  				break;  			case ResponseType.Publish:  				channelName = urlComponents [4];  				break;  			case ResponseType.DetailedHistory:  				channelName = urlComponents [5];  				break;  			case ResponseType.Here_Now:  				channelName = urlComponents [5];  				break;  			case ResponseType.Leave:  				channelName = urlComponents [5];  				break;  			case ResponseType.Where_Now:  				channelName = urlComponents [5];  				break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetChannelName,The following statement contains a magic number: switch (type) {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				channelName = urlComponents [2];  				break;  			case ResponseType.Publish:  				channelName = urlComponents [4];  				break;  			case ResponseType.DetailedHistory:  				channelName = urlComponents [5];  				break;  			case ResponseType.Here_Now:  				channelName = urlComponents [5];  				break;  			case ResponseType.Leave:  				channelName = urlComponents [5];  				break;  			case ResponseType.Where_Now:  				channelName = urlComponents [5];  				break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetChannelName,The following statement contains a magic number: switch (type) {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				channelName = urlComponents [2];  				break;  			case ResponseType.Publish:  				channelName = urlComponents [4];  				break;  			case ResponseType.DetailedHistory:  				channelName = urlComponents [5];  				break;  			case ResponseType.Here_Now:  				channelName = urlComponents [5];  				break;  			case ResponseType.Leave:  				channelName = urlComponents [5];  				break;  			case ResponseType.Where_Now:  				channelName = urlComponents [5];  				break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetChannelName,The following statement contains a magic number: switch (type) {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				channelName = urlComponents [2];  				break;  			case ResponseType.Publish:  				channelName = urlComponents [4];  				break;  			case ResponseType.DetailedHistory:  				channelName = urlComponents [5];  				break;  			case ResponseType.Here_Now:  				channelName = urlComponents [5];  				break;  			case ResponseType.Leave:  				channelName = urlComponents [5];  				break;  			case ResponseType.Where_Now:  				channelName = urlComponents [5];  				break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetChannelName,The following statement contains a magic number: switch (type) {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				channelName = urlComponents [2];  				break;  			case ResponseType.Publish:  				channelName = urlComponents [4];  				break;  			case ResponseType.DetailedHistory:  				channelName = urlComponents [5];  				break;  			case ResponseType.Here_Now:  				channelName = urlComponents [5];  				break;  			case ResponseType.Leave:  				channelName = urlComponents [5];  				break;  			case ResponseType.Where_Now:  				channelName = urlComponents [5];  				break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GetChannelName,The following statement contains a magic number: switch (type) {  			case ResponseType.Subscribe:  			case ResponseType.Presence:  				channelName = urlComponents [2];  				break;  			case ResponseType.Publish:  				channelName = urlComponents [4];  				break;  			case ResponseType.DetailedHistory:  				channelName = urlComponents [5];  				break;  			case ResponseType.Here_Now:  				channelName = urlComponents [5];  				break;  			case ResponseType.Leave:  				channelName = urlComponents [5];  				break;  			case ResponseType.Where_Now:  				channelName = urlComponents [5];  				break;  			default:  				break;  			}
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildAuditAccessRequest,The following statement contains a magic number: long timeStamp = ((_pubnubUnitTest == null) || (_pubnubUnitTest is IPubnubUnitTest && !_pubnubUnitTest.EnableStubTest))  				? TranslateDateTimeToSeconds (DateTime.UtcNow)   					: TranslateDateTimeToSeconds (new DateTime (2013' 01' 01));
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,BuildChannelGroupAuditAccessRequest,The following statement contains a magic number: long timeStamp = ((_pubnubUnitTest == null) || (_pubnubUnitTest is IPubnubUnitTest && !_pubnubUnitTest.EnableStubTest))                  ? TranslateDateTimeToSeconds(DateTime.UtcNow)                      : TranslateDateTimeToSeconds(new DateTime(2013' 01' 01));
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try {  				string multiChannel = (channels != null) ? string.Join ("'"' channels) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups) : "";  				                  if (!string.IsNullOrEmpty (jsonString))                   {  					if (!string.IsNullOrEmpty (jsonString))                       {  						object deSerializedResult = _jsonPluggableLibrary.DeserializeToObject (jsonString);  						List<object> result1 = ((IEnumerable)deSerializedResult).Cast<object> ().ToList ();    						if (result1 != null && result1.Count > 0) {  							result = result1;  						}    						switch (type) {  						case ResponseType.Publish:  							result.Add (multiChannel);  							break;  						case ResponseType.History:  							if (this.cipherKey.Length > 0) {  								List<object> historyDecrypted = new List<object> ();  								PubnubCrypto aes = new PubnubCrypto (this.cipherKey);  								foreach (object message in result) {  									historyDecrypted.Add (aes.Decrypt (message.ToString ()));  								}  								History = historyDecrypted;  							} else {  								History = result;  							}  							break;  						case ResponseType.DetailedHistory:  							result = DecodeDecryptLoop (result' channels' channelGroups' errorCallback);  							result.Add (multiChannel);  							break;  						case ResponseType.Here_Now:  							Dictionary<string' object> dictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (dictionary);  							result.Add (multiChannel);  							break;  						case ResponseType.GlobalHere_Now:  							Dictionary<string' object> globalHereNowDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (globalHereNowDictionary);  							break;  						case ResponseType.Where_Now:  							Dictionary<string' object> whereNowDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (whereNowDictionary);  							result.Add (multiChannel);  							break;  						case ResponseType.Time:  							break;  						case ResponseType.Subscribe:  						case ResponseType.Presence:                              if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                              {                                  result.RemoveAt(2);                              }                              result.Add(multiChannelGroup);                              result.Add (multiChannel);  							                              long receivedTimetoken = (result.Count > 1) ? Convert.ToInt64 (result [1].ToString ()) : 0;  							                              long minimumTimetoken1 = (multiChannelSubscribe.Count > 0) ? multiChannelSubscribe.Min (token => token.Value) : 0;                              long minimumTimetoken2 = (multiChannelGroupSubscribe.Count > 0) ? multiChannelGroupSubscribe.Min(token => token.Value) : 0;                              long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);    							long maximumTimetoken1 = (multiChannelSubscribe.Count > 0) ? multiChannelSubscribe.Max (token => token.Value) : 0;                              long maximumTimetoken2 = (multiChannelGroupSubscribe.Count > 0) ? multiChannelGroupSubscribe.Max(token => token.Value) : 0;                              long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);    							if (minimumTimetoken == 0 || lastTimetoken == 0) {  								if (maximumTimetoken == 0) {  									lastSubscribeTimetoken = receivedTimetoken;  								} else {  									if (!_enableResumeOnReconnect) {  										lastSubscribeTimetoken = receivedTimetoken;  									} else {  										//do nothing. keep last subscribe token  									}  								}  							} else {  								if (reconnect) {  									if (_enableResumeOnReconnect) {  										//do nothing. keep last subscribe token  									} else {  										lastSubscribeTimetoken = receivedTimetoken;  									}  								} else {  									lastSubscribeTimetoken = receivedTimetoken;  								}  							}  							break;  						case ResponseType.Leave:  							result.Add (multiChannel);  							break;  						case ResponseType.GrantAccess:  						case ResponseType.AuditAccess:  						case ResponseType.RevokeAccess:  							Dictionary<string' object> grantDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);  							result = new List<object> ();  							result.Add (grantDictionary);  							result.Add (multiChannel);  							break;                          case ResponseType.ChannelGroupGrantAccess:                          case ResponseType.ChannelGroupAuditAccess:                          case ResponseType.ChannelGroupRevokeAccess:                              Dictionary<string' object> channelGroupPAMDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                              result = new List<object>();                              result.Add(channelGroupPAMDictionary);                              result.Add(multiChannelGroup);                              break;                          case ResponseType.GetUserState:  						case ResponseType.SetUserState:  							Dictionary<string' object> userStateDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (userStateDictionary);                              if (multiChannelGroup != "")                              {                                  result.Add(multiChannelGroup);                              }                              if (multiChannel != "")                              {                                  result.Add(multiChannel);                              }  							break;                          case ResponseType.PushRegister:                          case ResponseType.PushRemove:                          case ResponseType.PushGet:                          case ResponseType.PushUnregister:  							result.Add (multiChannel);                              break;                          case ResponseType.ChannelGroupAdd:                          case ResponseType.ChannelGroupRemove:                          case ResponseType.ChannelGroupGet:  							Dictionary<string' object> channelGroupDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();                              result.Add(channelGroupDictionary);                              if (multiChannelGroup != "")                              {                                  result.Add(multiChannelGroup);                              }                              if (multiChannel != "")                              {                                  result.Add(multiChannel);                              }                              break;  						default:  							break;  						}  						;//switch stmt end  					}  				}  			} catch (Exception ex) {  				if (channels != null && channels.Length > 0)                   {  					if (type == ResponseType.Subscribe || type == ResponseType.Presence)                       {  						for (int index = 0; index < channels.Length; index++)                           {  							string activeChannel = channels[index].ToString();  							PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey ();  							callbackKey.Channel = activeChannel;  							callbackKey.Type = type;    							if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey (callbackKey)) {  								PubnubChannelCallback<T> currentPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<T>;  								if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null) {  									CallErrorCallback (PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                          activeChannel' ""' currentPubnubCallback.ErrorCallback' ex' null' null);  								}  							}  						}  					}                       else                       {  						if (errorCallback != null) {  							CallErrorCallback (PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                  string.Join("'"' channels)' string.Join("'"' channelGroups)' errorCallback' ex' null' null);  						}  					}  				}                  if (channelGroups != null && channelGroups.Length > 0)                  {                      if (type == ResponseType.Subscribe || type == ResponseType.Presence)                      {                          for (int index = 0; index < channelGroups.Length; index++)                          {                              string activeChannelGroup = (channelGroups != null && channelGroups.Length > 0) ? channelGroups[index].ToString() : "";                              PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                              callbackKey.ChannelGroup = activeChannelGroup;                              callbackKey.Type = type;                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                              {                                  PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackKey] as PubnubChannelGroupCallback<T>;                                  if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                  {                                      CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                          ""' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' null' null);                                  }                              }                          }                      }                      else                      {                          if (errorCallback != null)                          {                              CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                  string.Join("'"' channels)' string.Join("'"' channelGroups)' errorCallback' ex' null' null);                          }                      }                  }              }
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try {  				string multiChannel = (channels != null) ? string.Join ("'"' channels) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups) : "";  				                  if (!string.IsNullOrEmpty (jsonString))                   {  					if (!string.IsNullOrEmpty (jsonString))                       {  						object deSerializedResult = _jsonPluggableLibrary.DeserializeToObject (jsonString);  						List<object> result1 = ((IEnumerable)deSerializedResult).Cast<object> ().ToList ();    						if (result1 != null && result1.Count > 0) {  							result = result1;  						}    						switch (type) {  						case ResponseType.Publish:  							result.Add (multiChannel);  							break;  						case ResponseType.History:  							if (this.cipherKey.Length > 0) {  								List<object> historyDecrypted = new List<object> ();  								PubnubCrypto aes = new PubnubCrypto (this.cipherKey);  								foreach (object message in result) {  									historyDecrypted.Add (aes.Decrypt (message.ToString ()));  								}  								History = historyDecrypted;  							} else {  								History = result;  							}  							break;  						case ResponseType.DetailedHistory:  							result = DecodeDecryptLoop (result' channels' channelGroups' errorCallback);  							result.Add (multiChannel);  							break;  						case ResponseType.Here_Now:  							Dictionary<string' object> dictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (dictionary);  							result.Add (multiChannel);  							break;  						case ResponseType.GlobalHere_Now:  							Dictionary<string' object> globalHereNowDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (globalHereNowDictionary);  							break;  						case ResponseType.Where_Now:  							Dictionary<string' object> whereNowDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (whereNowDictionary);  							result.Add (multiChannel);  							break;  						case ResponseType.Time:  							break;  						case ResponseType.Subscribe:  						case ResponseType.Presence:                              if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                              {                                  result.RemoveAt(2);                              }                              result.Add(multiChannelGroup);                              result.Add (multiChannel);  							                              long receivedTimetoken = (result.Count > 1) ? Convert.ToInt64 (result [1].ToString ()) : 0;  							                              long minimumTimetoken1 = (multiChannelSubscribe.Count > 0) ? multiChannelSubscribe.Min (token => token.Value) : 0;                              long minimumTimetoken2 = (multiChannelGroupSubscribe.Count > 0) ? multiChannelGroupSubscribe.Min(token => token.Value) : 0;                              long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);    							long maximumTimetoken1 = (multiChannelSubscribe.Count > 0) ? multiChannelSubscribe.Max (token => token.Value) : 0;                              long maximumTimetoken2 = (multiChannelGroupSubscribe.Count > 0) ? multiChannelGroupSubscribe.Max(token => token.Value) : 0;                              long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);    							if (minimumTimetoken == 0 || lastTimetoken == 0) {  								if (maximumTimetoken == 0) {  									lastSubscribeTimetoken = receivedTimetoken;  								} else {  									if (!_enableResumeOnReconnect) {  										lastSubscribeTimetoken = receivedTimetoken;  									} else {  										//do nothing. keep last subscribe token  									}  								}  							} else {  								if (reconnect) {  									if (_enableResumeOnReconnect) {  										//do nothing. keep last subscribe token  									} else {  										lastSubscribeTimetoken = receivedTimetoken;  									}  								} else {  									lastSubscribeTimetoken = receivedTimetoken;  								}  							}  							break;  						case ResponseType.Leave:  							result.Add (multiChannel);  							break;  						case ResponseType.GrantAccess:  						case ResponseType.AuditAccess:  						case ResponseType.RevokeAccess:  							Dictionary<string' object> grantDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);  							result = new List<object> ();  							result.Add (grantDictionary);  							result.Add (multiChannel);  							break;                          case ResponseType.ChannelGroupGrantAccess:                          case ResponseType.ChannelGroupAuditAccess:                          case ResponseType.ChannelGroupRevokeAccess:                              Dictionary<string' object> channelGroupPAMDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                              result = new List<object>();                              result.Add(channelGroupPAMDictionary);                              result.Add(multiChannelGroup);                              break;                          case ResponseType.GetUserState:  						case ResponseType.SetUserState:  							Dictionary<string' object> userStateDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (userStateDictionary);                              if (multiChannelGroup != "")                              {                                  result.Add(multiChannelGroup);                              }                              if (multiChannel != "")                              {                                  result.Add(multiChannel);                              }  							break;                          case ResponseType.PushRegister:                          case ResponseType.PushRemove:                          case ResponseType.PushGet:                          case ResponseType.PushUnregister:  							result.Add (multiChannel);                              break;                          case ResponseType.ChannelGroupAdd:                          case ResponseType.ChannelGroupRemove:                          case ResponseType.ChannelGroupGet:  							Dictionary<string' object> channelGroupDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();                              result.Add(channelGroupDictionary);                              if (multiChannelGroup != "")                              {                                  result.Add(multiChannelGroup);                              }                              if (multiChannel != "")                              {                                  result.Add(multiChannel);                              }                              break;  						default:  							break;  						}  						;//switch stmt end  					}  				}  			} catch (Exception ex) {  				if (channels != null && channels.Length > 0)                   {  					if (type == ResponseType.Subscribe || type == ResponseType.Presence)                       {  						for (int index = 0; index < channels.Length; index++)                           {  							string activeChannel = channels[index].ToString();  							PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey ();  							callbackKey.Channel = activeChannel;  							callbackKey.Type = type;    							if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey (callbackKey)) {  								PubnubChannelCallback<T> currentPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<T>;  								if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null) {  									CallErrorCallback (PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                          activeChannel' ""' currentPubnubCallback.ErrorCallback' ex' null' null);  								}  							}  						}  					}                       else                       {  						if (errorCallback != null) {  							CallErrorCallback (PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                  string.Join("'"' channels)' string.Join("'"' channelGroups)' errorCallback' ex' null' null);  						}  					}  				}                  if (channelGroups != null && channelGroups.Length > 0)                  {                      if (type == ResponseType.Subscribe || type == ResponseType.Presence)                      {                          for (int index = 0; index < channelGroups.Length; index++)                          {                              string activeChannelGroup = (channelGroups != null && channelGroups.Length > 0) ? channelGroups[index].ToString() : "";                              PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                              callbackKey.ChannelGroup = activeChannelGroup;                              callbackKey.Type = type;                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                              {                                  PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackKey] as PubnubChannelGroupCallback<T>;                                  if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                  {                                      CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                          ""' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' null' null);                                  }                              }                          }                      }                      else                      {                          if (errorCallback != null)                          {                              CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                  string.Join("'"' channels)' string.Join("'"' channelGroups)' errorCallback' ex' null' null);                          }                      }                  }              }
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try {  				string multiChannel = (channels != null) ? string.Join ("'"' channels) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups) : "";  				                  if (!string.IsNullOrEmpty (jsonString))                   {  					if (!string.IsNullOrEmpty (jsonString))                       {  						object deSerializedResult = _jsonPluggableLibrary.DeserializeToObject (jsonString);  						List<object> result1 = ((IEnumerable)deSerializedResult).Cast<object> ().ToList ();    						if (result1 != null && result1.Count > 0) {  							result = result1;  						}    						switch (type) {  						case ResponseType.Publish:  							result.Add (multiChannel);  							break;  						case ResponseType.History:  							if (this.cipherKey.Length > 0) {  								List<object> historyDecrypted = new List<object> ();  								PubnubCrypto aes = new PubnubCrypto (this.cipherKey);  								foreach (object message in result) {  									historyDecrypted.Add (aes.Decrypt (message.ToString ()));  								}  								History = historyDecrypted;  							} else {  								History = result;  							}  							break;  						case ResponseType.DetailedHistory:  							result = DecodeDecryptLoop (result' channels' channelGroups' errorCallback);  							result.Add (multiChannel);  							break;  						case ResponseType.Here_Now:  							Dictionary<string' object> dictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (dictionary);  							result.Add (multiChannel);  							break;  						case ResponseType.GlobalHere_Now:  							Dictionary<string' object> globalHereNowDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (globalHereNowDictionary);  							break;  						case ResponseType.Where_Now:  							Dictionary<string' object> whereNowDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (whereNowDictionary);  							result.Add (multiChannel);  							break;  						case ResponseType.Time:  							break;  						case ResponseType.Subscribe:  						case ResponseType.Presence:                              if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                              {                                  result.RemoveAt(2);                              }                              result.Add(multiChannelGroup);                              result.Add (multiChannel);  							                              long receivedTimetoken = (result.Count > 1) ? Convert.ToInt64 (result [1].ToString ()) : 0;  							                              long minimumTimetoken1 = (multiChannelSubscribe.Count > 0) ? multiChannelSubscribe.Min (token => token.Value) : 0;                              long minimumTimetoken2 = (multiChannelGroupSubscribe.Count > 0) ? multiChannelGroupSubscribe.Min(token => token.Value) : 0;                              long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);    							long maximumTimetoken1 = (multiChannelSubscribe.Count > 0) ? multiChannelSubscribe.Max (token => token.Value) : 0;                              long maximumTimetoken2 = (multiChannelGroupSubscribe.Count > 0) ? multiChannelGroupSubscribe.Max(token => token.Value) : 0;                              long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);    							if (minimumTimetoken == 0 || lastTimetoken == 0) {  								if (maximumTimetoken == 0) {  									lastSubscribeTimetoken = receivedTimetoken;  								} else {  									if (!_enableResumeOnReconnect) {  										lastSubscribeTimetoken = receivedTimetoken;  									} else {  										//do nothing. keep last subscribe token  									}  								}  							} else {  								if (reconnect) {  									if (_enableResumeOnReconnect) {  										//do nothing. keep last subscribe token  									} else {  										lastSubscribeTimetoken = receivedTimetoken;  									}  								} else {  									lastSubscribeTimetoken = receivedTimetoken;  								}  							}  							break;  						case ResponseType.Leave:  							result.Add (multiChannel);  							break;  						case ResponseType.GrantAccess:  						case ResponseType.AuditAccess:  						case ResponseType.RevokeAccess:  							Dictionary<string' object> grantDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);  							result = new List<object> ();  							result.Add (grantDictionary);  							result.Add (multiChannel);  							break;                          case ResponseType.ChannelGroupGrantAccess:                          case ResponseType.ChannelGroupAuditAccess:                          case ResponseType.ChannelGroupRevokeAccess:                              Dictionary<string' object> channelGroupPAMDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                              result = new List<object>();                              result.Add(channelGroupPAMDictionary);                              result.Add(multiChannelGroup);                              break;                          case ResponseType.GetUserState:  						case ResponseType.SetUserState:  							Dictionary<string' object> userStateDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();  							result.Add (userStateDictionary);                              if (multiChannelGroup != "")                              {                                  result.Add(multiChannelGroup);                              }                              if (multiChannel != "")                              {                                  result.Add(multiChannel);                              }  							break;                          case ResponseType.PushRegister:                          case ResponseType.PushRemove:                          case ResponseType.PushGet:                          case ResponseType.PushUnregister:  							result.Add (multiChannel);                              break;                          case ResponseType.ChannelGroupAdd:                          case ResponseType.ChannelGroupRemove:                          case ResponseType.ChannelGroupGet:  							Dictionary<string' object> channelGroupDictionary = _jsonPluggableLibrary.DeserializeToDictionaryOfObject (jsonString);  							result = new List<object> ();                              result.Add(channelGroupDictionary);                              if (multiChannelGroup != "")                              {                                  result.Add(multiChannelGroup);                              }                              if (multiChannel != "")                              {                                  result.Add(multiChannel);                              }                              break;  						default:  							break;  						}  						;//switch stmt end  					}  				}  			} catch (Exception ex) {  				if (channels != null && channels.Length > 0)                   {  					if (type == ResponseType.Subscribe || type == ResponseType.Presence)                       {  						for (int index = 0; index < channels.Length; index++)                           {  							string activeChannel = channels[index].ToString();  							PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey ();  							callbackKey.Channel = activeChannel;  							callbackKey.Type = type;    							if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey (callbackKey)) {  								PubnubChannelCallback<T> currentPubnubCallback = channelCallbacks [callbackKey] as PubnubChannelCallback<T>;  								if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null) {  									CallErrorCallback (PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                          activeChannel' ""' currentPubnubCallback.ErrorCallback' ex' null' null);  								}  							}  						}  					}                       else                       {  						if (errorCallback != null) {  							CallErrorCallback (PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                  string.Join("'"' channels)' string.Join("'"' channelGroups)' errorCallback' ex' null' null);  						}  					}  				}                  if (channelGroups != null && channelGroups.Length > 0)                  {                      if (type == ResponseType.Subscribe || type == ResponseType.Presence)                      {                          for (int index = 0; index < channelGroups.Length; index++)                          {                              string activeChannelGroup = (channelGroups != null && channelGroups.Length > 0) ? channelGroups[index].ToString() : "";                              PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                              callbackKey.ChannelGroup = activeChannelGroup;                              callbackKey.Type = type;                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                              {                                  PubnubChannelGroupCallback<T> currentPubnubCallback = channelGroupCallbacks[callbackKey] as PubnubChannelGroupCallback<T>;                                  if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                  {                                      CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                          ""' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' null' null);                                  }                              }                          }                      }                      else                      {                          if (errorCallback != null)                          {                              CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                  string.Join("'"' channels)' string.Join("'"' channelGroups)' errorCallback' ex' null' null);                          }                      }                  }              }
Magic Number,PubNubMessaging.Core,PubnubCore,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,TimerWhenOverrideTcpKeepAlive,The following statement contains a magic number: localClientHeartBeatTimer = new System.Threading.Timer (  				new TimerCallback (OnPubnubLocalClientHeartBeatTimeoutCallback<T>)' pubnubRequestState' 0'  				(-1 == _pubnubNetworkTcpCheckIntervalInSeconds) ? Timeout.Infinite : _pubnubNetworkTcpCheckIntervalInSeconds * 1000);
Magic Number,PubNubMessaging.Core,PubnubWebRequestBase,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GoToCallback,The following statement contains a magic number: if (Callback != null && error != null) {  				if ((int)error.Severity <= (int)filterErrorLevel) { //Checks whether the error serverity falls in the range of error filter level  					//Do not send 107 = PubnubObjectDisposedException  					//Do not send 105 = WebRequestCancelled  					//Do not send 130 = PubnubClientMachineSleep  					if (error.StatusCode != 107  					         && error.StatusCode != 105  					         && error.StatusCode != 130) { //Error Code that should not go out  						Callback (error);  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubWebRequestBase,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GoToCallback,The following statement contains a magic number: if (Callback != null && error != null) {  				if ((int)error.Severity <= (int)filterErrorLevel) { //Checks whether the error serverity falls in the range of error filter level  					//Do not send 107 = PubnubObjectDisposedException  					//Do not send 105 = WebRequestCancelled  					//Do not send 130 = PubnubClientMachineSleep  					if (error.StatusCode != 107  					         && error.StatusCode != 105  					         && error.StatusCode != 130) { //Error Code that should not go out  						Callback (error);  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubWebRequestBase,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubCore.cs,GoToCallback,The following statement contains a magic number: if (Callback != null && error != null) {  				if ((int)error.Severity <= (int)filterErrorLevel) { //Checks whether the error serverity falls in the range of error filter level  					//Do not send 107 = PubnubObjectDisposedException  					//Do not send 105 = WebRequestCancelled  					//Do not send 130 = PubnubClientMachineSleep  					if (error.StatusCode != 107  					         && error.StatusCode != 105  					         && error.StatusCode != 130) { //Error Code that should not go out  						Callback (error);  					}  				}  			}
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SetServicePointSetTcpKeepAlive,The following statement contains a magic number: request.ServicePoint.SetTcpKeepAlive(true' base.LocalClientHeartbeatInterval * 1000' 1000);
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SetServicePointSetTcpKeepAlive,The following statement contains a magic number: request.ServicePoint.SetTcpKeepAlive(true' base.LocalClientHeartbeatInterval * 1000' 1000);
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SetTimeout,The following statement contains a magic number: request.Timeout = GetTimeoutInSecondsForResponseType(pubnubRequestState.Type) * 1000;
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The following statement contains a magic number: if (!ClientNetworkStatus.MachineSuspendMode && !PubnubWebRequest.MachineSuspendMode)              {                  IAsyncResult asyncResult = request.BeginGetResponse(new AsyncCallback(UrlProcessResponseCallback<T>)' pubnubRequestState);                  ThreadPool.RegisterWaitForSingleObject(asyncResult.AsyncWaitHandle' new WaitOrTimerCallback(OnPubnubWebRequestTimeout<T>)' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.Type) * 1000' true);              }              else              {                  ReconnectState<T> netState = new ReconnectState<T>();                  netState.Channels = pubnubRequestState.Channels;                  netState.ChannelGroups = pubnubRequestState.ChannelGroups;                  netState.Type = pubnubRequestState.Type;                  netState.Callback = pubnubRequestState.UserCallback;                  netState.ErrorCallback = pubnubRequestState.ErrorCallback;                  netState.ConnectCallback = pubnubRequestState.ConnectCallback;                  netState.Timetoken = pubnubRequestState.Timetoken;                  netState.Reconnect = pubnubRequestState.Reconnect;                    _reconnectFromSuspendMode = netState;                  return;              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The following statement contains a magic number: if (pubnubRequestState.Type == ResponseType.Presence || pubnubRequestState.Type == ResponseType.Subscribe)              {                  if (presenceHeartbeatTimer != null)                  {                      presenceHeartbeatTimer.Dispose();                      presenceHeartbeatTimer = null;                  }                  if ((pubnubRequestState.Channels != null && pubnubRequestState.Channels.Length > 0 && pubnubRequestState.Channels.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0)                      || (pubnubRequestState.ChannelGroups != null && pubnubRequestState.ChannelGroups.Length > 0 && pubnubRequestState.ChannelGroups.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0))                  {                      RequestState<T> presenceHeartbeatState = new RequestState<T>();                      presenceHeartbeatState.Channels = pubnubRequestState.Channels;                      presenceHeartbeatState.ChannelGroups = pubnubRequestState.ChannelGroups;                      presenceHeartbeatState.Type = ResponseType.PresenceHeartbeat;                      presenceHeartbeatState.ErrorCallback = pubnubRequestState.ErrorCallback;                      presenceHeartbeatState.Request = null;                      presenceHeartbeatState.Response = null;                        if (base.PresenceHeartbeatInterval > 0)                      {                          presenceHeartbeatTimer = new Timer(OnPresenceHeartbeatIntervalTimeout<T>' presenceHeartbeatState' base.PresenceHeartbeatInterval * 1000' base.PresenceHeartbeatInterval * 1000);                      }                  }              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SendRequestAndGetResult,The following statement contains a magic number: if (pubnubRequestState.Type == ResponseType.Presence || pubnubRequestState.Type == ResponseType.Subscribe)              {                  if (presenceHeartbeatTimer != null)                  {                      presenceHeartbeatTimer.Dispose();                      presenceHeartbeatTimer = null;                  }                  if ((pubnubRequestState.Channels != null && pubnubRequestState.Channels.Length > 0 && pubnubRequestState.Channels.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0)                      || (pubnubRequestState.ChannelGroups != null && pubnubRequestState.ChannelGroups.Length > 0 && pubnubRequestState.ChannelGroups.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0))                  {                      RequestState<T> presenceHeartbeatState = new RequestState<T>();                      presenceHeartbeatState.Channels = pubnubRequestState.Channels;                      presenceHeartbeatState.ChannelGroups = pubnubRequestState.ChannelGroups;                      presenceHeartbeatState.Type = ResponseType.PresenceHeartbeat;                      presenceHeartbeatState.ErrorCallback = pubnubRequestState.ErrorCallback;                      presenceHeartbeatState.Request = null;                      presenceHeartbeatState.Response = null;                        if (base.PresenceHeartbeatInterval > 0)                      {                          presenceHeartbeatTimer = new Timer(OnPresenceHeartbeatIntervalTimeout<T>' presenceHeartbeatState' base.PresenceHeartbeatInterval * 1000' base.PresenceHeartbeatInterval * 1000);                      }                  }              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,TimerWhenOverrideTcpKeepAlive,The following statement contains a magic number: localClientHeartBeatTimer = new Timer(new TimerCallback(OnPubnubLocalClientHeartBeatTimeoutCallback<T>)' pubnubRequestState' 0'                                         base.LocalClientHeartbeatInterval * 1000);
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,HandleWebException,The following statement contains a magic number: if ((webEx.Status == WebExceptionStatus.NameResolutionFailure //No network              || webEx.Status == WebExceptionStatus.ConnectFailure //Sending Keep-alive packet failed (No network)/Server is down.              || webEx.Status == WebExceptionStatus.ServerProtocolViolation //Problem with proxy or ISP              || webEx.Status == WebExceptionStatus.ProtocolError) && (!overrideTcpKeepAlive))  #endif              {                  //internet connection problem.                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' _urlRequest - Internet connection problem"' DateTime.Now.ToString())' LoggingMethod.LevelError);                  if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence))                  {                      if (channelInternetStatus.ContainsKey(channel))                      {                          reconnect = true;                          if (channelInternetStatus[channel])                          {                              //Reset Retry if previous state is true                              channelInternetRetry.AddOrUpdate(channel' 0' (key' oldValue) => 0);                          }                          else                          {                              channelInternetRetry.AddOrUpdate(channel' 1' (key' oldValue) => oldValue + 1);                              string multiChannel = (asynchRequestState.Channels != null) ? string.Join("'"' asynchRequestState.Channels) : "";                              string multiChannelGroup = (asynchRequestState.ChannelGroups != null) ? string.Join("'"' asynchRequestState.ChannelGroups) : "";                              LoggingMethod.WriteToLog(string.Format("DateTime {0} {1} channel = {2} _urlRequest - Internet connection retry {3} of {4}"' DateTime.Now.ToString()' asynchRequestState.Type' multiChannel' channelInternetRetry[channel]' base.NetworkCheckMaxRetries)' LoggingMethod.LevelInfo);                              string message = string.Format("Detected internet connection problem. Retrying connection attempt {0} of {1}"' channelInternetRetry[channel]' base.NetworkCheckMaxRetries);                              CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client' multiChannel' multiChannelGroup' asynchRequestState.ErrorCallback' message' PubnubErrorCode.NoInternetRetryConnect' null' null);                          }                          channelInternetStatus[channel] = false;                      }                        if (channelGroupInternetStatus.ContainsKey(channelGroup))                      {                          reconnect = true;                          if (channelGroupInternetStatus[channelGroup])                          {                              //Reset Retry if previous state is true                              channelGroupInternetRetry.AddOrUpdate(channelGroup' 0' (key' oldValue) => 0);                          }                          else                          {                              channelGroupInternetRetry.AddOrUpdate(channelGroup' 1' (key' oldValue) => oldValue + 1);                              string multiChannel = (asynchRequestState.Channels != null) ? string.Join("'"' asynchRequestState.Channels) : "";                              string multiChannelGroup = (asynchRequestState.ChannelGroups != null) ? string.Join("'"' asynchRequestState.ChannelGroups) : "";                              LoggingMethod.WriteToLog(string.Format("DateTime {0} {1} channelgroup = {2} _urlRequest - Internet connection retry {3} of {4}"' DateTime.Now.ToString()' asynchRequestState.Type' multiChannelGroup' channelGroupInternetRetry[channelGroup]' base.NetworkCheckMaxRetries)' LoggingMethod.LevelInfo);                              string message = string.Format("Detected internet connection problem. Retrying connection attempt {0} of {1}"' channelGroupInternetRetry[channelGroup]' base.NetworkCheckMaxRetries);                              CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client' multiChannel' multiChannelGroup' asynchRequestState.ErrorCallback' message' PubnubErrorCode.NoInternetRetryConnect' null' null);                          }                          channelGroupInternetStatus[channelGroup] = false;                      }                  }                  #if NETFX_CORE                  Task.Delay(base.NetworkCheckRetryInterval * 1000);                  #else                  Thread.Sleep(base.NetworkCheckRetryInterval * 1000);                  #endif              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The following statement contains a magic number: try              {                  if (asyncWebRequest != null)                  {                      using (PubnubWebResponse asyncWebResponse = (PubnubWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult))                      {                          asynchRequestState.Response = asyncWebResponse;                            using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                          {                              if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                              {                                  if (!overrideTcpKeepAlive && (                                              (channelInternetStatus.ContainsKey(channel) && !channelInternetStatus[channel])                                                   || (channelGroupInternetStatus.ContainsKey(channelGroup) && !channelGroupInternetStatus[channelGroup])                                                  ))                                  {                                      if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                          {                                              string activeChannel = asynchRequestState.Channels[index].ToString();                                              string activeChannelGroup = "";                                                string status = "Internet connection available";                                                PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                              callbackKey.Channel = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                        if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                          {                                              string activeChannel = "";                                              string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                                string status = "Internet connection available";                                                PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                              callbackKey.ChannelGroup = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                  }                                    channelInternetStatus.AddOrUpdate(channel' true' (key' oldValue) => true);                                  channelGroupInternetStatus.AddOrUpdate(channelGroup' true' (key' oldValue) => true);                              }                                //Deserialize the result                              string jsonString = streamReader.ReadToEnd();  #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if (asynchRequestState.Type == ResponseType.PresenceHeartbeat)                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                              }                              else if (jsonString != "[]")                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                          }  #if !NETFX_CORE                          asyncWebResponse.Close ();  #endif                      }                  }                  else                  {                      LoggingMethod.WriteToLog(string.Format("DateTime {0}' Request aborted for channel={1}' channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo);                  }                    ProcessResponseCallbacks<T>(result' asynchRequestState);                    if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0))                  {                      if (asynchRequestState.Channels != null)                      {                          foreach (string currentChannel in asynchRequestState.Channels)                          {                              multiChannelSubscribe.AddOrUpdate(currentChannel' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                      if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                      {                          foreach (string currentChannelGroup in asynchRequestState.ChannelGroups)                          {                              multiChannelGroupSubscribe.AddOrUpdate(currentChannelGroup' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                  }                    switch (asynchRequestState.Type)                  {                      case ResponseType.Subscribe:                      case ResponseType.Presence:                          MultiplexInternalCallback<T>(asynchRequestState.Type' result' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback);                          break;                      default:                          break;                  }              }              catch (WebException webEx)              {                  HttpStatusCode currentHttpStatusCode;                  if (webEx.Response != null && asynchRequestState != null)                  {                      if (webEx.Response.GetType().ToString() == "System.Net.HttpWebResponse"                               || webEx.Response.GetType().ToString() == "MS.Internal.Modern.ClientHttpWebResponse"                               || webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          currentHttpStatusCode = ((HttpWebResponse)webEx.Response).StatusCode;                      }                      else                      {                          currentHttpStatusCode = ((PubnubWebResponse)webEx.Response).HttpStatusCode;                      }                      PubnubWebResponse exceptionResponse = new PubnubWebResponse(webEx.Response' currentHttpStatusCode);                      if (exceptionResponse != null)                      {                          asynchRequestState.Response = exceptionResponse;                            using (StreamReader streamReader = new StreamReader(asynchRequestState.Response.GetResponseStream()))                          {                              string jsonString = streamReader.ReadToEnd();    #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if ((int)currentHttpStatusCode < 200 || (int)currentHttpStatusCode >= 300)                              {                                  result = null;                                  string errorDescription = "";                                  int pubnubStatusCode = 0;                                    if ((int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414)                                  {                                      //This status code is not giving json string.                                      string statusMessage = currentHttpStatusCode.ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsArrayCompatible(jsonString))                                  {                                      List<object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToListOfObject(jsonString);                                      string statusMessage = deserializeStatus[1].ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      string statusMessage = deserializeStatus.ContainsKey("message") ? deserializeStatus["message"].ToString() : (deserializeStatus.ContainsKey("error") ? deserializeStatus["error"].ToString() : jsonString);                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else                                  {                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' jsonString);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                    PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' jsonString' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                  GoToCallback(error' asynchRequestState.ErrorCallback);                                }                              else if (jsonString != "[]")                              {                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                              else                              {                                  result = null;                              }                          }                      }  #if !NETFX_CORE                      exceptionResponse.Close ();  #endif                        if (result != null && result.Count > 0)                      {                          ProcessResponseCallbacks<T>(result' asynchRequestState);                      }                        if (result == null && currentHttpStatusCode == HttpStatusCode.NotFound                          && (asynchRequestState.Type == ResponseType.Presence || asynchRequestState.Type == ResponseType.Subscribe)                          && webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          ProcessResponseCallbackExceptionHandler(webEx' asynchRequestState);                      }                  }                  else                  {                      if (asynchRequestState.Channels != null || asynchRequestState.ChannelGroups != null || asynchRequestState.Type == ResponseType.Time)                      {                          if (asynchRequestState.Type == ResponseType.Subscribe                                    || asynchRequestState.Type == ResponseType.Presence)                          {                              if ((webEx.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  || webEx.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                                  && (webEx.Status != WebExceptionStatus.RequestCanceled))                              {                                  for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                  {                                      string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                           ? asynchRequestState.Channels[index].ToString() : "";                                      string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                           ? asynchRequestState.ChannelGroups[index].ToString() : "";                                        PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                      callbackKey.Channel = activeChannel;                                      callbackKey.Type = asynchRequestState.Type;                                        if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                      {                                          object callbackObject;                                          bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                          PubnubChannelCallback<T> currentPubnubCallback = null;                                          if (channelAvailable)                                          {                                              currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                          }                                          if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                          {                                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                       activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                       webEx' asynchRequestState.Request' asynchRequestState.Response);                                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                          }                                      }                                  }                                    if (asynchRequestState.ChannelGroups != null)                                  {                                      for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                      {                                          string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                              ? asynchRequestState.Channels[index].ToString() : "";                                          string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                              ? asynchRequestState.ChannelGroups[index].ToString() : "";                                            PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                          callbackKey.ChannelGroup = activeChannelGroup;                                          callbackKey.Type = asynchRequestState.Type;                                            if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                          {                                              object callbackObject;                                              bool channelGroupAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                              PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                              if (channelGroupAvailable)                                              {                                                  currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                              }                                              if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                              {                                                  PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                           activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                           webEx' asynchRequestState.Request' asynchRequestState.Response);                                                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                   channel' channelGroup' asynchRequestState.ErrorCallback'                                                                   webEx' asynchRequestState.Request' asynchRequestState.Response);                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                          }                      }                      ProcessResponseCallbackWebExceptionHandler<T>(webEx' asynchRequestState' channel' channelGroup);                  }              }              catch (Exception ex)              {                  if (!pubnetSystemActive && ex.Message.IndexOf("The IAsyncResult object was not returned from the corresponding asynchronous method on this class.") == -1)                  {                      if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                      {                          if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.Channels.Length; index++)                              {                                  string activeChannel = asynchRequestState.Channels[index].ToString();                                  string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      ? asynchRequestState.ChannelGroups[index].ToString() : "";                                    PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                  callbackKey.Channel = activeChannel;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                            if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                              {                                  string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      ? asynchRequestState.Channels[index].ToString() : "";                                  string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                    PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                  callbackKey.ChannelGroup = activeChannelGroup;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                                                }                      else                      {                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                              channel' channelGroup' asynchRequestState.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                      }                    }                  ProcessResponseCallbackExceptionHandler<T>(ex' asynchRequestState);              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The following statement contains a magic number: try              {                  if (asyncWebRequest != null)                  {                      using (PubnubWebResponse asyncWebResponse = (PubnubWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult))                      {                          asynchRequestState.Response = asyncWebResponse;                            using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                          {                              if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                              {                                  if (!overrideTcpKeepAlive && (                                              (channelInternetStatus.ContainsKey(channel) && !channelInternetStatus[channel])                                                   || (channelGroupInternetStatus.ContainsKey(channelGroup) && !channelGroupInternetStatus[channelGroup])                                                  ))                                  {                                      if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                          {                                              string activeChannel = asynchRequestState.Channels[index].ToString();                                              string activeChannelGroup = "";                                                string status = "Internet connection available";                                                PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                              callbackKey.Channel = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                        if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                          {                                              string activeChannel = "";                                              string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                                string status = "Internet connection available";                                                PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                              callbackKey.ChannelGroup = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                  }                                    channelInternetStatus.AddOrUpdate(channel' true' (key' oldValue) => true);                                  channelGroupInternetStatus.AddOrUpdate(channelGroup' true' (key' oldValue) => true);                              }                                //Deserialize the result                              string jsonString = streamReader.ReadToEnd();  #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if (asynchRequestState.Type == ResponseType.PresenceHeartbeat)                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                              }                              else if (jsonString != "[]")                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                          }  #if !NETFX_CORE                          asyncWebResponse.Close ();  #endif                      }                  }                  else                  {                      LoggingMethod.WriteToLog(string.Format("DateTime {0}' Request aborted for channel={1}' channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo);                  }                    ProcessResponseCallbacks<T>(result' asynchRequestState);                    if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0))                  {                      if (asynchRequestState.Channels != null)                      {                          foreach (string currentChannel in asynchRequestState.Channels)                          {                              multiChannelSubscribe.AddOrUpdate(currentChannel' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                      if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                      {                          foreach (string currentChannelGroup in asynchRequestState.ChannelGroups)                          {                              multiChannelGroupSubscribe.AddOrUpdate(currentChannelGroup' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                  }                    switch (asynchRequestState.Type)                  {                      case ResponseType.Subscribe:                      case ResponseType.Presence:                          MultiplexInternalCallback<T>(asynchRequestState.Type' result' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback);                          break;                      default:                          break;                  }              }              catch (WebException webEx)              {                  HttpStatusCode currentHttpStatusCode;                  if (webEx.Response != null && asynchRequestState != null)                  {                      if (webEx.Response.GetType().ToString() == "System.Net.HttpWebResponse"                               || webEx.Response.GetType().ToString() == "MS.Internal.Modern.ClientHttpWebResponse"                               || webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          currentHttpStatusCode = ((HttpWebResponse)webEx.Response).StatusCode;                      }                      else                      {                          currentHttpStatusCode = ((PubnubWebResponse)webEx.Response).HttpStatusCode;                      }                      PubnubWebResponse exceptionResponse = new PubnubWebResponse(webEx.Response' currentHttpStatusCode);                      if (exceptionResponse != null)                      {                          asynchRequestState.Response = exceptionResponse;                            using (StreamReader streamReader = new StreamReader(asynchRequestState.Response.GetResponseStream()))                          {                              string jsonString = streamReader.ReadToEnd();    #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if ((int)currentHttpStatusCode < 200 || (int)currentHttpStatusCode >= 300)                              {                                  result = null;                                  string errorDescription = "";                                  int pubnubStatusCode = 0;                                    if ((int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414)                                  {                                      //This status code is not giving json string.                                      string statusMessage = currentHttpStatusCode.ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsArrayCompatible(jsonString))                                  {                                      List<object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToListOfObject(jsonString);                                      string statusMessage = deserializeStatus[1].ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      string statusMessage = deserializeStatus.ContainsKey("message") ? deserializeStatus["message"].ToString() : (deserializeStatus.ContainsKey("error") ? deserializeStatus["error"].ToString() : jsonString);                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else                                  {                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' jsonString);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                    PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' jsonString' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                  GoToCallback(error' asynchRequestState.ErrorCallback);                                }                              else if (jsonString != "[]")                              {                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                              else                              {                                  result = null;                              }                          }                      }  #if !NETFX_CORE                      exceptionResponse.Close ();  #endif                        if (result != null && result.Count > 0)                      {                          ProcessResponseCallbacks<T>(result' asynchRequestState);                      }                        if (result == null && currentHttpStatusCode == HttpStatusCode.NotFound                          && (asynchRequestState.Type == ResponseType.Presence || asynchRequestState.Type == ResponseType.Subscribe)                          && webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          ProcessResponseCallbackExceptionHandler(webEx' asynchRequestState);                      }                  }                  else                  {                      if (asynchRequestState.Channels != null || asynchRequestState.ChannelGroups != null || asynchRequestState.Type == ResponseType.Time)                      {                          if (asynchRequestState.Type == ResponseType.Subscribe                                    || asynchRequestState.Type == ResponseType.Presence)                          {                              if ((webEx.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  || webEx.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                                  && (webEx.Status != WebExceptionStatus.RequestCanceled))                              {                                  for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                  {                                      string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                           ? asynchRequestState.Channels[index].ToString() : "";                                      string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                           ? asynchRequestState.ChannelGroups[index].ToString() : "";                                        PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                      callbackKey.Channel = activeChannel;                                      callbackKey.Type = asynchRequestState.Type;                                        if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                      {                                          object callbackObject;                                          bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                          PubnubChannelCallback<T> currentPubnubCallback = null;                                          if (channelAvailable)                                          {                                              currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                          }                                          if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                          {                                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                       activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                       webEx' asynchRequestState.Request' asynchRequestState.Response);                                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                          }                                      }                                  }                                    if (asynchRequestState.ChannelGroups != null)                                  {                                      for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                      {                                          string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                              ? asynchRequestState.Channels[index].ToString() : "";                                          string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                              ? asynchRequestState.ChannelGroups[index].ToString() : "";                                            PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                          callbackKey.ChannelGroup = activeChannelGroup;                                          callbackKey.Type = asynchRequestState.Type;                                            if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                          {                                              object callbackObject;                                              bool channelGroupAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                              PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                              if (channelGroupAvailable)                                              {                                                  currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                              }                                              if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                              {                                                  PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                           activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                           webEx' asynchRequestState.Request' asynchRequestState.Response);                                                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                   channel' channelGroup' asynchRequestState.ErrorCallback'                                                                   webEx' asynchRequestState.Request' asynchRequestState.Response);                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                          }                      }                      ProcessResponseCallbackWebExceptionHandler<T>(webEx' asynchRequestState' channel' channelGroup);                  }              }              catch (Exception ex)              {                  if (!pubnetSystemActive && ex.Message.IndexOf("The IAsyncResult object was not returned from the corresponding asynchronous method on this class.") == -1)                  {                      if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                      {                          if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.Channels.Length; index++)                              {                                  string activeChannel = asynchRequestState.Channels[index].ToString();                                  string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      ? asynchRequestState.ChannelGroups[index].ToString() : "";                                    PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                  callbackKey.Channel = activeChannel;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                            if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                              {                                  string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      ? asynchRequestState.Channels[index].ToString() : "";                                  string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                    PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                  callbackKey.ChannelGroup = activeChannelGroup;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                                                }                      else                      {                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                              channel' channelGroup' asynchRequestState.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                      }                    }                  ProcessResponseCallbackExceptionHandler<T>(ex' asynchRequestState);              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The following statement contains a magic number: try              {                  if (asyncWebRequest != null)                  {                      using (PubnubWebResponse asyncWebResponse = (PubnubWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult))                      {                          asynchRequestState.Response = asyncWebResponse;                            using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                          {                              if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                              {                                  if (!overrideTcpKeepAlive && (                                              (channelInternetStatus.ContainsKey(channel) && !channelInternetStatus[channel])                                                   || (channelGroupInternetStatus.ContainsKey(channelGroup) && !channelGroupInternetStatus[channelGroup])                                                  ))                                  {                                      if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                          {                                              string activeChannel = asynchRequestState.Channels[index].ToString();                                              string activeChannelGroup = "";                                                string status = "Internet connection available";                                                PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                              callbackKey.Channel = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                        if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                          {                                              string activeChannel = "";                                              string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                                string status = "Internet connection available";                                                PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                              callbackKey.ChannelGroup = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                  }                                    channelInternetStatus.AddOrUpdate(channel' true' (key' oldValue) => true);                                  channelGroupInternetStatus.AddOrUpdate(channelGroup' true' (key' oldValue) => true);                              }                                //Deserialize the result                              string jsonString = streamReader.ReadToEnd();  #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if (asynchRequestState.Type == ResponseType.PresenceHeartbeat)                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                              }                              else if (jsonString != "[]")                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                          }  #if !NETFX_CORE                          asyncWebResponse.Close ();  #endif                      }                  }                  else                  {                      LoggingMethod.WriteToLog(string.Format("DateTime {0}' Request aborted for channel={1}' channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo);                  }                    ProcessResponseCallbacks<T>(result' asynchRequestState);                    if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0))                  {                      if (asynchRequestState.Channels != null)                      {                          foreach (string currentChannel in asynchRequestState.Channels)                          {                              multiChannelSubscribe.AddOrUpdate(currentChannel' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                      if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                      {                          foreach (string currentChannelGroup in asynchRequestState.ChannelGroups)                          {                              multiChannelGroupSubscribe.AddOrUpdate(currentChannelGroup' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                  }                    switch (asynchRequestState.Type)                  {                      case ResponseType.Subscribe:                      case ResponseType.Presence:                          MultiplexInternalCallback<T>(asynchRequestState.Type' result' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback);                          break;                      default:                          break;                  }              }              catch (WebException webEx)              {                  HttpStatusCode currentHttpStatusCode;                  if (webEx.Response != null && asynchRequestState != null)                  {                      if (webEx.Response.GetType().ToString() == "System.Net.HttpWebResponse"                               || webEx.Response.GetType().ToString() == "MS.Internal.Modern.ClientHttpWebResponse"                               || webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          currentHttpStatusCode = ((HttpWebResponse)webEx.Response).StatusCode;                      }                      else                      {                          currentHttpStatusCode = ((PubnubWebResponse)webEx.Response).HttpStatusCode;                      }                      PubnubWebResponse exceptionResponse = new PubnubWebResponse(webEx.Response' currentHttpStatusCode);                      if (exceptionResponse != null)                      {                          asynchRequestState.Response = exceptionResponse;                            using (StreamReader streamReader = new StreamReader(asynchRequestState.Response.GetResponseStream()))                          {                              string jsonString = streamReader.ReadToEnd();    #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if ((int)currentHttpStatusCode < 200 || (int)currentHttpStatusCode >= 300)                              {                                  result = null;                                  string errorDescription = "";                                  int pubnubStatusCode = 0;                                    if ((int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414)                                  {                                      //This status code is not giving json string.                                      string statusMessage = currentHttpStatusCode.ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsArrayCompatible(jsonString))                                  {                                      List<object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToListOfObject(jsonString);                                      string statusMessage = deserializeStatus[1].ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      string statusMessage = deserializeStatus.ContainsKey("message") ? deserializeStatus["message"].ToString() : (deserializeStatus.ContainsKey("error") ? deserializeStatus["error"].ToString() : jsonString);                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else                                  {                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' jsonString);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                    PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' jsonString' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                  GoToCallback(error' asynchRequestState.ErrorCallback);                                }                              else if (jsonString != "[]")                              {                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                              else                              {                                  result = null;                              }                          }                      }  #if !NETFX_CORE                      exceptionResponse.Close ();  #endif                        if (result != null && result.Count > 0)                      {                          ProcessResponseCallbacks<T>(result' asynchRequestState);                      }                        if (result == null && currentHttpStatusCode == HttpStatusCode.NotFound                          && (asynchRequestState.Type == ResponseType.Presence || asynchRequestState.Type == ResponseType.Subscribe)                          && webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          ProcessResponseCallbackExceptionHandler(webEx' asynchRequestState);                      }                  }                  else                  {                      if (asynchRequestState.Channels != null || asynchRequestState.ChannelGroups != null || asynchRequestState.Type == ResponseType.Time)                      {                          if (asynchRequestState.Type == ResponseType.Subscribe                                    || asynchRequestState.Type == ResponseType.Presence)                          {                              if ((webEx.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  || webEx.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                                  && (webEx.Status != WebExceptionStatus.RequestCanceled))                              {                                  for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                  {                                      string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                           ? asynchRequestState.Channels[index].ToString() : "";                                      string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                           ? asynchRequestState.ChannelGroups[index].ToString() : "";                                        PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                      callbackKey.Channel = activeChannel;                                      callbackKey.Type = asynchRequestState.Type;                                        if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                      {                                          object callbackObject;                                          bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                          PubnubChannelCallback<T> currentPubnubCallback = null;                                          if (channelAvailable)                                          {                                              currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                          }                                          if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                          {                                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                       activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                       webEx' asynchRequestState.Request' asynchRequestState.Response);                                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                          }                                      }                                  }                                    if (asynchRequestState.ChannelGroups != null)                                  {                                      for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                      {                                          string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                              ? asynchRequestState.Channels[index].ToString() : "";                                          string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                              ? asynchRequestState.ChannelGroups[index].ToString() : "";                                            PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                          callbackKey.ChannelGroup = activeChannelGroup;                                          callbackKey.Type = asynchRequestState.Type;                                            if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                          {                                              object callbackObject;                                              bool channelGroupAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                              PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                              if (channelGroupAvailable)                                              {                                                  currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                              }                                              if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                              {                                                  PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                           activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                           webEx' asynchRequestState.Request' asynchRequestState.Response);                                                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                   channel' channelGroup' asynchRequestState.ErrorCallback'                                                                   webEx' asynchRequestState.Request' asynchRequestState.Response);                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                          }                      }                      ProcessResponseCallbackWebExceptionHandler<T>(webEx' asynchRequestState' channel' channelGroup);                  }              }              catch (Exception ex)              {                  if (!pubnetSystemActive && ex.Message.IndexOf("The IAsyncResult object was not returned from the corresponding asynchronous method on this class.") == -1)                  {                      if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                      {                          if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.Channels.Length; index++)                              {                                  string activeChannel = asynchRequestState.Channels[index].ToString();                                  string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      ? asynchRequestState.ChannelGroups[index].ToString() : "";                                    PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                  callbackKey.Channel = activeChannel;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                            if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                              {                                  string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      ? asynchRequestState.Channels[index].ToString() : "";                                  string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                    PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                  callbackKey.ChannelGroup = activeChannelGroup;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                                                }                      else                      {                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                              channel' channelGroup' asynchRequestState.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                      }                    }                  ProcessResponseCallbackExceptionHandler<T>(ex' asynchRequestState);              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The following statement contains a magic number: try              {                  if (asyncWebRequest != null)                  {                      using (PubnubWebResponse asyncWebResponse = (PubnubWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult))                      {                          asynchRequestState.Response = asyncWebResponse;                            using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                          {                              if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                              {                                  if (!overrideTcpKeepAlive && (                                              (channelInternetStatus.ContainsKey(channel) && !channelInternetStatus[channel])                                                   || (channelGroupInternetStatus.ContainsKey(channelGroup) && !channelGroupInternetStatus[channelGroup])                                                  ))                                  {                                      if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                          {                                              string activeChannel = asynchRequestState.Channels[index].ToString();                                              string activeChannelGroup = "";                                                string status = "Internet connection available";                                                PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                              callbackKey.Channel = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                        if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                          {                                              string activeChannel = "";                                              string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                                string status = "Internet connection available";                                                PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                              callbackKey.ChannelGroup = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                  }                                    channelInternetStatus.AddOrUpdate(channel' true' (key' oldValue) => true);                                  channelGroupInternetStatus.AddOrUpdate(channelGroup' true' (key' oldValue) => true);                              }                                //Deserialize the result                              string jsonString = streamReader.ReadToEnd();  #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if (asynchRequestState.Type == ResponseType.PresenceHeartbeat)                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                              }                              else if (jsonString != "[]")                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                          }  #if !NETFX_CORE                          asyncWebResponse.Close ();  #endif                      }                  }                  else                  {                      LoggingMethod.WriteToLog(string.Format("DateTime {0}' Request aborted for channel={1}' channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo);                  }                    ProcessResponseCallbacks<T>(result' asynchRequestState);                    if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0))                  {                      if (asynchRequestState.Channels != null)                      {                          foreach (string currentChannel in asynchRequestState.Channels)                          {                              multiChannelSubscribe.AddOrUpdate(currentChannel' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                      if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                      {                          foreach (string currentChannelGroup in asynchRequestState.ChannelGroups)                          {                              multiChannelGroupSubscribe.AddOrUpdate(currentChannelGroup' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                  }                    switch (asynchRequestState.Type)                  {                      case ResponseType.Subscribe:                      case ResponseType.Presence:                          MultiplexInternalCallback<T>(asynchRequestState.Type' result' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback);                          break;                      default:                          break;                  }              }              catch (WebException webEx)              {                  HttpStatusCode currentHttpStatusCode;                  if (webEx.Response != null && asynchRequestState != null)                  {                      if (webEx.Response.GetType().ToString() == "System.Net.HttpWebResponse"                               || webEx.Response.GetType().ToString() == "MS.Internal.Modern.ClientHttpWebResponse"                               || webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          currentHttpStatusCode = ((HttpWebResponse)webEx.Response).StatusCode;                      }                      else                      {                          currentHttpStatusCode = ((PubnubWebResponse)webEx.Response).HttpStatusCode;                      }                      PubnubWebResponse exceptionResponse = new PubnubWebResponse(webEx.Response' currentHttpStatusCode);                      if (exceptionResponse != null)                      {                          asynchRequestState.Response = exceptionResponse;                            using (StreamReader streamReader = new StreamReader(asynchRequestState.Response.GetResponseStream()))                          {                              string jsonString = streamReader.ReadToEnd();    #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if ((int)currentHttpStatusCode < 200 || (int)currentHttpStatusCode >= 300)                              {                                  result = null;                                  string errorDescription = "";                                  int pubnubStatusCode = 0;                                    if ((int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414)                                  {                                      //This status code is not giving json string.                                      string statusMessage = currentHttpStatusCode.ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsArrayCompatible(jsonString))                                  {                                      List<object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToListOfObject(jsonString);                                      string statusMessage = deserializeStatus[1].ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      string statusMessage = deserializeStatus.ContainsKey("message") ? deserializeStatus["message"].ToString() : (deserializeStatus.ContainsKey("error") ? deserializeStatus["error"].ToString() : jsonString);                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else                                  {                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' jsonString);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                    PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' jsonString' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                  GoToCallback(error' asynchRequestState.ErrorCallback);                                }                              else if (jsonString != "[]")                              {                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                              else                              {                                  result = null;                              }                          }                      }  #if !NETFX_CORE                      exceptionResponse.Close ();  #endif                        if (result != null && result.Count > 0)                      {                          ProcessResponseCallbacks<T>(result' asynchRequestState);                      }                        if (result == null && currentHttpStatusCode == HttpStatusCode.NotFound                          && (asynchRequestState.Type == ResponseType.Presence || asynchRequestState.Type == ResponseType.Subscribe)                          && webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          ProcessResponseCallbackExceptionHandler(webEx' asynchRequestState);                      }                  }                  else                  {                      if (asynchRequestState.Channels != null || asynchRequestState.ChannelGroups != null || asynchRequestState.Type == ResponseType.Time)                      {                          if (asynchRequestState.Type == ResponseType.Subscribe                                    || asynchRequestState.Type == ResponseType.Presence)                          {                              if ((webEx.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  || webEx.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                                  && (webEx.Status != WebExceptionStatus.RequestCanceled))                              {                                  for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                  {                                      string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                           ? asynchRequestState.Channels[index].ToString() : "";                                      string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                           ? asynchRequestState.ChannelGroups[index].ToString() : "";                                        PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                      callbackKey.Channel = activeChannel;                                      callbackKey.Type = asynchRequestState.Type;                                        if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                      {                                          object callbackObject;                                          bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                          PubnubChannelCallback<T> currentPubnubCallback = null;                                          if (channelAvailable)                                          {                                              currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                          }                                          if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                          {                                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                       activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                       webEx' asynchRequestState.Request' asynchRequestState.Response);                                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                          }                                      }                                  }                                    if (asynchRequestState.ChannelGroups != null)                                  {                                      for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                      {                                          string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                              ? asynchRequestState.Channels[index].ToString() : "";                                          string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                              ? asynchRequestState.ChannelGroups[index].ToString() : "";                                            PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                          callbackKey.ChannelGroup = activeChannelGroup;                                          callbackKey.Type = asynchRequestState.Type;                                            if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                          {                                              object callbackObject;                                              bool channelGroupAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                              PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                              if (channelGroupAvailable)                                              {                                                  currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                              }                                              if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                              {                                                  PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                           activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                           webEx' asynchRequestState.Request' asynchRequestState.Response);                                                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                   channel' channelGroup' asynchRequestState.ErrorCallback'                                                                   webEx' asynchRequestState.Request' asynchRequestState.Response);                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                          }                      }                      ProcessResponseCallbackWebExceptionHandler<T>(webEx' asynchRequestState' channel' channelGroup);                  }              }              catch (Exception ex)              {                  if (!pubnetSystemActive && ex.Message.IndexOf("The IAsyncResult object was not returned from the corresponding asynchronous method on this class.") == -1)                  {                      if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                      {                          if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.Channels.Length; index++)                              {                                  string activeChannel = asynchRequestState.Channels[index].ToString();                                  string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      ? asynchRequestState.ChannelGroups[index].ToString() : "";                                    PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                  callbackKey.Channel = activeChannel;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                            if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                              {                                  string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      ? asynchRequestState.Channels[index].ToString() : "";                                  string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                    PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                  callbackKey.ChannelGroup = activeChannelGroup;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                                                }                      else                      {                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                              channel' channelGroup' asynchRequestState.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                      }                    }                  ProcessResponseCallbackExceptionHandler<T>(ex' asynchRequestState);              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The following statement contains a magic number: try              {                  if (asyncWebRequest != null)                  {                      using (PubnubWebResponse asyncWebResponse = (PubnubWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult))                      {                          asynchRequestState.Response = asyncWebResponse;                            using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                          {                              if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                              {                                  if (!overrideTcpKeepAlive && (                                              (channelInternetStatus.ContainsKey(channel) && !channelInternetStatus[channel])                                                   || (channelGroupInternetStatus.ContainsKey(channelGroup) && !channelGroupInternetStatus[channelGroup])                                                  ))                                  {                                      if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                          {                                              string activeChannel = asynchRequestState.Channels[index].ToString();                                              string activeChannelGroup = "";                                                string status = "Internet connection available";                                                PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                              callbackKey.Channel = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                        if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                          {                                              string activeChannel = "";                                              string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                                string status = "Internet connection available";                                                PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                              callbackKey.ChannelGroup = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                  }                                    channelInternetStatus.AddOrUpdate(channel' true' (key' oldValue) => true);                                  channelGroupInternetStatus.AddOrUpdate(channelGroup' true' (key' oldValue) => true);                              }                                //Deserialize the result                              string jsonString = streamReader.ReadToEnd();  #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if (asynchRequestState.Type == ResponseType.PresenceHeartbeat)                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                              }                              else if (jsonString != "[]")                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                          }  #if !NETFX_CORE                          asyncWebResponse.Close ();  #endif                      }                  }                  else                  {                      LoggingMethod.WriteToLog(string.Format("DateTime {0}' Request aborted for channel={1}' channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo);                  }                    ProcessResponseCallbacks<T>(result' asynchRequestState);                    if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0))                  {                      if (asynchRequestState.Channels != null)                      {                          foreach (string currentChannel in asynchRequestState.Channels)                          {                              multiChannelSubscribe.AddOrUpdate(currentChannel' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                      if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                      {                          foreach (string currentChannelGroup in asynchRequestState.ChannelGroups)                          {                              multiChannelGroupSubscribe.AddOrUpdate(currentChannelGroup' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                  }                    switch (asynchRequestState.Type)                  {                      case ResponseType.Subscribe:                      case ResponseType.Presence:                          MultiplexInternalCallback<T>(asynchRequestState.Type' result' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback);                          break;                      default:                          break;                  }              }              catch (WebException webEx)              {                  HttpStatusCode currentHttpStatusCode;                  if (webEx.Response != null && asynchRequestState != null)                  {                      if (webEx.Response.GetType().ToString() == "System.Net.HttpWebResponse"                               || webEx.Response.GetType().ToString() == "MS.Internal.Modern.ClientHttpWebResponse"                               || webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          currentHttpStatusCode = ((HttpWebResponse)webEx.Response).StatusCode;                      }                      else                      {                          currentHttpStatusCode = ((PubnubWebResponse)webEx.Response).HttpStatusCode;                      }                      PubnubWebResponse exceptionResponse = new PubnubWebResponse(webEx.Response' currentHttpStatusCode);                      if (exceptionResponse != null)                      {                          asynchRequestState.Response = exceptionResponse;                            using (StreamReader streamReader = new StreamReader(asynchRequestState.Response.GetResponseStream()))                          {                              string jsonString = streamReader.ReadToEnd();    #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if ((int)currentHttpStatusCode < 200 || (int)currentHttpStatusCode >= 300)                              {                                  result = null;                                  string errorDescription = "";                                  int pubnubStatusCode = 0;                                    if ((int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414)                                  {                                      //This status code is not giving json string.                                      string statusMessage = currentHttpStatusCode.ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsArrayCompatible(jsonString))                                  {                                      List<object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToListOfObject(jsonString);                                      string statusMessage = deserializeStatus[1].ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      string statusMessage = deserializeStatus.ContainsKey("message") ? deserializeStatus["message"].ToString() : (deserializeStatus.ContainsKey("error") ? deserializeStatus["error"].ToString() : jsonString);                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else                                  {                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' jsonString);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                    PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' jsonString' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                  GoToCallback(error' asynchRequestState.ErrorCallback);                                }                              else if (jsonString != "[]")                              {                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                              else                              {                                  result = null;                              }                          }                      }  #if !NETFX_CORE                      exceptionResponse.Close ();  #endif                        if (result != null && result.Count > 0)                      {                          ProcessResponseCallbacks<T>(result' asynchRequestState);                      }                        if (result == null && currentHttpStatusCode == HttpStatusCode.NotFound                          && (asynchRequestState.Type == ResponseType.Presence || asynchRequestState.Type == ResponseType.Subscribe)                          && webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          ProcessResponseCallbackExceptionHandler(webEx' asynchRequestState);                      }                  }                  else                  {                      if (asynchRequestState.Channels != null || asynchRequestState.ChannelGroups != null || asynchRequestState.Type == ResponseType.Time)                      {                          if (asynchRequestState.Type == ResponseType.Subscribe                                    || asynchRequestState.Type == ResponseType.Presence)                          {                              if ((webEx.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  || webEx.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                                  && (webEx.Status != WebExceptionStatus.RequestCanceled))                              {                                  for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                  {                                      string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                           ? asynchRequestState.Channels[index].ToString() : "";                                      string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                           ? asynchRequestState.ChannelGroups[index].ToString() : "";                                        PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                      callbackKey.Channel = activeChannel;                                      callbackKey.Type = asynchRequestState.Type;                                        if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                      {                                          object callbackObject;                                          bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                          PubnubChannelCallback<T> currentPubnubCallback = null;                                          if (channelAvailable)                                          {                                              currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                          }                                          if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                          {                                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                       activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                       webEx' asynchRequestState.Request' asynchRequestState.Response);                                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                          }                                      }                                  }                                    if (asynchRequestState.ChannelGroups != null)                                  {                                      for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                      {                                          string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                              ? asynchRequestState.Channels[index].ToString() : "";                                          string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                              ? asynchRequestState.ChannelGroups[index].ToString() : "";                                            PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                          callbackKey.ChannelGroup = activeChannelGroup;                                          callbackKey.Type = asynchRequestState.Type;                                            if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                          {                                              object callbackObject;                                              bool channelGroupAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                              PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                              if (channelGroupAvailable)                                              {                                                  currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                              }                                              if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                              {                                                  PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                           activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                           webEx' asynchRequestState.Request' asynchRequestState.Response);                                                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                   channel' channelGroup' asynchRequestState.ErrorCallback'                                                                   webEx' asynchRequestState.Request' asynchRequestState.Response);                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                          }                      }                      ProcessResponseCallbackWebExceptionHandler<T>(webEx' asynchRequestState' channel' channelGroup);                  }              }              catch (Exception ex)              {                  if (!pubnetSystemActive && ex.Message.IndexOf("The IAsyncResult object was not returned from the corresponding asynchronous method on this class.") == -1)                  {                      if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                      {                          if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.Channels.Length; index++)                              {                                  string activeChannel = asynchRequestState.Channels[index].ToString();                                  string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      ? asynchRequestState.ChannelGroups[index].ToString() : "";                                    PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                  callbackKey.Channel = activeChannel;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                            if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                              {                                  string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      ? asynchRequestState.Channels[index].ToString() : "";                                  string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                    PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                  callbackKey.ChannelGroup = activeChannelGroup;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                                                }                      else                      {                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                              channel' channelGroup' asynchRequestState.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                      }                    }                  ProcessResponseCallbackExceptionHandler<T>(ex' asynchRequestState);              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The following statement contains a magic number: try              {                  if (asyncWebRequest != null)                  {                      using (PubnubWebResponse asyncWebResponse = (PubnubWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult))                      {                          asynchRequestState.Response = asyncWebResponse;                            using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                          {                              if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                              {                                  if (!overrideTcpKeepAlive && (                                              (channelInternetStatus.ContainsKey(channel) && !channelInternetStatus[channel])                                                   || (channelGroupInternetStatus.ContainsKey(channelGroup) && !channelGroupInternetStatus[channelGroup])                                                  ))                                  {                                      if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                          {                                              string activeChannel = asynchRequestState.Channels[index].ToString();                                              string activeChannelGroup = "";                                                string status = "Internet connection available";                                                PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                              callbackKey.Channel = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                        if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                          {                                              string activeChannel = "";                                              string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                                string status = "Internet connection available";                                                PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                              callbackKey.ChannelGroup = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                  }                                    channelInternetStatus.AddOrUpdate(channel' true' (key' oldValue) => true);                                  channelGroupInternetStatus.AddOrUpdate(channelGroup' true' (key' oldValue) => true);                              }                                //Deserialize the result                              string jsonString = streamReader.ReadToEnd();  #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if (asynchRequestState.Type == ResponseType.PresenceHeartbeat)                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                              }                              else if (jsonString != "[]")                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                          }  #if !NETFX_CORE                          asyncWebResponse.Close ();  #endif                      }                  }                  else                  {                      LoggingMethod.WriteToLog(string.Format("DateTime {0}' Request aborted for channel={1}' channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo);                  }                    ProcessResponseCallbacks<T>(result' asynchRequestState);                    if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0))                  {                      if (asynchRequestState.Channels != null)                      {                          foreach (string currentChannel in asynchRequestState.Channels)                          {                              multiChannelSubscribe.AddOrUpdate(currentChannel' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                      if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                      {                          foreach (string currentChannelGroup in asynchRequestState.ChannelGroups)                          {                              multiChannelGroupSubscribe.AddOrUpdate(currentChannelGroup' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                  }                    switch (asynchRequestState.Type)                  {                      case ResponseType.Subscribe:                      case ResponseType.Presence:                          MultiplexInternalCallback<T>(asynchRequestState.Type' result' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback);                          break;                      default:                          break;                  }              }              catch (WebException webEx)              {                  HttpStatusCode currentHttpStatusCode;                  if (webEx.Response != null && asynchRequestState != null)                  {                      if (webEx.Response.GetType().ToString() == "System.Net.HttpWebResponse"                               || webEx.Response.GetType().ToString() == "MS.Internal.Modern.ClientHttpWebResponse"                               || webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          currentHttpStatusCode = ((HttpWebResponse)webEx.Response).StatusCode;                      }                      else                      {                          currentHttpStatusCode = ((PubnubWebResponse)webEx.Response).HttpStatusCode;                      }                      PubnubWebResponse exceptionResponse = new PubnubWebResponse(webEx.Response' currentHttpStatusCode);                      if (exceptionResponse != null)                      {                          asynchRequestState.Response = exceptionResponse;                            using (StreamReader streamReader = new StreamReader(asynchRequestState.Response.GetResponseStream()))                          {                              string jsonString = streamReader.ReadToEnd();    #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if ((int)currentHttpStatusCode < 200 || (int)currentHttpStatusCode >= 300)                              {                                  result = null;                                  string errorDescription = "";                                  int pubnubStatusCode = 0;                                    if ((int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414)                                  {                                      //This status code is not giving json string.                                      string statusMessage = currentHttpStatusCode.ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsArrayCompatible(jsonString))                                  {                                      List<object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToListOfObject(jsonString);                                      string statusMessage = deserializeStatus[1].ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      string statusMessage = deserializeStatus.ContainsKey("message") ? deserializeStatus["message"].ToString() : (deserializeStatus.ContainsKey("error") ? deserializeStatus["error"].ToString() : jsonString);                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else                                  {                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' jsonString);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                    PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' jsonString' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                  GoToCallback(error' asynchRequestState.ErrorCallback);                                }                              else if (jsonString != "[]")                              {                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                              else                              {                                  result = null;                              }                          }                      }  #if !NETFX_CORE                      exceptionResponse.Close ();  #endif                        if (result != null && result.Count > 0)                      {                          ProcessResponseCallbacks<T>(result' asynchRequestState);                      }                        if (result == null && currentHttpStatusCode == HttpStatusCode.NotFound                          && (asynchRequestState.Type == ResponseType.Presence || asynchRequestState.Type == ResponseType.Subscribe)                          && webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          ProcessResponseCallbackExceptionHandler(webEx' asynchRequestState);                      }                  }                  else                  {                      if (asynchRequestState.Channels != null || asynchRequestState.ChannelGroups != null || asynchRequestState.Type == ResponseType.Time)                      {                          if (asynchRequestState.Type == ResponseType.Subscribe                                    || asynchRequestState.Type == ResponseType.Presence)                          {                              if ((webEx.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  || webEx.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                                  && (webEx.Status != WebExceptionStatus.RequestCanceled))                              {                                  for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                  {                                      string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                           ? asynchRequestState.Channels[index].ToString() : "";                                      string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                           ? asynchRequestState.ChannelGroups[index].ToString() : "";                                        PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                      callbackKey.Channel = activeChannel;                                      callbackKey.Type = asynchRequestState.Type;                                        if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                      {                                          object callbackObject;                                          bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                          PubnubChannelCallback<T> currentPubnubCallback = null;                                          if (channelAvailable)                                          {                                              currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                          }                                          if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                          {                                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                       activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                       webEx' asynchRequestState.Request' asynchRequestState.Response);                                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                          }                                      }                                  }                                    if (asynchRequestState.ChannelGroups != null)                                  {                                      for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                      {                                          string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                              ? asynchRequestState.Channels[index].ToString() : "";                                          string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                              ? asynchRequestState.ChannelGroups[index].ToString() : "";                                            PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                          callbackKey.ChannelGroup = activeChannelGroup;                                          callbackKey.Type = asynchRequestState.Type;                                            if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                          {                                              object callbackObject;                                              bool channelGroupAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                              PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                              if (channelGroupAvailable)                                              {                                                  currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                              }                                              if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                              {                                                  PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                           activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                           webEx' asynchRequestState.Request' asynchRequestState.Response);                                                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                   channel' channelGroup' asynchRequestState.ErrorCallback'                                                                   webEx' asynchRequestState.Request' asynchRequestState.Response);                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                          }                      }                      ProcessResponseCallbackWebExceptionHandler<T>(webEx' asynchRequestState' channel' channelGroup);                  }              }              catch (Exception ex)              {                  if (!pubnetSystemActive && ex.Message.IndexOf("The IAsyncResult object was not returned from the corresponding asynchronous method on this class.") == -1)                  {                      if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                      {                          if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.Channels.Length; index++)                              {                                  string activeChannel = asynchRequestState.Channels[index].ToString();                                  string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      ? asynchRequestState.ChannelGroups[index].ToString() : "";                                    PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                  callbackKey.Channel = activeChannel;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                            if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                              {                                  string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      ? asynchRequestState.Channels[index].ToString() : "";                                  string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                    PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                  callbackKey.ChannelGroup = activeChannelGroup;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                                                }                      else                      {                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                              channel' channelGroup' asynchRequestState.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                      }                    }                  ProcessResponseCallbackExceptionHandler<T>(ex' asynchRequestState);              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The following statement contains a magic number: try              {                  if (asyncWebRequest != null)                  {                      using (PubnubWebResponse asyncWebResponse = (PubnubWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult))                      {                          asynchRequestState.Response = asyncWebResponse;                            using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                          {                              if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                              {                                  if (!overrideTcpKeepAlive && (                                              (channelInternetStatus.ContainsKey(channel) && !channelInternetStatus[channel])                                                   || (channelGroupInternetStatus.ContainsKey(channelGroup) && !channelGroupInternetStatus[channelGroup])                                                  ))                                  {                                      if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                          {                                              string activeChannel = asynchRequestState.Channels[index].ToString();                                              string activeChannelGroup = "";                                                string status = "Internet connection available";                                                PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                              callbackKey.Channel = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                        if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                          {                                              string activeChannel = "";                                              string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                                string status = "Internet connection available";                                                PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                              callbackKey.ChannelGroup = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                  }                                    channelInternetStatus.AddOrUpdate(channel' true' (key' oldValue) => true);                                  channelGroupInternetStatus.AddOrUpdate(channelGroup' true' (key' oldValue) => true);                              }                                //Deserialize the result                              string jsonString = streamReader.ReadToEnd();  #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if (asynchRequestState.Type == ResponseType.PresenceHeartbeat)                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                              }                              else if (jsonString != "[]")                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                          }  #if !NETFX_CORE                          asyncWebResponse.Close ();  #endif                      }                  }                  else                  {                      LoggingMethod.WriteToLog(string.Format("DateTime {0}' Request aborted for channel={1}' channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo);                  }                    ProcessResponseCallbacks<T>(result' asynchRequestState);                    if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0))                  {                      if (asynchRequestState.Channels != null)                      {                          foreach (string currentChannel in asynchRequestState.Channels)                          {                              multiChannelSubscribe.AddOrUpdate(currentChannel' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                      if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                      {                          foreach (string currentChannelGroup in asynchRequestState.ChannelGroups)                          {                              multiChannelGroupSubscribe.AddOrUpdate(currentChannelGroup' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                  }                    switch (asynchRequestState.Type)                  {                      case ResponseType.Subscribe:                      case ResponseType.Presence:                          MultiplexInternalCallback<T>(asynchRequestState.Type' result' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback);                          break;                      default:                          break;                  }              }              catch (WebException webEx)              {                  HttpStatusCode currentHttpStatusCode;                  if (webEx.Response != null && asynchRequestState != null)                  {                      if (webEx.Response.GetType().ToString() == "System.Net.HttpWebResponse"                               || webEx.Response.GetType().ToString() == "MS.Internal.Modern.ClientHttpWebResponse"                               || webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          currentHttpStatusCode = ((HttpWebResponse)webEx.Response).StatusCode;                      }                      else                      {                          currentHttpStatusCode = ((PubnubWebResponse)webEx.Response).HttpStatusCode;                      }                      PubnubWebResponse exceptionResponse = new PubnubWebResponse(webEx.Response' currentHttpStatusCode);                      if (exceptionResponse != null)                      {                          asynchRequestState.Response = exceptionResponse;                            using (StreamReader streamReader = new StreamReader(asynchRequestState.Response.GetResponseStream()))                          {                              string jsonString = streamReader.ReadToEnd();    #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if ((int)currentHttpStatusCode < 200 || (int)currentHttpStatusCode >= 300)                              {                                  result = null;                                  string errorDescription = "";                                  int pubnubStatusCode = 0;                                    if ((int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414)                                  {                                      //This status code is not giving json string.                                      string statusMessage = currentHttpStatusCode.ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsArrayCompatible(jsonString))                                  {                                      List<object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToListOfObject(jsonString);                                      string statusMessage = deserializeStatus[1].ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      string statusMessage = deserializeStatus.ContainsKey("message") ? deserializeStatus["message"].ToString() : (deserializeStatus.ContainsKey("error") ? deserializeStatus["error"].ToString() : jsonString);                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else                                  {                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' jsonString);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                    PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' jsonString' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                  GoToCallback(error' asynchRequestState.ErrorCallback);                                }                              else if (jsonString != "[]")                              {                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                              else                              {                                  result = null;                              }                          }                      }  #if !NETFX_CORE                      exceptionResponse.Close ();  #endif                        if (result != null && result.Count > 0)                      {                          ProcessResponseCallbacks<T>(result' asynchRequestState);                      }                        if (result == null && currentHttpStatusCode == HttpStatusCode.NotFound                          && (asynchRequestState.Type == ResponseType.Presence || asynchRequestState.Type == ResponseType.Subscribe)                          && webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          ProcessResponseCallbackExceptionHandler(webEx' asynchRequestState);                      }                  }                  else                  {                      if (asynchRequestState.Channels != null || asynchRequestState.ChannelGroups != null || asynchRequestState.Type == ResponseType.Time)                      {                          if (asynchRequestState.Type == ResponseType.Subscribe                                    || asynchRequestState.Type == ResponseType.Presence)                          {                              if ((webEx.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  || webEx.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                                  && (webEx.Status != WebExceptionStatus.RequestCanceled))                              {                                  for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                  {                                      string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                           ? asynchRequestState.Channels[index].ToString() : "";                                      string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                           ? asynchRequestState.ChannelGroups[index].ToString() : "";                                        PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                      callbackKey.Channel = activeChannel;                                      callbackKey.Type = asynchRequestState.Type;                                        if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                      {                                          object callbackObject;                                          bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                          PubnubChannelCallback<T> currentPubnubCallback = null;                                          if (channelAvailable)                                          {                                              currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                          }                                          if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                          {                                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                       activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                       webEx' asynchRequestState.Request' asynchRequestState.Response);                                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                          }                                      }                                  }                                    if (asynchRequestState.ChannelGroups != null)                                  {                                      for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                      {                                          string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                              ? asynchRequestState.Channels[index].ToString() : "";                                          string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                              ? asynchRequestState.ChannelGroups[index].ToString() : "";                                            PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                          callbackKey.ChannelGroup = activeChannelGroup;                                          callbackKey.Type = asynchRequestState.Type;                                            if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                          {                                              object callbackObject;                                              bool channelGroupAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                              PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                              if (channelGroupAvailable)                                              {                                                  currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                              }                                              if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                              {                                                  PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                           activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                           webEx' asynchRequestState.Request' asynchRequestState.Response);                                                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                   channel' channelGroup' asynchRequestState.ErrorCallback'                                                                   webEx' asynchRequestState.Request' asynchRequestState.Response);                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                          }                      }                      ProcessResponseCallbackWebExceptionHandler<T>(webEx' asynchRequestState' channel' channelGroup);                  }              }              catch (Exception ex)              {                  if (!pubnetSystemActive && ex.Message.IndexOf("The IAsyncResult object was not returned from the corresponding asynchronous method on this class.") == -1)                  {                      if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                      {                          if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.Channels.Length; index++)                              {                                  string activeChannel = asynchRequestState.Channels[index].ToString();                                  string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      ? asynchRequestState.ChannelGroups[index].ToString() : "";                                    PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                  callbackKey.Channel = activeChannel;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                            if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                              {                                  string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      ? asynchRequestState.Channels[index].ToString() : "";                                  string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                    PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                  callbackKey.ChannelGroup = activeChannelGroup;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                                                }                      else                      {                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                              channel' channelGroup' asynchRequestState.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                      }                    }                  ProcessResponseCallbackExceptionHandler<T>(ex' asynchRequestState);              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The following statement contains a magic number: try              {                  if (asyncWebRequest != null)                  {                      using (PubnubWebResponse asyncWebResponse = (PubnubWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult))                      {                          asynchRequestState.Response = asyncWebResponse;                            using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                          {                              if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                              {                                  if (!overrideTcpKeepAlive && (                                              (channelInternetStatus.ContainsKey(channel) && !channelInternetStatus[channel])                                                   || (channelGroupInternetStatus.ContainsKey(channelGroup) && !channelGroupInternetStatus[channelGroup])                                                  ))                                  {                                      if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                          {                                              string activeChannel = asynchRequestState.Channels[index].ToString();                                              string activeChannelGroup = "";                                                string status = "Internet connection available";                                                PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                              callbackKey.Channel = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                        if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                          {                                              string activeChannel = "";                                              string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                                string status = "Internet connection available";                                                PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                              callbackKey.ChannelGroup = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                  }                                    channelInternetStatus.AddOrUpdate(channel' true' (key' oldValue) => true);                                  channelGroupInternetStatus.AddOrUpdate(channelGroup' true' (key' oldValue) => true);                              }                                //Deserialize the result                              string jsonString = streamReader.ReadToEnd();  #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if (asynchRequestState.Type == ResponseType.PresenceHeartbeat)                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                              }                              else if (jsonString != "[]")                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                          }  #if !NETFX_CORE                          asyncWebResponse.Close ();  #endif                      }                  }                  else                  {                      LoggingMethod.WriteToLog(string.Format("DateTime {0}' Request aborted for channel={1}' channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo);                  }                    ProcessResponseCallbacks<T>(result' asynchRequestState);                    if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0))                  {                      if (asynchRequestState.Channels != null)                      {                          foreach (string currentChannel in asynchRequestState.Channels)                          {                              multiChannelSubscribe.AddOrUpdate(currentChannel' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                      if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                      {                          foreach (string currentChannelGroup in asynchRequestState.ChannelGroups)                          {                              multiChannelGroupSubscribe.AddOrUpdate(currentChannelGroup' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                  }                    switch (asynchRequestState.Type)                  {                      case ResponseType.Subscribe:                      case ResponseType.Presence:                          MultiplexInternalCallback<T>(asynchRequestState.Type' result' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback);                          break;                      default:                          break;                  }              }              catch (WebException webEx)              {                  HttpStatusCode currentHttpStatusCode;                  if (webEx.Response != null && asynchRequestState != null)                  {                      if (webEx.Response.GetType().ToString() == "System.Net.HttpWebResponse"                               || webEx.Response.GetType().ToString() == "MS.Internal.Modern.ClientHttpWebResponse"                               || webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          currentHttpStatusCode = ((HttpWebResponse)webEx.Response).StatusCode;                      }                      else                      {                          currentHttpStatusCode = ((PubnubWebResponse)webEx.Response).HttpStatusCode;                      }                      PubnubWebResponse exceptionResponse = new PubnubWebResponse(webEx.Response' currentHttpStatusCode);                      if (exceptionResponse != null)                      {                          asynchRequestState.Response = exceptionResponse;                            using (StreamReader streamReader = new StreamReader(asynchRequestState.Response.GetResponseStream()))                          {                              string jsonString = streamReader.ReadToEnd();    #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if ((int)currentHttpStatusCode < 200 || (int)currentHttpStatusCode >= 300)                              {                                  result = null;                                  string errorDescription = "";                                  int pubnubStatusCode = 0;                                    if ((int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414)                                  {                                      //This status code is not giving json string.                                      string statusMessage = currentHttpStatusCode.ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsArrayCompatible(jsonString))                                  {                                      List<object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToListOfObject(jsonString);                                      string statusMessage = deserializeStatus[1].ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      string statusMessage = deserializeStatus.ContainsKey("message") ? deserializeStatus["message"].ToString() : (deserializeStatus.ContainsKey("error") ? deserializeStatus["error"].ToString() : jsonString);                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else                                  {                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' jsonString);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                    PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' jsonString' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                  GoToCallback(error' asynchRequestState.ErrorCallback);                                }                              else if (jsonString != "[]")                              {                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                              else                              {                                  result = null;                              }                          }                      }  #if !NETFX_CORE                      exceptionResponse.Close ();  #endif                        if (result != null && result.Count > 0)                      {                          ProcessResponseCallbacks<T>(result' asynchRequestState);                      }                        if (result == null && currentHttpStatusCode == HttpStatusCode.NotFound                          && (asynchRequestState.Type == ResponseType.Presence || asynchRequestState.Type == ResponseType.Subscribe)                          && webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          ProcessResponseCallbackExceptionHandler(webEx' asynchRequestState);                      }                  }                  else                  {                      if (asynchRequestState.Channels != null || asynchRequestState.ChannelGroups != null || asynchRequestState.Type == ResponseType.Time)                      {                          if (asynchRequestState.Type == ResponseType.Subscribe                                    || asynchRequestState.Type == ResponseType.Presence)                          {                              if ((webEx.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  || webEx.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                                  && (webEx.Status != WebExceptionStatus.RequestCanceled))                              {                                  for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                  {                                      string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                           ? asynchRequestState.Channels[index].ToString() : "";                                      string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                           ? asynchRequestState.ChannelGroups[index].ToString() : "";                                        PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                      callbackKey.Channel = activeChannel;                                      callbackKey.Type = asynchRequestState.Type;                                        if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                      {                                          object callbackObject;                                          bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                          PubnubChannelCallback<T> currentPubnubCallback = null;                                          if (channelAvailable)                                          {                                              currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                          }                                          if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                          {                                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                       activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                       webEx' asynchRequestState.Request' asynchRequestState.Response);                                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                          }                                      }                                  }                                    if (asynchRequestState.ChannelGroups != null)                                  {                                      for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                      {                                          string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                              ? asynchRequestState.Channels[index].ToString() : "";                                          string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                              ? asynchRequestState.ChannelGroups[index].ToString() : "";                                            PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                          callbackKey.ChannelGroup = activeChannelGroup;                                          callbackKey.Type = asynchRequestState.Type;                                            if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                          {                                              object callbackObject;                                              bool channelGroupAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                              PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                              if (channelGroupAvailable)                                              {                                                  currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                              }                                              if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                              {                                                  PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                           activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                           webEx' asynchRequestState.Request' asynchRequestState.Response);                                                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                   channel' channelGroup' asynchRequestState.ErrorCallback'                                                                   webEx' asynchRequestState.Request' asynchRequestState.Response);                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                          }                      }                      ProcessResponseCallbackWebExceptionHandler<T>(webEx' asynchRequestState' channel' channelGroup);                  }              }              catch (Exception ex)              {                  if (!pubnetSystemActive && ex.Message.IndexOf("The IAsyncResult object was not returned from the corresponding asynchronous method on this class.") == -1)                  {                      if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                      {                          if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.Channels.Length; index++)                              {                                  string activeChannel = asynchRequestState.Channels[index].ToString();                                  string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      ? asynchRequestState.ChannelGroups[index].ToString() : "";                                    PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                  callbackKey.Channel = activeChannel;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                            if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                              {                                  string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      ? asynchRequestState.Channels[index].ToString() : "";                                  string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                    PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                  callbackKey.ChannelGroup = activeChannelGroup;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                                                }                      else                      {                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                              channel' channelGroup' asynchRequestState.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                      }                    }                  ProcessResponseCallbackExceptionHandler<T>(ex' asynchRequestState);              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The following statement contains a magic number: try              {                  if (asyncWebRequest != null)                  {                      using (PubnubWebResponse asyncWebResponse = (PubnubWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult))                      {                          asynchRequestState.Response = asyncWebResponse;                            using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                          {                              if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                              {                                  if (!overrideTcpKeepAlive && (                                              (channelInternetStatus.ContainsKey(channel) && !channelInternetStatus[channel])                                                   || (channelGroupInternetStatus.ContainsKey(channelGroup) && !channelGroupInternetStatus[channelGroup])                                                  ))                                  {                                      if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                          {                                              string activeChannel = asynchRequestState.Channels[index].ToString();                                              string activeChannelGroup = "";                                                string status = "Internet connection available";                                                PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                              callbackKey.Channel = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                        if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      {                                          for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                          {                                              string activeChannel = "";                                              string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                                string status = "Internet connection available";                                                PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                              callbackKey.ChannelGroup = activeChannel;                                              callbackKey.Type = asynchRequestState.Type;                                                if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                              {                                                  object callbackObject;                                                  bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                                  PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                                  if (channelAvailable)                                                  {                                                      currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                                  }                                                    if (currentPubnubCallback != null && currentPubnubCallback.ConnectCallback != null)                                                  {                                                      CallErrorCallback(PubnubErrorSeverity.Info' PubnubMessageSource.Client'                                                          activeChannel' activeChannelGroup' asynchRequestState.ErrorCallback'                                                          status' PubnubErrorCode.YesInternet' null' null);                                                  }                                              }                                          }                                      }                                  }                                    channelInternetStatus.AddOrUpdate(channel' true' (key' oldValue) => true);                                  channelGroupInternetStatus.AddOrUpdate(channelGroup' true' (key' oldValue) => true);                              }                                //Deserialize the result                              string jsonString = streamReader.ReadToEnd();  #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if (asynchRequestState.Type == ResponseType.PresenceHeartbeat)                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                              }                              else if (jsonString != "[]")                              {                                  if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      int statusCode = 0; //default. assuming all is ok                                       if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                                      {                                          Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                                          string statusMessage = deserializeStatus["message"].ToString();                                            if (statusCode != 200)                                          {                                              PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType(statusCode' statusMessage);                                              int pubnubStatusCode = (int)pubnubErrorType;                                              string errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                                PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' statusMessage' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                              GoToCallback(error' asynchRequestState.ErrorCallback);                                          }                                      }                                  }                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                          }  #if !NETFX_CORE                          asyncWebResponse.Close ();  #endif                      }                  }                  else                  {                      LoggingMethod.WriteToLog(string.Format("DateTime {0}' Request aborted for channel={1}' channel group={2}"' DateTime.Now.ToString()' channel' channelGroup)' LoggingMethod.LevelInfo);                  }                    ProcessResponseCallbacks<T>(result' asynchRequestState);                    if ((asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence) && (result != null) && (result.Count > 0))                  {                      if (asynchRequestState.Channels != null)                      {                          foreach (string currentChannel in asynchRequestState.Channels)                          {                              multiChannelSubscribe.AddOrUpdate(currentChannel' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                      if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                      {                          foreach (string currentChannelGroup in asynchRequestState.ChannelGroups)                          {                              multiChannelGroupSubscribe.AddOrUpdate(currentChannelGroup' Convert.ToInt64(result[1].ToString())' (key' oldValue) => Convert.ToInt64(result[1].ToString()));                          }                      }                  }                    switch (asynchRequestState.Type)                  {                      case ResponseType.Subscribe:                      case ResponseType.Presence:                          MultiplexInternalCallback<T>(asynchRequestState.Type' result' asynchRequestState.UserCallback' asynchRequestState.ConnectCallback' asynchRequestState.ErrorCallback);                          break;                      default:                          break;                  }              }              catch (WebException webEx)              {                  HttpStatusCode currentHttpStatusCode;                  if (webEx.Response != null && asynchRequestState != null)                  {                      if (webEx.Response.GetType().ToString() == "System.Net.HttpWebResponse"                               || webEx.Response.GetType().ToString() == "MS.Internal.Modern.ClientHttpWebResponse"                               || webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          currentHttpStatusCode = ((HttpWebResponse)webEx.Response).StatusCode;                      }                      else                      {                          currentHttpStatusCode = ((PubnubWebResponse)webEx.Response).HttpStatusCode;                      }                      PubnubWebResponse exceptionResponse = new PubnubWebResponse(webEx.Response' currentHttpStatusCode);                      if (exceptionResponse != null)                      {                          asynchRequestState.Response = exceptionResponse;                            using (StreamReader streamReader = new StreamReader(asynchRequestState.Response.GetResponseStream()))                          {                              string jsonString = streamReader.ReadToEnd();    #if !NETFX_CORE                              streamReader.Close ();  #endif                                LoggingMethod.WriteToLog(string.Format("DateTime {0}' JSON for channel={1} ({2}) ={3}"' DateTime.Now.ToString()' channel' asynchRequestState.Type.ToString()' jsonString)' LoggingMethod.LevelInfo);                                if (overrideTcpKeepAlive)                              {                                  TerminateLocalClientHeartbeatTimer(asyncWebRequest.RequestUri);                              }                                if ((int)currentHttpStatusCode < 200 || (int)currentHttpStatusCode >= 300)                              {                                  result = null;                                  string errorDescription = "";                                  int pubnubStatusCode = 0;                                    if ((int)currentHttpStatusCode == 500 || (int)currentHttpStatusCode == 502 || (int)currentHttpStatusCode == 503 || (int)currentHttpStatusCode == 504 || (int)currentHttpStatusCode == 414)                                  {                                      //This status code is not giving json string.                                      string statusMessage = currentHttpStatusCode.ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsArrayCompatible(jsonString))                                  {                                      List<object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToListOfObject(jsonString);                                      string statusMessage = deserializeStatus[1].ToString();                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else if (base.JsonPluggableLibrary.IsDictionaryCompatible(jsonString))                                  {                                      Dictionary<string' object> deserializeStatus = base.JsonPluggableLibrary.DeserializeToDictionaryOfObject(jsonString);                                      string statusMessage = deserializeStatus.ContainsKey("message") ? deserializeStatus["message"].ToString() : (deserializeStatus.ContainsKey("error") ? deserializeStatus["error"].ToString() : jsonString);                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' statusMessage);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                  else                                  {                                      PubnubErrorCode pubnubErrorType = PubnubErrorCodeHelper.GetErrorType((int)currentHttpStatusCode' jsonString);                                      pubnubStatusCode = (int)pubnubErrorType;                                      errorDescription = PubnubErrorCodeDescription.GetStatusCodeDescription(pubnubErrorType);                                  }                                    PubnubClientError error = new PubnubClientError(pubnubStatusCode' PubnubErrorSeverity.Critical' jsonString' PubnubMessageSource.Server' asynchRequestState.Request' asynchRequestState.Response' errorDescription' channel' channelGroup);                                  GoToCallback(error' asynchRequestState.ErrorCallback);                                }                              else if (jsonString != "[]")                              {                                  result = WrapResultBasedOnResponseType<T>(asynchRequestState.Type' jsonString' asynchRequestState.Channels' asynchRequestState.ChannelGroups' asynchRequestState.Reconnect' asynchRequestState.Timetoken' asynchRequestState.ErrorCallback);                              }                              else                              {                                  result = null;                              }                          }                      }  #if !NETFX_CORE                      exceptionResponse.Close ();  #endif                        if (result != null && result.Count > 0)                      {                          ProcessResponseCallbacks<T>(result' asynchRequestState);                      }                        if (result == null && currentHttpStatusCode == HttpStatusCode.NotFound                          && (asynchRequestState.Type == ResponseType.Presence || asynchRequestState.Type == ResponseType.Subscribe)                          && webEx.Response.GetType().ToString() == "System.Net.Browser.ClientHttpWebResponse")                      {                          ProcessResponseCallbackExceptionHandler(webEx' asynchRequestState);                      }                  }                  else                  {                      if (asynchRequestState.Channels != null || asynchRequestState.ChannelGroups != null || asynchRequestState.Type == ResponseType.Time)                      {                          if (asynchRequestState.Type == ResponseType.Subscribe                                    || asynchRequestState.Type == ResponseType.Presence)                          {                              if ((webEx.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  || webEx.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                                  && (webEx.Status != WebExceptionStatus.RequestCanceled))                              {                                  for (int index = 0; index < asynchRequestState.Channels.Length; index++)                                  {                                      string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                           ? asynchRequestState.Channels[index].ToString() : "";                                      string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                           ? asynchRequestState.ChannelGroups[index].ToString() : "";                                        PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                      callbackKey.Channel = activeChannel;                                      callbackKey.Type = asynchRequestState.Type;                                        if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                      {                                          object callbackObject;                                          bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                          PubnubChannelCallback<T> currentPubnubCallback = null;                                          if (channelAvailable)                                          {                                              currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                          }                                          if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                          {                                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                       activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                       webEx' asynchRequestState.Request' asynchRequestState.Response);                                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                          }                                      }                                  }                                    if (asynchRequestState.ChannelGroups != null)                                  {                                      for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                                      {                                          string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                              ? asynchRequestState.Channels[index].ToString() : "";                                          string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                              ? asynchRequestState.ChannelGroups[index].ToString() : "";                                            PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                          callbackKey.ChannelGroup = activeChannelGroup;                                          callbackKey.Type = asynchRequestState.Type;                                            if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                          {                                              object callbackObject;                                              bool channelGroupAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                              PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                              if (channelGroupAvailable)                                              {                                                  currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                              }                                              if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                              {                                                  PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                                           activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback'                                                                                           webEx' asynchRequestState.Request' asynchRequestState.Response);                                                  LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                                              }                                          }                                      }                                  }                              }                          }                          else                          {                              PubnubClientError error = CallErrorCallback(PubnubErrorSeverity.Warn' PubnubMessageSource.Client'                                                                   channel' channelGroup' asynchRequestState.ErrorCallback'                                                                   webEx' asynchRequestState.Request' asynchRequestState.Response);                              LoggingMethod.WriteToLog(string.Format("DateTime {0}' PubnubClientError = {1}"' DateTime.Now.ToString()' error.ToString())' LoggingMethod.LevelInfo);                          }                      }                      ProcessResponseCallbackWebExceptionHandler<T>(webEx' asynchRequestState' channel' channelGroup);                  }              }              catch (Exception ex)              {                  if (!pubnetSystemActive && ex.Message.IndexOf("The IAsyncResult object was not returned from the corresponding asynchronous method on this class.") == -1)                  {                      if (asynchRequestState.Type == ResponseType.Subscribe || asynchRequestState.Type == ResponseType.Presence)                      {                          if (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.Channels.Length; index++)                              {                                  string activeChannel = asynchRequestState.Channels[index].ToString();                                  string activeChannelGroup = (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                                      ? asynchRequestState.ChannelGroups[index].ToString() : "";                                    PubnubChannelCallbackKey callbackKey = new PubnubChannelCallbackKey();                                  callbackKey.Channel = activeChannel;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelCallbacks.Count > 0 && channelCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                            if (asynchRequestState.ChannelGroups != null && asynchRequestState.ChannelGroups.Length > 0)                          {                              for (int index = 0; index < asynchRequestState.ChannelGroups.Length; index++)                              {                                  string activeChannel = (asynchRequestState.Channels != null && asynchRequestState.Channels.Length > 0)                                      ? asynchRequestState.Channels[index].ToString() : "";                                  string activeChannelGroup = asynchRequestState.ChannelGroups[index].ToString();                                    PubnubChannelGroupCallbackKey callbackKey = new PubnubChannelGroupCallbackKey();                                  callbackKey.ChannelGroup = activeChannelGroup;                                  callbackKey.Type = asynchRequestState.Type;                                    if (channelGroupCallbacks.Count > 0 && channelGroupCallbacks.ContainsKey(callbackKey))                                  {                                      object callbackObject;                                      bool channelAvailable = channelGroupCallbacks.TryGetValue(callbackKey' out callbackObject);                                      PubnubChannelGroupCallback<T> currentPubnubCallback = null;                                      if (channelAvailable)                                      {                                          currentPubnubCallback = callbackObject as PubnubChannelGroupCallback<T>;                                      }                                      if (currentPubnubCallback != null && currentPubnubCallback.ErrorCallback != null)                                      {                                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                                              activeChannel' activeChannelGroup' currentPubnubCallback.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                                        }                                  }                              }                          }                                                }                      else                      {                          CallErrorCallback(PubnubErrorSeverity.Critical' PubnubMessageSource.Client'                              channel' channelGroup' asynchRequestState.ErrorCallback' ex' asynchRequestState.Request' asynchRequestState.Response);                      }                    }                  ProcessResponseCallbackExceptionHandler<T>(ex' asynchRequestState);              }
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SystemEvents_PowerModeChanged,The following statement contains a magic number: if (e.Mode == PowerModes.Suspend)  			{  				pubnetSystemActive = false;  				ClientNetworkStatus.MachineSuspendMode = true;  				PubnubWebRequest.MachineSuspendMode = true;  				TerminatePendingWebRequest();                  if (overrideTcpKeepAlive && localClientHeartBeatTimer != null)  				{  					localClientHeartBeatTimer.Change(Timeout.Infinite' Timeout.Infinite);  				}    				LoggingMethod.WriteToLog(string.Format("DateTime {0}' System entered into Suspend Mode."' DateTime.Now.ToString())' LoggingMethod.LevelInfo);    				if (overrideTcpKeepAlive)  				{  					LoggingMethod.WriteToLog(string.Format("DateTime {0}' Disabled Timer for heartbeat "' DateTime.Now.ToString())' LoggingMethod.LevelInfo);  				}  			}  			else if (e.Mode == PowerModes.Resume)  			{  				pubnetSystemActive = true;  				ClientNetworkStatus.MachineSuspendMode = false;  				PubnubWebRequest.MachineSuspendMode = false;                  if (overrideTcpKeepAlive && localClientHeartBeatTimer != null)  				{  					try  					{  						localClientHeartBeatTimer.Change(                              (-1 == base.LocalClientHeartbeatInterval) ? -1 : base.LocalClientHeartbeatInterval * 1000'                              (-1 == base.LocalClientHeartbeatInterval) ? -1 : base.LocalClientHeartbeatInterval * 1000);  					}  					catch { }  				}    				LoggingMethod.WriteToLog(string.Format("DateTime {0}' System entered into Resume/Awake Mode."' DateTime.Now.ToString())' LoggingMethod.LevelInfo);    				if (overrideTcpKeepAlive)  				{  					LoggingMethod.WriteToLog(string.Format("DateTime {0}' Enabled Timer for heartbeat "' DateTime.Now.ToString())' LoggingMethod.LevelInfo);  				}                    ReconnectFromSuspendMode(_reconnectFromSuspendMode);                  _reconnectFromSuspendMode = null;    			}
Magic Number,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,SystemEvents_PowerModeChanged,The following statement contains a magic number: if (e.Mode == PowerModes.Suspend)  			{  				pubnetSystemActive = false;  				ClientNetworkStatus.MachineSuspendMode = true;  				PubnubWebRequest.MachineSuspendMode = true;  				TerminatePendingWebRequest();                  if (overrideTcpKeepAlive && localClientHeartBeatTimer != null)  				{  					localClientHeartBeatTimer.Change(Timeout.Infinite' Timeout.Infinite);  				}    				LoggingMethod.WriteToLog(string.Format("DateTime {0}' System entered into Suspend Mode."' DateTime.Now.ToString())' LoggingMethod.LevelInfo);    				if (overrideTcpKeepAlive)  				{  					LoggingMethod.WriteToLog(string.Format("DateTime {0}' Disabled Timer for heartbeat "' DateTime.Now.ToString())' LoggingMethod.LevelInfo);  				}  			}  			else if (e.Mode == PowerModes.Resume)  			{  				pubnetSystemActive = true;  				ClientNetworkStatus.MachineSuspendMode = false;  				PubnubWebRequest.MachineSuspendMode = false;                  if (overrideTcpKeepAlive && localClientHeartBeatTimer != null)  				{  					try  					{  						localClientHeartBeatTimer.Change(                              (-1 == base.LocalClientHeartbeatInterval) ? -1 : base.LocalClientHeartbeatInterval * 1000'                              (-1 == base.LocalClientHeartbeatInterval) ? -1 : base.LocalClientHeartbeatInterval * 1000);  					}  					catch { }  				}    				LoggingMethod.WriteToLog(string.Format("DateTime {0}' System entered into Resume/Awake Mode."' DateTime.Now.ToString())' LoggingMethod.LevelInfo);    				if (overrideTcpKeepAlive)  				{  					LoggingMethod.WriteToLog(string.Format("DateTime {0}' Enabled Timer for heartbeat "' DateTime.Now.ToString())' LoggingMethod.LevelInfo);  				}                    ReconnectFromSuspendMode(_reconnectFromSuspendMode);                  _reconnectFromSuspendMode = null;    			}
Magic Number,PubNubMessaging.Core,PubnubCrypto,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,EncryptOrDecrypt,The following statement contains a magic number: aesEncryption.KeySize = 256;
Magic Number,PubNubMessaging.Core,PubnubCrypto,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,EncryptOrDecrypt,The following statement contains a magic number: aesEncryption.BlockSize = 128;
Duplicate Code,PubNubMessaging.Core,PubnubWin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.PubNub\PubnubCore\PubnubWin.cs,UrlProcessResponseCallback,The method contains a code clone-set at the following line numbers (starting from the method definition): ((124' 144)' (147' 167))
