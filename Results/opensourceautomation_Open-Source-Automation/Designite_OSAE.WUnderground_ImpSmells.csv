Implementation smell,Namespace,Class,File,Method,Description
Long Method,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,RunInterface,The method has 112 lines of code.
Long Method,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The method has 187 lines of code.
Long Method,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateDayNight,The method has 105 lines of code.
Complex Method,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,RunInterface,Cyclomatic complexity of the method is 8
Complex Method,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,Cyclomatic complexity of the method is 12
Complex Method,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateDayNight,Cyclomatic complexity of the method is 9
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,RunInterface,The length of the statement  "                Conditionsupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Conditions Interval").Value); " is 121.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    ReportFieldValue("Sunrise"' GetNodeValue(xml' "response/moon_phase/sunrise/hour") + ":" + GetNodeValue(xml' "response/moon_phase/sunrise/minute")); " is 147.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    ReportFieldValue("Sunset"' GetNodeValue(xml' "response/moon_phase/sunset/hour") + ":" + GetNodeValue(xml' "response/moon_phase/sunset/minute")); " is 144.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    // New API has Today + 9 day forcast.   In Simple' it only has Daytime' so 4 Periods. text has 2 periods per day (night) " is 120.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Today Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=0]/pop"); " is 120.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Today Forecast"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=1]/conditions"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Today Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=0]/fcttext"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Today Image"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=0]/icon_url"); " is 124.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Tonight Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=1]/pop"); " is 122.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Tonight Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=1]/fcttext"); " is 127.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Tonight Image"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=1]/icon_url"); " is 126.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day1 Forecast"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=2]/conditions"); " is 130.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day1 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=2]/fcttext"); " is 124.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day1 Image"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=2]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day1 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=2]/high/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night1 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=2]/low/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day1 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=2]/high/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night1 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=2]/low/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night1 Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=3]/pop"); " is 121.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night1 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=3]/fcttext"); " is 126.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night1 Image"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=3]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day2 Forecast"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=3]/conditions"); " is 130.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day2 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=4]/fcttext"); " is 124.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day2 Image"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=4]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day2 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=3]/high/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night2 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=3]/low/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day2 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=3]/high/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night2 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=3]/low/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night2 Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=5]/pop"); " is 121.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night2 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=5]/fcttext"); " is 126.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night2 Image"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=5]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day3 Forecast"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=4]/conditions"); " is 130.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day3 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=6]/fcttext"); " is 124.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day3 Image"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=4]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day3 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=4]/high/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night3 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=4]/low/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day3 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=4]/high/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night3 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=4]/low/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night3 Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=7]/pop"); " is 121.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night3 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=7]/fcttext"); " is 126.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night3 Image"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=7]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day4 Forecast"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=5]/conditions"); " is 130.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day4 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=8]/fcttext"); " is 124.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day4 Image"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=5]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day4 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=5]/high/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night4 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=5]/low/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day4 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=5]/high/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night4 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=5]/low/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night4 Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=9]/pop"); " is 121.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night4 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=9]/fcttext"); " is 126.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night4 Image"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=9]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day5 Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=10]/pop"); " is 120.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day5 Forecast"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=6]/conditions"); " is 130.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day5 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=10]/fcttext"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day5 Image"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=6]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day5 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=6]/high/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night5 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=6]/low/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day5 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=6]/high/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night5 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=6]/low/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night5 Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=11]/pop"); " is 122.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night5 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=11]/fcttext"); " is 127.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night5 Image"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=11]/icon_url"); " is 126.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day6 Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=12]/pop"); " is 120.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day6 Forecast"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=7]/conditions"); " is 130.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day6 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=12]/fcttext"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day6 Image"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=7]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day6 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=7]/high/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night6 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=7]/low/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day6 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=7]/high/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night6 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=7]/low/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night6 Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=13]/pop"); " is 122.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night6 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=13]/fcttext"); " is 127.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night6 Image"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=13]/icon_url"); " is 126.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day7 Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=14]/pop"); " is 120.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day7 Forecast"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=8]/conditions"); " is 130.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day7 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=14]/fcttext"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Day7 Image"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=8]/icon_url"); " is 125.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day7 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=8]/high/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night7 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=8]/low/fahrenheit"); " is 131.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Day7 High"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=8]/high/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                        GetFieldFromXmlAndReport(xml' "Night7 Low"' @"response/forecast/simpleforecast/forecastdays/forecastday[period=8]/low/celsius"); " is 128.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night7 Precip"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=15]/pop"); " is 122.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night7 Summary"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=15]/fcttext"); " is 127.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateforecast,The length of the statement  "                    GetFieldFromXmlAndReport(xml' "Night7 Image"' @"response/forecast/txt_forecast/forecastdays/forecastday[period=15]/icon_url"); " is 126.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,updateDayNight,The length of the statement  "                    if (gDebug) Log.Debug("Checking for Dawn/Dusk (Dawn start: " + Convert.ToString(DawnStart) + "' Dawn end: " + Convert.ToString(DawnEnd) + " Dusk start: " + Convert.ToString(DuskStart) + " Dusk end: " + Convert.ToString(DuskEnd)+ ")"); " is 234.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,OwnTypes,The length of the statement  "                OSAEObjectTypeManager.ObjectTypeUpdate(oType.Name' oType.Name' oType.Description' pName' oType.BaseType' oType.Owner' oType.SysType' oType.Container' oType.HideRedundant' oType.Tooltip); " is 186.
Long Statement,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,OwnTypes,The length of the statement  "                OSAEObjectTypeManager.ObjectTypeUpdate(oType.Name' oType.Name' oType.Description' "SYSTEM"' oType.BaseType' oType.Owner' oType.SysType' oType.Container' oType.HideRedundant' oType.Tooltip); " is 189.
Empty Catch Block,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,RunInterface,The method has an empty catch block.
Magic Number,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,RunInterface,The following statement contains a magic number: try              {                  pName = pluginName;                  Log = new General.OSAELog(pName);                  FirstUpdateRun = true;                  FirstForcastRun = true;                  Log.Info("Running Interface");                  OwnTypes();                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("WEATHER");                  if (objects.Count == 0)                  {                      OSAEObjectManager.ObjectAdd("Weather"' ""' "Weather Data"' "WEATHER"' ""' ""' 30' true);                      WeatherObjName = "Weather";                  }                  else                      WeatherObjName = objects[0].Name;                    Log.Info("Linked to Weather object to store data.");                  try                  {                      if (bool.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Metric").Value))                      {                          Metric = true;                          Log.Info("Using metric units");                      }                  }                  catch {}                    try                  {                      gDebug = Convert.ToBoolean(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Debug").Value);                  }                  catch                  { Log.Info("The WUnderground Object Type seems to be missing the Debug Property!"); }                  Log.Info("Debug Mode Set to " + gDebug);                    try                  {                      pKey = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Key").Value;                      if (pKey.Length < 1)                          Log.Info("!!! You need an WUnderground Key for full weather feeds !!!");                      else                          Log.Info("Found WUnderground Key (" + pKey + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your Key."' ex); }                    try                  {                      pCity = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "City").Value;                      if (pCity.Length < 1)                          Log.Info("!!! You need a City for full weather feeds !!!");                      else                          Log.Info("Found WUnderground City (" + pCity + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your City."' ex); }                    try                  {                      pState = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "State").Value;                      if (pState.Length < 1)                          Log.Info("!!! You need a State for full weather feeds !!!");                      else                          Log.Info("Found State (" + pState + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your State."' ex); }                      Conditionsupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Conditions Interval").Value);                  if (Conditionsupdatetime > 0)                  {                      ConditionsUpdateTimer = new System.Timers.Timer();                      ConditionsUpdateTimer.Interval = Conditionsupdatetime * 60000;                      ConditionsUpdateTimer.Start();                      ConditionsUpdateTimer.Elapsed += new ElapsedEventHandler(ConditionsUpdateTime);                        updateConditionsThread = new Thread(new ThreadStart(updateconditions));                      updateConditionsThread.Start();                      //  Thread.Sleep(10000);                  }                  else                  {                      latitude = OSAEObjectPropertyManager.GetObjectPropertyValue(WeatherObjName' "latitude").Value;                      longitude = OSAEObjectPropertyManager.GetObjectPropertyValue(WeatherObjName' "longitude").Value;                      if (gDebug) Log.Debug("Read in properties: Lat=" + latitude + "' Long=" + longitude);                  }                    do                  {                      Thread.Sleep(5000);                  } while (FirstUpdateRun);                    Forecastupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Forecast Interval").Value);                  if (Forecastupdatetime > 0)                  {                      ForecastUpdateTimer = new System.Timers.Timer();                      ForecastUpdateTimer.Interval = Forecastupdatetime * 60000;                      ForecastUpdateTimer.Start();                      ForecastUpdateTimer.Elapsed += new ElapsedEventHandler(ForecastUpdateTime);                        updateForecastThread = new Thread(new ThreadStart(updateforecast));                      updateForecastThread.Start();                               }                    do                  {                      Thread.Sleep(5000);                  } while (FirstForcastRun);                    Log.Info("Updated " + WeatherObjName + "' setting Weather object to Updated.");                  OSAE.OSAEMethodManager.MethodQueueAdd(WeatherObjName' "Updated"' ""' ""' pName);                    DayNightUpdateTimer = new System.Timers.Timer();                  DayNightUpdateTimer.Interval = DayNightupdatetime;                  DayNightUpdateTimer.Start();                  DayNightUpdateTimer.Elapsed += new ElapsedEventHandler(DayNightUpdateTime);                    updateDayNightThread = new Thread(new ThreadStart(updateDayNight));                  updateDayNightThread.Start();                           }              catch (Exception ex)              { Log.Error("Error initializing the plugin "' ex); }
Magic Number,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,RunInterface,The following statement contains a magic number: try              {                  pName = pluginName;                  Log = new General.OSAELog(pName);                  FirstUpdateRun = true;                  FirstForcastRun = true;                  Log.Info("Running Interface");                  OwnTypes();                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("WEATHER");                  if (objects.Count == 0)                  {                      OSAEObjectManager.ObjectAdd("Weather"' ""' "Weather Data"' "WEATHER"' ""' ""' 30' true);                      WeatherObjName = "Weather";                  }                  else                      WeatherObjName = objects[0].Name;                    Log.Info("Linked to Weather object to store data.");                  try                  {                      if (bool.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Metric").Value))                      {                          Metric = true;                          Log.Info("Using metric units");                      }                  }                  catch {}                    try                  {                      gDebug = Convert.ToBoolean(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Debug").Value);                  }                  catch                  { Log.Info("The WUnderground Object Type seems to be missing the Debug Property!"); }                  Log.Info("Debug Mode Set to " + gDebug);                    try                  {                      pKey = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Key").Value;                      if (pKey.Length < 1)                          Log.Info("!!! You need an WUnderground Key for full weather feeds !!!");                      else                          Log.Info("Found WUnderground Key (" + pKey + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your Key."' ex); }                    try                  {                      pCity = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "City").Value;                      if (pCity.Length < 1)                          Log.Info("!!! You need a City for full weather feeds !!!");                      else                          Log.Info("Found WUnderground City (" + pCity + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your City."' ex); }                    try                  {                      pState = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "State").Value;                      if (pState.Length < 1)                          Log.Info("!!! You need a State for full weather feeds !!!");                      else                          Log.Info("Found State (" + pState + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your State."' ex); }                      Conditionsupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Conditions Interval").Value);                  if (Conditionsupdatetime > 0)                  {                      ConditionsUpdateTimer = new System.Timers.Timer();                      ConditionsUpdateTimer.Interval = Conditionsupdatetime * 60000;                      ConditionsUpdateTimer.Start();                      ConditionsUpdateTimer.Elapsed += new ElapsedEventHandler(ConditionsUpdateTime);                        updateConditionsThread = new Thread(new ThreadStart(updateconditions));                      updateConditionsThread.Start();                      //  Thread.Sleep(10000);                  }                  else                  {                      latitude = OSAEObjectPropertyManager.GetObjectPropertyValue(WeatherObjName' "latitude").Value;                      longitude = OSAEObjectPropertyManager.GetObjectPropertyValue(WeatherObjName' "longitude").Value;                      if (gDebug) Log.Debug("Read in properties: Lat=" + latitude + "' Long=" + longitude);                  }                    do                  {                      Thread.Sleep(5000);                  } while (FirstUpdateRun);                    Forecastupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Forecast Interval").Value);                  if (Forecastupdatetime > 0)                  {                      ForecastUpdateTimer = new System.Timers.Timer();                      ForecastUpdateTimer.Interval = Forecastupdatetime * 60000;                      ForecastUpdateTimer.Start();                      ForecastUpdateTimer.Elapsed += new ElapsedEventHandler(ForecastUpdateTime);                        updateForecastThread = new Thread(new ThreadStart(updateforecast));                      updateForecastThread.Start();                               }                    do                  {                      Thread.Sleep(5000);                  } while (FirstForcastRun);                    Log.Info("Updated " + WeatherObjName + "' setting Weather object to Updated.");                  OSAE.OSAEMethodManager.MethodQueueAdd(WeatherObjName' "Updated"' ""' ""' pName);                    DayNightUpdateTimer = new System.Timers.Timer();                  DayNightUpdateTimer.Interval = DayNightupdatetime;                  DayNightUpdateTimer.Start();                  DayNightUpdateTimer.Elapsed += new ElapsedEventHandler(DayNightUpdateTime);                    updateDayNightThread = new Thread(new ThreadStart(updateDayNight));                  updateDayNightThread.Start();                           }              catch (Exception ex)              { Log.Error("Error initializing the plugin "' ex); }
Magic Number,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,RunInterface,The following statement contains a magic number: try              {                  pName = pluginName;                  Log = new General.OSAELog(pName);                  FirstUpdateRun = true;                  FirstForcastRun = true;                  Log.Info("Running Interface");                  OwnTypes();                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("WEATHER");                  if (objects.Count == 0)                  {                      OSAEObjectManager.ObjectAdd("Weather"' ""' "Weather Data"' "WEATHER"' ""' ""' 30' true);                      WeatherObjName = "Weather";                  }                  else                      WeatherObjName = objects[0].Name;                    Log.Info("Linked to Weather object to store data.");                  try                  {                      if (bool.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Metric").Value))                      {                          Metric = true;                          Log.Info("Using metric units");                      }                  }                  catch {}                    try                  {                      gDebug = Convert.ToBoolean(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Debug").Value);                  }                  catch                  { Log.Info("The WUnderground Object Type seems to be missing the Debug Property!"); }                  Log.Info("Debug Mode Set to " + gDebug);                    try                  {                      pKey = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Key").Value;                      if (pKey.Length < 1)                          Log.Info("!!! You need an WUnderground Key for full weather feeds !!!");                      else                          Log.Info("Found WUnderground Key (" + pKey + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your Key."' ex); }                    try                  {                      pCity = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "City").Value;                      if (pCity.Length < 1)                          Log.Info("!!! You need a City for full weather feeds !!!");                      else                          Log.Info("Found WUnderground City (" + pCity + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your City."' ex); }                    try                  {                      pState = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "State").Value;                      if (pState.Length < 1)                          Log.Info("!!! You need a State for full weather feeds !!!");                      else                          Log.Info("Found State (" + pState + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your State."' ex); }                      Conditionsupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Conditions Interval").Value);                  if (Conditionsupdatetime > 0)                  {                      ConditionsUpdateTimer = new System.Timers.Timer();                      ConditionsUpdateTimer.Interval = Conditionsupdatetime * 60000;                      ConditionsUpdateTimer.Start();                      ConditionsUpdateTimer.Elapsed += new ElapsedEventHandler(ConditionsUpdateTime);                        updateConditionsThread = new Thread(new ThreadStart(updateconditions));                      updateConditionsThread.Start();                      //  Thread.Sleep(10000);                  }                  else                  {                      latitude = OSAEObjectPropertyManager.GetObjectPropertyValue(WeatherObjName' "latitude").Value;                      longitude = OSAEObjectPropertyManager.GetObjectPropertyValue(WeatherObjName' "longitude").Value;                      if (gDebug) Log.Debug("Read in properties: Lat=" + latitude + "' Long=" + longitude);                  }                    do                  {                      Thread.Sleep(5000);                  } while (FirstUpdateRun);                    Forecastupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Forecast Interval").Value);                  if (Forecastupdatetime > 0)                  {                      ForecastUpdateTimer = new System.Timers.Timer();                      ForecastUpdateTimer.Interval = Forecastupdatetime * 60000;                      ForecastUpdateTimer.Start();                      ForecastUpdateTimer.Elapsed += new ElapsedEventHandler(ForecastUpdateTime);                        updateForecastThread = new Thread(new ThreadStart(updateforecast));                      updateForecastThread.Start();                               }                    do                  {                      Thread.Sleep(5000);                  } while (FirstForcastRun);                    Log.Info("Updated " + WeatherObjName + "' setting Weather object to Updated.");                  OSAE.OSAEMethodManager.MethodQueueAdd(WeatherObjName' "Updated"' ""' ""' pName);                    DayNightUpdateTimer = new System.Timers.Timer();                  DayNightUpdateTimer.Interval = DayNightupdatetime;                  DayNightUpdateTimer.Start();                  DayNightUpdateTimer.Elapsed += new ElapsedEventHandler(DayNightUpdateTime);                    updateDayNightThread = new Thread(new ThreadStart(updateDayNight));                  updateDayNightThread.Start();                           }              catch (Exception ex)              { Log.Error("Error initializing the plugin "' ex); }
Magic Number,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,RunInterface,The following statement contains a magic number: try              {                  pName = pluginName;                  Log = new General.OSAELog(pName);                  FirstUpdateRun = true;                  FirstForcastRun = true;                  Log.Info("Running Interface");                  OwnTypes();                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("WEATHER");                  if (objects.Count == 0)                  {                      OSAEObjectManager.ObjectAdd("Weather"' ""' "Weather Data"' "WEATHER"' ""' ""' 30' true);                      WeatherObjName = "Weather";                  }                  else                      WeatherObjName = objects[0].Name;                    Log.Info("Linked to Weather object to store data.");                  try                  {                      if (bool.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Metric").Value))                      {                          Metric = true;                          Log.Info("Using metric units");                      }                  }                  catch {}                    try                  {                      gDebug = Convert.ToBoolean(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Debug").Value);                  }                  catch                  { Log.Info("The WUnderground Object Type seems to be missing the Debug Property!"); }                  Log.Info("Debug Mode Set to " + gDebug);                    try                  {                      pKey = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Key").Value;                      if (pKey.Length < 1)                          Log.Info("!!! You need an WUnderground Key for full weather feeds !!!");                      else                          Log.Info("Found WUnderground Key (" + pKey + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your Key."' ex); }                    try                  {                      pCity = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "City").Value;                      if (pCity.Length < 1)                          Log.Info("!!! You need a City for full weather feeds !!!");                      else                          Log.Info("Found WUnderground City (" + pCity + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your City."' ex); }                    try                  {                      pState = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "State").Value;                      if (pState.Length < 1)                          Log.Info("!!! You need a State for full weather feeds !!!");                      else                          Log.Info("Found State (" + pState + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your State."' ex); }                      Conditionsupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Conditions Interval").Value);                  if (Conditionsupdatetime > 0)                  {                      ConditionsUpdateTimer = new System.Timers.Timer();                      ConditionsUpdateTimer.Interval = Conditionsupdatetime * 60000;                      ConditionsUpdateTimer.Start();                      ConditionsUpdateTimer.Elapsed += new ElapsedEventHandler(ConditionsUpdateTime);                        updateConditionsThread = new Thread(new ThreadStart(updateconditions));                      updateConditionsThread.Start();                      //  Thread.Sleep(10000);                  }                  else                  {                      latitude = OSAEObjectPropertyManager.GetObjectPropertyValue(WeatherObjName' "latitude").Value;                      longitude = OSAEObjectPropertyManager.GetObjectPropertyValue(WeatherObjName' "longitude").Value;                      if (gDebug) Log.Debug("Read in properties: Lat=" + latitude + "' Long=" + longitude);                  }                    do                  {                      Thread.Sleep(5000);                  } while (FirstUpdateRun);                    Forecastupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Forecast Interval").Value);                  if (Forecastupdatetime > 0)                  {                      ForecastUpdateTimer = new System.Timers.Timer();                      ForecastUpdateTimer.Interval = Forecastupdatetime * 60000;                      ForecastUpdateTimer.Start();                      ForecastUpdateTimer.Elapsed += new ElapsedEventHandler(ForecastUpdateTime);                        updateForecastThread = new Thread(new ThreadStart(updateforecast));                      updateForecastThread.Start();                               }                    do                  {                      Thread.Sleep(5000);                  } while (FirstForcastRun);                    Log.Info("Updated " + WeatherObjName + "' setting Weather object to Updated.");                  OSAE.OSAEMethodManager.MethodQueueAdd(WeatherObjName' "Updated"' ""' ""' pName);                    DayNightUpdateTimer = new System.Timers.Timer();                  DayNightUpdateTimer.Interval = DayNightupdatetime;                  DayNightUpdateTimer.Start();                  DayNightUpdateTimer.Elapsed += new ElapsedEventHandler(DayNightUpdateTime);                    updateDayNightThread = new Thread(new ThreadStart(updateDayNight));                  updateDayNightThread.Start();                           }              catch (Exception ex)              { Log.Error("Error initializing the plugin "' ex); }
Magic Number,OSAE.WUnderground,WUnderground,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.WUnderground\WUnderground.cs,RunInterface,The following statement contains a magic number: try              {                  pName = pluginName;                  Log = new General.OSAELog(pName);                  FirstUpdateRun = true;                  FirstForcastRun = true;                  Log.Info("Running Interface");                  OwnTypes();                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("WEATHER");                  if (objects.Count == 0)                  {                      OSAEObjectManager.ObjectAdd("Weather"' ""' "Weather Data"' "WEATHER"' ""' ""' 30' true);                      WeatherObjName = "Weather";                  }                  else                      WeatherObjName = objects[0].Name;                    Log.Info("Linked to Weather object to store data.");                  try                  {                      if (bool.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Metric").Value))                      {                          Metric = true;                          Log.Info("Using metric units");                      }                  }                  catch {}                    try                  {                      gDebug = Convert.ToBoolean(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Debug").Value);                  }                  catch                  { Log.Info("The WUnderground Object Type seems to be missing the Debug Property!"); }                  Log.Info("Debug Mode Set to " + gDebug);                    try                  {                      pKey = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Key").Value;                      if (pKey.Length < 1)                          Log.Info("!!! You need an WUnderground Key for full weather feeds !!!");                      else                          Log.Info("Found WUnderground Key (" + pKey + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your Key."' ex); }                    try                  {                      pCity = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "City").Value;                      if (pCity.Length < 1)                          Log.Info("!!! You need a City for full weather feeds !!!");                      else                          Log.Info("Found WUnderground City (" + pCity + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your City."' ex); }                    try                  {                      pState = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "State").Value;                      if (pState.Length < 1)                          Log.Info("!!! You need a State for full weather feeds !!!");                      else                          Log.Info("Found State (" + pState + ")");                  }                  catch (Exception ex)                  { Log.Error("Error reading your State."' ex); }                      Conditionsupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Conditions Interval").Value);                  if (Conditionsupdatetime > 0)                  {                      ConditionsUpdateTimer = new System.Timers.Timer();                      ConditionsUpdateTimer.Interval = Conditionsupdatetime * 60000;                      ConditionsUpdateTimer.Start();                      ConditionsUpdateTimer.Elapsed += new ElapsedEventHandler(ConditionsUpdateTime);                        updateConditionsThread = new Thread(new ThreadStart(updateconditions));                      updateConditionsThread.Start();                      //  Thread.Sleep(10000);                  }                  else                  {                      latitude = OSAEObjectPropertyManager.GetObjectPropertyValue(WeatherObjName' "latitude").Value;                      longitude = OSAEObjectPropertyManager.GetObjectPropertyValue(WeatherObjName' "longitude").Value;                      if (gDebug) Log.Debug("Read in properties: Lat=" + latitude + "' Long=" + longitude);                  }                    do                  {                      Thread.Sleep(5000);                  } while (FirstUpdateRun);                    Forecastupdatetime = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Forecast Interval").Value);                  if (Forecastupdatetime > 0)                  {                      ForecastUpdateTimer = new System.Timers.Timer();                      ForecastUpdateTimer.Interval = Forecastupdatetime * 60000;                      ForecastUpdateTimer.Start();                      ForecastUpdateTimer.Elapsed += new ElapsedEventHandler(ForecastUpdateTime);                        updateForecastThread = new Thread(new ThreadStart(updateforecast));                      updateForecastThread.Start();                               }                    do                  {                      Thread.Sleep(5000);                  } while (FirstForcastRun);                    Log.Info("Updated " + WeatherObjName + "' setting Weather object to Updated.");                  OSAE.OSAEMethodManager.MethodQueueAdd(WeatherObjName' "Updated"' ""' ""' pName);                    DayNightUpdateTimer = new System.Timers.Timer();                  DayNightUpdateTimer.Interval = DayNightupdatetime;                  DayNightUpdateTimer.Start();                  DayNightUpdateTimer.Elapsed += new ElapsedEventHandler(DayNightUpdateTime);                    updateDayNightThread = new Thread(new ThreadStart(updateDayNight));                  updateDayNightThread.Start();                           }              catch (Exception ex)              { Log.Error("Error initializing the plugin "' ex); }
