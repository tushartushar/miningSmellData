Implementation smell,Namespace,Class,File,Method,Description
Long Statement,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,ProcessCommand,The length of the statement  "                        mySonyDevice.initialize(sonyobj.Name' sonyobj.Property("Host").Value' sonyobj.Property("Port").Value' sonyobj.Property("Mac").Value); " is 133.
Long Statement,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,discoverDevices,The length of the statement  "                            OSAEObjectManager.ObjectUpdate(mySonyDevice.Name' mySonyDevice.Name' "Sony Device"' mySonyDevice.Name' mySonyDevice.Host' ""' 1); " is 129.
Long Statement,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,registerDevice,The length of the statement  "                    mySonyDevice.initialize(sonyobj.Name' sonyobj.Property("Host").Value' sonyobj.Property("Port").Value' sonyobj.Property("Mac").Value); " is 133.
Long Statement,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,registerDevice,The length of the statement  "                            this.Log.Debug("If you continue to have issues' set the Registered Property to FALSE and re-run the REGISTER method for this device."); " is 135.
Long Statement,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,registerCheck,The length of the statement  "                    mySonyDevice.initialize(sonyobj.Name' sonyobj.Property("Host").Value' sonyobj.Property("Port").Value' sonyobj.Property("Mac").Value); " is 133.
Long Statement,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,registerCheck,The length of the statement  "                        this.Log.Debug("If you continue to have issues' set the Registered Property to FALSE and re-run the REGISTER method for this device."); " is 135.
Long Statement,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,retrieveDeviceCmd,The length of the statement  "                    mySonyDevice.initialize(sonyobj.Name' sonyobj.Property("Host").Value' sonyobj.Property("Port").Value' sonyobj.Property("Mac").Value); " is 133.
Long Statement,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,setchannel,The length of the statement  "            mySonyDevice.initialize(sonyobj.Name' sonyobj.Property("Host").Value' sonyobj.Property("Port").Value' sonyobj.Property("Mac").Value); " is 133.
Long Statement,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,updateonline,The length of the statement  "                mySonyDevice.initialize(sonyobj.Name' sonyobj.Property("Host").Value' sonyobj.Property("Port").Value' sonyobj.Property("Mac").Value); " is 133.
Magic Number,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,ProcessCommand,The following statement contains a magic number: if (sMethod == "DISCOVERY")              {                  discoverDevices();              }              else if (sMethod == "REGISTER")              {                  registerDevice(method);              }              else if (sMethod == "RETRIEVE")              {                  bool reg = registerCheck(method);                  if (reg == true)                  {                      retrieveDeviceCmd(method);                  }                  else                  {                      this.Log.Error("The Sony Retreive Method did NOT complete because the Sony Device is Offline!");                  }              }              else if (sMethod == "SETCHANNEL")              {                  bool reg = registerCheck(method);                  if (reg == true)                  {                      setchannel(method);                  }                  else                  {                      this.Log.Error("The Sony Set Channel Method did NOT complete because the Sony Device is Offline!");                  }              }              else              {                  bool reg = registerCheck(method);                  if (reg == true)                  {                      try                      {                          objName = method.ObjectName;                          sonyobj = OSAEObjectManager.GetObjectByName(objName);                          mySonyDevice.initialize(sonyobj.Name' sonyobj.Property("Host").Value' sonyobj.Property("Port").Value' sonyobj.Property("Mac").Value);                          string sCommand = method.MethodLabel;                          mySonyDevice.get_remote_command_list();                          sCommand = mySonyDevice.getIRCCcommandString(sCommand);                          string results = mySonyDevice.send_ircc(sCommand);                          if (results == "")                          {                              this.Log.Error("The Method " + method.MethodName + " was not executed by " + mySonyDevice.Name );                          }                          else                          {                              this.Log.Info("Executed: " + mySonyDevice.Name + " - " + method.MethodLabel);                              this.Log.Debug(mySonyDevice.Name + " returned this information: " + results);                          }                          System.Threading.Thread.Sleep(500);                      }                      catch (Exception ex)                      {                          this.Log.Error("An error occurred!!!: " + ex.Message);                          this.Log.Debug("The Sony Method" + method.MethodName + " did not execute!");                      }                     }                  else                  {                      this.Log.Error("The Sony Method did NOT Execute because the Sony Device is Offline!");                  }                }
Magic Number,OSAE.Sony,Sony,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Sony\Sony.cs,RunInterface,The following statement contains a magic number: Thread.Sleep(5000);
