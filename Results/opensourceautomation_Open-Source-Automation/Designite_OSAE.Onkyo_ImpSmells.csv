Implementation smell,Namespace,Class,File,Method,Description
Long Method,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,ProcessCommand,The method has 127 lines of code.
Complex Method,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,ProcessCommand,Cyclomatic complexity of the method is 36
Complex Method,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,RunInterface,Cyclomatic complexity of the method is 8
Long Statement,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,ProcessCommand,The length of the statement  "            Log.Debug("Found Command: " + method.MethodName + " | param1: " + method.Parameter1 + " | param2: " + method.Parameter2); " is 121.
Long Statement,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,RunInterface,The length of the statement  "            OSAEObjectTypeManager.ObjectTypeUpdate(objt.Name' objt.Name' objt.Description' pName' "THING"' objt.Owner' objt.SysType' objt.Container' objt.HideRedundant' objt.Tooltip); " is 171.
Long Statement,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,OnkyoMessageHandler,The length of the statement  "                Log.Info(_ctr.ToString() + " - " + oDevice.Region + Environment.NewLine +  _ctr.ToString() + " - " + oDevice.ModelName + Environment.NewLine + " is 142.
Long Statement,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,OnkyoMessageHandler,The length of the statement  "                            _ctr.ToString() + " - " + oDevice.Mac + Environment.NewLine +  _ctr.ToString() + " - " + oDevice.IP + Environment.NewLine + " is 123.
Magic Number,OSAE.Onkyo,Device,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,ISCPValidate,The following statement contains a magic number: sOnkyo.Substring(0' 4).ToUpper() != "ISCP"
Magic Number,OSAE.Onkyo,Device,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,LoadVars,The following statement contains a magic number: newOnkyoStr = newOnkyoStr.Substring(6);
Magic Number,OSAE.Onkyo,Device,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,LoadVars,The following statement contains a magic number: newOnkyoStr = newOnkyoStr.Substring(4);
Magic Number,OSAE.Onkyo,Device,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,LoadVars,The following statement contains a magic number: _region = tmp[2];
Magic Number,OSAE.Onkyo,Device,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,LoadVars,The following statement contains a magic number: _mac  = tmp[3];
Magic Number,OSAE.Onkyo,Device,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,LoadVars,The following statement contains a magic number: _ip = tmp[4];
Magic Number,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,SendCommand_Network,The following statement contains a magic number: int total = length + 16;
Magic Number,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,OnkyoMessageHandler,The following statement contains a magic number: OSAEObjectManager.ObjectAdd(oDevice.ModelName'""' oDevice.ModelName' "ONKYO RECEIVER"' ""' ""' 30' true);
Missing Default,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,ProcessCommand,The following switch statement is missing a default case: switch (method.MethodName)                          {                              case "ON":                                  SendCommand_Network(r' "!1PWR01");                                  OSAEObjectStateManager.ObjectStateSet(r.Name' "ON"' pName);                                  break;                              case "OFF":                                  SendCommand_Network(r' "!1PWR00");                                  OSAEObjectStateManager.ObjectStateSet(r.Name' "OFF"' pName);                                  break;                              case "MUTE":                                  SendCommand_Network(r' "!1AMT01");                                  break;                              case "UNMUTE":                                  SendCommand_Network(r' "!1AMT00");                                  break;                              case "VOLUME UP":                                  SendCommand_Network(r' "!1MVLUP");                                  break;                              case "VOLUME DOWN":                                  SendCommand_Network(r' "!1MVLDOWN");                                  break;                              case "SET VOLUME":                                  SendCommand_Network(r' "!1MVL" + Int32.Parse(method.Parameter1).ToString("X"));                                  break;                              case "VCR/DVR":                                  SendCommand_Network(r' "!1SLI00");                                  break;                              case "CBL/SAT":                                  SendCommand_Network(r' "!1SLI01");                                  break;                              case "GAME":                                  SendCommand_Network(r' "!1SLI02");                                  break;                              case "AUX1":                                  SendCommand_Network(r' "!1SLI03");                                  break;                              case "BD/DVD":                                  SendCommand_Network(r' "!1SLI10");                                  break;                              case "TV/CD":                                  SendCommand_Network(r' "!1SLI23");                                  break;                              case "TUNER":                                  SendCommand_Network(r' "!1SLI26");                                  break;                              case "DLNA":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV00");                                  break;                              case "VTUNER":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV02");                                  break;                              case "PANDORA":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV04");                                  break;                              case "SIRIUS":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV03");                                  break;                              case "MEDIAFLY":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV09");                                  break;                              case "NAPSTER":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV07");                                  break;                              case "FAVORITES":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV01");                                  break;                              case "UP":                                  SendCommand_Network(r' "!1OSDUP");                                  break;                              case "DOWN":                                  SendCommand_Network(r' "!1OSDDOWN");                                  break;                              case "RIGHT":                                  SendCommand_Network(r' "!1OSDRIGHT");                                  break;                              case "LEFT":                                  SendCommand_Network(r' "!1OSDLEFT");                                  break;                              case "ENTER":                                  SendCommand_Network(r' "!1OSDENTER");                                  break;                              case "NETUP":                                  SendCommand_Network(r' "!1NTCUP");                                  break;                              case "NETDOWN":                                  SendCommand_Network(r' "!1NTCDOWN");                                  break;                              case "NETRIGHT":                                  SendCommand_Network(r' "!1NTCRIGHT");                                  break;                              case "NETLEFT":                                  SendCommand_Network(r' "!1NTCLEFT");                                  break;                              case "NETENTER":                                  SendCommand_Network(r' "!1NTCSELECT");                                  break;                          }
Missing Default,OSAE.Onkyo,Onkyo,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,RunInterface,The following switch statement is missing a default case: switch (prop.Name)                      {                          case "Communication Type":                              r.Type = prop.Value;                              break;                          case "IP":                              r.IP = prop.Value;                              break;                          case "Network Port":                              try                              { r.NetworkPort = Int32.Parse(prop.Value); }                              catch                              { r.NetworkPort = 0; }                              break;                          case "COM Port":                              try                              { r.ComPort = Int32.Parse(prop.Value); }                              catch                              { r.ComPort = 0; }                              break;                      }
