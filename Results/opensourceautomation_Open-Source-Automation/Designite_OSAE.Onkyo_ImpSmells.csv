Implementation smell,Namespace,Class,File,Method,Description
Long Method,OSAE.Onkyo,Onkyo,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,ProcessCommand,The method has 127 lines of code.
Long Statement,OSAE.Onkyo,Onkyo,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,ProcessCommand,The length of the statement  "            Log.Debug("Found Command: " + method.MethodName + " | param1: " + method.Parameter1 + " | param2: " + method.Parameter2); " is 121.
Long Statement,OSAE.Onkyo,Onkyo,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,RunInterface,The length of the statement  "            OSAEObjectTypeManager.ObjectTypeUpdate(objt.Name' objt.Name' objt.Description' pName' "THING"' objt.Owner' objt.SysType' objt.Container' objt.HideRedundant' objt.Tooltip); " is 171.
Long Statement,OSAE.Onkyo,Onkyo,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,OnkyoMessageHandler,The length of the statement  "                Log.Info(_ctr.ToString() + " - " + oDevice.Region + Environment.NewLine +  _ctr.ToString() + " - " + oDevice.ModelName + Environment.NewLine + " is 142.
Long Statement,OSAE.Onkyo,Onkyo,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,OnkyoMessageHandler,The length of the statement  "                            _ctr.ToString() + " - " + oDevice.Mac + Environment.NewLine +  _ctr.ToString() + " - " + oDevice.IP + Environment.NewLine + " is 123.
Magic Number,OSAE.Onkyo,Device,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,ISCPValidate,The following statement contains a magic number: try   			{  				if (sOnkyo.Substring(0' 4).ToUpper() != "ISCP") { throw new Exception(); }  			}     			catch (Exception)  			{		  				retBool = false;  			}
Magic Number,OSAE.Onkyo,Device,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,LoadVars,The following statement contains a magic number: try  			{  				newOnkyoStr = newOnkyoStr.Substring(6); // Drop ISCP&!  				_deviceType = int.Parse( newOnkyoStr.Substring(0' 1));  				newOnkyoStr = newOnkyoStr.Substring(4); // Drop 1ECN  				string[] tmp = newOnkyoStr.Split(new string[] { "/" }' StringSplitOptions.None);  				_modelName = tmp[0];  				_port = int.Parse( tmp[1]);  				_region = tmp[2];  				_mac  = tmp[3];  				_ip = tmp[4];     			}  			catch (Exception)  			{  				retBool = false;  			}
Magic Number,OSAE.Onkyo,Device,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,LoadVars,The following statement contains a magic number: try  			{  				newOnkyoStr = newOnkyoStr.Substring(6); // Drop ISCP&!  				_deviceType = int.Parse( newOnkyoStr.Substring(0' 1));  				newOnkyoStr = newOnkyoStr.Substring(4); // Drop 1ECN  				string[] tmp = newOnkyoStr.Split(new string[] { "/" }' StringSplitOptions.None);  				_modelName = tmp[0];  				_port = int.Parse( tmp[1]);  				_region = tmp[2];  				_mac  = tmp[3];  				_ip = tmp[4];     			}  			catch (Exception)  			{  				retBool = false;  			}
Magic Number,OSAE.Onkyo,Device,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,LoadVars,The following statement contains a magic number: try  			{  				newOnkyoStr = newOnkyoStr.Substring(6); // Drop ISCP&!  				_deviceType = int.Parse( newOnkyoStr.Substring(0' 1));  				newOnkyoStr = newOnkyoStr.Substring(4); // Drop 1ECN  				string[] tmp = newOnkyoStr.Split(new string[] { "/" }' StringSplitOptions.None);  				_modelName = tmp[0];  				_port = int.Parse( tmp[1]);  				_region = tmp[2];  				_mac  = tmp[3];  				_ip = tmp[4];     			}  			catch (Exception)  			{  				retBool = false;  			}
Magic Number,OSAE.Onkyo,Device,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,LoadVars,The following statement contains a magic number: try  			{  				newOnkyoStr = newOnkyoStr.Substring(6); // Drop ISCP&!  				_deviceType = int.Parse( newOnkyoStr.Substring(0' 1));  				newOnkyoStr = newOnkyoStr.Substring(4); // Drop 1ECN  				string[] tmp = newOnkyoStr.Split(new string[] { "/" }' StringSplitOptions.None);  				_modelName = tmp[0];  				_port = int.Parse( tmp[1]);  				_region = tmp[2];  				_mac  = tmp[3];  				_ip = tmp[4];     			}  			catch (Exception)  			{  				retBool = false;  			}
Magic Number,OSAE.Onkyo,Device,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Device.cs,LoadVars,The following statement contains a magic number: try  			{  				newOnkyoStr = newOnkyoStr.Substring(6); // Drop ISCP&!  				_deviceType = int.Parse( newOnkyoStr.Substring(0' 1));  				newOnkyoStr = newOnkyoStr.Substring(4); // Drop 1ECN  				string[] tmp = newOnkyoStr.Split(new string[] { "/" }' StringSplitOptions.None);  				_modelName = tmp[0];  				_port = int.Parse( tmp[1]);  				_region = tmp[2];  				_mac  = tmp[3];  				_ip = tmp[4];     			}  			catch (Exception)  			{  				retBool = false;  			}
Magic Number,OSAE.Onkyo,Onkyo,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,SendCommand_Network,The following statement contains a magic number: try              {                  int length = command.Length;                  length++;                  int total = length + 16;                  char code = (char)length;                    // build up packet header and rest of command - followed by <CR> (chr(13))                  string line = "ISCP\x00\x00\x00\x10\x00\x00\x00" + code + "\x01\x00\x00\x00" + command + "\x0D";                    if (r.tcpClient.Connected)                  {                      // send command to receiver                      r.clientStreamWriter.WriteLine(line);                      r.clientStreamWriter.Flush();                      Log.Info("Sent command: " + line);                  }                  else                  {                      try                      {                          if (r.Type == "Network" && r.IP != "" && r.NetworkPort != 0)                          {                              Log.Debug("Creating TCP Client: ip-" + r.IP + " port-" + r.NetworkPort);                              r.tcpClient = new TcpClient(r.IP' r.NetworkPort);                                //get a network stream from server                              r.clientSockStream = r.tcpClient.GetStream();                                // create new writer and reader stream to send and receive                              r.clientStreamWriter = new StreamWriter(r.clientSockStream);                              r.clientStreamReader = new StreamReader(r.clientSockStream);                                //Start listening                              r.Connect();                                // send command to receiver                              //                              r.clientStreamWriter.WriteLine(line);                              r.clientStreamWriter.Flush();                              Log.Info("Sent command: " + line);                          }                          else                              Log.Info(r.Name + " - Properties not set");                      }                      catch (Exception ex)                      { Log.Error("Error creating connection to receiver.  Command can not be sent"' ex); }                  }              }              catch (Exception e)              { Log.Error("Error sending command"' e); }
Magic Number,OSAE.Onkyo,Onkyo,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,OnkyoMessageHandler,The following statement contains a magic number: try              {                  if (OSAEObjectManager.GetObjectByName(oDevice.ModelName) == null)                  {                      OSAEObjectManager.ObjectAdd(oDevice.ModelName'""' oDevice.ModelName' "ONKYO RECEIVER"' ""' ""' 30' true);                      OSAEObjectPropertyManager.ObjectPropertySet(oDevice.ModelName' "IP"' oDevice.IP' pName);                      OSAEObjectPropertyManager.ObjectPropertySet(oDevice.ModelName' "Network Port"' oDevice.Port.ToString()' pName);                      OSAEObjectPropertyManager.ObjectPropertySet(oDevice.ModelName' "Communication Type"' "Network"' pName);                    }                  Log.Info(_ctr.ToString() + " - " + oDevice.Region + Environment.NewLine +  _ctr.ToString() + " - " + oDevice.ModelName + Environment.NewLine +                              _ctr.ToString() + " - " + oDevice.Mac + Environment.NewLine +  _ctr.ToString() + " - " + oDevice.IP + Environment.NewLine +                                      _ctr.ToString() + " - " + oDevice.Port + Environment.NewLine);                      _ctr++;              }              catch (Exception ex)              { Log.Error("Error receiver device info "' ex); }
Missing Default,OSAE.Onkyo,Onkyo,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,ProcessCommand,The following switch statement is missing a default case: switch (method.MethodName)                          {                              case "ON":                                  SendCommand_Network(r' "!1PWR01");                                  OSAEObjectStateManager.ObjectStateSet(r.Name' "ON"' pName);                                  break;                              case "OFF":                                  SendCommand_Network(r' "!1PWR00");                                  OSAEObjectStateManager.ObjectStateSet(r.Name' "OFF"' pName);                                  break;                              case "MUTE":                                  SendCommand_Network(r' "!1AMT01");                                  break;                              case "UNMUTE":                                  SendCommand_Network(r' "!1AMT00");                                  break;                              case "VOLUME UP":                                  SendCommand_Network(r' "!1MVLUP");                                  break;                              case "VOLUME DOWN":                                  SendCommand_Network(r' "!1MVLDOWN");                                  break;                              case "SET VOLUME":                                  SendCommand_Network(r' "!1MVL" + Int32.Parse(method.Parameter1).ToString("X"));                                  break;                              case "VCR/DVR":                                  SendCommand_Network(r' "!1SLI00");                                  break;                              case "CBL/SAT":                                  SendCommand_Network(r' "!1SLI01");                                  break;                              case "GAME":                                  SendCommand_Network(r' "!1SLI02");                                  break;                              case "AUX1":                                  SendCommand_Network(r' "!1SLI03");                                  break;                              case "BD/DVD":                                  SendCommand_Network(r' "!1SLI10");                                  break;                              case "TV/CD":                                  SendCommand_Network(r' "!1SLI23");                                  break;                              case "TUNER":                                  SendCommand_Network(r' "!1SLI26");                                  break;                              case "DLNA":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV00");                                  break;                              case "VTUNER":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV02");                                  break;                              case "PANDORA":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV04");                                  break;                              case "SIRIUS":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV03");                                  break;                              case "MEDIAFLY":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV09");                                  break;                              case "NAPSTER":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV07");                                  break;                              case "FAVORITES":                                  SendCommand_Network(r' "!1SLI2B");                                  SendCommand_Network(r' "!1NSV01");                                  break;                              case "UP":                                  SendCommand_Network(r' "!1OSDUP");                                  break;                              case "DOWN":                                  SendCommand_Network(r' "!1OSDDOWN");                                  break;                              case "RIGHT":                                  SendCommand_Network(r' "!1OSDRIGHT");                                  break;                              case "LEFT":                                  SendCommand_Network(r' "!1OSDLEFT");                                  break;                              case "ENTER":                                  SendCommand_Network(r' "!1OSDENTER");                                  break;                              case "NETUP":                                  SendCommand_Network(r' "!1NTCUP");                                  break;                              case "NETDOWN":                                  SendCommand_Network(r' "!1NTCDOWN");                                  break;                              case "NETRIGHT":                                  SendCommand_Network(r' "!1NTCRIGHT");                                  break;                              case "NETLEFT":                                  SendCommand_Network(r' "!1NTCLEFT");                                  break;                              case "NETENTER":                                  SendCommand_Network(r' "!1NTCSELECT");                                  break;                          }
Missing Default,OSAE.Onkyo,Onkyo,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Onkyo\OSAE.Onkyo\Onkyo.cs,RunInterface,The following switch statement is missing a default case: switch (prop.Name)                      {                          case "Communication Type":                              r.Type = prop.Value;                              break;                          case "IP":                              r.IP = prop.Value;                              break;                          case "Network Port":                              try                              { r.NetworkPort = Int32.Parse(prop.Value); }                              catch                              { r.NetworkPort = 0; }                              break;                          case "COM Port":                              try                              { r.ComPort = Int32.Parse(prop.Value); }                              catch                              { r.ComPort = 0; }                              break;                      }
