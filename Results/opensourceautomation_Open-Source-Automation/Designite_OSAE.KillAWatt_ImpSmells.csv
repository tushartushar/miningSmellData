Implementation smell,Namespace,Class,File,Method,Description
Long Statement,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,RunInterface,The length of the statement  "            OSAEObjectTypeManager.ObjectTypeUpdate(objt.Name' objt.Name' objt.Description' pName' "THING"' objt.Owner' objt.SysType' objt.Container' objt.HideRedundant' objt.Tooltip); " is 171.
Long Statement,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,interval,The length of the statement  "                        string errorStr = OSAEObjectPropertyManager.GetObjectPropertyValue(OSAEObjectManager.GetObjectByAddress("KAW" + pc.Address).Name' "Error Correction").Value; " is 156.
Long Statement,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,interval,The length of the statement  "                        System.Globalization.NumberStyles styles = System.Globalization.NumberStyles.AllowTrailingSign | System.Globalization.NumberStyles.Float; " is 137.
Long Statement,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,interval,The length of the statement  "                        OSAEObjectPropertyManager.ObjectPropertySet(OSAEObjectManager.GetObjectByAddress("KAW" + pc.Address).Name' "RSSI"' pc.RSSI.ToString()' pName); " is 142.
Long Statement,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,interval,The length of the statement  "                        OSAEObjectPropertyManager.ObjectPropertySet(OSAEObjectManager.GetObjectByAddress("KAW" + pc.Address).Name' "Current Watts"' currentWatts.ToString()' pName); " is 156.
Long Statement,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,GetPowerCollection,The length of the statement  "                OSAEObjectManager.ObjectAdd("KillAWatt - " + address.ToString()'""' "Kill-A-Watt device"' "KILLAWATT MODULE"' "KAW" + address.ToString()' ""' 50' true); " is 152.
Empty Catch Block,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,interval,The method has an empty catch block.
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,parsePacket,The following statement contains a magic number: lock (thisLock)              {                  try                  {                      Log.Debug("Received Packet: " + packet.Address);                      VREF = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "VREF").Value);                      double watts = 0;                      int max = 0' min = 1024' avgv' vpp;                        if (packet.Checksum % 256 == 255)                      {                          int x = 0;                          for (int i = 0; i < 19; i++)                          {                              if (packet.Voltage[i] < min) min = packet.Voltage[i];                              if (packet.Voltage[i] > max) max = packet.Voltage[i];                          }                            avgv = (min + max) / 2;                          vpp = max - min;                          Log.Debug("  avgv: " + avgv);                            for (int i = 0; i < 19; i++)                          {                              //osae.AddToLog("voltage[" + i + "]: " + packet.Voltage[i]);                              //osae.AddToLog("amp[" + i + "]: " + packet.Amp[i]);                                packet.Voltage[i] = (packet.Voltage[i] - avgv) * 340 / vpp;                              packet.Amp[i] = (packet.Amp[i] - VREF) / 17;                              watts = watts + (packet.Voltage[i] * packet.Amp[i]);                          }                            watts = Math.Round(watts / 19' 3);                            if (watts < 0)  watts = 0;                          try                          {                              PowerCollection pc = GetPowerCollection(packet.Address);                              Log.Debug("  watts: " + watts.ToString());                              pc.DataWattBuffer = pc.DataWattBuffer + watts;                              pc.PacketCount = pc.PacketCount + 1;                              pc.RSSI = packet.RSSI;                              Log.Debug("  RSSI: " + pc.RSSI.ToString());                          }                            catch (Exception ex)                          { Log.Error("  error updating object statuses!"' ex); }                      }                      else                          Log.Debug("  bad checksum");                  }                  catch (Exception ex)                  { Log.Error("- Error parsing packet!"' ex); }              }
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,parsePacket,The following statement contains a magic number: lock (thisLock)              {                  try                  {                      Log.Debug("Received Packet: " + packet.Address);                      VREF = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "VREF").Value);                      double watts = 0;                      int max = 0' min = 1024' avgv' vpp;                        if (packet.Checksum % 256 == 255)                      {                          int x = 0;                          for (int i = 0; i < 19; i++)                          {                              if (packet.Voltage[i] < min) min = packet.Voltage[i];                              if (packet.Voltage[i] > max) max = packet.Voltage[i];                          }                            avgv = (min + max) / 2;                          vpp = max - min;                          Log.Debug("  avgv: " + avgv);                            for (int i = 0; i < 19; i++)                          {                              //osae.AddToLog("voltage[" + i + "]: " + packet.Voltage[i]);                              //osae.AddToLog("amp[" + i + "]: " + packet.Amp[i]);                                packet.Voltage[i] = (packet.Voltage[i] - avgv) * 340 / vpp;                              packet.Amp[i] = (packet.Amp[i] - VREF) / 17;                              watts = watts + (packet.Voltage[i] * packet.Amp[i]);                          }                            watts = Math.Round(watts / 19' 3);                            if (watts < 0)  watts = 0;                          try                          {                              PowerCollection pc = GetPowerCollection(packet.Address);                              Log.Debug("  watts: " + watts.ToString());                              pc.DataWattBuffer = pc.DataWattBuffer + watts;                              pc.PacketCount = pc.PacketCount + 1;                              pc.RSSI = packet.RSSI;                              Log.Debug("  RSSI: " + pc.RSSI.ToString());                          }                            catch (Exception ex)                          { Log.Error("  error updating object statuses!"' ex); }                      }                      else                          Log.Debug("  bad checksum");                  }                  catch (Exception ex)                  { Log.Error("- Error parsing packet!"' ex); }              }
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,parsePacket,The following statement contains a magic number: lock (thisLock)              {                  try                  {                      Log.Debug("Received Packet: " + packet.Address);                      VREF = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "VREF").Value);                      double watts = 0;                      int max = 0' min = 1024' avgv' vpp;                        if (packet.Checksum % 256 == 255)                      {                          int x = 0;                          for (int i = 0; i < 19; i++)                          {                              if (packet.Voltage[i] < min) min = packet.Voltage[i];                              if (packet.Voltage[i] > max) max = packet.Voltage[i];                          }                            avgv = (min + max) / 2;                          vpp = max - min;                          Log.Debug("  avgv: " + avgv);                            for (int i = 0; i < 19; i++)                          {                              //osae.AddToLog("voltage[" + i + "]: " + packet.Voltage[i]);                              //osae.AddToLog("amp[" + i + "]: " + packet.Amp[i]);                                packet.Voltage[i] = (packet.Voltage[i] - avgv) * 340 / vpp;                              packet.Amp[i] = (packet.Amp[i] - VREF) / 17;                              watts = watts + (packet.Voltage[i] * packet.Amp[i]);                          }                            watts = Math.Round(watts / 19' 3);                            if (watts < 0)  watts = 0;                          try                          {                              PowerCollection pc = GetPowerCollection(packet.Address);                              Log.Debug("  watts: " + watts.ToString());                              pc.DataWattBuffer = pc.DataWattBuffer + watts;                              pc.PacketCount = pc.PacketCount + 1;                              pc.RSSI = packet.RSSI;                              Log.Debug("  RSSI: " + pc.RSSI.ToString());                          }                            catch (Exception ex)                          { Log.Error("  error updating object statuses!"' ex); }                      }                      else                          Log.Debug("  bad checksum");                  }                  catch (Exception ex)                  { Log.Error("- Error parsing packet!"' ex); }              }
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,parsePacket,The following statement contains a magic number: lock (thisLock)              {                  try                  {                      Log.Debug("Received Packet: " + packet.Address);                      VREF = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "VREF").Value);                      double watts = 0;                      int max = 0' min = 1024' avgv' vpp;                        if (packet.Checksum % 256 == 255)                      {                          int x = 0;                          for (int i = 0; i < 19; i++)                          {                              if (packet.Voltage[i] < min) min = packet.Voltage[i];                              if (packet.Voltage[i] > max) max = packet.Voltage[i];                          }                            avgv = (min + max) / 2;                          vpp = max - min;                          Log.Debug("  avgv: " + avgv);                            for (int i = 0; i < 19; i++)                          {                              //osae.AddToLog("voltage[" + i + "]: " + packet.Voltage[i]);                              //osae.AddToLog("amp[" + i + "]: " + packet.Amp[i]);                                packet.Voltage[i] = (packet.Voltage[i] - avgv) * 340 / vpp;                              packet.Amp[i] = (packet.Amp[i] - VREF) / 17;                              watts = watts + (packet.Voltage[i] * packet.Amp[i]);                          }                            watts = Math.Round(watts / 19' 3);                            if (watts < 0)  watts = 0;                          try                          {                              PowerCollection pc = GetPowerCollection(packet.Address);                              Log.Debug("  watts: " + watts.ToString());                              pc.DataWattBuffer = pc.DataWattBuffer + watts;                              pc.PacketCount = pc.PacketCount + 1;                              pc.RSSI = packet.RSSI;                              Log.Debug("  RSSI: " + pc.RSSI.ToString());                          }                            catch (Exception ex)                          { Log.Error("  error updating object statuses!"' ex); }                      }                      else                          Log.Debug("  bad checksum");                  }                  catch (Exception ex)                  { Log.Error("- Error parsing packet!"' ex); }              }
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,parsePacket,The following statement contains a magic number: lock (thisLock)              {                  try                  {                      Log.Debug("Received Packet: " + packet.Address);                      VREF = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "VREF").Value);                      double watts = 0;                      int max = 0' min = 1024' avgv' vpp;                        if (packet.Checksum % 256 == 255)                      {                          int x = 0;                          for (int i = 0; i < 19; i++)                          {                              if (packet.Voltage[i] < min) min = packet.Voltage[i];                              if (packet.Voltage[i] > max) max = packet.Voltage[i];                          }                            avgv = (min + max) / 2;                          vpp = max - min;                          Log.Debug("  avgv: " + avgv);                            for (int i = 0; i < 19; i++)                          {                              //osae.AddToLog("voltage[" + i + "]: " + packet.Voltage[i]);                              //osae.AddToLog("amp[" + i + "]: " + packet.Amp[i]);                                packet.Voltage[i] = (packet.Voltage[i] - avgv) * 340 / vpp;                              packet.Amp[i] = (packet.Amp[i] - VREF) / 17;                              watts = watts + (packet.Voltage[i] * packet.Amp[i]);                          }                            watts = Math.Round(watts / 19' 3);                            if (watts < 0)  watts = 0;                          try                          {                              PowerCollection pc = GetPowerCollection(packet.Address);                              Log.Debug("  watts: " + watts.ToString());                              pc.DataWattBuffer = pc.DataWattBuffer + watts;                              pc.PacketCount = pc.PacketCount + 1;                              pc.RSSI = packet.RSSI;                              Log.Debug("  RSSI: " + pc.RSSI.ToString());                          }                            catch (Exception ex)                          { Log.Error("  error updating object statuses!"' ex); }                      }                      else                          Log.Debug("  bad checksum");                  }                  catch (Exception ex)                  { Log.Error("- Error parsing packet!"' ex); }              }
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,parsePacket,The following statement contains a magic number: lock (thisLock)              {                  try                  {                      Log.Debug("Received Packet: " + packet.Address);                      VREF = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "VREF").Value);                      double watts = 0;                      int max = 0' min = 1024' avgv' vpp;                        if (packet.Checksum % 256 == 255)                      {                          int x = 0;                          for (int i = 0; i < 19; i++)                          {                              if (packet.Voltage[i] < min) min = packet.Voltage[i];                              if (packet.Voltage[i] > max) max = packet.Voltage[i];                          }                            avgv = (min + max) / 2;                          vpp = max - min;                          Log.Debug("  avgv: " + avgv);                            for (int i = 0; i < 19; i++)                          {                              //osae.AddToLog("voltage[" + i + "]: " + packet.Voltage[i]);                              //osae.AddToLog("amp[" + i + "]: " + packet.Amp[i]);                                packet.Voltage[i] = (packet.Voltage[i] - avgv) * 340 / vpp;                              packet.Amp[i] = (packet.Amp[i] - VREF) / 17;                              watts = watts + (packet.Voltage[i] * packet.Amp[i]);                          }                            watts = Math.Round(watts / 19' 3);                            if (watts < 0)  watts = 0;                          try                          {                              PowerCollection pc = GetPowerCollection(packet.Address);                              Log.Debug("  watts: " + watts.ToString());                              pc.DataWattBuffer = pc.DataWattBuffer + watts;                              pc.PacketCount = pc.PacketCount + 1;                              pc.RSSI = packet.RSSI;                              Log.Debug("  RSSI: " + pc.RSSI.ToString());                          }                            catch (Exception ex)                          { Log.Error("  error updating object statuses!"' ex); }                      }                      else                          Log.Debug("  bad checksum");                  }                  catch (Exception ex)                  { Log.Error("- Error parsing packet!"' ex); }              }
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,parsePacket,The following statement contains a magic number: lock (thisLock)              {                  try                  {                      Log.Debug("Received Packet: " + packet.Address);                      VREF = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "VREF").Value);                      double watts = 0;                      int max = 0' min = 1024' avgv' vpp;                        if (packet.Checksum % 256 == 255)                      {                          int x = 0;                          for (int i = 0; i < 19; i++)                          {                              if (packet.Voltage[i] < min) min = packet.Voltage[i];                              if (packet.Voltage[i] > max) max = packet.Voltage[i];                          }                            avgv = (min + max) / 2;                          vpp = max - min;                          Log.Debug("  avgv: " + avgv);                            for (int i = 0; i < 19; i++)                          {                              //osae.AddToLog("voltage[" + i + "]: " + packet.Voltage[i]);                              //osae.AddToLog("amp[" + i + "]: " + packet.Amp[i]);                                packet.Voltage[i] = (packet.Voltage[i] - avgv) * 340 / vpp;                              packet.Amp[i] = (packet.Amp[i] - VREF) / 17;                              watts = watts + (packet.Voltage[i] * packet.Amp[i]);                          }                            watts = Math.Round(watts / 19' 3);                            if (watts < 0)  watts = 0;                          try                          {                              PowerCollection pc = GetPowerCollection(packet.Address);                              Log.Debug("  watts: " + watts.ToString());                              pc.DataWattBuffer = pc.DataWattBuffer + watts;                              pc.PacketCount = pc.PacketCount + 1;                              pc.RSSI = packet.RSSI;                              Log.Debug("  RSSI: " + pc.RSSI.ToString());                          }                            catch (Exception ex)                          { Log.Error("  error updating object statuses!"' ex); }                      }                      else                          Log.Debug("  bad checksum");                  }                  catch (Exception ex)                  { Log.Error("- Error parsing packet!"' ex); }              }
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,parsePacket,The following statement contains a magic number: lock (thisLock)              {                  try                  {                      Log.Debug("Received Packet: " + packet.Address);                      VREF = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "VREF").Value);                      double watts = 0;                      int max = 0' min = 1024' avgv' vpp;                        if (packet.Checksum % 256 == 255)                      {                          int x = 0;                          for (int i = 0; i < 19; i++)                          {                              if (packet.Voltage[i] < min) min = packet.Voltage[i];                              if (packet.Voltage[i] > max) max = packet.Voltage[i];                          }                            avgv = (min + max) / 2;                          vpp = max - min;                          Log.Debug("  avgv: " + avgv);                            for (int i = 0; i < 19; i++)                          {                              //osae.AddToLog("voltage[" + i + "]: " + packet.Voltage[i]);                              //osae.AddToLog("amp[" + i + "]: " + packet.Amp[i]);                                packet.Voltage[i] = (packet.Voltage[i] - avgv) * 340 / vpp;                              packet.Amp[i] = (packet.Amp[i] - VREF) / 17;                              watts = watts + (packet.Voltage[i] * packet.Amp[i]);                          }                            watts = Math.Round(watts / 19' 3);                            if (watts < 0)  watts = 0;                          try                          {                              PowerCollection pc = GetPowerCollection(packet.Address);                              Log.Debug("  watts: " + watts.ToString());                              pc.DataWattBuffer = pc.DataWattBuffer + watts;                              pc.PacketCount = pc.PacketCount + 1;                              pc.RSSI = packet.RSSI;                              Log.Debug("  RSSI: " + pc.RSSI.ToString());                          }                            catch (Exception ex)                          { Log.Error("  error updating object statuses!"' ex); }                      }                      else                          Log.Debug("  bad checksum");                  }                  catch (Exception ex)                  { Log.Error("- Error parsing packet!"' ex); }              }
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,parsePacket,The following statement contains a magic number: lock (thisLock)              {                  try                  {                      Log.Debug("Received Packet: " + packet.Address);                      VREF = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "VREF").Value);                      double watts = 0;                      int max = 0' min = 1024' avgv' vpp;                        if (packet.Checksum % 256 == 255)                      {                          int x = 0;                          for (int i = 0; i < 19; i++)                          {                              if (packet.Voltage[i] < min) min = packet.Voltage[i];                              if (packet.Voltage[i] > max) max = packet.Voltage[i];                          }                            avgv = (min + max) / 2;                          vpp = max - min;                          Log.Debug("  avgv: " + avgv);                            for (int i = 0; i < 19; i++)                          {                              //osae.AddToLog("voltage[" + i + "]: " + packet.Voltage[i]);                              //osae.AddToLog("amp[" + i + "]: " + packet.Amp[i]);                                packet.Voltage[i] = (packet.Voltage[i] - avgv) * 340 / vpp;                              packet.Amp[i] = (packet.Amp[i] - VREF) / 17;                              watts = watts + (packet.Voltage[i] * packet.Amp[i]);                          }                            watts = Math.Round(watts / 19' 3);                            if (watts < 0)  watts = 0;                          try                          {                              PowerCollection pc = GetPowerCollection(packet.Address);                              Log.Debug("  watts: " + watts.ToString());                              pc.DataWattBuffer = pc.DataWattBuffer + watts;                              pc.PacketCount = pc.PacketCount + 1;                              pc.RSSI = packet.RSSI;                              Log.Debug("  RSSI: " + pc.RSSI.ToString());                          }                            catch (Exception ex)                          { Log.Error("  error updating object statuses!"' ex); }                      }                      else                          Log.Debug("  bad checksum");                  }                  catch (Exception ex)                  { Log.Error("- Error parsing packet!"' ex); }              }
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,parsePacket,The following statement contains a magic number: lock (thisLock)              {                  try                  {                      Log.Debug("Received Packet: " + packet.Address);                      VREF = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "VREF").Value);                      double watts = 0;                      int max = 0' min = 1024' avgv' vpp;                        if (packet.Checksum % 256 == 255)                      {                          int x = 0;                          for (int i = 0; i < 19; i++)                          {                              if (packet.Voltage[i] < min) min = packet.Voltage[i];                              if (packet.Voltage[i] > max) max = packet.Voltage[i];                          }                            avgv = (min + max) / 2;                          vpp = max - min;                          Log.Debug("  avgv: " + avgv);                            for (int i = 0; i < 19; i++)                          {                              //osae.AddToLog("voltage[" + i + "]: " + packet.Voltage[i]);                              //osae.AddToLog("amp[" + i + "]: " + packet.Amp[i]);                                packet.Voltage[i] = (packet.Voltage[i] - avgv) * 340 / vpp;                              packet.Amp[i] = (packet.Amp[i] - VREF) / 17;                              watts = watts + (packet.Voltage[i] * packet.Amp[i]);                          }                            watts = Math.Round(watts / 19' 3);                            if (watts < 0)  watts = 0;                          try                          {                              PowerCollection pc = GetPowerCollection(packet.Address);                              Log.Debug("  watts: " + watts.ToString());                              pc.DataWattBuffer = pc.DataWattBuffer + watts;                              pc.PacketCount = pc.PacketCount + 1;                              pc.RSSI = packet.RSSI;                              Log.Debug("  RSSI: " + pc.RSSI.ToString());                          }                            catch (Exception ex)                          { Log.Error("  error updating object statuses!"' ex); }                      }                      else                          Log.Debug("  bad checksum");                  }                  catch (Exception ex)                  { Log.Error("- Error parsing packet!"' ex); }              }
Magic Number,OSAE.KillAWatt,KillAWatt,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\KillAWatt.cs,GetPowerCollection,The following statement contains a magic number: if(OSAEObjectManager.GetObjectByAddress("KAW" + address.ToString()) == null)                  OSAEObjectManager.ObjectAdd("KillAWatt - " + address.ToString()'""' "Kill-A-Watt device"' "KILLAWATT MODULE"' "KAW" + address.ToString()' ""' 50' true);
Magic Number,OSAE.KillAWatt,PowerCollection,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\PowerCollection.cs,GetInterval,The following statement contains a magic number: return Math.Round((_dataWattBuffer / _packetCount)' 3);
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,xbee,The following statement contains a magic number: _port.BaudRate = 9600;
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,xbee,The following statement contains a magic number: _port.ReceivedBytesThreshold = 88;
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,port_DataReceived,The following statement contains a magic number: if (buffer.Count >= 88)                  fetch();
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: int[] packet = new int[88];
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: try              {                  while (i < 88)                  {                      //addToLog("i: " + i + " | buffer.count: " + buffer.Count);                      if (buffer.Count > 0)                      {                          packet[i] = (int)buffer.Dequeue();                          if (i == 0 && packet[i] != 126)                          {                              //osae.AddToLog("bad first byte.  i remains 0");                            }                          else                              i = i + 1;                      }                  }                  //addToLog("packet found");              }              catch (Exception ex)              {                  //osae.AddToLog("error getting packet");                  packet[0] = 0;              }
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: try              {                  while (i < 88)                  {                      //addToLog("i: " + i + " | buffer.count: " + buffer.Count);                      if (buffer.Count > 0)                      {                          packet[i] = (int)buffer.Dequeue();                          if (i == 0 && packet[i] != 126)                          {                              //osae.AddToLog("bad first byte.  i remains 0");                            }                          else                              i = i + 1;                      }                  }                  //addToLog("packet found");              }              catch (Exception ex)              {                  //osae.AddToLog("error getting packet");                  packet[0] = 0;              }
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: xbp.Address = (packet[4] * 256) + packet[5];
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: xbp.Address = (packet[4] * 256) + packet[5];
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: xbp.Address = (packet[4] * 256) + packet[5];
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: xbp.RSSI = packet[6];
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: xbp.Samples = packet[8];
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: for (int k = 3; k < 88; k++)              {                  xbp.Checksum = xbp.Checksum + packet[k];              }
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: for (int k = 3; k < 88; k++)              {                  xbp.Checksum = xbp.Checksum + packet[k];              }
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: for (int j = 11; j < 87; j = j + 4)              {                  xbp.Voltage[x] = packet[j] * 256 + packet[j + 1];                  xbp.Amp[x] = packet[j + 2] * 256 + packet[j + 3];                    x = x + 1;              }
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: for (int j = 11; j < 87; j = j + 4)              {                  xbp.Voltage[x] = packet[j] * 256 + packet[j + 1];                  xbp.Amp[x] = packet[j + 2] * 256 + packet[j + 3];                    x = x + 1;              }
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: for (int j = 11; j < 87; j = j + 4)              {                  xbp.Voltage[x] = packet[j] * 256 + packet[j + 1];                  xbp.Amp[x] = packet[j + 2] * 256 + packet[j + 3];                    x = x + 1;              }
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: for (int j = 11; j < 87; j = j + 4)              {                  xbp.Voltage[x] = packet[j] * 256 + packet[j + 1];                  xbp.Amp[x] = packet[j + 2] * 256 + packet[j + 3];                    x = x + 1;              }
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: for (int j = 11; j < 87; j = j + 4)              {                  xbp.Voltage[x] = packet[j] * 256 + packet[j + 1];                  xbp.Amp[x] = packet[j + 2] * 256 + packet[j + 3];                    x = x + 1;              }
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: for (int j = 11; j < 87; j = j + 4)              {                  xbp.Voltage[x] = packet[j] * 256 + packet[j + 1];                  xbp.Amp[x] = packet[j + 2] * 256 + packet[j + 3];                    x = x + 1;              }
Magic Number,OSAE.KillAWatt,xbee,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,getPacket,The following statement contains a magic number: for (int j = 11; j < 87; j = j + 4)              {                  xbp.Voltage[x] = packet[j] * 256 + packet[j + 1];                  xbp.Amp[x] = packet[j + 2] * 256 + packet[j + 3];                    x = x + 1;              }
Magic Number,OSAE.KillAWatt,xbeePacket,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,xbeePacket,The following statement contains a magic number: _voltage = new int[19];
Magic Number,OSAE.KillAWatt,xbeePacket,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.KillAWatt\xbee.cs,xbeePacket,The following statement contains a magic number: _amp = new double[19];
