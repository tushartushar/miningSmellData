Implementation smell,Namespace,Class,File,Method,Description
Long Method,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,doCommand,The method has 194 lines of code.
Complex Method,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeEvent,Cyclomatic complexity of the method is 13
Complex Method,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,getPropertyValue,Cyclomatic complexity of the method is 12
Complex Method,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeChangeEvent,Cyclomatic complexity of the method is 13
Complex Method,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeSensorEvent,Cyclomatic complexity of the method is 11
Complex Method,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,getObjectType,Cyclomatic complexity of the method is 9
Complex Method,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,doCommand,Cyclomatic complexity of the method is 33
Complex Method,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,changeEventTypeToString,Cyclomatic complexity of the method is 8
Complex Method,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,MethodToString,Cyclomatic complexity of the method is 11
Complex Method,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,setLastProperties,Cyclomatic complexity of the method is 8
Long Parameter List,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeEvent,The method has 5 parameters. Parameters: deviceId' method' data' callbackId' obj
Long Parameter List,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeChangeEvent,The method has 5 parameters. Parameters: deviceId' changeEvent' changeType' callbackId' obj
Long Parameter List,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeSensorEvent,The method has 8 parameters. Parameters: protocol' model' deviceId' dataType' value' timestamp' callbackId' obj
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The length of the statement  "            //            // ### Code to make it possible to debug RunInterface. Put breakpoint on line with Sleep(0)' then manually move execution out of the loop. " is 152.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,ProcessCommand,The length of the statement  "                if (obj.Name == Name)  pluginCommands(obj' obj.Property(propAddrComputerName).Value' method);  // do commands on the Tellstick plugin object " is 140.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeEvent,The length of the statement  "                logD("decodeEvent"' TelldusNETWrapper.tdGetName(deviceId)' MethodToString(method) + " CallbackEvent. " + data + " CallbackId: " + callbackId); " is 142.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeChangeEvent,The length of the statement  "                logD("decodeChangeEvent"' TelldusNETWrapper.tdGetName(deviceId)' changeEventToString(changeEvent) + " CallbackChangeEvent. " + changeEventTypeToString(changeType) + " CallbackId: " + callbackId); " is 195.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeChangeEvent,The length of the statement  "                    logD("decodeChangeEvent"' o.Name' changeEventToString(changeEvent) + " Device change event. " + changeEventTypeToString(changeType)' o); " is 136.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeChangeEvent,The length of the statement  "                                    setPropertyValue(o' propDeviceaddr' TelldusWrapper.TelldusNETWrapper.tdGetDeviceParameter(deviceId' "house"' "") + "/" + TelldusWrapper.TelldusNETWrapper.tdGetDeviceParameter(deviceId' "code"' "") + "/" + TelldusWrapper.TelldusNETWrapper.tdGetDeviceParameter(deviceId' "unit"' "")); " is 282.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeChangeEvent,The length of the statement  "                                    OSAEObjectManager.ObjectUpdate(o.Name' TelldusWrapper.TelldusNETWrapper.tdGetName(deviceId)' o.Alias' o.Description' o.Type' o.Address' o.Container' o.MinTrustLevel' o.Enabled); " is 177.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeSensorEvent,The length of the statement  "            logD("decodeSensorEvent"' dataTypeToString(dataType)' model + " CallbackSensorEvent." + protocol + "Id: " + deviceId + " Value: " + value + " Timestamp: " + timestamp + " CallbackId: " + callbackId); " is 199.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,decodeSensorEvent,The length of the statement  "                            setPropertyValue(o' dataTypeToString(dataType)' v.ToString());    // Write value in local format' i.e. correct decimal separator " is 128.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,getObject,The length of the statement  "                        OSAEObjectManager.ObjectUpdate(o.Name' o.Name' o.Alias' o.Description' o.Type' addrPrefix + deviceId' o.Container' o.MinTrustLevel' o.Enabled); " is 143.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,initPlugin,The length of the statement  "                OSAEObjectTypeManager.ObjectTypeUpdate(oType.Name' oType.Name' oType.Description' Name' oType.BaseType' oType.Owner' oType.SysType' oType.Container' oType.HideRedundant'oType.Tooltip); " is 184.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,initPlugin,The length of the statement  "            logD("initPlugin"' Name' "Initialise: " + propSystemPlugin + "=" + getPropertyValue(o' propSystemPlugin) + "' " + propAddrComputerName + "=" + getPropertyValue(o' propAddrComputerName) + "' " + propPort + "=" + getPropertyValue(o' propPort) + "' " + propDebug + "=" + debug); " is 275.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,initPlugin,The length of the statement  "            logD("initPlugin"' Name' "Initialise: " + propAddrPrefix + "=" + addrPrefix + "' " + propAddrPrefixSensor + "=" + addrPrefixSensor); " is 132.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,initPlugin,The length of the statement  "            logD("initPlugin"' Name' "Initialise: " + propAddDevices + "=" + getPropertyValue(o' propAddDevices) + "' " + propAddSensors + "=" + getPropertyValue(o' propAddSensors) + "' " + propRawEvents + "=" + rawEvents); " is 211.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,setLastProperties,The length of the statement  "                        setPropertyValue(o' propLevel' (Decimal.Round((Decimal)(Int32.Parse(TelldusNETWrapper.tdLastSentValue(deviceId)) * (100 / 255.0))).ToString())); " is 144.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,setOSAProperties,The length of the statement  "            setPropertyValue(o' propDeviceaddr' TelldusNETWrapper.tdGetDeviceParameter(deviceId' "house"' "") + "/" + TelldusWrapper.TelldusNETWrapper.tdGetDeviceParameter(deviceId' "code"' "") + "/" + TelldusWrapper.TelldusNETWrapper.tdGetDeviceParameter(deviceId' "unit"' "")); " is 267.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,createSensorObject,The length of the statement  "                        OSAEObjectManager.ObjectAdd(name' ""' protocol + "-" + model' objTypeTemp' addrPrefixSensor + deviceId' contSensors' defaultTrustLevel' true); " is 142.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,createSensorObject,The length of the statement  "                        OSAEObjectManager.ObjectAdd(name' ""' protocol + "-" + model' objTypeHum' addrPrefixSensor + deviceId' contSensors' defaultTrustLevel' true); " is 141.
Long Statement,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,createSensorObject,The length of the statement  "                        OSAEObjectManager.ObjectAdd(name' ""' protocol + "-" + model' objTypeTempHum' addrPrefixSensor + deviceId' contSensors' defaultTrustLevel' true); " is 145.
Complex Conditional,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,doCommand,The conditional expression  "(o.State.Value.ToUpper() != objStatDisable) || (method.MethodName.ToUpper() == objMtdEnable) ||                       (o.Name == Name && method.MethodName.ToUpper() == objMtdInit)"  is complex.
Empty Catch Block,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,logD,The method has an empty catch block.
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 2;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 3;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 4;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 5;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 6;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 7;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 8;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 9;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 10;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 11;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 12;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: avgTimer = new System.Timers.Timer(60000 * sensorAverageTime);
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,RunInterface,The following statement contains a magic number: pos = 13;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,ProcessCommand,The following statement contains a magic number: pos = 2;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,ProcessCommand,The following statement contains a magic number: pos = 3;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,ProcessCommand,The following statement contains a magic number: pos = 5;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,initPlugin,The following statement contains a magic number: OSAEObjectManager.ObjectAdd(Name' ""' "Tellstick plugin"' "TELLSTICK"' ""' "SYSTEM"' 50' true);
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,initPlugin,The following statement contains a magic number: sensorAverageTime = 10;
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,doCommand,The following statement contains a magic number: switch (method.MethodName)                      {                          case objMtdBell:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_BELL) > 0)                              {                                  result = TelldusNETWrapper.tdBell(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.TELLSTICK_BELL);                              }                              else                                  logW("doCommand"' o.Name' objMtdBell + " Method is not supported on this object.");                              break;                          case objMtdDim:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_DIM) > 0)                              {                                  try                                  {                                      result = TelldusNETWrapper.tdDim(deviceId' (char)((Int32)(Double.Parse(method.Parameter1) * (255 / 100.0))));                                  }                                  catch (Exception)                                  {                                      result = TelldusNETWrapper.tdDim(deviceId' '0');                                  }                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdDim + " Method is not supported on this object.");                              break;                          case objMtdDown:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_DOWN) > 0)                              {                                  result = TelldusNETWrapper.tdDown(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdDown + " Method is not supported on this object.");                              break;                          case objMtdUp:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_UP) > 0)                              {                                  result = TelldusNETWrapper.tdUp(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdUp + " Method is not supported on this object.");                              break;                          case objMtdStop:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_STOP) > 0)                              {                                  result = TelldusNETWrapper.tdStop(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdStop + " Method is not supported on this object.");                              break;                          case objMtdOn:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_TURNON) > 0)                              {                                  result = TelldusNETWrapper.tdTurnOn(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdOn + " Method is not supported on this object.");                              break;                          case objMtdOff:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_TURNOFF) > 0)                              {                                  result = TelldusNETWrapper.tdTurnOff(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdOff + " Method is not supported on this object.");                              break;                          case objMtdToggle:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_TOGGLE) > 0)                              {                                  result = TelldusNETWrapper.TELLSTICK_ERROR_METHOD_NOT_SUPPORTED; // !!!!!!!                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdToggle + " Method is not supported on this object.");                              break;                          case objMtdExecute:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_EXECUTE) > 0)                              {                                  result = TelldusNETWrapper.tdExecute(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdExecute + " Method is not supported on this object.");                              break;                          case objMtdLearn:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_LEARN) > 0)                              {                                  result = TelldusNETWrapper.tdLearn(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdLearn + " Method is not supported on this object.");                              break;                          case objMtdRestMaxMin:                              switch (o.Type)                              {                                  case objTypeHum:                                      setPropertyValue(o' propMaxHum' o.Property(propHum).Value);                                      setPropertyValue(o' propMinHum' o.Property(propHum).Value);                                      log("doCommand"' o.Name' " Reset Min/Max values.");                                      break;                                  case objTypeTemp:                                      setPropertyValue(o' propMaxTemp' o.Property(propTemp).Value);                                      setPropertyValue(o' propMinTemp' o.Property(propTemp).Value);                                      log("doCommand"' o.Name' " Reset Min/Max values.");                                      break;                                  case objTypeTempHum:                                      setPropertyValue(o' propMaxHum' o.Property(propHum).Value);                                      setPropertyValue(o' propMinHum' o.Property(propHum).Value);                                      setPropertyValue(o' propMaxTemp' o.Property(propTemp).Value);                                      setPropertyValue(o' propMinTemp' o.Property(propTemp).Value);                                      log("doCommand"' o.Name' " Reset Min/Max values.");                                      break;                                  default:                                      logE("doCommand"' o.Name' " Reset Min/Max values."' null);                                      break;                              }                              break;                            case objMtdEnable:                              switch (o.Type)                              {                                  case objTypeHum:                                  case objTypeTemp:                                  case objTypeTempHum:                                      o.SetState(objStatOff);                                      log("doCommand"' o.Name' objStatOff + " Device state set on object.");                                      break;                                  default:                                      o.SetState(objStatUnKnown);                                      log("doCommand"' o.Name' objStatUnKnown + " Device state set on object.");                                      break;                              }                              break;                          case objMtdDis:                              o.SetState(objStatDisable);  // Should be done automatically on method with same name as state' but not working                              log("doCommand"' o.Name' objStatDisable + " Device state set on object.");                              break;                          case objMtdDebugOn:                              if (debug != true)                              {                                  debug = true;                                  log("doCommand"' o.Name' "Method DebugOn' set debug to TRUE.");                              }                              else                                  log("doCommand"' o.Name' "Method DebugOn' debug already set to TRUE.");                              break;                          case objMtdDebugOff:                              if (debug != false)                              {                                  debug = false;                                  log("doCommand"' o.Name' "Method DebugOff' set debug to FALSE.");                              }                              else                                  log("doCommand"' o.Name' "Method DebugOff' debug already set to FALSE.");                              break;                          default:                              logE("doCommand"' o.Name' method.MethodName + "Unsuported method: "' null);                              break;                        }
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,doCommand,The following statement contains a magic number: switch (method.MethodName)                      {                          case objMtdBell:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_BELL) > 0)                              {                                  result = TelldusNETWrapper.tdBell(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.TELLSTICK_BELL);                              }                              else                                  logW("doCommand"' o.Name' objMtdBell + " Method is not supported on this object.");                              break;                          case objMtdDim:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_DIM) > 0)                              {                                  try                                  {                                      result = TelldusNETWrapper.tdDim(deviceId' (char)((Int32)(Double.Parse(method.Parameter1) * (255 / 100.0))));                                  }                                  catch (Exception)                                  {                                      result = TelldusNETWrapper.tdDim(deviceId' '0');                                  }                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdDim + " Method is not supported on this object.");                              break;                          case objMtdDown:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_DOWN) > 0)                              {                                  result = TelldusNETWrapper.tdDown(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdDown + " Method is not supported on this object.");                              break;                          case objMtdUp:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_UP) > 0)                              {                                  result = TelldusNETWrapper.tdUp(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdUp + " Method is not supported on this object.");                              break;                          case objMtdStop:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_STOP) > 0)                              {                                  result = TelldusNETWrapper.tdStop(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdStop + " Method is not supported on this object.");                              break;                          case objMtdOn:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_TURNON) > 0)                              {                                  result = TelldusNETWrapper.tdTurnOn(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdOn + " Method is not supported on this object.");                              break;                          case objMtdOff:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_TURNOFF) > 0)                              {                                  result = TelldusNETWrapper.tdTurnOff(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdOff + " Method is not supported on this object.");                              break;                          case objMtdToggle:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_TOGGLE) > 0)                              {                                  result = TelldusNETWrapper.TELLSTICK_ERROR_METHOD_NOT_SUPPORTED; // !!!!!!!                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdToggle + " Method is not supported on this object.");                              break;                          case objMtdExecute:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_EXECUTE) > 0)                              {                                  result = TelldusNETWrapper.tdExecute(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdExecute + " Method is not supported on this object.");                              break;                          case objMtdLearn:                              if (TelldusNETWrapper.tdMethods(deviceId' TelldusNETWrapper.TELLSTICK_LEARN) > 0)                              {                                  result = TelldusNETWrapper.tdLearn(deviceId);                                  logResult(method.MethodName' result' o);                                  setLastProperties(o' deviceId' TelldusNETWrapper.tdLastSentCommand(deviceId' TelldusNETWrapper.TELLSTICK_ALL));                              }                              else                                  logW("doCommand"' o.Name' objMtdLearn + " Method is not supported on this object.");                              break;                          case objMtdRestMaxMin:                              switch (o.Type)                              {                                  case objTypeHum:                                      setPropertyValue(o' propMaxHum' o.Property(propHum).Value);                                      setPropertyValue(o' propMinHum' o.Property(propHum).Value);                                      log("doCommand"' o.Name' " Reset Min/Max values.");                                      break;                                  case objTypeTemp:                                      setPropertyValue(o' propMaxTemp' o.Property(propTemp).Value);                                      setPropertyValue(o' propMinTemp' o.Property(propTemp).Value);                                      log("doCommand"' o.Name' " Reset Min/Max values.");                                      break;                                  case objTypeTempHum:                                      setPropertyValue(o' propMaxHum' o.Property(propHum).Value);                                      setPropertyValue(o' propMinHum' o.Property(propHum).Value);                                      setPropertyValue(o' propMaxTemp' o.Property(propTemp).Value);                                      setPropertyValue(o' propMinTemp' o.Property(propTemp).Value);                                      log("doCommand"' o.Name' " Reset Min/Max values.");                                      break;                                  default:                                      logE("doCommand"' o.Name' " Reset Min/Max values."' null);                                      break;                              }                              break;                            case objMtdEnable:                              switch (o.Type)                              {                                  case objTypeHum:                                  case objTypeTemp:                                  case objTypeTempHum:                                      o.SetState(objStatOff);                                      log("doCommand"' o.Name' objStatOff + " Device state set on object.");                                      break;                                  default:                                      o.SetState(objStatUnKnown);                                      log("doCommand"' o.Name' objStatUnKnown + " Device state set on object.");                                      break;                              }                              break;                          case objMtdDis:                              o.SetState(objStatDisable);  // Should be done automatically on method with same name as state' but not working                              log("doCommand"' o.Name' objStatDisable + " Device state set on object.");                              break;                          case objMtdDebugOn:                              if (debug != true)                              {                                  debug = true;                                  log("doCommand"' o.Name' "Method DebugOn' set debug to TRUE.");                              }                              else                                  log("doCommand"' o.Name' "Method DebugOn' debug already set to TRUE.");                              break;                          case objMtdDebugOff:                              if (debug != false)                              {                                  debug = false;                                  log("doCommand"' o.Name' "Method DebugOff' set debug to FALSE.");                              }                              else                                  log("doCommand"' o.Name' "Method DebugOff' debug already set to FALSE.");                              break;                          default:                              logE("doCommand"' o.Name' method.MethodName + "Unsuported method: "' null);                              break;                        }
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,setLastProperties,The following statement contains a magic number: switch (lastCmd)              {                  case TelldusNETWrapper.TELLSTICK_TURNON:                      setPropertyValue(o' propLevel' "100");                      o.SetState(objStatOn);                      break;                  case TelldusNETWrapper.TELLSTICK_TURNOFF:                      setPropertyValue(o' propLevel' "0");                      o.SetState(objStatOff);                      break;                  case TelldusNETWrapper.TELLSTICK_DIM:                      try                      {                          setPropertyValue(o' propLevel' (Decimal.Round((Decimal)(Int32.Parse(TelldusNETWrapper.tdLastSentValue(deviceId)) * (100 / 255.0))).ToString()));                          if (TelldusNETWrapper.tdLastSentValue(deviceId) != "0")                              o.SetState(objStatOn);                          else                              o.SetState(objStatOff);                      }                      catch (Exception)                      {                          setPropertyValue(o' propLevel' "");                          o.SetState(objStatOn);                      }                      break;                  case TelldusNETWrapper.TELLSTICK_TOGGLE:                      if (getPropertyValue(o' propLastCmd) == objEveOn)    // Previous value!                          o.SetState(objStatOff);                      else                          o.SetState(objStatOn);                      break;                  case TelldusNETWrapper.TELLSTICK_BELL:                  case TelldusNETWrapper.TELLSTICK_DOWN:                  case TelldusNETWrapper.TELLSTICK_EXECUTE:                  case TelldusNETWrapper.TELLSTICK_STOP:                  case TelldusNETWrapper.TELLSTICK_UP:                      setPropertyValue(o' propLevel' "");                      o.SetState(objStatOn);                      break;                  default:                      o.SetState(objStatUnKnown);                      break;              }
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,setLastProperties,The following statement contains a magic number: switch (lastCmd)              {                  case TelldusNETWrapper.TELLSTICK_TURNON:                      setPropertyValue(o' propLevel' "100");                      o.SetState(objStatOn);                      break;                  case TelldusNETWrapper.TELLSTICK_TURNOFF:                      setPropertyValue(o' propLevel' "0");                      o.SetState(objStatOff);                      break;                  case TelldusNETWrapper.TELLSTICK_DIM:                      try                      {                          setPropertyValue(o' propLevel' (Decimal.Round((Decimal)(Int32.Parse(TelldusNETWrapper.tdLastSentValue(deviceId)) * (100 / 255.0))).ToString()));                          if (TelldusNETWrapper.tdLastSentValue(deviceId) != "0")                              o.SetState(objStatOn);                          else                              o.SetState(objStatOff);                      }                      catch (Exception)                      {                          setPropertyValue(o' propLevel' "");                          o.SetState(objStatOn);                      }                      break;                  case TelldusNETWrapper.TELLSTICK_TOGGLE:                      if (getPropertyValue(o' propLastCmd) == objEveOn)    // Previous value!                          o.SetState(objStatOff);                      else                          o.SetState(objStatOn);                      break;                  case TelldusNETWrapper.TELLSTICK_BELL:                  case TelldusNETWrapper.TELLSTICK_DOWN:                  case TelldusNETWrapper.TELLSTICK_EXECUTE:                  case TelldusNETWrapper.TELLSTICK_STOP:                  case TelldusNETWrapper.TELLSTICK_UP:                      setPropertyValue(o' propLevel' "");                      o.SetState(objStatOn);                      break;                  default:                      o.SetState(objStatUnKnown);                      break;              }
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,logE,The following statement contains a magic number: logger.Error(procedur.PadRight(v) + pos.ToString().PadRight(3) + value.PadRight(w) + text' ex);
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,logD,The following statement contains a magic number: logger.Debug(procedur.PadRight(v) + pos.ToString().PadRight(3) + value.PadRight(w) + text);
Magic Number,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,logD,The following statement contains a magic number: logger.Debug(procedur.PadRight(v) + pos.ToString().PadRight(3) + value.PadRight(w) + text);
Missing Default,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,getPropertyValue,The following switch statement is missing a default case: switch (p)                  {                      case propModel:                      case propDeviceaddr:                      case propProtocol:                      case propTrustLevel:                      case propAddrComputerName:                      case propPort:                      case propLastCmd:                      case propLevel:                          logD("getPropertyValue"' o.Name' "Property " + p + " does not exist' read ignored."' o);                          s = "";                          break;                      case propMethods:                          logW("getPropertyValue"' o.Name' "Property " + p + " does not exist' no Methods can be executed.");                          s = "";                          break;                      case propDevChgEvent:                      case propAddDevices:                      case propAddSensors:                      case propSystemPlugin:                          logD("getPropertyValue"' o.Name' "Property " + p + " does not exist' default to true."' o);                          s = "TRUE";                          break;                      case propDebug:                      case propRawEvents:                          logD("getPropertyValue"' o.Name' "Property " + p + " does not exist' default to false."' o);                          s = "FALSE";                          break;                      case propAddrPrefix:                          logD("getPropertyValue"' o.Name' "Property " + p + " does not exist' default to 'TellstickId-'."' o);                          s = "TellstickId-";                          break;                      case propAddrPrefixSensor:                          logD("getPropertyValue"' o.Name' "Property " + p + " does not exist' default to 'TellstickSensor-'."' o);                          s = "TellstickSensor-";                          break;                      case propAvgSensors:                          logD("getPropertyValue"' o.Name' "Property " + p + " does not exist' default to 10."' o);                          s = "10";                          break;                      case propDevId:                          logW("getPropertyValue"' o.Name' "Property " + p + " does not exist' property will be recreated.");                          OSAEObjectTypeManager.ObjectTypePropertyAdd(o.Type' propDevId' "Integer"' ""' ""' true'false' propDevId);                         s="";                          break;                      case sensDTTemp:                          logW("getPropertyValue"' o.Name' "Property " + p + " does not exist' property will be recreated.");                          OSAEObjectTypeManager.ObjectTypePropertyAdd(o.Type' propTemp' "Float"' ""' "0"' true' false' propHum);                          s="0";                          break;                      case sensDTHum:                          logW("getPropertyValue"' o.Name' "Property " + p + " does not exist' property will be recreated.");                          OSAEObjectTypeManager.ObjectTypePropertyAdd(o.Type' propHum' "Float"' ""' "0"' true' false' propHum);                          s="0";                          break;                      case propMinHum:                      case propMaxHum:                      case propMinTemp:                      case propMaxTemp:                      case propAvgHum:                      case propAvgTemp:                          logW("getPropertyValue"' o.Name' "Property " + p + " does not exist' property will be recreated.");                          OSAEObjectTypeManager.ObjectTypePropertyAdd(o.Type' p' "Float"' ""' "0"' true' false' "Integer");                          s = "0";                          break;                  }
Missing Default,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,setPropertyValue,The following switch statement is missing a default case: switch (p)                  {                      case propModel:                      case propDeviceaddr:                      case propProtocol:                      case propDevChgEvent:                      case propDevType:                          // These properties are not mandatory' they can be removed' and plugin will work without them                          logD("setPropertyValue"' o.Name' "Property " + p + " does not exist' NOT updated."' o);                          break;                      case propMinHum:                      case propMaxHum:                      case propMinTemp:                      case propMaxTemp:                      case propAvgHum:                      case propAvgTemp:                          logW("setPropertyValue"' o.Name' "Property " + p + " does not exist' property will be recreated.");                          OSAEObjectTypeManager.ObjectTypePropertyAdd(o.Type' p' "Float"' ""' "0"' true' false' p);                          o.SetProperty(p' v' Name);                          break;                      case propDevId:                      case propLevel:                          logW("setPropertyValue"' o.Name' "Property " + p + " does not exist' property will be recreated.");                          OSAEObjectTypeManager.ObjectTypePropertyAdd(o.Type' p' "Integer"' ""' ""' true' false' p);                          o.SetProperty(p' v' Name);                          break;                      case propMethods:                      case propLastCmd:                          logW("setPropertyValue"' o.Name' "Property " + p + " does not exist' property will be recreated.");                          OSAEObjectTypeManager.ObjectTypePropertyAdd(o.Type' p' "String"' ""' ""' true' false' p);                          o.SetProperty(p' v' Name);                          break;                      case sensDTTemp:                          logW("setPropertyValue"' o.Name' "Property " + p + " does not exist' property will be recreated.");                          OSAEObjectTypeManager.ObjectTypePropertyAdd(o.Type' propTemp' "Float"' ""' "0"' true' false' propTemp);                          o.SetProperty(p' v' Name);                          break;                      case sensDTHum:                          logW("setPropertyValue"' o.Name' "Property " + p + " does not exist' property will be recreated.");                          OSAEObjectTypeManager.ObjectTypePropertyAdd(o.Type' propHum' "Float"' ""' "0"' true' false' propTemp);                          o.SetProperty(p' v' Name);                          break;                  }
Missing Default,OSAE.Tellstick,Tellstick,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Tellstick\Tellstick.cs,deviceTypeToString,The following switch statement is missing a default case: switch (deviceType)              {                  case TelldusNETWrapper.TELLSTICK_TYPE_DEVICE:                      str = "Device";                      break;                  case TelldusNETWrapper.TELLSTICK_TYPE_GROUP:                      str = "Group";                      break;                  case TelldusNETWrapper.TELLSTICK_TYPE_SCENE:                      str = "Scene";                      break;              }
