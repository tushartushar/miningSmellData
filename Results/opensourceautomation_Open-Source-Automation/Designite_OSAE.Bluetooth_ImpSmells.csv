Implementation smell,Namespace,Class,File,Method,Description
Long Method,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The method has 107 lines of code.
Complex Method,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,Cyclomatic complexity of the method is 19
Long Statement,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,OwnTypes,The length of the statement  "                OSAEObjectTypeManager.ObjectTypeUpdate(oType.Name' oType.Name' oType.Description' gAppName' oType.BaseType' oType.Owner' oType.SysType' oType.Container' oType.HideRedundant' oType.Tooltip); " is 189.
Long Statement,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The length of the statement  "                bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0); " is 140.
Long Statement,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The length of the statement  "                            OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true); " is 183.
Long Statement,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The length of the statement  "                        if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0)) " is 217.
Long Statement,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The length of the statement  "                        if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0)) " is 215.
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,RunInterface,The following statement contains a magic number: Clock.Interval = iScanInterval * 1000;
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,Bluetooth,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,search,The following statement contains a magic number: try              {                  Guid uuid = BluetoothService.L2CapProtocol;                  BluetoothDeviceInfo bdi;                  BluetoothAddress ba;                  byte tmp;                  bool found = false;                  int discarded;                    try                  {                      bc = new BluetoothClient();                  }                  catch                   {                      Log.Error("No Bluetooth Adapters found!");                      OSAEMethodManager.MethodQueueAdd(gAppName' "OFF"'""'""'gAppName);                      return;                  }                    bc.InquiryLength = new TimeSpan(0' 0' 0' int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Discover Length").Value)' 0);                  nearosaeDevices = bc.DiscoverDevices(10' false' false' true);                    for (int j = 0; j < nearosaeDevices.Length; j++)                  {                      string addr = nearosaeDevices[j].DeviceAddress.ToString();                      Object obj = OSAEObjectManager.GetObjectByAddress(addr);                        if (obj == null)                      {                          if (OSAEObjectPropertyManager.GetObjectPropertyValue(gAppName' "Learning Mode").Value == "TRUE")                          {                              OSAEObjectManager.ObjectAdd(nearosaeDevices[j].DeviceName' ""' nearosaeDevices[j].DeviceName' "BLUETOOTH DEVICE"' nearosaeDevices[j].DeviceAddress.ToString()' string.Empty' 50' true);                              OSAEObjectPropertyManager.ObjectPropertySet(nearosaeDevices[j].DeviceName' "Discover Type"' "0"' gAppName);                              if (gDebug) Log.Debug(addr + " - " + nearosaeDevices[j].DeviceName + ": added to OSA");                          }                      }                  }                    OSAEObjectCollection objects = OSAEObjectManager.GetObjectsByType("BLUETOOTH DEVICE");                    foreach (OSAEObject obj in objects)                  {                      found = false;                      string address = obj.Address;                      byte[] byteArray = HexEncoding.GetBytes(address' out discarded);                      tmp = byteArray[0];                      byteArray[0] = byteArray[5];                      byteArray[5] = tmp;                      tmp = byteArray[1];                      byteArray[1] = byteArray[4];                      byteArray[4] = tmp;                      tmp = byteArray[2];                      byteArray[2] = byteArray[3];                      byteArray[3] = tmp;                      ba = new BluetoothAddress(byteArray);                      bdi = new BluetoothDeviceInfo(ba);                      //if (gDebug) Log.Debug("Begin search for " + address);                        for (int j = 0; j < nearosaeDevices.Length; j++)                      {                          if (nearosaeDevices[j].DeviceAddress.ToString() == address)                          {                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": found with DiscoverDevices");                          }                      }                      if (!found)                          if (gDebug) Log.Debug(address + " - " + obj.Name + ": failed with DiscoverDevices");                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 2 || Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting GetServiceRecords");                                bdi.GetServiceRecords(uuid);                              found = true;                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with GetServiceRecords");                          }                      }                      catch (Exception ex)                      { if (gDebug) Log.Debug(address + " - " + obj.Name + " failed GetServiceRecords. exception: " + ex.Message); }                        try                      {                          if (!found && (int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 3 || int.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(obj.Name' "Discover Type").Value) == 0))                          {                              if (gDebug) Log.Debug(address + " - " + obj.Name + ": attempting Connection");                              //attempt a connect                              BluetoothEndPoint ep;                              ep = new BluetoothEndPoint(bdi.DeviceAddress' BluetoothService.Handsfree);                              //MessageBox.Show("attempt connect: " + pairedDevices[i].DeviceAddress);                              bc.Connect(ep);                              if (gDebug) Log.Debug(address + " - " + obj.Name + " found with Connect attempt");                              bc.Close();                              found = true;                          }                      }                      catch (Exception ex)                      { Log.Error(address + " - " + obj.Name + " failed with Connect attempt. exception: " + ex.Message); }                        if (found)                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                      else                      {                          OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' gAppName);                          if (gDebug) Log.Debug(obj.Name + " Status Updated in osae");                      }                  }              }              catch (Exception ex)              { Log.Error("Error searching for devices"' ex); }
Magic Number,OSAE.Bluetooth,HexEncoding,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,GetByteCount,The following statement contains a magic number: if (numHexChars % 2 != 0)                  numHexChars--;
Magic Number,OSAE.Bluetooth,HexEncoding,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,GetByteCount,The following statement contains a magic number: return numHexChars / 2;
Magic Number,OSAE.Bluetooth,HexEncoding,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,GetBytes,The following statement contains a magic number: if (newString.Length % 2 != 0)              {                  discarded++;                  newString = newString.Substring(0' newString.Length - 1);              }
Magic Number,OSAE.Bluetooth,HexEncoding,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,GetBytes,The following statement contains a magic number: int byteLength = newString.Length / 2;
Magic Number,OSAE.Bluetooth,HexEncoding,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  hex = new String(new char[] { newString[j]' newString[j + 1] });                  bytes[i] = HexToByte(hex);                  j = j + 2;              }
Magic Number,OSAE.Bluetooth,HexEncoding,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,IsHexDigit,The following statement contains a magic number: if (numChar >= numA && numChar < (numA + 6))                  return true;
Magic Number,OSAE.Bluetooth,HexEncoding,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,IsHexDigit,The following statement contains a magic number: if (numChar >= num1 && numChar < (num1 + 10))                  return true;
Magic Number,OSAE.Bluetooth,HexEncoding,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Bluetooth\Bluetooth.cs,HexToByte,The following statement contains a magic number: if (hex.Length > 2 || hex.Length <= 0)                  throw new ArgumentException("hex must be 1 or 2 characters in length");
