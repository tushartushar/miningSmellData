Implementation smell,Namespace,Class,File,Method,Description
Long Method,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The method has 445 lines of code.
Complex Method,OSAE.WeatherPlugin,ObservationStation,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\noaa.cs,InitializeFromXmlNode,Cyclomatic complexity of the method is 9
Complex Method,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,Cyclomatic complexity of the method is 37
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgen,The method has 7 parameters. Parameters: latitude' longitude' product' startTime' endTime' Unit' weatherParameters
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenAsync,The method has 7 parameters. Parameters: latitude' longitude' product' startTime' endTime' Unit' weatherParameters
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenAsync,The method has 8 parameters. Parameters: latitude' longitude' product' startTime' endTime' Unit' weatherParameters' userState
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenLatLonList,The method has 6 parameters. Parameters: listLatLon' product' startTime' endTime' Unit' weatherParameters
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenLatLonListAsync,The method has 6 parameters. Parameters: listLatLon' product' startTime' endTime' Unit' weatherParameters
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenLatLonListAsync,The method has 7 parameters. Parameters: listLatLon' product' startTime' endTime' Unit' weatherParameters' userState
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListSubgrid,The method has 5 parameters. Parameters: lowerLeftLatitude' lowerLeftLongitude' upperRightLatitude' upperRightLongitude' resolution
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListSubgridAsync,The method has 5 parameters. Parameters: lowerLeftLatitude' lowerLeftLongitude' upperRightLatitude' upperRightLongitude' resolution
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListSubgridAsync,The method has 6 parameters. Parameters: lowerLeftLatitude' lowerLeftLongitude' upperRightLatitude' upperRightLongitude' resolution' userState
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListLineAsync,The method has 5 parameters. Parameters: endPoint1Lat' endPoint1Lon' endPoint2Lat' endPoint2Lon' userState
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListSquare,The method has 5 parameters. Parameters: centerPointLat' centerPointLon' distanceLat' distanceLon' resolution
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListSquareAsync,The method has 5 parameters. Parameters: centerPointLat' centerPointLon' distanceLat' distanceLon' resolution
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListSquareAsync,The method has 6 parameters. Parameters: centerPointLat' centerPointLon' distanceLat' distanceLon' resolution' userState
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,GmlLatLonListAsync,The method has 5 parameters. Parameters: listLatLon' requestedTime' featureType' weatherParameters' userState
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,GmlTimeSeries,The method has 6 parameters. Parameters: listLatLon' startTime' endTime' compType' featureType' propertyName
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,GmlTimeSeriesAsync,The method has 6 parameters. Parameters: listLatLon' startTime' endTime' compType' featureType' propertyName
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,GmlTimeSeriesAsync,The method has 7 parameters. Parameters: listLatLon' startTime' endTime' compType' featureType' propertyName' userState
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenByDay,The method has 6 parameters. Parameters: latitude' longitude' startDate' numDays' Unit' format
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenByDayAsync,The method has 6 parameters. Parameters: latitude' longitude' startDate' numDays' Unit' format
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenByDayAsync,The method has 7 parameters. Parameters: latitude' longitude' startDate' numDays' Unit' format' userState
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenByDayLatLonList,The method has 5 parameters. Parameters: listLatLon' startDate' numDays' Unit' format
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenByDayLatLonListAsync,The method has 5 parameters. Parameters: listLatLon' startDate' numDays' Unit' format
Long Parameter List,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenByDayLatLonListAsync,The method has 6 parameters. Parameters: listLatLon' startDate' numDays' Unit' format' userState
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter NDFDgenLatLonListOperationCompleted is 35.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter LatLonListSubgridOperationCompleted is 35.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter LatLonListLineOperationCompleted is 32.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter LatLonListZipCodeOperationCompleted is 35.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter LatLonListCityNamesOperationCompleted is 37.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter LatLonListSquareOperationCompleted is 34.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter CornerPointsOperationCompleted is 30.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter GmlLatLonListOperationCompleted is 31.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter GmlTimeSeriesOperationCompleted is 31.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter NDFDgenByDayOperationCompleted is 30.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter NDFDgenByDayLatLonListOperationCompleted is 40.
Long Identifier,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,,The length of the parameter useDefaultCredentialsSetExplicitly is 34.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather"); " is 123.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather"); " is 130.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather"); " is 131.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather"); " is 135.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather"); " is 138.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather"); " is 132.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather"); " is 131.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                        DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText); " is 140.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather"); " is 136.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather"); " is 133.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                            string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"); " is 172.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                            logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false); " is 157.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                        if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight") " is 154.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather"); " is 148.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather"); " is 150.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                            OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather"); " is 129.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                            OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather"); " is 126.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather"); " is 135.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather"); " is 137.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather"); " is 131.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather"); " is 163.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather"); " is 129.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather"); " is 165.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather"); " is 126.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather"); " is 128.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather"); " is 136.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The length of the statement  "                                                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather"); " is 138.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,SunriseSunset,The length of the statement  "                string strSourceTimezone = webClientTimezone.DownloadString("http://www.earthtools.org/timezone/" + pt.X.ToString() + "/" + pt.Y.ToString()); " is 141.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,SunriseSunset,The length of the statement  "                logging.AddToLog("http://www.earthtools.org/sun/" + pt.X.ToString() + "/" + pt.Y.ToString() + "/" + day + "/" + month + "/" + timeZone + "/" + dst' false); " is 155.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,SunriseSunset,The length of the statement  "                string strSourceSunriseSunset = webClientSunriseSunset.DownloadString("http://www.earthtools.org/sun/" + pt.X.ToString() + "/" + pt.Y.ToString() + "/" + day + "/" + month + "/" + timeZone + "/" + dst); " is 201.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,SunriseSunset,The length of the statement  "                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Sunrise"' xmlSunriseSunset.SelectSingleNode("//sunrise").InnerText' pName); " is 136.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,SunriseSunset,The length of the statement  "                logging.AddToLog("Found sunrise: " + Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd") + " " + xmlSunriseSunset.SelectSingleNode("//sunrise").InnerText).ToString()' false); " is 177.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,SunriseSunset,The length of the statement  "                OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Sunset"' xmlSunriseSunset.SelectSingleNode("//sunset").InnerText' pName); " is 134.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,SunriseSunset,The length of the statement  "                logging.AddToLog("Found sunset: " + Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd") + " " + xmlSunriseSunset.SelectSingleNode("//sunset").InnerText).ToString()' false); " is 175.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,SunriseSunset,The length of the statement  "                //osae.ScheduleQueueAdd(Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd") + " " + xmlSunriseSunset.SelectSingleNode("//sunrise").InnerText)' ""' ""' ""' ""' "Sunrise"' 0); " is 176.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,SunriseSunset,The length of the statement  "                //osae.ScheduleQueueAdd(Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd") + " " + xmlSunriseSunset.SelectSingleNode("//sunset").InnerText)' ""' ""' ""' ""' "Sunset"' 0); " is 174.
Long Statement,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,GetClosest,The length of the statement  "                    double distance = GetDistance((double)latitude' (double)longitude' (double)station.Latitude' (double)station.Longitude); " is 120.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnNDFDgenOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnNDFDgenOperationCompleted,The length of the statement  "                this.NDFDgenCompleted(this' new NDFDgenCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 141.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenLatLonListAsync,The length of the statement  "                this.NDFDgenLatLonListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNDFDgenLatLonListOperationCompleted); " is 127.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnNDFDgenLatLonListOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnNDFDgenLatLonListOperationCompleted,The length of the statement  "                this.NDFDgenLatLonListCompleted(this' new NDFDgenLatLonListCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 161.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListSubgridAsync,The length of the statement  "            this.LatLonListSubgridAsync(lowerLeftLatitude' lowerLeftLongitude' upperRightLatitude' upperRightLongitude' resolution' null); " is 126.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListSubgridAsync,The length of the statement  "                this.LatLonListSubgridOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLonListSubgridOperationCompleted); " is 127.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnLatLonListSubgridOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnLatLonListSubgridOperationCompleted,The length of the statement  "                this.LatLonListSubgridCompleted(this' new LatLonListSubgridCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 161.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListLineAsync,The length of the statement  "                this.LatLonListLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLonListLineOperationCompleted); " is 121.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnLatLonListLineOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnLatLonListLineOperationCompleted,The length of the statement  "                this.LatLonListLineCompleted(this' new LatLonListLineCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 155.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListZipCodeAsync,The length of the statement  "                this.LatLonListZipCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLonListZipCodeOperationCompleted); " is 127.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnLatLonListZipCodeOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnLatLonListZipCodeOperationCompleted,The length of the statement  "                this.LatLonListZipCodeCompleted(this' new LatLonListZipCodeCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 161.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListCityNamesAsync,The length of the statement  "                this.LatLonListCityNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLonListCityNamesOperationCompleted); " is 131.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnLatLonListCityNamesOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnLatLonListCityNamesOperationCompleted,The length of the statement  "                this.LatLonListCityNamesCompleted(this' new LatLonListCityNamesCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 165.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,LatLonListSquareAsync,The length of the statement  "                this.LatLonListSquareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLatLonListSquareOperationCompleted); " is 125.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnLatLonListSquareOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnLatLonListSquareOperationCompleted,The length of the statement  "                this.LatLonListSquareCompleted(this' new LatLonListSquareCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 159.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnCornerPointsOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnCornerPointsOperationCompleted,The length of the statement  "                this.CornerPointsCompleted(this' new CornerPointsCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 151.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnGmlLatLonListOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnGmlLatLonListOperationCompleted,The length of the statement  "                this.GmlLatLonListCompleted(this' new GmlLatLonListCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 153.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnGmlTimeSeriesOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnGmlTimeSeriesOperationCompleted,The length of the statement  "                this.GmlTimeSeriesCompleted(this' new GmlTimeSeriesCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 153.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnNDFDgenByDayOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnNDFDgenByDayOperationCompleted,The length of the statement  "                this.NDFDgenByDayCompleted(this' new NDFDgenByDayCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 151.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,NDFDgenByDayLatLonListAsync,The length of the statement  "                this.NDFDgenByDayLatLonListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNDFDgenByDayLatLonListOperationCompleted); " is 137.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnNDFDgenByDayLatLonListOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,OnNDFDgenByDayLatLonListOperationCompleted,The length of the statement  "                this.NDFDgenByDayLatLonListCompleted(this' new NDFDgenByDayLatLonListCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 171.
Complex Conditional,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The conditional expression  "(today == 0 && day == 2) || (today == 1 && day == 3)"  is complex.
Complex Conditional,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The conditional expression  "(today == 0 && day == 2) || (today == 1 && day == 3)"  is complex.
Complex Conditional,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The conditional expression  "(today == 0 && day == 2) || (today == 1 && day == 3)"  is complex.
Complex Conditional,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The conditional expression  "(today == 0 && day == 2) || (today == 1 && day == 3)"  is complex.
Empty Catch Block,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The method has an empty catch block.
Empty Catch Block,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The method has an empty catch block.
Empty Catch Block,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The method has an empty catch block.
Empty Catch Block,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The method has an empty catch block.
Empty Catch Block,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The method has an empty catch block.
Empty Catch Block,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The method has an empty catch block.
Empty Catch Block,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The method has an empty catch block.
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,RunInterface,The following statement contains a magic number: Clock.Interval = Int32.Parse(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Update Interval").Value) * 60000;
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,RunInterface,The following statement contains a magic number: Clock2.Interval = 24 * 60 * 60000;
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,RunInterface,The following statement contains a magic number: Clock2.Interval = 24 * 60 * 60000;
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,RunInterface,The following statement contains a magic number: Clock2.Interval = 24 * 60 * 60000;
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,update,The following statement contains a magic number: try              {                  string zipcode = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value;                  logging.AddToLog("ZipCode: " + zipcode' false);                  if (zipcode != "")                  {                      List<ObservationStation> stationList = new List<ObservationStation>();                      PointF pt = GetLatLonFromZip(zipcode);                      ObservationStation myStation = new ObservationStation();                      feedUrl = OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Feed URL").Value;                      logging.AddToLog("pt.X: " + pt.X.ToString()' false);                      logging.AddToLog("pt.Y: " + pt.Y.ToString()' false);                      if (pt.X != 0 || pt.Y != 0)                      {                          logging.AddToLog("Enter Update"' false);                          logging.AddToLog("feedUrl: " + feedUrl' false);                            if (feedUrl == "")                          {                                WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString("http://www.weather.gov/xml/current_obs/index.xml");                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                                XmlNodeList xnList = xml.SelectNodes("/wx_station_index/station");                              foreach (XmlNode xn in xnList)                              {                                  ObservationStation obs = new ObservationStation(xn);                                  stationList.Add(obs);                              }                                logging.AddToLog("lat: " + pt.X.ToString()' false);                              logging.AddToLog("lon: " + pt.Y.ToString()' false);                              logging.AddToLog("# of stations: " + stationList.Count.ToString()' false);                              myStation = GetClosest((decimal)pt.Y' (decimal)pt.X' stationList);                              feedUrl = myStation.CurrentObsXmlUrl;                              logging.AddToLog("Found feed: " + feedUrl' false);                          }                            if (feedUrl != "")                          {                              #region current conditions                              WebClient webClient = new WebClient();                              string strSource = webClient.DownloadString(feedUrl);                              webClient.Dispose();                                XmlDocument xml = new XmlDocument();                              xml.LoadXml(strSource);                              //logging.AddToLog(strSource);                                //update all the weather variables                              try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' xml.SelectSingleNode("//temp_f").InnerText' "Weather");                                  logging.AddToLog("Found Temp: " + xml.SelectSingleNode("//temp_f").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Temp"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Temp"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' xml.SelectSingleNode("//weather").InnerText' "Weather");                                  logging.AddToLog("Found Conditions: " + xml.SelectSingleNode("//weather").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Conditions"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Conditions"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' xml.SelectSingleNode("//wind_mph").InnerText' "Weather");                                  logging.AddToLog("Found Wind Speed: " + xml.SelectSingleNode("//wind_mph").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Speed"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Speed"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' xml.SelectSingleNode("//wind_dir").InnerText' "Weather");                                  logging.AddToLog("Found Wind Direction: " + xml.SelectSingleNode("//wind_dir").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Wind Direction"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Wind Direction"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' xml.SelectSingleNode("//relative_humidity").InnerText' "Weather");                                  logging.AddToLog("Found Humidity: " + xml.SelectSingleNode("//relative_humidity").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Humidity"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Humidity"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' xml.SelectSingleNode("//pressure_in").InnerText' "Weather");                                  logging.AddToLog("Found Pressure: " + xml.SelectSingleNode("//pressure_in").InnerText' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Pressure"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Pressure"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' xml.SelectSingleNode("//dewpoint_f").InnerText' "Weather");                                  logging.AddToLog("Found Dewpoint: " + xml.SelectSingleNode("//dewpoint_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Dewpoint"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Dewpoint"' ""' "Weather");                              }                                try                              {                                  string curpath = @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText;                                  if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xml.SelectSingleNode("//icon_url_name").InnerText))                                      {                                          DownloadImage di = new DownloadImage(xml.SelectSingleNode("//icon_url_base").InnerText + xml.SelectSingleNode("//icon_url_name").InnerText);                                                                                    logging.AddToLog("Saving image: " + curpath' false);                                          di.Download();                                          di.SaveImage(Common.ApiPath + curpath' ImageFormat.Jpeg);                                      }                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' curpath' "Weather");                                  logging.AddToLog("Found Image: " + curpath' false);                              }                              catch                               {                                   logging.AddToLog("Error getting Image"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Image"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' xml.SelectSingleNode("//visibility_mi").InnerText' "Weather");                                  logging.AddToLog("Found Visibility: " + xml.SelectSingleNode("//visibility_mi").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Visibility"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Visibility"' ""' "Weather");                              }                                try                              {                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' xml.SelectSingleNode("//windchill_f").InnerText' "Weather");                                  logging.AddToLog("Found Windchill: " + xml.SelectSingleNode("//windchill_f").InnerText' false);                              }                              catch                               {                                  logging.AddToLog("Error getting Windchill"' false);                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Windchill"' ""' "Weather");                              }                                #endregion                           }                                                    #region Forecasts                          try                          {                              WebClient webClientForcast = new WebClient();                              string strSourceForcast = webClientForcast.DownloadString("http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml");                              webClientForcast.Dispose();                              logging.AddToLog("Forecast XML: " + "http://forecast.weather.gov/MapClick.php?lat=" + pt.X.ToString() + "&lon=" + pt.Y.ToString() + "&FcstType=dwml"' false);                                XmlDocument xmlForcast = new XmlDocument();                              xmlForcast.LoadXml(strSourceForcast);                                XmlNode temp = null;                              XmlNodeList tempList = xmlForcast.SelectNodes("//time-layout");                              foreach (XmlNode xn in tempList)                              {                                  logging.AddToLog("nodes: " + xn.ChildNodes.Count.ToString()' false);                                  if (xn.ChildNodes.Count > 10)                                  {                                      temp = xn;                                      break;                                  }                              }                                                            int day = 2;                              int today = 0;                              try                              {                                                                    foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "start-valid-time")                                      {                                          if (xn.Attributes["period-name"].Value == "Today" || xn.Attributes["period-name"].Value == "This Afternoon")                                              today = 1;                                          if (xn.Attributes["period-name"].Value != "Today" && xn.Attributes["period-name"].Value != "Tonight" && xn.Attributes["period-name"].Value != "Overnight")                                          {                                              if (day % 2 == 0)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Day" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day / 2).ToString() + " Label"' xn.Attributes["period-name"].Value' "Weather");                                                  logging.AddToLog("Night" + (day / 2).ToString() + " Label: " + xn.Attributes["period-name"].Value' false);                                                }                                              day++;                                          }                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='maximum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (today == 1 && day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Today High: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + (day - today).ToString() + " High"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Day" + (day - today).ToString() + " High: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//temperature[@type='minimum']");                                  day = 1;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                          if (day == 1)                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Tonight Low: " + xn.InnerText' false);                                          }                                          else                                          {                                              OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + (day - 1).ToString() + " Low"' xn.InnerText' "Weather");                                              logging.AddToLog("Found Night" + (day - 1).ToString() + " Low: " + xn.InnerText' false);                                          }                                          day++;                                      }                                    }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//probability-of-precipitation");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "value")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Precip: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Precip"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Precip: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//weather");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "weather-conditions")                                      {                                          if (day % 2 == today)                                          {                                                if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Tonight Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Today Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Forecast"' xn.Attributes["weather-summary"].Value' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Forecast: " + xn.Attributes["weather-summary"].Value' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch { }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//conditions-icon");                                  string path = "";                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "icon-link")                                      {                                          path = @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText;                                          if (!File.Exists(Common.ApiPath + @"\Images\Weather\" + xn.SelectSingleNode("//icon_url_name").InnerText))                                          {                                                DownloadImage di = new DownloadImage(xn.InnerText);                                                logging.AddToLog("Saving image: " + path' false);                                              di.Download();                                              di.SaveImage(Common.ApiPath + path' ImageFormat.Jpeg);                                          }                                          if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                    OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Image"' path' "Weather");                                                  logging.AddToLog("Tonight Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Image"' path' "Weather");                                                  logging.AddToLog("Today Image: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Image"' path' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Image: " + xn.InnerText' false);                                              }                                          }                                          day++;                                      }                                      }                              }                              catch {  }                                try                              {                                  temp = xmlForcast.SelectSingleNode("//wordedForecast");                                  day = 2;                                  foreach (XmlNode xn in temp.ChildNodes)                                  {                                        if (xn.Name == "text")                                      {                                            if (day % 2 == today)                                          {                                              if ((today == 0 && day == 2) || (today == 1 && day == 3))                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Tonight Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Tonight Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Night" + ((day / 2) - 1).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Night" + ((day / 2) - 1).ToString() + " Summary: " + xn.InnerText' false);                                              }                                            }                                          else                                          {                                              if (today == 1 && day == 2)                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Today Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Today Summary: " + xn.InnerText' false);                                              }                                              else                                              {                                                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Day" + ((day / 2) - today).ToString() + " Summary"' xn.InnerText' "Weather");                                                  logging.AddToLog("Day" + ((day / 2)-today).ToString() + " Summary: " + xn.InnerText' false);                                              }                                          }                                          day++;                                        }                                              }                              }                              catch { }                          }                          catch (Exception ex)                          {                              logging.AddToLog("Error Forecast XML: " + ex.Message' true);                          }                          #endregion                              OSAEObjectStateManager.ObjectStateSet("Weather Data"' "ON"' pName);                          OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Last Updated"' DateTime.Now.ToString()' pName);                      }                  }              }              catch (Exception ex)              {                  logging.AddToLog("Error updating weather - " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,SunriseSunset,The following statement contains a magic number: try              {                  logging.AddToLog("Starting sunrise and sunset update"' false);                  PointF pt = GetLatLonFromZip(OSAEObjectPropertyManager.GetObjectPropertyValue(pName' "Zipcode").Value);                    WebClient webClientTimezone = new WebClient();                  string strSourceTimezone = webClientTimezone.DownloadString("http://www.earthtools.org/timezone/" + pt.X.ToString() + "/" + pt.Y.ToString());                  webClientTimezone.Dispose();                  XmlDocument xmlTimezone = new XmlDocument();                  xmlTimezone.LoadXml(strSourceTimezone);                  string timeZone = xmlTimezone.SelectSingleNode("//offset").InnerText;                  string dst = xmlTimezone.SelectSingleNode("//dst").InnerText;                  string date = xmlTimezone.SelectSingleNode("//isotime").InnerText;                  string[] tmp = date.Split(' ');                  tmp = tmp[0].Split('-');                  string day = tmp[2];                  string month = tmp[1];                  if (dst == "True")                      dst = "1";                  else                      dst = "0";                  logging.AddToLog("http://www.earthtools.org/sun/" + pt.X.ToString() + "/" + pt.Y.ToString() + "/" + day + "/" + month + "/" + timeZone + "/" + dst' false);                        WebClient webClientSunriseSunset = new WebClient();                  string strSourceSunriseSunset = webClientSunriseSunset.DownloadString("http://www.earthtools.org/sun/" + pt.X.ToString() + "/" + pt.Y.ToString() + "/" + day + "/" + month + "/" + timeZone + "/" + dst);                  webClientSunriseSunset.Dispose();                  XmlDocument xmlSunriseSunset = new XmlDocument();                  xmlSunriseSunset.LoadXml(strSourceSunriseSunset);                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Sunrise"' xmlSunriseSunset.SelectSingleNode("//sunrise").InnerText' pName);                  logging.AddToLog("Found sunrise: " + Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd") + " " + xmlSunriseSunset.SelectSingleNode("//sunrise").InnerText).ToString()' false);                  OSAEObjectPropertyManager.ObjectPropertySet("Weather Data"' "Sunset"' xmlSunriseSunset.SelectSingleNode("//sunset").InnerText' pName);                  logging.AddToLog("Found sunset: " + Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd") + " " + xmlSunriseSunset.SelectSingleNode("//sunset").InnerText).ToString()' false);                    //osae.ScheduleQueueAdd(Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd") + " " + xmlSunriseSunset.SelectSingleNode("//sunrise").InnerText)' ""' ""' ""' ""' "Sunrise"' 0);                  //osae.ScheduleQueueAdd(Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd") + " " + xmlSunriseSunset.SelectSingleNode("//sunset").InnerText)' ""' ""' ""' ""' "Sunset"' 0);              }              catch (Exception ex)              {                  logging.AddToLog("Error getting sunrise/sunset: " + ex.Message' true);              }
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,GetClosest,The following statement contains a magic number: double minDistance = 10000;
Magic Number,OSAE.WeatherPlugin,WeatherPlugin,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Weather.cs,ToRadians,The following statement contains a magic number: return (degrees * Math.PI) / 180;
Magic Number,OSAE.Weather.gov.weather.www,ndfdXML,C:\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.Weather\Web References\gov.weather.www\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024)                           && (string.Compare(wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {                  return true;              }
