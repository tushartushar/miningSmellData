Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,LoadPlugins,Cyclomatic complexity of the method is 12
Complex Method,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,PluginMessageReceived,Cyclomatic complexity of the method is 8
Long Statement,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,LoadPlugins,The length of the statement  "                            OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' name' 50' true); " is 130.
Long Statement,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,LoadPlugins,The length of the statement  "                                //NetworkComms.SendObject("Plugin"' Common.WcfServer' 10051' plugin.PluginName + "|" + plugin.Status + "|" + plugin.PluginVersion + "|" + plugin.Enabled); " is 154.
Long Statement,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,LoadPlugins,The length of the statement  "                                UDPConnection.SendObject("Plugin"' plugin.PluginName + " | " + plugin.Enabled.ToString() + " | " + plugin.PluginVersion + " | Stopped | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051)); " is 273.
Long Statement,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,LoadPlugins,The length of the statement  "                        UDPConnection.SendObject("Plugin"' plugin.PluginName + " | ON | " + plugin.PluginVersion + " | Started | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051)); " is 242.
Long Statement,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,PluginMessageReceived,The length of the statement  "                            //OSAEObjectManager.ObjectUpdate(p.PluginName' p.PluginName' obj.Alias' obj.Description' obj.Type' obj.Address' obj.Container' obj.MinTrustLevel' true); " is 152.
Long Statement,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,PluginMessageReceived,The length of the statement  "                            //OSAEObjectManager.ObjectUpdate(p.PluginName' p.PluginName' obj.Alias' obj.Description' obj.Type' obj.Address' obj.Container' obj.MinTrustLevel' false); " is 153.
Long Statement,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,MethodMessageReceived,The length of the statement  "            //ObjectName + " | " + MethodName + " | " + Parameter1 + " | " + Parameter2 + " | " + Address + " | " + Owner + " | " +From' new IPEndPoint(IPAddress.Broadcast' 10051)); " is 169.
Long Statement,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,MethodMessageReceived,The length of the statement  "            OSAEMethod method = new OSAEMethod(items[0].Trim()' items[1].Trim()' ""' items[2].Trim()' items[3].Trim()' items[4].Trim()' items[5].Trim()' items[6].Trim()); " is 158.
Long Statement,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,startPlugin,The length of the statement  "            //OSAEObjectManager.ObjectUpdate(plugin.PluginName' plugin.PluginName' obj.Alias' obj.Description' obj.Type' obj.Address' obj.Container' obj.MinTrustLevel' true); " is 162.
Long Statement,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,stopPlugin,The length of the statement  "            //OSAEObjectManager.ObjectUpdate(p.PluginName' p.PluginName' obj.Alias' obj.Description' obj.Type' obj.Address' obj.Container' obj.MinTrustLevel' false); " is 153.
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,ClientService,The following statement contains a magic number: if (!found)                  OSAEObjectManager.ObjectAdd(serviceObject' ""' "SERVICE"' "SERVICE"' ""' Common.ComputerName' 50' true);              else              {                  OSAEObject obj = OSAEObjectManager.GetObjectByName(serviceObject);                  OSAEObjectManager.ObjectUpdate(serviceObject' serviceObject' ""' obj.Description' obj.Type' ""' Common.ComputerName' obj.MinTrustLevel' obj.Enabled);              }
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,OnStart,The following statement contains a magic number: try              {                  Log.Debug("Starting UDP listener");                  string ip = Common.LocalIPAddress();                  NetworkComms.AppendGlobalIncomingPacketHandler<string>("Plugin"' PluginMessageReceived);                  NetworkComms.AppendGlobalIncomingPacketHandler<string>("Commmand"' MethodMessageReceived);                  NetworkComms.AppendGlobalIncomingPacketHandler<string>("Method"' MethodMessageReceived);                  //Start listening for incoming UDP data                  //UDPConnection.StartListening(new IPEndPoint(IPAddress.Any' 10051));                  TCPConnection.StartListening(new IPEndPoint(IPAddress.Parse(ip)' 10051));                  Log.Debug("UPD Listener started");              }              catch (Exception ex)              { Log.Error("Error starting listener"' ex); }
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,LoadPlugins,The following statement contains a magic number: foreach (Plugin plugin in plugins)              {                  try                  {                      Log.Info("---------------------------------------");                      Log.Info("plugin name: " + plugin.PluginName);                      Log.Info("plugin type: " + plugin.PluginType);                        if (plugin.PluginName != "")                      {                          OSAEObject obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                            if (obj == null)                          {                              OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' name' 50' true);                              Log.Info(obj.Name + ":  Plugin Object Not found.  Plugin Object Created.");                              obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                              if (obj == null) Log.Info(obj.Name + ":  I failed to create the Plugin Object!");                          }                            if (obj != null)                          {                              Log.Info("Plugin Object found: " + plugin.PluginName);                              bool isSystemPlugin = false;                              foreach (OSAEObjectProperty p in obj.Properties)                              {                                  if (p.Name == "System Plugin")                                  {                                      if (p.Value == "TRUE") isSystemPlugin = true;                                      break;                                  }                              }                              Log.Info("isSystemPlugin?: " + isSystemPlugin.ToString());                              if (!isSystemPlugin)                              {                                  if (obj.Enabled == true)                                  {                                      try                                      {                                          startPlugin(plugin);                                      }                                      catch (Exception ex)                                      { Log.Error("Error activating plugin (" + plugin.PluginName + ")"' ex); }                                  }                                  else                                      plugin.Enabled = false;                                    Log.Info("status: " + plugin.Enabled.ToString());                                  Log.Info("PluginName: " + plugin.PluginName);                                  Log.Info("PluginVersion: " + plugin.PluginVersion);                                  OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Version"' plugin.PluginVersion' name);                                  OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Author"' plugin.PluginAuthor' name);                                    //NetworkComms.SendObject("Plugin"' Common.WcfServer' 10051' plugin.PluginName + "|" + plugin.Status + "|" + plugin.PluginVersion + "|" + plugin.Enabled);                                  UDPConnection.SendObject("Plugin"' plugin.PluginName + " | " + plugin.Enabled.ToString() + " | " + plugin.PluginVersion + " | Stopped | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                              }                          }                      }                      else                      {                          Log.Info("Plugin object does not exist in DB: " + plugin.PluginName);                          OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName' plugin.PluginType' ""' "System"'50' true);                          Log.Info("Plugin added to DB: " + plugin.PluginName);                          UDPConnection.SendObject("Plugin"' plugin.PluginName + " | ON | " + plugin.PluginVersion + " | Started | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                      }                  }                  catch (Exception ex)                  { Log.Error("Error loading plugin!"' ex); }              }
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,LoadPlugins,The following statement contains a magic number: foreach (Plugin plugin in plugins)              {                  try                  {                      Log.Info("---------------------------------------");                      Log.Info("plugin name: " + plugin.PluginName);                      Log.Info("plugin type: " + plugin.PluginType);                        if (plugin.PluginName != "")                      {                          OSAEObject obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                            if (obj == null)                          {                              OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' name' 50' true);                              Log.Info(obj.Name + ":  Plugin Object Not found.  Plugin Object Created.");                              obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                              if (obj == null) Log.Info(obj.Name + ":  I failed to create the Plugin Object!");                          }                            if (obj != null)                          {                              Log.Info("Plugin Object found: " + plugin.PluginName);                              bool isSystemPlugin = false;                              foreach (OSAEObjectProperty p in obj.Properties)                              {                                  if (p.Name == "System Plugin")                                  {                                      if (p.Value == "TRUE") isSystemPlugin = true;                                      break;                                  }                              }                              Log.Info("isSystemPlugin?: " + isSystemPlugin.ToString());                              if (!isSystemPlugin)                              {                                  if (obj.Enabled == true)                                  {                                      try                                      {                                          startPlugin(plugin);                                      }                                      catch (Exception ex)                                      { Log.Error("Error activating plugin (" + plugin.PluginName + ")"' ex); }                                  }                                  else                                      plugin.Enabled = false;                                    Log.Info("status: " + plugin.Enabled.ToString());                                  Log.Info("PluginName: " + plugin.PluginName);                                  Log.Info("PluginVersion: " + plugin.PluginVersion);                                  OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Version"' plugin.PluginVersion' name);                                  OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Author"' plugin.PluginAuthor' name);                                    //NetworkComms.SendObject("Plugin"' Common.WcfServer' 10051' plugin.PluginName + "|" + plugin.Status + "|" + plugin.PluginVersion + "|" + plugin.Enabled);                                  UDPConnection.SendObject("Plugin"' plugin.PluginName + " | " + plugin.Enabled.ToString() + " | " + plugin.PluginVersion + " | Stopped | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                              }                          }                      }                      else                      {                          Log.Info("Plugin object does not exist in DB: " + plugin.PluginName);                          OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName' plugin.PluginType' ""' "System"'50' true);                          Log.Info("Plugin added to DB: " + plugin.PluginName);                          UDPConnection.SendObject("Plugin"' plugin.PluginName + " | ON | " + plugin.PluginVersion + " | Started | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                      }                  }                  catch (Exception ex)                  { Log.Error("Error loading plugin!"' ex); }              }
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,LoadPlugins,The following statement contains a magic number: foreach (Plugin plugin in plugins)              {                  try                  {                      Log.Info("---------------------------------------");                      Log.Info("plugin name: " + plugin.PluginName);                      Log.Info("plugin type: " + plugin.PluginType);                        if (plugin.PluginName != "")                      {                          OSAEObject obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                            if (obj == null)                          {                              OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' name' 50' true);                              Log.Info(obj.Name + ":  Plugin Object Not found.  Plugin Object Created.");                              obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                              if (obj == null) Log.Info(obj.Name + ":  I failed to create the Plugin Object!");                          }                            if (obj != null)                          {                              Log.Info("Plugin Object found: " + plugin.PluginName);                              bool isSystemPlugin = false;                              foreach (OSAEObjectProperty p in obj.Properties)                              {                                  if (p.Name == "System Plugin")                                  {                                      if (p.Value == "TRUE") isSystemPlugin = true;                                      break;                                  }                              }                              Log.Info("isSystemPlugin?: " + isSystemPlugin.ToString());                              if (!isSystemPlugin)                              {                                  if (obj.Enabled == true)                                  {                                      try                                      {                                          startPlugin(plugin);                                      }                                      catch (Exception ex)                                      { Log.Error("Error activating plugin (" + plugin.PluginName + ")"' ex); }                                  }                                  else                                      plugin.Enabled = false;                                    Log.Info("status: " + plugin.Enabled.ToString());                                  Log.Info("PluginName: " + plugin.PluginName);                                  Log.Info("PluginVersion: " + plugin.PluginVersion);                                  OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Version"' plugin.PluginVersion' name);                                  OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Author"' plugin.PluginAuthor' name);                                    //NetworkComms.SendObject("Plugin"' Common.WcfServer' 10051' plugin.PluginName + "|" + plugin.Status + "|" + plugin.PluginVersion + "|" + plugin.Enabled);                                  UDPConnection.SendObject("Plugin"' plugin.PluginName + " | " + plugin.Enabled.ToString() + " | " + plugin.PluginVersion + " | Stopped | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                              }                          }                      }                      else                      {                          Log.Info("Plugin object does not exist in DB: " + plugin.PluginName);                          OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName' plugin.PluginType' ""' "System"'50' true);                          Log.Info("Plugin added to DB: " + plugin.PluginName);                          UDPConnection.SendObject("Plugin"' plugin.PluginName + " | ON | " + plugin.PluginVersion + " | Started | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                      }                  }                  catch (Exception ex)                  { Log.Error("Error loading plugin!"' ex); }              }
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,LoadPlugins,The following statement contains a magic number: foreach (Plugin plugin in plugins)              {                  try                  {                      Log.Info("---------------------------------------");                      Log.Info("plugin name: " + plugin.PluginName);                      Log.Info("plugin type: " + plugin.PluginType);                        if (plugin.PluginName != "")                      {                          OSAEObject obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                            if (obj == null)                          {                              OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName + " plugin's Object"' plugin.PluginType' ""' name' 50' true);                              Log.Info(obj.Name + ":  Plugin Object Not found.  Plugin Object Created.");                              obj = OSAEObjectManager.GetObjectByName(plugin.PluginName);                              if (obj == null) Log.Info(obj.Name + ":  I failed to create the Plugin Object!");                          }                            if (obj != null)                          {                              Log.Info("Plugin Object found: " + plugin.PluginName);                              bool isSystemPlugin = false;                              foreach (OSAEObjectProperty p in obj.Properties)                              {                                  if (p.Name == "System Plugin")                                  {                                      if (p.Value == "TRUE") isSystemPlugin = true;                                      break;                                  }                              }                              Log.Info("isSystemPlugin?: " + isSystemPlugin.ToString());                              if (!isSystemPlugin)                              {                                  if (obj.Enabled == true)                                  {                                      try                                      {                                          startPlugin(plugin);                                      }                                      catch (Exception ex)                                      { Log.Error("Error activating plugin (" + plugin.PluginName + ")"' ex); }                                  }                                  else                                      plugin.Enabled = false;                                    Log.Info("status: " + plugin.Enabled.ToString());                                  Log.Info("PluginName: " + plugin.PluginName);                                  Log.Info("PluginVersion: " + plugin.PluginVersion);                                  OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Version"' plugin.PluginVersion' name);                                  OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Author"' plugin.PluginAuthor' name);                                    //NetworkComms.SendObject("Plugin"' Common.WcfServer' 10051' plugin.PluginName + "|" + plugin.Status + "|" + plugin.PluginVersion + "|" + plugin.Enabled);                                  UDPConnection.SendObject("Plugin"' plugin.PluginName + " | " + plugin.Enabled.ToString() + " | " + plugin.PluginVersion + " | Stopped | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                              }                          }                      }                      else                      {                          Log.Info("Plugin object does not exist in DB: " + plugin.PluginName);                          OSAEObjectManager.ObjectAdd(plugin.PluginName' ""' plugin.PluginName' plugin.PluginType' ""' "System"'50' true);                          Log.Info("Plugin added to DB: " + plugin.PluginName);                          UDPConnection.SendObject("Plugin"' plugin.PluginName + " | ON | " + plugin.PluginVersion + " | Started | " + plugin.LatestAvailableVersion + " | " + plugin.PluginType + " | " + Common.ComputerName' new IPEndPoint(IPAddress.Broadcast' 10051));                      }                  }                  catch (Exception ex)                  { Log.Error("Error loading plugin!"' ex); }              }
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,MethodMessageReceived,The following statement contains a magic number: OSAEMethod method = new OSAEMethod(items[0].Trim()' items[1].Trim()' ""' items[2].Trim()' items[3].Trim()' items[4].Trim()' items[5].Trim()' items[6].Trim());
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,MethodMessageReceived,The following statement contains a magic number: OSAEMethod method = new OSAEMethod(items[0].Trim()' items[1].Trim()' ""' items[2].Trim()' items[3].Trim()' items[4].Trim()' items[5].Trim()' items[6].Trim());
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,MethodMessageReceived,The following statement contains a magic number: OSAEMethod method = new OSAEMethod(items[0].Trim()' items[1].Trim()' ""' items[2].Trim()' items[3].Trim()' items[4].Trim()' items[5].Trim()' items[6].Trim());
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,MethodMessageReceived,The following statement contains a magic number: OSAEMethod method = new OSAEMethod(items[0].Trim()' items[1].Trim()' ""' items[2].Trim()' items[3].Trim()' items[4].Trim()' items[5].Trim()' items[6].Trim());
Magic Number,OSAE.ClientService,ClientService,C:\repos\opensourceautomation_Open-Source-Automation\Services\ClientService\ClientService.cs,MethodMessageReceived,The following statement contains a magic number: OSAEMethod method = new OSAEMethod(items[0].Trim()' items[1].Trim()' ""' items[2].Trim()' items[3].Trim()' items[4].Trim()' items[5].Trim()' items[6].Trim());
