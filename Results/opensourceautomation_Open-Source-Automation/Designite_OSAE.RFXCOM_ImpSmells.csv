Implementation smell,Namespace,Class,File,Method,Description
Long Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The method has 238 lines of code.
Long Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_messages,The method has 134 lines of code.
Long Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_InterfaceMessage,The method has 235 lines of code.
Long Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The method has 150 lines of code.
Long Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The method has 165 lines of code.
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,Cyclomatic complexity of the method is 27
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_messages,Cyclomatic complexity of the method is 20
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_InterfaceMessage,Cyclomatic complexity of the method is 59
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UNDECODED,Cyclomatic complexity of the method is 16
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting2,Cyclomatic complexity of the method is 10
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting5,Cyclomatic complexity of the method is 21
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,Cyclomatic complexity of the method is 13
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,Cyclomatic complexity of the method is 30
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,Cyclomatic complexity of the method is 13
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,Cyclomatic complexity of the method is 9
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,Cyclomatic complexity of the method is 38
Complex Method,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,Cyclomatic complexity of the method is 12
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_InterfaceMessage,The length of the statement  "                            Log.Error("ERROR: Unexpected response for Packet type=" + recbuf[(byte)IRESPONSE.packettype].ToString() + "' Sub type=" + recbuf[(byte)IRESPONSE.subtype].ToString() + " cmnd=" + recbuf[(byte)IRESPONSE.cmnd].ToString()); " is 219.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_RecXmitMessage,The length of the statement  "                    Log.Error("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)RXRESPONSE.packettype].ToString() + ": " + recbuf[(byte)RXRESPONSE.subtype].ToString()); " is 156.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UNDECODED,The length of the statement  "                    Log.Error("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)UNDECODED.packettype] + ": " + recbuf[(byte)UNDECODED.subtype]); " is 132.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting2,The length of the statement  "                    Log.Error("ERROR: Unknown Sub type for Packet type=" + Convert.ToInt32(recbuf[(byte)LIGHTING2.packettype]) + ": " + Convert.ToInt32(recbuf[(byte)LIGHTING2.subtype])); " is 166.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting5,The length of the statement  "                    obj = OSAEObjectManager.GetObjectByAddress("0" + recbuf[(byte)LIGHTING5.id1].ToString() + "-0" + recbuf[(byte)LIGHTING5.id2].ToString() + "-0" + recbuf[(byte)LIGHTING5.id3].ToString() + "-" + recbuf[(byte)LIGHTING5.unitcode].ToString());  " is 237.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting5,The length of the statement  "                    Log.Debug("ID            = " + "0" + recbuf[(byte)LIGHTING5.id1].ToString() + "-0" + recbuf[(byte)LIGHTING5.id2] + "-0" + recbuf[(byte)LIGHTING5.id3].ToString()); " is 162.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting5,The length of the statement  "                            Log.Debug("Command       = Set dim level to: " + Convert.ToInt32((recbuf[(byte)LIGHTING5.level] * 3.2)).ToString() + "%"); " is 122.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting5,The length of the statement  "                    obj = OSAEObjectManager.GetObjectByAddress("0" + recbuf[(byte)LIGHTING5.id1].ToString() + "-0" + recbuf[(byte)LIGHTING5.id2].ToString() + "-" + recbuf[(byte)LIGHTING5.unitcode].ToString());  " is 189.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting5,The length of the statement  "                    Log.Debug("ID            = " + "0" + recbuf[(byte)LIGHTING5.id1].ToString() + "-0" + recbuf[(byte)LIGHTING5.id2].ToString()); " is 125.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting5,The length of the statement  "                    Log.Error("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)LIGHTING5.packettype].ToString() + ": " + recbuf[(byte)LIGHTING5.subtype].ToString()); " is 154.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The length of the statement  "            OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString()); " is 122.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The length of the statement  "                OSAEObjectManager.ObjectAdd("Temperature Sensor - " + (recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString()' ""' "Temperature Sensor"' "OS TEMP SENSOR"' (recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString()' ""' 30' true); " is 248.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The length of the statement  "                        Log.Debug("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)TEMP.packettype].ToString() + ":" + recbuf[(byte)TEMP.subtype].ToString()); " is 143.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Hum,The length of the statement  "            OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString()); " is 120.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Hum,The length of the statement  "                OSAEObjectManager.ObjectAdd("Humidity Sensor - " + (recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString()' ""' "Humidity Sensor"' "HUMIDITY METER"' (recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString()' ""' 30' true); " is 238.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The length of the statement  "            OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString()); " is 130.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The length of the statement  "                OSAEObjectManager.ObjectAdd("Temp and Humidity Sensor - " + (recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString()' ""' "Temp and Humidity Sensor"' "TEMP HUM METER"' (recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString()' ""' 30' true); " is 276.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The length of the statement  "                obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString()); " is 125.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The length of the statement  "                    Log.Debug("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)TEMP_HUM.packettype] + ":" + recbuf[(byte)TEMP_HUM.subtype]); " is 129.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The length of the statement  "                Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F"); " is 180.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The length of the statement  "                OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName); " is 217.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The length of the statement  "                Log.Debug("Temperature   = -" + (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F"); " is 181.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The length of the statement  "                OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' "-" + (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName); " is 223.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The length of the statement  "            OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString()); " is 140.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The length of the statement  "                OSAEObjectManager.ObjectAdd("Temp' Humidity and Baro Sensor - " + (recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString()' ""' "Temp' Humidity and Baro Sensor"' "TEMP HUM BARO METER"' (recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString()' ""' 30' true); " is 313.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The length of the statement  "                obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString()); " is 135.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The length of the statement  "                    Log.Debug("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)TEMP_HUM_BARO.packettype] + ":" + recbuf[(byte)TEMP_HUM_BARO.subtype]); " is 139.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The length of the statement  "                Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F"); " is 190.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The length of the statement  "                OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName); " is 227.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The length of the statement  "                Log.Debug("Temperature   = -" + (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F"); " is 191.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The length of the statement  "                OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' "-" + (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName); " is 233.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The length of the statement  "            OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Humidity"' recbuf[(byte)TEMP_HUM_BARO.humidity].ToString()' pName); " is 122.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The length of the statement  "            OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Barometer"' recbuf[(byte)TEMP_HUM_BARO.baroh] * 256 + recbuf[(byte)TEMP_HUM_BARO.barol].ToString()' pName); " is 162.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The length of the statement  "            OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString()); " is 122.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The length of the statement  "                OSAEObjectManager.ObjectAdd("Rain Meter - " + (recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString()' ""' "Rain Meter"' "OS RAIN METER"' (recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString()' ""' 30' true); " is 231.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The length of the statement  "                    Log.Error("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)RAIN.packettype].ToString() + ":" + recbuf[(byte)RAIN.subtype].ToString()); " is 143.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The length of the statement  "                Log.Error("Rain rate     = " + ((recbuf[(byte)RAIN.rainrateh] * 256) + recbuf[(byte)RAIN.rainratel]).ToString() + " mm/h"); " is 123.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The length of the statement  "                OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Rain Rate"' ((recbuf[(byte)RAIN.rainrateh] * 256) + recbuf[(byte)RAIN.rainratel]).ToString()' pName); " is 156.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The length of the statement  "                Log.Error("Rain rate     = " + (((recbuf[(byte)RAIN.rainrateh] * 256) + recbuf[(byte)RAIN.rainratel]) / 100).ToString() + " mm/h"); " is 131.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The length of the statement  "                OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Rain Rate"' (((recbuf[(byte)RAIN.rainrateh] * 256) + recbuf[(byte)RAIN.rainratel]) / 100).ToString()' pName); " is 164.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The length of the statement  "            Log.Error("Total rain    = " + Math.Round((double)((recbuf[(byte)RAIN.raintotal1] * 65535) + recbuf[(byte)RAIN.raintotal2] * 256 + recbuf[(byte)RAIN.raintotal3]) / 10' 2).ToString() + " mm"); " is 191.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The length of the statement  "            OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Total Rain"' Math.Round((double)((recbuf[(byte)RAIN.raintotal1] * 65535) + recbuf[(byte)RAIN.raintotal2] * 256 + recbuf[(byte)RAIN.raintotal3]) / 10' 2).ToString()' pName); " is 227.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "            OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString()); " is 122.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                OSAEObjectManager.ObjectAdd("Wind Sensor - " + (recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString()' ""' "Wind Sensor"' "WIND SENSOR"' (recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString()' ""' 30' true); " is 231.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                    Log.Debug("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)WIND.packettype] + ":" + recbuf[(byte)WIND.subtype]); " is 121.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "            OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Direction"' intDirection.ToString() + " degrees  " + strDirection' pName); " is 129.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                Log.Debug("Average speed = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph"); " is 202.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Average Speed"' Math.Round((intSpeed * 0.223693629) / 10' 2).ToString()' pName); " is 135.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "            Log.Debug("Wind gust     = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph"); " is 202.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "            OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Wind Gust"' Math.Round((intSpeed * 0.223693629) / 10' 2).ToString()' pName);  " is 131.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                    Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F"); " is 172.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                    OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName); " is 209.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                    Log.Debug("Temperature   = -" + (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F"); " is 173.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                    OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' "-" + (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName); " is 215.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                    Log.Debug("Chill         = " + (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F"); " is 160.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                    OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Windchill"' (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString()' pName); " is 195.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                    Log.Debug("Chill         = -" + (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F"); " is 161.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The length of the statement  "                    OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Windchill"' "-" + (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString()' pName); " is 201.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The length of the statement  "                OSAEObjectManager.ObjectAdd("UV Sensor - " + (recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString()' ""' "UV Sensor"' "UV SENSOR"' (recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString()' ""' 30' true); " is 217.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The length of the statement  "                    Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F"); " is 168.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The length of the statement  "                    OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Level"' (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName); " is 199.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The length of the statement  "                    Log.Debug("Temperature   = -" + (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F"); " is 169.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The length of the statement  "                    OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Level"' (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName); " is 199.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The length of the statement  "            OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString()); " is 128.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The length of the statement  "                OSAEObjectManager.ObjectAdd("Current Meter - " + (recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString()' ""' "Current Meter"' "CURRENT METER"' (recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString()' ""' 30' true); " is 249.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The length of the statement  "                obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString()); " is 123.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The length of the statement  "                    Log.Debug("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)CURRENT.packettype] + ":" + recbuf[(byte)CURRENT.subtype]); " is 127.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The length of the statement  "            Log.Debug("Channel 1     = " + ((recbuf[(byte)CURRENT.ch1h] * 256 + recbuf[(byte)CURRENT.ch1l]) / 10).ToString() + " ampere"); " is 126.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The length of the statement  "            Log.Debug("Channel 2     = " + ((recbuf[(byte)CURRENT.ch2h] * 256 + recbuf[(byte)CURRENT.ch2l]) / 10).ToString() + " ampere"); " is 126.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The length of the statement  "            Log.Debug("Channel 3     = " + ((recbuf[(byte)CURRENT.ch3h] * 256 + recbuf[(byte)CURRENT.ch3l]) / 10).ToString() + " ampere"); " is 126.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The length of the statement  "            OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Channel 1"' ((recbuf[(byte)CURRENT.ch1h] * 256 + recbuf[(byte)CURRENT.ch1l]) / 10).ToString()' pName); " is 157.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The length of the statement  "            OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Channel 2"' ((recbuf[(byte)CURRENT.ch2h] * 256 + recbuf[(byte)CURRENT.ch2l]) / 10).ToString()' pName); " is 157.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The length of the statement  "            OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Channel 3"' ((recbuf[(byte)CURRENT.ch3h] * 256 + recbuf[(byte)CURRENT.ch3l]) / 10).ToString()' pName); " is 157.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The length of the statement  "            OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString()); " is 126.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The length of the statement  "                OSAEObjectManager.ObjectAdd("Energy Meter - " + (recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString()' ""' "Energy Meter"' "ENERGY METER"' (recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString()' ""' 30' true); " is 242.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The length of the statement  "                obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString()); " is 121.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The length of the statement  "            instant = Convert.ToInt64(recbuf[(byte)ENERGY.instant1]) * 0x1000000 + recbuf[(byte)ENERGY.instant2] * 0x10000 + recbuf[(byte)ENERGY.instant3] * 0x100 + recbuf[(byte)ENERGY.instant4]; " is 183.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The length of the statement  "            usage = (Convert.ToDouble(recbuf[(byte)ENERGY.total1]) * 0x10000000000L + Convert.ToDouble(recbuf[(byte)ENERGY.total2]) * 0x100000000L + Convert.ToDouble(recbuf[(byte)ENERGY.total3]) * 0x1000000 + recbuf[(byte)ENERGY.total4] * 0x10000 + recbuf[(byte)ENERGY.total5] * 0x100 + recbuf[(byte)ENERGY.total6]) / 223.666; " is 314.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The length of the statement  "                    Log.Debug("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)ENERGY.packettype] + ":" + recbuf[(byte)ENERGY.subtype]); " is 125.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The length of the statement  "            OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString()); " is 126.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The length of the statement  "                OSAEObjectManager.ObjectAdd("Scale Meter - " + (recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString()' ""' "Scale Meter"' "SCALE"' (recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString()' ""' 30' true); " is 233.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The length of the statement  "                obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString()); " is 121.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The length of the statement  "                    Log.Debug("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)WEIGHT.packettype] + ":" + recbuf[(byte)WEIGHT.subtype]); " is 125.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The length of the statement  "            Log.Debug("Weight        = " + (((recbuf[(byte)WEIGHT.weighthigh] * 25.6) + recbuf[(byte)WEIGHT.weightlow] / 10).ToString() + 2.2).ToString() + " lb"); " is 151.
Long Statement,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The length of the statement  "            OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Weight"' (((recbuf[(byte)WEIGHT.weighthigh] * 25.6) + recbuf[(byte)WEIGHT.weightlow] / 10).ToString() + 2.2).ToString()' pName); " is 183.
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following statement contains a magic number: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,RunInterface,The following statement contains a magic number: RSInit("COM" + OSAEObjectPropertyManager.GetObjectPropertyValue(pluginName'"Port").Value' 38400);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,RSInit,The following statement contains a magic number: RS232Port.DataBits = 8;
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,RSInit,The following statement contains a magic number: RS232Port.ReadBufferSize = Convert.ToInt32(4096);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,RSInit,The following statement contains a magic number: RS232Port.WriteTimeout = 500;
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,RESETtrx,The following statement contains a magic number: Resettimer = 5;
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,SendCommand,The following statement contains a magic number: msgStr += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2' 2) + " ";
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,SendCommand,The following statement contains a magic number: msgStr += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2' 2) + " ";
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,tmrRead_Tick,The following statement contains a magic number: maxticks > 3
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessReceivedChar,The following statement contains a magic number: rcvdStr += " " + ("0" + sComChar.ToString()).Substring(("0" + sComChar.ToString()).Length - 2' 2);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessReceivedChar,The following statement contains a magic number: rcvdStr += " " + ("0" + sComChar.ToString()).Substring(("0" + sComChar.ToString()).Length - 2' 2);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting2,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)LIGHTING2.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting5,The following statement contains a magic number: switch (recbuf[(byte)LIGHTING5.subtype])              {                  case (byte)LIGHTING5.sTypeLightwaveRF:                      obj = OSAEObjectManager.GetObjectByAddress("0" + recbuf[(byte)LIGHTING5.id1].ToString() + "-0" + recbuf[(byte)LIGHTING5.id2].ToString() + "-0" + recbuf[(byte)LIGHTING5.id3].ToString() + "-" + recbuf[(byte)LIGHTING5.unitcode].ToString());                       Log.Debug("subtype       = LightwaveRF");                      Log.Debug("Sequence nbr  = " + recbuf[(byte)LIGHTING5.seqnbr].ToString());                      Log.Debug("ID            = " + "0" + recbuf[(byte)LIGHTING5.id1].ToString() + "-0" + recbuf[(byte)LIGHTING5.id2] + "-0" + recbuf[(byte)LIGHTING5.id3].ToString());                      Log.Debug("Unit          = " + recbuf[(byte)LIGHTING5.unitcode].ToString());                      switch (recbuf[(byte)LIGHTING5.cmnd])                      {                          case (byte)LIGHTING5.sOff:                              OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                              Log.Debug("Command       = Off");                              break;                          case (byte)LIGHTING5.sOn:                              OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                              Log.Debug("Command       = On");                              break;                          case (byte)LIGHTING5.sGroupOff:                              Log.Debug("Command       = Group Off");                              break;                          case (byte)LIGHTING5.sMood1:                              Log.Debug("Command       = Group Mood 1");                              break;                          case (byte)LIGHTING5.sMood2:                              Log.Debug("Command       = Group Mood 2");                              break;                          case (byte)LIGHTING5.sMood3:                              Log.Debug("Command       = Group Mood 3");                              break;                          case (byte)LIGHTING5.sMood4:                              Log.Debug("Command       = Group Mood 4");                              break;                          case (byte)LIGHTING5.sMood5:                              Log.Debug("Command       = Group Mood 5");                              break;                          case (byte)LIGHTING5.sUnlock:                              Log.Debug("Command       = Unlock");                              break;                          case (byte)LIGHTING5.sLock:                              Log.Debug("Command       = Lock");                              break;                          case (byte)LIGHTING5.sAllLock:                              Log.Debug("Command       = All lock");                              break;                          case (byte)LIGHTING5.sClose:                              Log.Debug("Command       = Close inline relay");                              break;                          case (byte)LIGHTING5.sStop:                              Log.Debug("Command       = Stop inline relay");                              break;                          case (byte)LIGHTING5.sOpen:                              Log.Debug("Command       = Open inline relay");                              break;                          case (byte)LIGHTING5.sSetLevel:                              Log.Debug("Command       = Set dim level to: " + Convert.ToInt32((recbuf[(byte)LIGHTING5.level] * 3.2)).ToString() + "%");                              break;                          default:                              Log.Debug("UNKNOWN");                              break;                      }                      break;                  case (byte)LIGHTING5.sTypeEMW100:                      obj = OSAEObjectManager.GetObjectByAddress("0" + recbuf[(byte)LIGHTING5.id1].ToString() + "-0" + recbuf[(byte)LIGHTING5.id2].ToString() + "-" + recbuf[(byte)LIGHTING5.unitcode].ToString());                       Log.Debug("subtype       = EMW100");                      Log.Debug("Sequence nbr  = " + recbuf[(byte)LIGHTING5.seqnbr].ToString());                      Log.Debug("ID            = " + "0" + recbuf[(byte)LIGHTING5.id1].ToString() + "-0" + recbuf[(byte)LIGHTING5.id2].ToString());                      Log.Debug("Unit          = " + recbuf[(byte)LIGHTING5.unitcode].ToString());                      switch (recbuf[(byte)LIGHTING5.cmnd])                      {                          case (byte)LIGHTING5.sOff:                              OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                              Log.Debug("Command       = Off");                              break;                          case (byte)LIGHTING5.sOn:                              OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                              Log.Debug("Command       = On");                              break;                          case (byte)LIGHTING5.sLearn:                              Log.Debug("Command       = Learn");                              break;                          default:                              Log.Debug("Command       = UNKNOWN");                              break;                      }                        break;                  default:                      Log.Error("ERROR: Unknown Sub type for Packet type=" + recbuf[(byte)LIGHTING5.packettype].ToString() + ": " + recbuf[(byte)LIGHTING5.subtype].ToString());                      break;              }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting5,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)LIGHTING5.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Temperature Sensor - " + (recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString()' ""' "Temperature Sensor"' "OS TEMP SENSOR"' (recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Temperature Sensor - " + (recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString()' ""' "Temperature Sensor"' "OS TEMP SENSOR"' (recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Temperature Sensor - " + (recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString()' ""' "Temperature Sensor"' "OS TEMP SENSOR"' (recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: Log.Debug("ID            = " + (recbuf[(byte)TEMP.id1] * 256 + recbuf[(byte)TEMP.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: double temp = Math.Round((double)(recbuf[(byte)TEMP.temperatureh] * 256 + recbuf[(byte)TEMP.temperaturel]) / 10' 2);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: double temp = Math.Round((double)(recbuf[(byte)TEMP.temperatureh] * 256 + recbuf[(byte)TEMP.temperaturel]) / 10' 2);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: double temp = Math.Round((double)(recbuf[(byte)TEMP.temperatureh] * 256 + recbuf[(byte)TEMP.temperaturel]) / 10' 2);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: temp = (temp * 9 / 5) + 32;
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: temp = (temp * 9 / 5) + 32;
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: temp = (temp * 9 / 5) + 32;
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)TEMP.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Temp,The following statement contains a magic number: Math.Abs(prevTemp - temp) < 5
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Hum,The following statement contains a magic number: OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Hum,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Humidity Sensor - " + (recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString()' ""' "Humidity Sensor"' "HUMIDITY METER"' (recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Hum,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Humidity Sensor - " + (recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString()' ""' "Humidity Sensor"' "HUMIDITY METER"' (recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Hum,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Humidity Sensor - " + (recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString()' ""' "Humidity Sensor"' "HUMIDITY METER"' (recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Hum,The following statement contains a magic number: obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Hum,The following statement contains a magic number: Log.Debug("ID            = " + (recbuf[(byte)HUM.id1] * 256 + recbuf[(byte)HUM.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Hum,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)HUM.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Temp and Humidity Sensor - " + (recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString()' ""' "Temp and Humidity Sensor"' "TEMP HUM METER"' (recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Temp and Humidity Sensor - " + (recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString()' ""' "Temp and Humidity Sensor"' "TEMP HUM METER"' (recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Temp and Humidity Sensor - " + (recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString()' ""' "Temp and Humidity Sensor"' "TEMP HUM METER"' (recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: Log.Debug("ID            = " + (recbuf[(byte)TEMP_HUM.id1] * 256 + recbuf[(byte)TEMP_HUM.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM.temperatureh] * 256 + recbuf[(byte)TEMP_HUM.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)TEMP_HUM.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: switch (recbuf[(byte)TEMP_HUM.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: switch (recbuf[(byte)TEMP_HUM.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: switch (recbuf[(byte)TEMP_HUM.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: switch (recbuf[(byte)TEMP_HUM.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: switch (recbuf[(byte)TEMP_HUM.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: switch (recbuf[(byte)TEMP_HUM.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: switch (recbuf[(byte)TEMP_HUM.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following statement contains a magic number: switch (recbuf[(byte)TEMP_HUM.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Temp' Humidity and Baro Sensor - " + (recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString()' ""' "Temp' Humidity and Baro Sensor"' "TEMP HUM BARO METER"' (recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Temp' Humidity and Baro Sensor - " + (recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString()' ""' "Temp' Humidity and Baro Sensor"' "TEMP HUM BARO METER"' (recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Temp' Humidity and Baro Sensor - " + (recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString()' ""' "Temp' Humidity and Baro Sensor"' "TEMP HUM BARO METER"' (recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: Log.Debug("ID            = " + (recbuf[(byte)TEMP_HUM_BARO.id1] * 256 + recbuf[(byte)TEMP_HUM_BARO.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)TEMP_HUM_BARO.temperatureh] * 256 + recbuf[(byte)TEMP_HUM_BARO.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: Log.Debug("Barometer     = " + recbuf[(byte)TEMP_HUM_BARO.baroh] * 256 + recbuf[(byte)TEMP_HUM_BARO.barol].ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Barometer"' recbuf[(byte)TEMP_HUM_BARO.baroh] * 256 + recbuf[(byte)TEMP_HUM_BARO.barol].ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)TEMP_HUM_BARO.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Rain Meter - " + (recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString()' ""' "Rain Meter"' "OS RAIN METER"' (recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Rain Meter - " + (recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString()' ""' "Rain Meter"' "OS RAIN METER"' (recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Rain Meter - " + (recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString()' ""' "Rain Meter"' "OS RAIN METER"' (recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: Log.Error("ID            = " + (recbuf[(byte)RAIN.id1] * 256 + recbuf[(byte)RAIN.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: Log.Error("Rain rate     = " + ((recbuf[(byte)RAIN.rainrateh] * 256) + recbuf[(byte)RAIN.rainratel]).ToString() + " mm/h");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Rain Rate"' ((recbuf[(byte)RAIN.rainrateh] * 256) + recbuf[(byte)RAIN.rainratel]).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: Log.Error("Total rain    = " + Math.Round((double)((recbuf[(byte)RAIN.raintotal1] * 65535) + recbuf[(byte)RAIN.raintotal2] * 256 + recbuf[(byte)RAIN.raintotal3]) / 10' 2).ToString() + " mm");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: Log.Error("Total rain    = " + Math.Round((double)((recbuf[(byte)RAIN.raintotal1] * 65535) + recbuf[(byte)RAIN.raintotal2] * 256 + recbuf[(byte)RAIN.raintotal3]) / 10' 2).ToString() + " mm");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: Log.Error("Total rain    = " + Math.Round((double)((recbuf[(byte)RAIN.raintotal1] * 65535) + recbuf[(byte)RAIN.raintotal2] * 256 + recbuf[(byte)RAIN.raintotal3]) / 10' 2).ToString() + " mm");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: Log.Error("Total rain    = " + Math.Round((double)((recbuf[(byte)RAIN.raintotal1] * 65535) + recbuf[(byte)RAIN.raintotal2] * 256 + recbuf[(byte)RAIN.raintotal3]) / 10' 2).ToString() + " mm");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Total Rain"' Math.Round((double)((recbuf[(byte)RAIN.raintotal1] * 65535) + recbuf[(byte)RAIN.raintotal2] * 256 + recbuf[(byte)RAIN.raintotal3]) / 10' 2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Total Rain"' Math.Round((double)((recbuf[(byte)RAIN.raintotal1] * 65535) + recbuf[(byte)RAIN.raintotal2] * 256 + recbuf[(byte)RAIN.raintotal3]) / 10' 2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Total Rain"' Math.Round((double)((recbuf[(byte)RAIN.raintotal1] * 65535) + recbuf[(byte)RAIN.raintotal2] * 256 + recbuf[(byte)RAIN.raintotal3]) / 10' 2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Total Rain"' Math.Round((double)((recbuf[(byte)RAIN.raintotal1] * 65535) + recbuf[(byte)RAIN.raintotal2] * 256 + recbuf[(byte)RAIN.raintotal3]) / 10' 2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Rain,The following statement contains a magic number: Log.Error("Signal level  = " + (recbuf[(byte)RAIN.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Wind Sensor - " + (recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString()' ""' "Wind Sensor"' "WIND SENSOR"' (recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Wind Sensor - " + (recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString()' ""' "Wind Sensor"' "WIND SENSOR"' (recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Wind Sensor - " + (recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString()' ""' "Wind Sensor"' "WIND SENSOR"' (recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("ID            = " + (recbuf[(byte)WIND.id1] * 256 + recbuf[(byte)WIND.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: intDirection = (recbuf[(byte)WIND.directionh] * 256) + recbuf[(byte)WIND.directionl];
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: intDirection > 348.75 | intDirection < 11.26
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: intDirection > 348.75 | intDirection < 11.26
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: intSpeed = (recbuf[(byte)WIND.av_speedh] * 256) + recbuf[(byte)WIND.av_speedl];
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Average speed = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Average speed = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Average speed = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Average speed = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Average speed = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Average speed = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Average Speed"' Math.Round((intSpeed * 0.223693629) / 10' 2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Average Speed"' Math.Round((intSpeed * 0.223693629) / 10' 2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Average Speed"' Math.Round((intSpeed * 0.223693629) / 10' 2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: intSpeed = (recbuf[(byte)WIND.gusth] * 256) + recbuf[(byte)WIND.gustl];
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Wind gust     = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Wind gust     = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Wind gust     = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Wind gust     = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Wind gust     = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Wind gust     = " + (intSpeed / 10).ToString() + " mtr/sec = " + Math.Round((intSpeed * 0.36)' 2).ToString() + " km/hr = " + Math.Round((intSpeed * 0.223693629) / 10' 2).ToString() + " mph");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Wind Gust"' Math.Round((intSpeed * 0.223693629) / 10' 2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Wind Gust"' Math.Round((intSpeed * 0.223693629) / 10' 2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Wind Gust"' Math.Round((intSpeed * 0.223693629) / 10' 2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Temperature"' (((Math.Round((double)(recbuf[(byte)WIND.temperatureh] * 256 + recbuf[(byte)WIND.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Chill         = " + (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Chill         = " + (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Chill         = " + (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Chill         = " + (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Chill         = " + (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Chill         = " + (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Windchill"' (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Windchill"' (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Windchill"' (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Windchill"' (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Windchill"' (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Windchill"' (((Math.Round((double)(recbuf[(byte)WIND.chillh] * 256 + recbuf[(byte)WIND.chillh]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)WIND.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: switch (recbuf[(byte)WIND.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: switch (recbuf[(byte)WIND.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: switch (recbuf[(byte)WIND.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: switch (recbuf[(byte)WIND.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: switch (recbuf[(byte)WIND.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: switch (recbuf[(byte)WIND.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: switch (recbuf[(byte)WIND.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following statement contains a magic number: switch (recbuf[(byte)WIND.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("UV Sensor - " + (recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString()' ""' "UV Sensor"' "UV SENSOR"' (recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("UV Sensor - " + (recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString()' ""' "UV Sensor"' "UV SENSOR"' (recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("UV Sensor - " + (recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString()' ""' "UV Sensor"' "UV SENSOR"' (recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: Log.Debug("ID            = " + (recbuf[(byte)UV.id1] * 256 + recbuf[(byte)UV.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: Log.Debug("Level         = " + (recbuf[(byte)UV.uv] / 10).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Level"' (recbuf[(byte)UV.uv] / 10).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: Log.Debug("Temperature   = " + (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString() + " °F");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Level"' (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Level"' (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Level"' (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Level"' (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Level"' (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Level"' (((Math.Round((double)(recbuf[(byte)UV.temperatureh] * 256 + recbuf[(byte)UV.temperaturel]) / 10' 2)) * 9 / 5) + 32).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: recbuf[(byte)UV.uv] < 3
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_UV,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)UV.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Current Meter - " + (recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString()' ""' "Current Meter"' "CURRENT METER"' (recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Current Meter - " + (recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString()' ""' "Current Meter"' "CURRENT METER"' (recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Current Meter - " + (recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString()' ""' "Current Meter"' "CURRENT METER"' (recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: Log.Debug("ID            = " + (recbuf[(byte)CURRENT.id1] * 256 + recbuf[(byte)CURRENT.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: Log.Debug("Count         = " + recbuf[5].ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: Log.Debug("Channel 1     = " + ((recbuf[(byte)CURRENT.ch1h] * 256 + recbuf[(byte)CURRENT.ch1l]) / 10).ToString() + " ampere");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: Log.Debug("Channel 1     = " + ((recbuf[(byte)CURRENT.ch1h] * 256 + recbuf[(byte)CURRENT.ch1l]) / 10).ToString() + " ampere");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: Log.Debug("Channel 2     = " + ((recbuf[(byte)CURRENT.ch2h] * 256 + recbuf[(byte)CURRENT.ch2l]) / 10).ToString() + " ampere");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: Log.Debug("Channel 2     = " + ((recbuf[(byte)CURRENT.ch2h] * 256 + recbuf[(byte)CURRENT.ch2l]) / 10).ToString() + " ampere");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: Log.Debug("Channel 3     = " + ((recbuf[(byte)CURRENT.ch3h] * 256 + recbuf[(byte)CURRENT.ch3l]) / 10).ToString() + " ampere");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: Log.Debug("Channel 3     = " + ((recbuf[(byte)CURRENT.ch3h] * 256 + recbuf[(byte)CURRENT.ch3l]) / 10).ToString() + " ampere");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Count"' recbuf[5].ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Channel 1"' ((recbuf[(byte)CURRENT.ch1h] * 256 + recbuf[(byte)CURRENT.ch1l]) / 10).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Channel 1"' ((recbuf[(byte)CURRENT.ch1h] * 256 + recbuf[(byte)CURRENT.ch1l]) / 10).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Channel 2"' ((recbuf[(byte)CURRENT.ch2h] * 256 + recbuf[(byte)CURRENT.ch2l]) / 10).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Channel 2"' ((recbuf[(byte)CURRENT.ch2h] * 256 + recbuf[(byte)CURRENT.ch2l]) / 10).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Channel 3"' ((recbuf[(byte)CURRENT.ch3h] * 256 + recbuf[(byte)CURRENT.ch3l]) / 10).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Channel 3"' ((recbuf[(byte)CURRENT.ch3h] * 256 + recbuf[(byte)CURRENT.ch3l]) / 10).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Current,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)CURRENT.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The following statement contains a magic number: OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Energy Meter - " + (recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString()' ""' "Energy Meter"' "ENERGY METER"' (recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Energy Meter - " + (recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString()' ""' "Energy Meter"' "ENERGY METER"' (recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Energy Meter - " + (recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString()' ""' "Energy Meter"' "ENERGY METER"' (recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The following statement contains a magic number: obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The following statement contains a magic number: usage = (Convert.ToDouble(recbuf[(byte)ENERGY.total1]) * 0x10000000000L + Convert.ToDouble(recbuf[(byte)ENERGY.total2]) * 0x100000000L + Convert.ToDouble(recbuf[(byte)ENERGY.total3]) * 0x1000000 + recbuf[(byte)ENERGY.total4] * 0x10000 + recbuf[(byte)ENERGY.total5] * 0x100 + recbuf[(byte)ENERGY.total6]) / 223.666;
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The following statement contains a magic number: Log.Debug("ID            = " + (recbuf[(byte)ENERGY.id1] * 256 + recbuf[(byte)ENERGY.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Count"' recbuf[5].ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Energy,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)ENERGY.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: OSAEObject obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Scale Meter - " + (recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString()' ""' "Scale Meter"' "SCALE"' (recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Scale Meter - " + (recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString()' ""' "Scale Meter"' "SCALE"' (recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: OSAEObjectManager.ObjectAdd("Scale Meter - " + (recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString()' ""' "Scale Meter"' "SCALE"' (recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString()' ""' 30' true);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: obj = obj = OSAEObjectManager.GetObjectByAddress((recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: Log.Debug("ID            = " + (recbuf[(byte)WEIGHT.id1] * 256 + recbuf[(byte)WEIGHT.id2]).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: Log.Debug("Weight        = " + (((recbuf[(byte)WEIGHT.weighthigh] * 25.6) + recbuf[(byte)WEIGHT.weightlow] / 10).ToString() + 2.2).ToString() + " lb");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: Log.Debug("Weight        = " + (((recbuf[(byte)WEIGHT.weighthigh] * 25.6) + recbuf[(byte)WEIGHT.weightlow] / 10).ToString() + 2.2).ToString() + " lb");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: Log.Debug("Weight        = " + (((recbuf[(byte)WEIGHT.weighthigh] * 25.6) + recbuf[(byte)WEIGHT.weightlow] / 10).ToString() + 2.2).ToString() + " lb");
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: Log.Debug("Signal level  = " + (recbuf[(byte)WEIGHT.rssi] >> 4).ToString());
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Weight"' (((recbuf[(byte)WEIGHT.weighthigh] * 25.6) + recbuf[(byte)WEIGHT.weightlow] / 10).ToString() + 2.2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Weight"' (((recbuf[(byte)WEIGHT.weighthigh] * 25.6) + recbuf[(byte)WEIGHT.weightlow] / 10).ToString() + 2.2).ToString()' pName);
Magic Number,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Weight,The following statement contains a magic number: OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Weight"' (((recbuf[(byte)WEIGHT.weighthigh] * 25.6) + recbuf[(byte)WEIGHT.weightlow] / 10).ToString() + 2.2).ToString()' pName);
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following switch statement is missing a default case: switch (obj.Type)                  {                      #region Lighting 1                      case "X10 RELAY":                      case "ARC BINARY SWITCH":                      case "ELRO BINARY SWITCH":                      case "WAVEMAN BINARY SWITCH":                      case "EMW200 BINARY SWITCH":                      case "RISING SUN BINARY SWITCH":                      case "IMPULS BINARY SWITCH":                          Log.Debug("Executing Lighting1 command");                          kar = new byte[(byte)LIGHTING1.size + 1];                          byte type_l1 = 0;                            switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }                            kar[(byte)LIGHTING1.packetlength] = (byte)LIGHTING1.size;                          kar[(byte)LIGHTING1.packettype] = (byte)LIGHTING1.pType;                          kar[(byte)LIGHTING1.subtype] = type_l1;                          kar[(byte)LIGHTING1.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING1.housecode] = (byte)Convert.ToInt32(obj.Address.Substring(0' 1));                          kar[(byte)LIGHTING1.unitcode] = (byte)Convert.ToInt32(obj.Address.Substring(1));                          switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }                          kar[(byte)LIGHTING1.filler] = 0;                            WriteCom(kar);                          string command = "";                          foreach (byte bt in kar)                              command += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                            Log.Debug("Lighting1 command:" + command);                            break;                      #endregion                        #region Lighting 2                        case "AC DIMMER SWITCH":                      case "HEU DIMMER SWITCH":                      case "ANSLUT DIMMER SWITCH":                          Log.Debug("Executing Lighting2 command");                          kar = new byte[(byte)LIGHTING2.size + 1];                          string[] addr = obj.Address.Split('-');                          byte type_l2 = 0;                            switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }                                                    kar[(byte)LIGHTING2.packetlength] = (byte)LIGHTING2.size;                          kar[(byte)LIGHTING2.packettype] = (byte)LIGHTING2.pType;                          kar[(byte)LIGHTING2.subtype] = type_l2;                          kar[(byte)LIGHTING2.seqnbr] = bytSeqNbr;                          kar[(byte)LIGHTING2.id1] = (byte)Int32.Parse(addr[0]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id2] = (byte)Int32.Parse(addr[1]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id3] = (byte)Int32.Parse(addr[2]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.id4] = (byte)Int32.Parse(addr[3]' System.Globalization.NumberStyles.HexNumber);                          kar[(byte)LIGHTING2.unitcode] = (byte)Int32.Parse(addr[4]);                            switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }                            kar[(byte)LIGHTING2.filler] = 0;                            Log.Debug("Writing command. len: " + kar.Length.ToString());                          WriteCom(kar);                          string command_l2 = "";                          foreach (byte bt in kar)                              command_l2 += ("0" + bt.ToString("X")).Substring(("0" + bt.ToString("X")).Length - 2) + " ";                            Log.Debug("Lighting2 command:" + command_l2);                          break;                        #endregion                        #region Lighting 5                        case "LIGHTWAVERF DIMMER SWITCH":                      case "LIGHTWAVERF BINARY SWITCH":                      case "EMW100 BINARY SWITCH":                          Log.Debug("Executing Lighting5 command");                            kar = new byte[(byte)LIGHTING5.size + 1];                          Log.Debug("Lighting 5 device");                            if (bytFWversion < 29)                          {                              Log.Error("RFXtrx433 firmware version must be > 28' flash your RFXtrx433 with the latest firmware");                              return;                          }                            string[] l5_addr = obj.Address.Split('-');                          if (l5_addr.Length != 4)                          {                              Log.Error("invalid unit address");                              break;                          }                          else                          {                              byte subtype = (byte)0;                              if (obj.Type == "LIGHTWAVERF DIMMER SWITCH" || obj.Type == "LIGHTWAVERF BINARY SWITCH")                                  subtype = (byte)0;                              else if (obj.Type == "EMW100 BINARY SWITCH")                                  subtype = (byte)1;                                kar[(byte)LIGHTING5.packetlength] = GetByte(LIGHTING5.size.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packetlength]: " + kar[(byte)LIGHTING5.packetlength].ToString());                              kar[(byte)LIGHTING5.packettype] = GetByte(LIGHTING5.pType.ToString("X"));                              Log.Debug("kar[(byte)LIGHTING5.packettype]: " + kar[(byte)LIGHTING5.packettype].ToString());                              kar[(byte)LIGHTING5.subtype] = subtype;                              Log.Debug("kar[(byte)LIGHTING5.subtype]: " + subtype.ToString("X"));                              kar[(byte)LIGHTING5.seqnbr] = bytSeqNbr;                              Log.Debug("kar[(byte)LIGHTING5.seqnbr]: " + bytSeqNbr.ToString("X"));                              kar[(byte)LIGHTING5.id1] = GetByte(l5_addr[0]);                              Log.Debug("kar[(byte)LIGHTING5.id1]: " + l5_addr[0]);                              kar[(byte)LIGHTING5.id2] = GetByte(l5_addr[1]);                              Log.Debug("kar[(byte)LIGHTING5.id2]: " + l5_addr[1]);                              kar[(byte)LIGHTING5.id3] = GetByte(l5_addr[2]);                              Log.Debug("kar[(byte)LIGHTING5.id3]: " + l5_addr[2]);                              kar[(byte)LIGHTING5.unitcode] = GetByte(l5_addr[3]);                              Log.Debug("kar[(byte)LIGHTING5.unitcode]: " + l5_addr[3]);                                switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }                                kar[(byte)LIGHTING5.filler] = 0;                              Log.Debug("kar[(byte)LIGHTING5.filler]: " + kar[(byte)LIGHTING5.filler].ToString());                                //not used commands                              if (kar[(byte)LIGHTING5.cmnd] == 8 | kar[(byte)LIGHTING5.cmnd] == 9)                              {                                  Log.Error("not used command");                                  return;                              }                                if (kar[(byte)LIGHTING5.id1] == 0 & kar[(byte)LIGHTING5.id2] == 0 & kar[(byte)LIGHTING5.id3] == 0)                              {                                  Log.Error("invalid unit address");                                  return;                              }                              Log.Info("Writing command to port");                              WriteCom(kar);                              string command_l5 = BitConverter.ToString(kar).Replace('-'' ' ');                              //foreach (byte bt in kar)                              //{                              //    command_l5 += ("0" + bt.ToString()).Substring(("0" + bt.ToString()).Length - 2) + " ";                                //    command_l5 += BitConverter.ToString(bt);                              //}                              Log.Info("Lighting5 command:" + command_l5);                          }                          break;                      #endregion                  }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following switch statement is missing a default case: switch (obj.Type)                          {                              case "X10 RELAY":                                  type_l1 = (byte)LIGHTING1.sTypeX10;                                  break;                              case "ARC BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeARC;                                  break;                              case "ELRO BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeAB400D;                                  break;                              case "WAVEMAN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeWaveman;                                  break;                              case "EMW200 BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeEMW200;                                  break;                              case "IMPULS BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeIMPULS;                                  break;                              case "RISING SUN BINARY SWITCH":                                  type_l1 = (byte)LIGHTING1.sTypeRisingSun;                                  break;                          }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following switch statement is missing a default case: switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "ALL OFF":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ALL ON":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sAllOn;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                              case "CHIME":                                  kar[(byte)LIGHTING1.cmnd] = (byte)LIGHTING1.sChime;                                  kar[(byte)LIGHTING1.unitcode] = 8;                                  break;                          }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following switch statement is missing a default case: switch (obj.Type)                          {                              case "AC DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeAC;                                  break;                              case "HEU DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeHEU;                                  break;                              case "ANSLUT DIMMER SWITCH":                                  type_l2 = (byte)LIGHTING2.sTypeANSLUT;                                  break;                          }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following switch statement is missing a default case: switch (method.MethodName)                          {                              case "OFF":                                  kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOff;                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"' pName);                                  break;                              case "ON":                                  if (method.Parameter1 != "")                                  {                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      kar[(byte)LIGHTING2.level] = (byte)0;                                  }                                  else                                      kar[(byte)LIGHTING2.cmnd] = (byte)LIGHTING2.sOn;                                      //kar[(byte)LIGHTING2.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 7' 0);                                  OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"' pName);                                  break;                          }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,ProcessCommand,The following switch statement is missing a default case: switch (method.MethodName)                              {                                  case "OFF":                                      kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOff;                                      Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "OFF"'pName);                                      break;                                  case "ON":                                      if (method.Parameter1 == "")                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sOn;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = 0;                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      else                                      {                                          kar[(byte)LIGHTING5.cmnd] = (byte)LIGHTING5.sSetLevel;                                          Log.Debug("kar[(byte)LIGHTING5.cmnd]: " + kar[(byte)LIGHTING5.cmnd].ToString());                                          kar[(byte)LIGHTING5.level] = (byte)Math.Round((double)Int32.Parse(method.Parameter1) / 3' 0);                                          Log.Debug("kar[(byte)LIGHTING5.level]: " + kar[(byte)LIGHTING5.level].ToString());                                      }                                      OSAEObjectStateManager.ObjectStateSet(obj.Name' "ON"'pName);                                      break;                              }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Lighting2,The following switch statement is missing a default case: switch (recbuf[(byte)LIGHTING2.subtype])                      {                          case (byte)LIGHTING2.sTypeAC:                              Log.Debug("subtype       = AC");                              break;                          case (byte)LIGHTING2.sTypeHEU:                              Log.Debug("subtype       = HomeEasy EU");                              break;                          case (byte)LIGHTING2.sTypeANSLUT:                              Log.Debug("subtype       = ANSLUT");                              break;                      }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Hum,The following switch statement is missing a default case: switch (recbuf[(byte)HUM.humidity_status])              {                  case 0x0:                      Log.Debug("Status        = Dry");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Dry"' pName);                      break;                  case 0x1:                      Log.Debug("Status        = Comfortable");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Comfortable"' pName);                      break;                  case 0x2:                      Log.Debug("Status        = Normal");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Normal"' pName);                      break;                  case 0x3:                      Log.Debug("Status        = Wet");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Wet"' pName);                      break;              }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following switch statement is missing a default case: switch (recbuf[(byte)TEMP_HUM.humidity_status])              {                  case 0x0:                      Log.Debug("Status        = Dry");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Dry"' pName);                      break;                  case 0x1:                      Log.Debug("Status        = Comfortable");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Comfortable"' pName);                      break;                  case 0x2:                      Log.Debug("Status        = Normal");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Normal"' pName);                      break;                  case 0x3:                      Log.Debug("Status        = Wet");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Wet"' pName);                      break;              }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHum,The following switch statement is missing a default case: switch (recbuf[(byte)TEMP_HUM.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following switch statement is missing a default case: switch (recbuf[(byte)TEMP_HUM_BARO.humidity_status])              {                  case 0x0:                      Log.Debug("Status        = Dry");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Dry"' pName);                      break;                  case 0x1:                      Log.Debug("Status        = Comfortable");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Comfortable"' pName);                      break;                  case 0x2:                      Log.Debug("Status        = Normal");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Normal"' pName);                      break;                  case 0x3:                      Log.Debug("Status        = Wet");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Status"' "Wet"' pName);                      break;              }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_TempHumBaro,The following switch statement is missing a default case: switch (recbuf[(byte)TEMP_HUM_BARO.forecast])              {                  case 0x0:                      Log.Debug("Forecast      = No information available");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Forecast"' "No information available"' pName);                      break;                  case 0x1:                      Log.Debug("Forecast      = Sunny");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Forecast"' "Sunny"' pName);                      break;                  case 0x2:                      Log.Debug("Forecast      = Partly Cloudy");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Forecast"' "Partly Cloudy"' pName);                      break;                  case 0x3:                      Log.Debug("Forecast      = Cloudy");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Forecast"' "Cloudy"' pName);                      break;                  case 0x4:                      Log.Debug("Forecast      = Rain");                      OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Forecast"' "Rain"' pName);                      break;              }
Missing Default,OSAE.RFXCOM,RFXCOM,C:\research\architectureSmells\repos\opensourceautomation_Open-Source-Automation\Plugins\OSAE.RFXCOM\OSAE.RFXCOM.cs,decode_Wind,The following switch statement is missing a default case: switch (recbuf[(byte)WIND.battery_level])                  {                      case 0:                          Log.Debug("Battery       = 10%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "10%"' pName);                          break;                      case 1:                          Log.Debug("Battery       = 20%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "20%"' pName);                          break;                      case 2:                          Log.Debug("Battery       = 30%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "30%"' pName);                          break;                      case 3:                          Log.Debug("Battery       = 40%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "40%"' pName);                          break;                      case 4:                          Log.Debug("Battery       = 50%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "50%"' pName);                          break;                      case 5:                          Log.Debug("Battery       = 60%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "60%"' pName);                          break;                      case 6:                          Log.Debug("Battery       = 70%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "70%"' pName);                          break;                      case 7:                          Log.Debug("Battery       = 80%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "80%"' pName);                          break;                      case 8:                          Log.Debug("Battery       = 90%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "90%"' pName);                          break;                      case 9:                          Log.Debug("Battery       = 100%");                          OSAEObjectPropertyManager.ObjectPropertySet(obj.Name' "Battery"' "100%"' pName);                          break;                  }
