Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CommandLine,LongOptionParser,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLine.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,CommandLine,OptionGroupParser,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLine.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,CommandLine,CommandLineParser,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLine.cs,DoParseArguments,Cyclomatic complexity of the method is 8
Complex Method,CommandLine.Text,MultiLineTextAttribute,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AddToHelpText,Cyclomatic complexity of the method is 12
Complex Method,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AutoBuild,Cyclomatic complexity of the method is 8
Complex Method,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,RenderParsingErrorsText,Cyclomatic complexity of the method is 10
Complex Method,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AddOption,Cyclomatic complexity of the method is 16
Complex Method,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AddLine,Cyclomatic complexity of the method is 8
Complex Method,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,Run,Cyclomatic complexity of the method is 10
Long Parameter List,CommandLine.Text,MultiLineTextAttribute,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,MultiLineTextAttribute,The method has 5 parameters.
Long Parameter List,CommandLine.Text,AssemblyLicenseAttribute,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AssemblyLicenseAttribute,The method has 5 parameters.
Long Parameter List,CommandLine.Text,AssemblyUsageAttribute,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AssemblyUsageAttribute,The method has 5 parameters.
Long Identifier,CommandLine,ReflectionUtil,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLine.cs,GetAttribute,The length of the parameter assemblyFromWhichToPullInformation is 34.
Long Statement,CommandLine,OptionInfo,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLine.cs,SetValueScalar,The length of the statement  "				_property.SetValue (options' Convert.ChangeType (value' _property.PropertyType' Thread.CurrentThread.CurrentCulture)' null); " is 124.
Long Statement,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AutoBuild,The length of the statement  "		throw new InvalidOperationException ("HelpText::AutoBuild() requires that you define AssemblyInformationalVersionAttribute."); " is 126.
Long Statement,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,ToString,The length of the statement  "	var builder = new StringBuilder (GetLength (_heading) + GetLength (_copyright) + GetLength (_preOptionsHelp) + GetLength (_optionsHelp) + extraLength); " is 151.
Long Statement,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,PrintHeading,The length of the statement  "	Console.WriteLine ("Embeds {0}' Version {1} {2}."' ThisLibrary.ProductName' ThisLibrary.Version' ThisLibrary.ReleaseType); " is 122.
Magic Number,CommandLine,LongOptionParser,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLine.cs,Parse,The following statement contains a magic number: if (!option.IsBoolean) {  	if (parts.Length == 1 && (argumentEnumerator.IsLast || !ArgumentParser.IsInputValue (argumentEnumerator.Next)))  		return ParserState.Failure;  	if (parts.Length == 2) {  		if (!option.IsArray) {  			valueSetting = option.SetValue (parts [1]' options);  			if (!valueSetting)  				this.DefineOptionThatViolatesFormat (option);  			return ArgumentParser.BooleanToParserState (valueSetting);  		}  		ArgumentParser.EnsureOptionAttributeIsArrayCompatible (option);  		var items = ArgumentParser.GetNextInputValues (argumentEnumerator);  		items.Insert (0' parts [1]);  		valueSetting = option.SetValue (items' options);  		if (!valueSetting)  			this.DefineOptionThatViolatesFormat (option);  		return ArgumentParser.BooleanToParserState (valueSetting);  	}  	else {  		if (!option.IsArray) {  			valueSetting = option.SetValue (argumentEnumerator.Next' options);  			if (!valueSetting)  				this.DefineOptionThatViolatesFormat (option);  			return ArgumentParser.BooleanToParserState (valueSetting' true);  		}  		ArgumentParser.EnsureOptionAttributeIsArrayCompatible (option);  		var items = ArgumentParser.GetNextInputValues (argumentEnumerator);  		valueSetting = option.SetValue (items' options);  		if (!valueSetting)  			this.DefineOptionThatViolatesFormat (option);  		return ArgumentParser.BooleanToParserState (valueSetting);  	}  }  
Magic Number,CommandLine,LongOptionParser,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLine.cs,Parse,The following statement contains a magic number: if (parts.Length == 2) {  	if (!option.IsArray) {  		valueSetting = option.SetValue (parts [1]' options);  		if (!valueSetting)  			this.DefineOptionThatViolatesFormat (option);  		return ArgumentParser.BooleanToParserState (valueSetting);  	}  	ArgumentParser.EnsureOptionAttributeIsArrayCompatible (option);  	var items = ArgumentParser.GetNextInputValues (argumentEnumerator);  	items.Insert (0' parts [1]);  	valueSetting = option.SetValue (items' options);  	if (!valueSetting)  		this.DefineOptionThatViolatesFormat (option);  	return ArgumentParser.BooleanToParserState (valueSetting);  }  else {  	if (!option.IsArray) {  		valueSetting = option.SetValue (argumentEnumerator.Next' options);  		if (!valueSetting)  			this.DefineOptionThatViolatesFormat (option);  		return ArgumentParser.BooleanToParserState (valueSetting' true);  	}  	ArgumentParser.EnsureOptionAttributeIsArrayCompatible (option);  	var items = ArgumentParser.GetNextInputValues (argumentEnumerator);  	valueSetting = option.SetValue (items' options);  	if (!valueSetting)  		this.DefineOptionThatViolatesFormat (option);  	return ArgumentParser.BooleanToParserState (valueSetting);  }  
Magic Number,CommandLine,LongOptionParser,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLine.cs,Parse,The following statement contains a magic number: if (parts.Length == 2)  	return ParserState.Failure;  
Magic Number,CommandLine,OptionMap,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLine.cs,OptionMap,The following statement contains a magic number: _map = new Dictionary<string' OptionInfo> (capacity * 2' comparer);  
Magic Number,CommandLine.Text,CopyrightInfo,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,CopyrightInfo,The following statement contains a magic number: _builderSize = CopyrightWord.Length + author.Length + (4 * years.Length) + extraLength;  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,DefaultParsingErrorsHandler,The following statement contains a magic number: if (options.InternalLastPostParsingState.Errors.Count > 0) {  	var errors = current.RenderParsingErrorsText (options' 2);  	// indent with two spaces  	if (!string.IsNullOrEmpty (errors)) {  		current.AddPreOptionsLine (string.Concat (Environment.NewLine' current.SentenceBuilder.ErrorsHeadingText));  		var lines = errors.Split (new string[] {  			Environment.NewLine  		}' StringSplitOptions.None);  		foreach (var line in lines) {  			current.AddPreOptionsLine (line);  		}  	}  }  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AddOption,The following statement contains a magic number: if (!string.IsNullOrEmpty (option.HelpText)) {  	do {  		int wordBuffer = 0;  		var words = option.HelpText.Split (new[] {  			' '  		});  		for (int i = 0; i < words.Length; i++) {  			if (words [i].Length < (widthOfHelpText - wordBuffer)) {  				_optionsHelp.Append (words [i]);  				wordBuffer += words [i].Length;  				if ((widthOfHelpText - wordBuffer) > 1 && i != words.Length - 1) {  					_optionsHelp.Append (" ");  					wordBuffer++;  				}  			}  			else if (words [i].Length >= widthOfHelpText && wordBuffer == 0) {  				_optionsHelp.Append (words [i].Substring (0' widthOfHelpText));  				wordBuffer = widthOfHelpText;  				break;  			}  			else {  				break;  			}  		}  		option.HelpText = option.HelpText.Substring (Math.Min (wordBuffer' option.HelpText.Length)).Trim ();  		if (option.HelpText.Length > 0) {  			_optionsHelp.Append (Environment.NewLine);  			_optionsHelp.Append (new string (' '' maxLength + 6));  		}  	}  	while (option.HelpText.Length > widthOfHelpText);  }  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AddOption,The following statement contains a magic number: do {  	int wordBuffer = 0;  	var words = option.HelpText.Split (new[] {  		' '  	});  	for (int i = 0; i < words.Length; i++) {  		if (words [i].Length < (widthOfHelpText - wordBuffer)) {  			_optionsHelp.Append (words [i]);  			wordBuffer += words [i].Length;  			if ((widthOfHelpText - wordBuffer) > 1 && i != words.Length - 1) {  				_optionsHelp.Append (" ");  				wordBuffer++;  			}  		}  		else if (words [i].Length >= widthOfHelpText && wordBuffer == 0) {  			_optionsHelp.Append (words [i].Substring (0' widthOfHelpText));  			wordBuffer = widthOfHelpText;  			break;  		}  		else {  			break;  		}  	}  	option.HelpText = option.HelpText.Substring (Math.Min (wordBuffer' option.HelpText.Length)).Trim ();  	if (option.HelpText.Length > 0) {  		_optionsHelp.Append (Environment.NewLine);  		_optionsHelp.Append (new string (' '' maxLength + 6));  	}  }  while (option.HelpText.Length > widthOfHelpText);  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AddOption,The following statement contains a magic number: if (option.HelpText.Length > 0) {  	_optionsHelp.Append (Environment.NewLine);  	_optionsHelp.Append (new string (' '' maxLength + 6));  }  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,AddOption,The following statement contains a magic number: _optionsHelp.Append (new string (' '' maxLength + 6));  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,GetMaxLength,The following statement contains a magic number: foreach (BaseOptionAttribute option in optionList) {  	int optionLength = 0;  	bool hasShort = option.HasShortName;  	bool hasLong = option.HasLongName;  	if (hasShort) {  		optionLength += option.ShortName.Length;  		if (AddDashesToOption)  			++optionLength;  	}  	if (hasLong) {  		optionLength += option.LongName.Length;  		if (AddDashesToOption)  			optionLength += 2;  	}  	if (hasShort && hasLong) {  		optionLength += 2;  		// "' "  	}  	length = Math.Max (length' optionLength);  }  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,GetMaxLength,The following statement contains a magic number: foreach (BaseOptionAttribute option in optionList) {  	int optionLength = 0;  	bool hasShort = option.HasShortName;  	bool hasLong = option.HasLongName;  	if (hasShort) {  		optionLength += option.ShortName.Length;  		if (AddDashesToOption)  			++optionLength;  	}  	if (hasLong) {  		optionLength += option.LongName.Length;  		if (AddDashesToOption)  			optionLength += 2;  	}  	if (hasShort && hasLong) {  		optionLength += 2;  		// "' "  	}  	length = Math.Max (length' optionLength);  }  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,GetMaxLength,The following statement contains a magic number: if (hasLong) {  	optionLength += option.LongName.Length;  	if (AddDashesToOption)  		optionLength += 2;  }  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,GetMaxLength,The following statement contains a magic number: if (AddDashesToOption)  	optionLength += 2;  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,GetMaxLength,The following statement contains a magic number: optionLength += 2;  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,GetMaxLength,The following statement contains a magic number: if (hasShort && hasLong) {  	optionLength += 2;  	// "' "  }  
Magic Number,CommandLine.Text,HelpText,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\CommandLine\CommandLineText.cs,GetMaxLength,The following statement contains a magic number: optionLength += 2;  
Magic Number,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,SanitizeInput,The following statement contains a magic number: if (value.Length > 2 && value [0] == '"') {  	// maybe that last character is non-printable char like 32 (SUB|CTRL-Z)'  	// used to mark end of file; e.g.: 'echo "1 + 3" | xeval'  	if (value [value.Length - 2] == '"') {  		return value.Substring (1' value.Length - 3);  	}  	else if (value [value.Length - 1] == '"') {  		return value.Substring (1' value.Length - 2);  	}  }  
Magic Number,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,SanitizeInput,The following statement contains a magic number: if (value.Length > 2 && value [0] == '"') {  	// maybe that last character is non-printable char like 32 (SUB|CTRL-Z)'  	// used to mark end of file; e.g.: 'echo "1 + 3" | xeval'  	if (value [value.Length - 2] == '"') {  		return value.Substring (1' value.Length - 3);  	}  	else if (value [value.Length - 1] == '"') {  		return value.Substring (1' value.Length - 2);  	}  }  
Magic Number,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,SanitizeInput,The following statement contains a magic number: if (value.Length > 2 && value [0] == '"') {  	// maybe that last character is non-printable char like 32 (SUB|CTRL-Z)'  	// used to mark end of file; e.g.: 'echo "1 + 3" | xeval'  	if (value [value.Length - 2] == '"') {  		return value.Substring (1' value.Length - 3);  	}  	else if (value [value.Length - 1] == '"') {  		return value.Substring (1' value.Length - 2);  	}  }  
Magic Number,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,SanitizeInput,The following statement contains a magic number: if (value.Length > 2 && value [0] == '"') {  	// maybe that last character is non-printable char like 32 (SUB|CTRL-Z)'  	// used to mark end of file; e.g.: 'echo "1 + 3" | xeval'  	if (value [value.Length - 2] == '"') {  		return value.Substring (1' value.Length - 3);  	}  	else if (value [value.Length - 1] == '"') {  		return value.Substring (1' value.Length - 2);  	}  }  
Magic Number,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,SanitizeInput,The following statement contains a magic number: if (value [value.Length - 2] == '"') {  	return value.Substring (1' value.Length - 3);  }  else if (value [value.Length - 1] == '"') {  	return value.Substring (1' value.Length - 2);  }  
Magic Number,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,SanitizeInput,The following statement contains a magic number: if (value [value.Length - 2] == '"') {  	return value.Substring (1' value.Length - 3);  }  else if (value [value.Length - 1] == '"') {  	return value.Substring (1' value.Length - 2);  }  
Magic Number,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,SanitizeInput,The following statement contains a magic number: if (value [value.Length - 2] == '"') {  	return value.Substring (1' value.Length - 3);  }  else if (value [value.Length - 1] == '"') {  	return value.Substring (1' value.Length - 2);  }  
Magic Number,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,SanitizeInput,The following statement contains a magic number: return value.Substring (1' value.Length - 3);  
Magic Number,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,SanitizeInput,The following statement contains a magic number: if (value [value.Length - 1] == '"') {  	return value.Substring (1' value.Length - 2);  }  
Magic Number,ExpressionEngine,XEvalTool,C:\repos\gsscoder_exprengine\src\ExpressionEngine.Console\XEvalTool.cs,SanitizeInput,The following statement contains a magic number: return value.Substring (1' value.Length - 2);  
