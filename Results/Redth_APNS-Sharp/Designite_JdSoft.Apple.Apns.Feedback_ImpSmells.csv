Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,selectLocalCertificate,The method has 5 parameters. Parameters: sender' targetHost' localCertificates' remoteCertificate' acceptableIssuers
Long Statement,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,Run,The length of the statement  "                certificate = new X509Certificate2(System.IO.File.ReadAllBytes(P12File)' P12FilePassword' X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.PersistKeySet | X509KeyStorageFlags.Exportable); " is 194.
Empty Catch Block,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,ensureDisconnected,The method has an empty catch block.
Empty Catch Block,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,ensureDisconnected,The method has an empty catch block.
Empty Catch Block,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,ensureDisconnected,The method has an empty catch block.
Empty Catch Block,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,ensureDisconnected,The method has an empty catch block.
Empty Catch Block,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,ensureDisconnected,The method has an empty catch block.
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ConnectAttempts = 3;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ReconnectDelay = 10000;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ConnectAttempts = 3;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ReconnectDelay = 10000;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ConnectAttempts = 3;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ReconnectDelay = 10000;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ConnectAttempts = 3;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ReconnectDelay = 10000;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: Port = 2196;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ConnectAttempts = 3;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: Port = 2196;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ConnectAttempts = 3;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: Port = 2196;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ConnectAttempts = 3;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ReconnectDelay = 10000;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: Port = 2196;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ConnectAttempts = 3;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,FeedbackService,The following statement contains a magic number: ReconnectDelay = 10000;
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,Run,The following statement contains a magic number: if (ensureConnected() && !disposing)  			{  				//Set up  				byte[] buffer = new byte[38];  				int recd = 0;  				DateTime minTimestamp = DateTime.Now.AddYears(-1);    				//Get the first feedback  				recd = apnsStream.Read(buffer' 0' buffer.Length);    				//Continue while we have results and are not disposing  				while (recd > 0 && !disposing)  				{  					try  					{  						Feedback fb = new Feedback();    						//Get our seconds since 1970 ?  						byte[] bSeconds = new byte[4];  						byte[] bDeviceToken = new byte[32];    						Array.Copy(buffer' 0' bSeconds' 0' 4);    						//Check endianness  						if (BitConverter.IsLittleEndian)  							Array.Reverse(bSeconds);    						int tSeconds = BitConverter.ToInt32(bSeconds' 0);    						//Add seconds since 1970 to that date' in UTC and then get it locally  						fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();      						//Now copy out the device token  						Array.Copy(buffer' 6' bDeviceToken' 0' 32);    						fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();  												  						//Make sure we have a good feedback tuple  						if (fb.DeviceToken.Length == 64  							&& fb.Timestamp > minTimestamp  							&& this.Feedback != null)  						{  							//Raise event  							this.Feedback(this' fb);  						}			  						  					}  					catch (Exception ex)  					{  						if (this.Error != null)  							this.Error(this' ex);  					}    					//Clear our array to reuse it  					Array.Clear(buffer' 0' buffer.Length);    					//Read the next feedback  					recd = apnsStream.Read(buffer' 0' buffer.Length);  				}  			}
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,Run,The following statement contains a magic number: if (ensureConnected() && !disposing)  			{  				//Set up  				byte[] buffer = new byte[38];  				int recd = 0;  				DateTime minTimestamp = DateTime.Now.AddYears(-1);    				//Get the first feedback  				recd = apnsStream.Read(buffer' 0' buffer.Length);    				//Continue while we have results and are not disposing  				while (recd > 0 && !disposing)  				{  					try  					{  						Feedback fb = new Feedback();    						//Get our seconds since 1970 ?  						byte[] bSeconds = new byte[4];  						byte[] bDeviceToken = new byte[32];    						Array.Copy(buffer' 0' bSeconds' 0' 4);    						//Check endianness  						if (BitConverter.IsLittleEndian)  							Array.Reverse(bSeconds);    						int tSeconds = BitConverter.ToInt32(bSeconds' 0);    						//Add seconds since 1970 to that date' in UTC and then get it locally  						fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();      						//Now copy out the device token  						Array.Copy(buffer' 6' bDeviceToken' 0' 32);    						fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();  												  						//Make sure we have a good feedback tuple  						if (fb.DeviceToken.Length == 64  							&& fb.Timestamp > minTimestamp  							&& this.Feedback != null)  						{  							//Raise event  							this.Feedback(this' fb);  						}			  						  					}  					catch (Exception ex)  					{  						if (this.Error != null)  							this.Error(this' ex);  					}    					//Clear our array to reuse it  					Array.Clear(buffer' 0' buffer.Length);    					//Read the next feedback  					recd = apnsStream.Read(buffer' 0' buffer.Length);  				}  			}
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,Run,The following statement contains a magic number: if (ensureConnected() && !disposing)  			{  				//Set up  				byte[] buffer = new byte[38];  				int recd = 0;  				DateTime minTimestamp = DateTime.Now.AddYears(-1);    				//Get the first feedback  				recd = apnsStream.Read(buffer' 0' buffer.Length);    				//Continue while we have results and are not disposing  				while (recd > 0 && !disposing)  				{  					try  					{  						Feedback fb = new Feedback();    						//Get our seconds since 1970 ?  						byte[] bSeconds = new byte[4];  						byte[] bDeviceToken = new byte[32];    						Array.Copy(buffer' 0' bSeconds' 0' 4);    						//Check endianness  						if (BitConverter.IsLittleEndian)  							Array.Reverse(bSeconds);    						int tSeconds = BitConverter.ToInt32(bSeconds' 0);    						//Add seconds since 1970 to that date' in UTC and then get it locally  						fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();      						//Now copy out the device token  						Array.Copy(buffer' 6' bDeviceToken' 0' 32);    						fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();  												  						//Make sure we have a good feedback tuple  						if (fb.DeviceToken.Length == 64  							&& fb.Timestamp > minTimestamp  							&& this.Feedback != null)  						{  							//Raise event  							this.Feedback(this' fb);  						}			  						  					}  					catch (Exception ex)  					{  						if (this.Error != null)  							this.Error(this' ex);  					}    					//Clear our array to reuse it  					Array.Clear(buffer' 0' buffer.Length);    					//Read the next feedback  					recd = apnsStream.Read(buffer' 0' buffer.Length);  				}  			}
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,Run,The following statement contains a magic number: if (ensureConnected() && !disposing)  			{  				//Set up  				byte[] buffer = new byte[38];  				int recd = 0;  				DateTime minTimestamp = DateTime.Now.AddYears(-1);    				//Get the first feedback  				recd = apnsStream.Read(buffer' 0' buffer.Length);    				//Continue while we have results and are not disposing  				while (recd > 0 && !disposing)  				{  					try  					{  						Feedback fb = new Feedback();    						//Get our seconds since 1970 ?  						byte[] bSeconds = new byte[4];  						byte[] bDeviceToken = new byte[32];    						Array.Copy(buffer' 0' bSeconds' 0' 4);    						//Check endianness  						if (BitConverter.IsLittleEndian)  							Array.Reverse(bSeconds);    						int tSeconds = BitConverter.ToInt32(bSeconds' 0);    						//Add seconds since 1970 to that date' in UTC and then get it locally  						fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();      						//Now copy out the device token  						Array.Copy(buffer' 6' bDeviceToken' 0' 32);    						fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();  												  						//Make sure we have a good feedback tuple  						if (fb.DeviceToken.Length == 64  							&& fb.Timestamp > minTimestamp  							&& this.Feedback != null)  						{  							//Raise event  							this.Feedback(this' fb);  						}			  						  					}  					catch (Exception ex)  					{  						if (this.Error != null)  							this.Error(this' ex);  					}    					//Clear our array to reuse it  					Array.Clear(buffer' 0' buffer.Length);    					//Read the next feedback  					recd = apnsStream.Read(buffer' 0' buffer.Length);  				}  			}
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,Run,The following statement contains a magic number: if (ensureConnected() && !disposing)  			{  				//Set up  				byte[] buffer = new byte[38];  				int recd = 0;  				DateTime minTimestamp = DateTime.Now.AddYears(-1);    				//Get the first feedback  				recd = apnsStream.Read(buffer' 0' buffer.Length);    				//Continue while we have results and are not disposing  				while (recd > 0 && !disposing)  				{  					try  					{  						Feedback fb = new Feedback();    						//Get our seconds since 1970 ?  						byte[] bSeconds = new byte[4];  						byte[] bDeviceToken = new byte[32];    						Array.Copy(buffer' 0' bSeconds' 0' 4);    						//Check endianness  						if (BitConverter.IsLittleEndian)  							Array.Reverse(bSeconds);    						int tSeconds = BitConverter.ToInt32(bSeconds' 0);    						//Add seconds since 1970 to that date' in UTC and then get it locally  						fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();      						//Now copy out the device token  						Array.Copy(buffer' 6' bDeviceToken' 0' 32);    						fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();  												  						//Make sure we have a good feedback tuple  						if (fb.DeviceToken.Length == 64  							&& fb.Timestamp > minTimestamp  							&& this.Feedback != null)  						{  							//Raise event  							this.Feedback(this' fb);  						}			  						  					}  					catch (Exception ex)  					{  						if (this.Error != null)  							this.Error(this' ex);  					}    					//Clear our array to reuse it  					Array.Clear(buffer' 0' buffer.Length);    					//Read the next feedback  					recd = apnsStream.Read(buffer' 0' buffer.Length);  				}  			}
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,Run,The following statement contains a magic number: if (ensureConnected() && !disposing)  			{  				//Set up  				byte[] buffer = new byte[38];  				int recd = 0;  				DateTime minTimestamp = DateTime.Now.AddYears(-1);    				//Get the first feedback  				recd = apnsStream.Read(buffer' 0' buffer.Length);    				//Continue while we have results and are not disposing  				while (recd > 0 && !disposing)  				{  					try  					{  						Feedback fb = new Feedback();    						//Get our seconds since 1970 ?  						byte[] bSeconds = new byte[4];  						byte[] bDeviceToken = new byte[32];    						Array.Copy(buffer' 0' bSeconds' 0' 4);    						//Check endianness  						if (BitConverter.IsLittleEndian)  							Array.Reverse(bSeconds);    						int tSeconds = BitConverter.ToInt32(bSeconds' 0);    						//Add seconds since 1970 to that date' in UTC and then get it locally  						fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();      						//Now copy out the device token  						Array.Copy(buffer' 6' bDeviceToken' 0' 32);    						fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();  												  						//Make sure we have a good feedback tuple  						if (fb.DeviceToken.Length == 64  							&& fb.Timestamp > minTimestamp  							&& this.Feedback != null)  						{  							//Raise event  							this.Feedback(this' fb);  						}			  						  					}  					catch (Exception ex)  					{  						if (this.Error != null)  							this.Error(this' ex);  					}    					//Clear our array to reuse it  					Array.Clear(buffer' 0' buffer.Length);    					//Read the next feedback  					recd = apnsStream.Read(buffer' 0' buffer.Length);  				}  			}
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,Run,The following statement contains a magic number: if (ensureConnected() && !disposing)  			{  				//Set up  				byte[] buffer = new byte[38];  				int recd = 0;  				DateTime minTimestamp = DateTime.Now.AddYears(-1);    				//Get the first feedback  				recd = apnsStream.Read(buffer' 0' buffer.Length);    				//Continue while we have results and are not disposing  				while (recd > 0 && !disposing)  				{  					try  					{  						Feedback fb = new Feedback();    						//Get our seconds since 1970 ?  						byte[] bSeconds = new byte[4];  						byte[] bDeviceToken = new byte[32];    						Array.Copy(buffer' 0' bSeconds' 0' 4);    						//Check endianness  						if (BitConverter.IsLittleEndian)  							Array.Reverse(bSeconds);    						int tSeconds = BitConverter.ToInt32(bSeconds' 0);    						//Add seconds since 1970 to that date' in UTC and then get it locally  						fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();      						//Now copy out the device token  						Array.Copy(buffer' 6' bDeviceToken' 0' 32);    						fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();  												  						//Make sure we have a good feedback tuple  						if (fb.DeviceToken.Length == 64  							&& fb.Timestamp > minTimestamp  							&& this.Feedback != null)  						{  							//Raise event  							this.Feedback(this' fb);  						}			  						  					}  					catch (Exception ex)  					{  						if (this.Error != null)  							this.Error(this' ex);  					}    					//Clear our array to reuse it  					Array.Clear(buffer' 0' buffer.Length);    					//Read the next feedback  					recd = apnsStream.Read(buffer' 0' buffer.Length);  				}  			}
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,Run,The following statement contains a magic number: if (ensureConnected() && !disposing)  			{  				//Set up  				byte[] buffer = new byte[38];  				int recd = 0;  				DateTime minTimestamp = DateTime.Now.AddYears(-1);    				//Get the first feedback  				recd = apnsStream.Read(buffer' 0' buffer.Length);    				//Continue while we have results and are not disposing  				while (recd > 0 && !disposing)  				{  					try  					{  						Feedback fb = new Feedback();    						//Get our seconds since 1970 ?  						byte[] bSeconds = new byte[4];  						byte[] bDeviceToken = new byte[32];    						Array.Copy(buffer' 0' bSeconds' 0' 4);    						//Check endianness  						if (BitConverter.IsLittleEndian)  							Array.Reverse(bSeconds);    						int tSeconds = BitConverter.ToInt32(bSeconds' 0);    						//Add seconds since 1970 to that date' in UTC and then get it locally  						fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();      						//Now copy out the device token  						Array.Copy(buffer' 6' bDeviceToken' 0' 32);    						fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();  												  						//Make sure we have a good feedback tuple  						if (fb.DeviceToken.Length == 64  							&& fb.Timestamp > minTimestamp  							&& this.Feedback != null)  						{  							//Raise event  							this.Feedback(this' fb);  						}			  						  					}  					catch (Exception ex)  					{  						if (this.Error != null)  							this.Error(this' ex);  					}    					//Clear our array to reuse it  					Array.Clear(buffer' 0' buffer.Length);    					//Read the next feedback  					recd = apnsStream.Read(buffer' 0' buffer.Length);  				}  			}
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,ensureConnected,The following statement contains a magic number: while (!connected && !disposing && tries < ConnectAttempts)  			{  				tries++;    				try  				{  					apnsClient = new TcpClient(Host' Port);    					apnsStream = new SslStream(apnsClient.GetStream()' true'  						new RemoteCertificateValidationCallback(validateServerCertificate)'  						new LocalCertificateSelectionCallback(selectLocalCertificate));    					apnsStream.AuthenticateAsClient(Host'  						certificates'  						System.Security.Authentication.SslProtocols.Tls'  						false);    					connected = apnsStream.CanWrite;  				}  				catch (Exception ex)  				{  					if (this.Error != null)  						this.Error(this' ex);    					connected = false;    				}    				if (!connected)  				{  				    int wait = ReconnectDelay;  				    int waited = 0;    				    while (waited < wait && !disposing)  				    {  				        System.Threading.Thread.Sleep(250);  				        waited += 250;  				    }  				}    			}
Magic Number,JdSoft.Apple.Apns.Feedback,FeedbackService,C:\repos\Redth_APNS-Sharp\JdSoft.Apple.Apns.Feedback\FeedbackService.cs,ensureConnected,The following statement contains a magic number: while (!connected && !disposing && tries < ConnectAttempts)  			{  				tries++;    				try  				{  					apnsClient = new TcpClient(Host' Port);    					apnsStream = new SslStream(apnsClient.GetStream()' true'  						new RemoteCertificateValidationCallback(validateServerCertificate)'  						new LocalCertificateSelectionCallback(selectLocalCertificate));    					apnsStream.AuthenticateAsClient(Host'  						certificates'  						System.Security.Authentication.SslProtocols.Tls'  						false);    					connected = apnsStream.CanWrite;  				}  				catch (Exception ex)  				{  					if (this.Error != null)  						this.Error(this' ex);    					connected = false;    				}    				if (!connected)  				{  				    int wait = ReconnectDelay;  				    int waited = 0;    				    while (waited < wait && !disposing)  				    {  				        System.Threading.Thread.Sleep(250);  				        waited += 250;  				    }  				}    			}
