Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,ReadParam,Cyclomatic complexity of the method is 41
Complex Method,MassiveNet,NetZoneServer,C:\repos\jakevn_MassiveNet\MassiveNet\NetZoneServer.cs,IncrementalHandoffCheck,Cyclomatic complexity of the method is 8
Long Parameter List,MassiveNet,NetConnection,C:\repos\jakevn_MassiveNet\MassiveNet\NetConnection.cs,NetConnection,The method has 5 parameters. Parameters: isServer' isPeer' socket' endpoint' id
Long Parameter List,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,Send,The method has 5 parameters. Parameters: viewId' reliable' methodName' target' parameters
Long Parameter List,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,Send,The method has 5 parameters. Parameters: viewId' reliable' methodName' target' parameters
Long Parameter List,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,Send,The method has 5 parameters. Parameters: viewId' reliable' methodName' targets' parameters
Long Parameter List,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,CreateView,The method has 6 parameters. Parameters: controller' server' viewId' group' prefabRoot' relation
Long Parameter List,MassiveNet,NetZone,C:\repos\jakevn_MassiveNet\MassiveNet\NetZone.cs,NetZone,The method has 7 parameters. Parameters: position' viewIdMin' viewIdMax' handoff' handoffMin' handoffMax' zoneSize
Long Statement,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,DeliverStream,The length of the statement  "                    NetLog.Error("Failed to parse reliable message from: " + Connection.Endpoint + " Pos: " + strm.Pos + " Size: " + strm.Size); " is 124.
Long Statement,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,WriteParam,The length of the statement  "    "Serializer not implemented for type! You must add your own type check and serialization logic to serialize this type: " + " is 122.
Long Statement,MassiveNet,RequestDispatcher,C:\repos\jakevn_MassiveNet\MassiveNet\RequestDispatcher.cs,Send,The length of the statement  "            if (!Socket.Rpc.HasId(methodName)) throw new Exception("Cannot create request. Id does not exist for RPC: " + methodName); " is 122.
Long Statement,MassiveNet,NetScopeManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetScopeManager.cs,FullScopeCalculation,The length of the statement  "                } else if (connection.InGroup(view.Group) && view.CanInstantiateFor(connection) && UpdateScope(connection.Scope' view)) { " is 121.
Long Statement,MassiveNet,NetScopeManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetScopeManager.cs,UpdateScopeRange,The length of the statement  "                if (view != connection.View && view.Server == Socket.Self && connection.InGroup(view.Group) && view.CanInstantiateFor(connection) && UpdateScope(scope' view)) { " is 160.
Long Statement,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,FloatToHalf,The length of the statement  "            return (ushort)(ToHalfBase[(conv.uintValue >> 23) & 0x1ff] + ((conv.uintValue & 0x007fffff) >> ToHalfShift[(conv.uintValue >> 23) & 0x1ff])); " is 141.
Long Statement,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,Send,The length of the statement  "                        if ((netMessage.Reliable && connection.Scope.In(view.Id)) || connection.Scope.In(view.Id' syncFrame) || view.IsController(connection)) connection.Send(netMessage); " is 163.
Long Statement,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,Send,The length of the statement  "                        if ((netMessage.Reliable && connection.Scope.In(view.Id)) || connection.Scope.In(view.Id' syncFrame)) connection.Send(netMessage); " is 130.
Complex Conditional,MassiveNet,NetScopeManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetScopeManager.cs,UpdateScopeRange,The conditional expression  "view != connection.View && view.Server == Socket.Self && connection.InGroup(view.Group) && view.CanInstantiateFor(connection) && UpdateScope(scope' view)"  is complex.
Complex Conditional,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,Send,The conditional expression  "(netMessage.Reliable && connection.Scope.In(view.Id)) || connection.Scope.In(view.Id' syncFrame) || view.IsController(connection)"  is complex.
Magic Number,MassiveNet,CommandDispatcher,C:\repos\jakevn_MassiveNet\MassiveNet\CommandDispatcher.cs,RegisterParams,The following statement contains a magic number: if (commandId < 1800 || commandId > 2047)                  throw new Exception("Cannot register Command - Range: 1800-2047 - Provided: " + commandId);
Magic Number,MassiveNet,CommandDispatcher,C:\repos\jakevn_MassiveNet\MassiveNet\CommandDispatcher.cs,RegisterParams,The following statement contains a magic number: if (commandId < 1800 || commandId > 2047)                  throw new Exception("Cannot register Command - Range: 1800-2047 - Provided: " + commandId);
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,ShouldForceAck,The following statement contains a magic number: return ReceivedSinceLastSend > 16 || (ReceivedSinceLastSend > 0 && currentTime - LastReliableSent > 33);
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,ShouldForceAck,The following statement contains a magic number: return ReceivedSinceLastSend > 16 || (ReceivedSinceLastSend > 0 && currentTime - LastReliableSent > 33);
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,SerializeReliableMessage,The following statement contains a magic number: if (sendWindow.Count >= 512) return;
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,AdvanceLocalSequence,The following statement contains a magic number: LocalSequence &= 32767;
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,RouteIncomingStream,The following statement contains a magic number: if (strm.Length <= 120) {                  AckDelivered(header);                  strm.Release();              }              else if (!RemoteSequenceValid(seqDist)) strm.Release();              else if (seqDist != 1) BufferOutOfOrder(seqDist' strm' header);              else {                  AckReceived(header);                  AckDelivered(header);                  DeliverStream(strm);              }
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,RemoteSequenceValid,The following statement contains a magic number: return seqDist > 0 && seqDist <= 512;
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,BufferOutOfOrder,The following statement contains a magic number: if (recvBuffer.Count >= 512) {                  Connection.Disconnect();                  return;              }
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,BufferOutOfOrder,The following statement contains a magic number: if (seqDist < 64) {                  AckReceived(header);                  AckDelivered(header);              }              else strm.Pos = 1;
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,DecrementReceiveBuffer,The following statement contains a magic number: if (recvBufferSeqDist.Contains(63)) RetryOutOfOrder(recvBufferSeqDist.IndexOf(63));
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,DecrementReceiveBuffer,The following statement contains a magic number: if (recvBufferSeqDist.Contains(63)) RetryOutOfOrder(recvBufferSeqDist.IndexOf(63));
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,RetryOutOfOrder,The following statement contains a magic number: if (dist == 63) RouteIncomingStream(strm);              else if (dist == 1) DeliverStream(strm);
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,AckDelivered,The following statement contains a magic number: for (int i = 0; i < sendWindow.Count; i++) {                  int seqDist = NetMath.SeqDistance(sendWindow[i]' header.AckSequence);                  // This AckSequence is older than the sendWindow's' not useful:                  if (seqDist > 0) break;                  // AckHistory has rolled over without acking this message; Ordered reliable is broken:                  if (seqDist <= -64) Connection.Disconnect();                  // If the seqDistance corresponds to a true bit in the AckHistory' message delivered/acked:                  else if (IsAcked(header.AckHistory' seqDist)) {                      MessageDelivered(i' header);                      i--; // Since the sendWindow count will decrease' the index needs to be adjusted.                  }                  // The seqDist is still within the send window' but if too much time has passed' assume lost:                  else if (NetTime.Milliseconds() - sendWindowTime[i] > 333) MessageLost(i);              }
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,AckDelivered,The following statement contains a magic number: for (int i = 0; i < sendWindow.Count; i++) {                  int seqDist = NetMath.SeqDistance(sendWindow[i]' header.AckSequence);                  // This AckSequence is older than the sendWindow's' not useful:                  if (seqDist > 0) break;                  // AckHistory has rolled over without acking this message; Ordered reliable is broken:                  if (seqDist <= -64) Connection.Disconnect();                  // If the seqDistance corresponds to a true bit in the AckHistory' message delivered/acked:                  else if (IsAcked(header.AckHistory' seqDist)) {                      MessageDelivered(i' header);                      i--; // Since the sendWindow count will decrease' the index needs to be adjusted.                  }                  // The seqDist is still within the send window' but if too much time has passed' assume lost:                  else if (NetTime.Milliseconds() - sendWindowTime[i] > 333) MessageLost(i);              }
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,CheckTimeouts,The following statement contains a magic number: if (currentTime - lastCheckTime < 333) return;
Magic Number,MassiveNet,NetChannelReliable,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,CheckTimeouts,The following statement contains a magic number: for (int i = 0; i < sendWindow.Count; i++) {                  if (NetTime.Milliseconds() - sendWindowTime[i] > 333) MessageLost(i);              }
Magic Number,MassiveNet,NetHeader,C:\repos\jakevn_MassiveNet\MassiveNet\NetChannelReliable.cs,Create,The following statement contains a magic number: if (chan.LastReceiveTime > time) {                      header.AckTime = (ushort)Mathf.Clamp(time - chan.LastReceiveTime' 0' 6000);                  }
Magic Number,MassiveNet,NetConnection,C:\repos\jakevn_MassiveNet\MassiveNet\NetConnection.cs,ShouldSendHeartbeat,The following statement contains a magic number: return (currentTime - LastSendTime > 1000);
Magic Number,MassiveNet,NetConnection,C:\repos\jakevn_MassiveNet\MassiveNet\NetConnection.cs,ShouldDisconnect,The following statement contains a magic number: return (Reliable.SendWindowFull || currentTime - LastReceiveTime > 6000);
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,ReadParam,The following statement contains a magic number: if (type == typeof(IPAddress)) {                  byte[] array = new byte[4];                  stream.ReadByteArray(array);                  return new IPAddress(array);              }
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,WriteNetMessage,The following statement contains a magic number: stream.WriteUShort(message.MessageId' 11);
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,WriteNetMessage,The following statement contains a magic number: if (message.ViewId != 0) stream.WriteUInt(message.ViewId' 20);
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,TryWriteMessage,The following statement contains a magic number: if (!stream.CanWrite(32)) return false;
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,TryWriteMessage,The following statement contains a magic number: stream.WriteUShort(message.MessageId' 11);
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,TryWriteMessage,The following statement contains a magic number: if (message.ViewId != 0) stream.WriteUInt(message.ViewId' 20);
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,CanReadMessage,The following statement contains a magic number: return stream.CanRead(12);
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,ReadNetMessage,The following statement contains a magic number: ushort messageId = stream.ReadUShort(11);
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,ReadNetMessage,The following statement contains a magic number: if (stream.ReadBool()) viewId = stream.ReadUInt(20);
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,ReadNetMessage,The following statement contains a magic number: if (messageId > 1800) {                  if (!stream.Socket.Command.Exists(messageId)) {                      NetLog.Error("Cannot deserialize message' Command ID not found: " + messageId);                      return null;                  }                  paramTypes = stream.Socket.Command.ParamTypes(messageId);              } else {                  if (!stream.Socket.Rpc.Exists(messageId)) {                      NetLog.Error("Cannot deserialize message' RPC ID not found: " + messageId);                      return null;                  }                  paramTypes = stream.Socket.Rpc.ParamTypes(messageId);              }
Magic Number,MassiveNet,NetSerializer,C:\repos\jakevn_MassiveNet\MassiveNet\NetSerializer.cs,CreateRequestMessage,The following statement contains a magic number: if (!stream.CanRead(16)) return netMessage;
Magic Number,MassiveNet,RequestDispatcher,C:\repos\jakevn_MassiveNet\MassiveNet\RequestDispatcher.cs,CreateKey,The following statement contains a magic number: return (viewId << 16) ^ requestId;
Magic Number,MassiveNet,RequestDispatcher,C:\repos\jakevn_MassiveNet\MassiveNet\RequestDispatcher.cs,SetResponse,The following statement contains a magic number: if (message.Parameters.Length < 2 || !(message.Parameters[0] is ushort)) {                  NetLog.Error("Received malformed request response. Discarding.");                  return;              }
Magic Number,MassiveNet,RpcDispatcher,C:\repos\jakevn_MassiveNet\MassiveNet\RpcDispatcher.cs,ReceiveAssignmentRequest,The following statement contains a magic number: if (!HasId(rpcName)) {                  if (NameCount > 1800) return;                  AssignRemoteRpc(rpcName);                  // Send new assignment to all connections.                  foreach (NetConnection conn in Socket.Connections) {                      if (conn == connection || conn.IsServer) continue;                      Socket.Command.Send((int) Cmd.RemoteAssignment' conn' nameToId[rpcName]' rpcName);                  }              }
Magic Number,MassiveNet,RpcDispatcher,C:\repos\jakevn_MassiveNet\MassiveNet\RpcDispatcher.cs,AssignLocalRpcs,The following statement contains a magic number: foreach (KeyValuePair<string' RpcMethodInfo> kvp in RpcInfoCache.RpcMethods()) {                  for (i++; i < 1800; i++) {                      if (HasName((ushort) i)) continue;                      idToName.Add((ushort) i' kvp.Value.Name);                      nameToId.Add(kvp.Value.Name' (ushort) i);                      break;                  }              }
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,StartSocket,The following statement contains a magic number: try {                  const uint IOC_IN = 0x80000000;                  const uint IOC_VENDOR = 0x18000000;                  uint SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;                  socket.IOControl((int)SIO_UDP_CONNRESET' new[] { Convert.ToByte(false) }' null);              } catch {                  NetLog.Warning("Failed to set control code for ignoring ICMP port unreachable.");              }
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,StartSocket,The following statement contains a magic number: socket.ReceiveBufferSize = 4194304;
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,StartSocket,The following statement contains a magic number: if (socket.ReceiveBufferSize != 4194304) NetLog.Warning("ReceiveBufferSize restricted by OS.");
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,StartSocket,The following statement contains a magic number: socket.SendBufferSize = 1048576;
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,StartSocket,The following statement contains a magic number: try {                  socket.Bind(endpoint);              } catch (SocketException e) {                  if (e.ErrorCode == 10048) {                      var newEp = new IPEndPoint(endpoint.Address' endpoint.Port + 1);                      NetLog.Warning("Port in use. Incrementing and retrying...");                      StartSocket(newEp);                  } else {                      NetLog.Error(e.Message);                  }                  return;              }
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,Connect,The following statement contains a magic number: if (!connectingEndpoints.Contains(ep)) {                  // We aren't currently trying to connect to this endpoint' add to lists:                  connectingEndpoints.Add(ep);                  connectingTimes.Add(NetTime.Milliseconds());                  connectingData.Add(approvalData);                  connectingRetriesRemaining.Add(4);                  NetLog.Info("Connecting to: " + ep);              } else {                  // We are already trying to connect' update attempt data:                  int index = connectingEndpoints.IndexOf(ep);                  connectingRetriesRemaining[index]--;                  if (connectingRetriesRemaining[index] <= 0) {                      // Retried max amount of times' notify failure:                      RemoveFromConnecting(ep' false);                      return;                  }                  connectingTimes[index] = NetTime.Milliseconds();                  NetLog.Info("Retrying connection to: " + ep);              }
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,ReceiveAll,The following statement contains a magic number: while (CanReceive()) {                  var readStream = NetStream.Create();                  readStream.Socket = this;                  int received = 0;                  if (!TryReceive(readStream.Data' readStream.Data.Length' ref received' ref endPoint)) return;                  readStream.Length = received << 3;                  ProcessReceived(endPoint' received' readStream);              }
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,SendStream,The following statement contains a magic number: TrySend(stream.Data' stream.Pos + 7 >> 3' endpoint);
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,SendStream,The following statement contains a magic number: TrySend(stream.Data' stream.Pos + 7 >> 3' endpoint);
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,CheckForTimeouts,The following statement contains a magic number: for (int i = connectingEndpoints.Count - 1; i >= 0; i--) {                  if (NetTime.Milliseconds() - connectingTimes[i] > 2000) Connect(connectingEndpoints[i]' connectingData[i]);              }
Magic Number,MassiveNet,NetSocket,C:\repos\jakevn_MassiveNet\MassiveNet\NetSocket.cs,ReceiveMessage,The following statement contains a magic number: if (message.MessageId > 1800) Command.Dispatch(message' connection);              else if (message.ViewId == 0) DispatchRpc(message' connection);              else Events.MessageReceived(message' connection);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,NetStream,The following statement contains a magic number: Length = arr.Length << 3;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,Reset,The following statement contains a magic number: Length = size << 3;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteByte,The following statement contains a magic number: WriteByte(value' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadByte,The following statement contains a magic number: return ReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteSByte,The following statement contains a magic number: WriteSByte(value' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadSByte,The following statement contains a magic number: return ReadSByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUShort,The following statement contains a magic number: if (bits <= 8) InternalWriteByte((byte)(value & 0xFF)' bits);              else {                  InternalWriteByte((byte)(value & 0xFF)' 8);                  InternalWriteByte((byte)(value >> 8)' bits - 8);              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUShort,The following statement contains a magic number: if (bits <= 8) InternalWriteByte((byte)(value & 0xFF)' bits);              else {                  InternalWriteByte((byte)(value & 0xFF)' 8);                  InternalWriteByte((byte)(value >> 8)' bits - 8);              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUShort,The following statement contains a magic number: if (bits <= 8) InternalWriteByte((byte)(value & 0xFF)' bits);              else {                  InternalWriteByte((byte)(value & 0xFF)' 8);                  InternalWriteByte((byte)(value >> 8)' bits - 8);              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUShort,The following statement contains a magic number: if (bits <= 8) InternalWriteByte((byte)(value & 0xFF)' bits);              else {                  InternalWriteByte((byte)(value & 0xFF)' 8);                  InternalWriteByte((byte)(value >> 8)' bits - 8);              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUShort,The following statement contains a magic number: if (bits <= 8) return InternalReadByte(bits);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUShort,The following statement contains a magic number: return (ushort)(InternalReadByte(8) | (InternalReadByte(bits - 8) << 8));
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUShort,The following statement contains a magic number: return (ushort)(InternalReadByte(8) | (InternalReadByte(bits - 8) << 8));
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUShort,The following statement contains a magic number: return (ushort)(InternalReadByte(8) | (InternalReadByte(bits - 8) << 8));
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUShort,The following statement contains a magic number: WriteUShort(value' 16);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUShort,The following statement contains a magic number: return ReadUShort(16);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteShort,The following statement contains a magic number: WriteShort(value' 16);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadShort,The following statement contains a magic number: return ReadShort(16);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteChar,The following statement contains a magic number: WriteChar(value' 16);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadChar,The following statement contains a magic number: return ReadChar(16);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: byte a = (byte)(value >> 0)'                   b = (byte)(value >> 8)'                   c = (byte)(value >> 16)'                   d = (byte)(value >> 24);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: byte a = (byte)(value >> 0)'                   b = (byte)(value >> 8)'                   c = (byte)(value >> 16)'                   d = (byte)(value >> 24);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: byte a = (byte)(value >> 0)'                   b = (byte)(value >> 8)'                   c = (byte)(value >> 16)'                   d = (byte)(value >> 24);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: return (uint)(a | (b << 8) | (c << 16) | (d << 24));
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: return (uint)(a | (b << 8) | (c << 16) | (d << 24));
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: return (uint)(a | (b << 8) | (c << 16) | (d << 24));
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following statement contains a magic number: WriteUInt(value' 32);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following statement contains a magic number: return ReadUInt(32);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteInt,The following statement contains a magic number: WriteInt(value' 32);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadInt,The following statement contains a magic number: return ReadInt(32);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteULong,The following statement contains a magic number: if (bits <= 32) WriteUInt((uint)(value & 0xFFFFFFFF)' bits);              else {                  WriteUInt((uint)(value)' 32);                  WriteUInt((uint)(value >> 32)' bits - 32);              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteULong,The following statement contains a magic number: if (bits <= 32) WriteUInt((uint)(value & 0xFFFFFFFF)' bits);              else {                  WriteUInt((uint)(value)' 32);                  WriteUInt((uint)(value >> 32)' bits - 32);              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteULong,The following statement contains a magic number: if (bits <= 32) WriteUInt((uint)(value & 0xFFFFFFFF)' bits);              else {                  WriteUInt((uint)(value)' 32);                  WriteUInt((uint)(value >> 32)' bits - 32);              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteULong,The following statement contains a magic number: if (bits <= 32) WriteUInt((uint)(value & 0xFFFFFFFF)' bits);              else {                  WriteUInt((uint)(value)' 32);                  WriteUInt((uint)(value >> 32)' bits - 32);              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadULong,The following statement contains a magic number: if (bits <= 32) return ReadUInt(bits);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadULong,The following statement contains a magic number: ulong a = ReadUInt(32);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadULong,The following statement contains a magic number: ulong b = ReadUInt(bits - 32);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadULong,The following statement contains a magic number: return a | (b << 32);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteULong,The following statement contains a magic number: WriteULong(value' 64);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadULong,The following statement contains a magic number: return ReadULong(64);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteLong,The following statement contains a magic number: WriteLong(value' 64);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadLong,The following statement contains a magic number: return ReadLong(64);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteHalf,The following statement contains a magic number: WriteUShort(HalfConverter.FloatToHalf(value)' 16);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadHalf,The following statement contains a magic number: return HalfConverter.HalfToFloat(ReadUShort(16));
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteFloat,The following statement contains a magic number: InternalWriteByte(bytes.B0' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteFloat,The following statement contains a magic number: InternalWriteByte(bytes.B1' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteFloat,The following statement contains a magic number: InternalWriteByte(bytes.B2' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteFloat,The following statement contains a magic number: InternalWriteByte(bytes.B3' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadFloat,The following statement contains a magic number: bytes.B0 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadFloat,The following statement contains a magic number: bytes.B1 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadFloat,The following statement contains a magic number: bytes.B2 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadFloat,The following statement contains a magic number: bytes.B3 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteDouble,The following statement contains a magic number: InternalWriteByte(bytes.B0' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteDouble,The following statement contains a magic number: InternalWriteByte(bytes.B1' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteDouble,The following statement contains a magic number: InternalWriteByte(bytes.B2' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteDouble,The following statement contains a magic number: InternalWriteByte(bytes.B3' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteDouble,The following statement contains a magic number: InternalWriteByte(bytes.B4' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteDouble,The following statement contains a magic number: InternalWriteByte(bytes.B5' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteDouble,The following statement contains a magic number: InternalWriteByte(bytes.B6' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteDouble,The following statement contains a magic number: InternalWriteByte(bytes.B7' 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadDouble,The following statement contains a magic number: bytes.B0 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadDouble,The following statement contains a magic number: bytes.B1 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadDouble,The following statement contains a magic number: bytes.B2 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadDouble,The following statement contains a magic number: bytes.B3 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadDouble,The following statement contains a magic number: bytes.B4 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadDouble,The following statement contains a magic number: bytes.B5 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadDouble,The following statement contains a magic number: bytes.B6 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadDouble,The following statement contains a magic number: bytes.B7 = InternalReadByte(8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteByteArray,The following statement contains a magic number: int p = Pos >> 3;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteByteArray,The following statement contains a magic number: int bitsUsed = Pos % 8;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteByteArray,The following statement contains a magic number: int bitsFree = 8 - bitsUsed;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteByteArray,The following statement contains a magic number: Pos += (count * 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadByteArray,The following statement contains a magic number: int p = Pos >> 3;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadByteArray,The following statement contains a magic number: int bitsUsed = Pos % 8;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadByteArray,The following statement contains a magic number: if (bitsUsed == 0) Buffer.BlockCopy(Data' p' to' offset' count);              else {                  int bitsNotUsed = 8 - bitsUsed;                    for (int i = 0; i < count; ++i) {                      int first = Data[p] >> bitsUsed;                        p += 1;                        int second = Data[p] & (255 >> bitsNotUsed);                      to[offset + i] = (byte)(first | (second << bitsNotUsed));                  }              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadByteArray,The following statement contains a magic number: if (bitsUsed == 0) Buffer.BlockCopy(Data' p' to' offset' count);              else {                  int bitsNotUsed = 8 - bitsUsed;                    for (int i = 0; i < count; ++i) {                      int first = Data[p] >> bitsUsed;                        p += 1;                        int second = Data[p] & (255 >> bitsNotUsed);                      to[offset + i] = (byte)(first | (second << bitsNotUsed));                  }              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadByteArray,The following statement contains a magic number: Pos += (count * 8);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,InternalWriteByte,The following statement contains a magic number: value = (byte)(value & (0xFF >> (8 - bits)));
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,InternalWriteByte,The following statement contains a magic number: int p = Pos >> 3;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,InternalWriteByte,The following statement contains a magic number: int bitsFree = 8 - bitsUsed;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,InternalWriteByte,The following statement contains a magic number: if (bitsLeft >= 0) {                  int mask = (0xFF >> bitsFree) | (0xFF << (8 - bitsLeft));                  Data[p] = (byte)((Data[p] & mask) | (value << bitsUsed));              } else {                  Data[p] = (byte)((Data[p] & (0xFF >> bitsFree)) | (value << bitsUsed));                  Data[p + 1] = (byte)((Data[p + 1] & (0xFF << (bits - bitsFree))) | (value >> bitsFree));              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,InternalReadByte,The following statement contains a magic number: int p = Pos >> 3;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,InternalReadByte,The following statement contains a magic number: int bitsUsed = Pos % 8;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,InternalReadByte,The following statement contains a magic number: if (bitsUsed == 0 && bits == 8) value = Data[p];              else {                  int first = Data[p] >> bitsUsed;                  int remainingBits = bits - (8 - bitsUsed);                    if (remainingBits < 1) value = (byte)(first & (0xFF >> (8 - bits)));                  else {                      int second = Data[p + 1] & (0xFF >> (8 - remainingBits));                      value = (byte)(first | (second << (bits - remainingBits)));                  }              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,InternalReadByte,The following statement contains a magic number: if (bitsUsed == 0 && bits == 8) value = Data[p];              else {                  int first = Data[p] >> bitsUsed;                  int remainingBits = bits - (8 - bitsUsed);                    if (remainingBits < 1) value = (byte)(first & (0xFF >> (8 - bits)));                  else {                      int second = Data[p + 1] & (0xFF >> (8 - remainingBits));                      value = (byte)(first | (second << (bits - remainingBits)));                  }              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,InternalReadByte,The following statement contains a magic number: if (bitsUsed == 0 && bits == 8) value = Data[p];              else {                  int first = Data[p] >> bitsUsed;                  int remainingBits = bits - (8 - bitsUsed);                    if (remainingBits < 1) value = (byte)(first & (0xFF >> (8 - bits)));                  else {                      int second = Data[p + 1] & (0xFF >> (8 - remainingBits));                      value = (byte)(first | (second << (bits - remainingBits)));                  }              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,InternalReadByte,The following statement contains a magic number: if (bitsUsed == 0 && bits == 8) value = Data[p];              else {                  int first = Data[p] >> bitsUsed;                  int remainingBits = bits - (8 - bitsUsed);                    if (remainingBits < 1) value = (byte)(first & (0xFF >> (8 - bits)));                  else {                      int second = Data[p + 1] & (0xFF >> (8 - remainingBits));                      value = (byte)(first | (second << (bits - remainingBits)));                  }              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,CopyTo,The following statement contains a magic number: if (Position == 0) {                  if (WriteLength) stream.WriteUShort((ushort)Position' 14);                  return;              }
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,CopyTo,The following statement contains a magic number: int count = Position >> 3;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,CopyTo,The following statement contains a magic number: int bits = Position % 8;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,CopyTo,The following statement contains a magic number: if (WriteLength) stream.WriteUShort((ushort)Position' 14);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadNetStream,The following statement contains a magic number: newStream.Size = ReadUShort(14);
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadNetStream,The following statement contains a magic number: int count = newStream.Size >> 3;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadNetStream,The following statement contains a magic number: int bits = newStream.Size % 8;
Magic Number,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,CreateFromPool,The following statement contains a magic number: return Pool.Count == 0 ? new NetStream(new byte[1400]) : Pool.Dequeue();
Magic Number,MassiveNet,NetTime,C:\repos\jakevn_MassiveNet\MassiveNet\NetTime.cs,Milliseconds,The following statement contains a magic number: return (uint) (seconds*1000.0);
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendPeerData,The following statement contains a magic number: var msg = NetMessage.Create((ushort)ViewCmd.CreatePeerView' (uint)Id' 5' true);
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendPeerData,The following statement contains a magic number: msg.Parameters[2] = PrefabRoot;
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendPeerData,The following statement contains a magic number: msg.Parameters[3] = TriggerGetPeerData();
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendPeerData,The following statement contains a magic number: if (Controllers.Count > 0) msg.Parameters[4] = Controllers[0].Endpoint;
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendProxyData,The following statement contains a magic number: var msg = NetMessage.Create((ushort)ViewCmd.CreateProxyView' (uint)Id' 4' true);
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendProxyData,The following statement contains a magic number: msg.Parameters[2] = PrefabRoot;
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendProxyData,The following statement contains a magic number: msg.Parameters[3] = TriggerGetProxyData();
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendOwnerData,The following statement contains a magic number: var msg = NetMessage.Create((ushort)ViewCmd.CreateOwnerView' (uint)Id' 4' true);
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendOwnerData,The following statement contains a magic number: msg.Parameters[2] = PrefabRoot;
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendOwnerData,The following statement contains a magic number: msg.Parameters[3] = TriggerGetOwnerData();
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendCreatorData,The following statement contains a magic number: var msg = NetMessage.Create((ushort)ViewCmd.CreateCreatorView' (uint)Id' 5' true);
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendCreatorData,The following statement contains a magic number: msg.Parameters[2] = PrefabRoot;
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendCreatorData,The following statement contains a magic number: msg.Parameters[3] = TriggerGetCreatorData();
Magic Number,MassiveNet,NetView,C:\repos\jakevn_MassiveNet\MassiveNet\NetView.cs,SendCreatorData,The following statement contains a magic number: if (Controllers.Count > 0) msg.Parameters[4] = Controllers[0].Endpoint;
Magic Number,MassiveNet,NetScope,C:\repos\jakevn_MassiveNet\MassiveNet\NetScope.cs,In,The following statement contains a magic number: return (lod == scopeLevel || lod == 1 || (lod == 2 && scopeLevel == 4));
Magic Number,MassiveNet,NetScope,C:\repos\jakevn_MassiveNet\MassiveNet\NetScope.cs,In,The following statement contains a magic number: return (lod == scopeLevel || lod == 1 || (lod == 2 && scopeLevel == 4));
Magic Number,MassiveNet,NetScopeManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetScopeManager.cs,UpdateScope,The following statement contains a magic number: if (view.Scope.CalcDisabled || distance > rulesScope.OutScopeDist) {                  if (!source.In(view.Id)) return false;                  scopeChanged = true;                  source.SetOut(view.Id);              } else if (distance < rulesScope.InScopeDist) {                  if (!source.In(view.Id)) scopeChanged = true;                    if (distance < rulesScope.LevelOne) source.SetIn(view.Id' 1);                  else if (distance < rulesScope.LevelTwo) source.SetIn(view.Id' 2);                  else source.SetIn(view.Id' 3);              }
Magic Number,MassiveNet,NetScopeManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetScopeManager.cs,UpdateScope,The following statement contains a magic number: if (view.Scope.CalcDisabled || distance > rulesScope.OutScopeDist) {                  if (!source.In(view.Id)) return false;                  scopeChanged = true;                  source.SetOut(view.Id);              } else if (distance < rulesScope.InScopeDist) {                  if (!source.In(view.Id)) scopeChanged = true;                    if (distance < rulesScope.LevelOne) source.SetIn(view.Id' 1);                  else if (distance < rulesScope.LevelTwo) source.SetIn(view.Id' 2);                  else source.SetIn(view.Id' 3);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateMantissaTable,The following statement contains a magic number: for (int i = 1; i < 1024; i++) {                  uint m = ((uint)i) << 13;                  uint e = 0;                    while ((m & 0x00800000) == 0) {                      e -= 0x00800000;                      m <<= 1;                  }                    m &= ~0x00800000U;                  e += 0x38800000;                  ToFloatMantissa[i] = m | e;              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateMantissaTable,The following statement contains a magic number: for (int i = 1; i < 1024; i++) {                  uint m = ((uint)i) << 13;                  uint e = 0;                    while ((m & 0x00800000) == 0) {                      e -= 0x00800000;                      m <<= 1;                  }                    m &= ~0x00800000U;                  e += 0x38800000;                  ToFloatMantissa[i] = m | e;              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateMantissaTable,The following statement contains a magic number: for (int i = 1024; i < 2048; i++) {                  ToFloatMantissa[i] = 0x38000000 + (((uint)(i - 1024)) << 13);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateMantissaTable,The following statement contains a magic number: for (int i = 1024; i < 2048; i++) {                  ToFloatMantissa[i] = 0x38000000 + (((uint)(i - 1024)) << 13);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateMantissaTable,The following statement contains a magic number: for (int i = 1024; i < 2048; i++) {                  ToFloatMantissa[i] = 0x38000000 + (((uint)(i - 1024)) << 13);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateMantissaTable,The following statement contains a magic number: for (int i = 1024; i < 2048; i++) {                  ToFloatMantissa[i] = 0x38000000 + (((uint)(i - 1024)) << 13);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateExponentTable,The following statement contains a magic number: for (int i = 1; i < 63; i++) {                  // Positive:                  if (i < 31) ToFloatExponent[i] = ((uint)i) << 23;                  // Negative:                  else ToFloatExponent[i] = 0x80000000 + (((uint)(i - 32)) << 23);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateExponentTable,The following statement contains a magic number: for (int i = 1; i < 63; i++) {                  // Positive:                  if (i < 31) ToFloatExponent[i] = ((uint)i) << 23;                  // Negative:                  else ToFloatExponent[i] = 0x80000000 + (((uint)(i - 32)) << 23);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateExponentTable,The following statement contains a magic number: for (int i = 1; i < 63; i++) {                  // Positive:                  if (i < 31) ToFloatExponent[i] = ((uint)i) << 23;                  // Negative:                  else ToFloatExponent[i] = 0x80000000 + (((uint)(i - 32)) << 23);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateExponentTable,The following statement contains a magic number: for (int i = 1; i < 63; i++) {                  // Positive:                  if (i < 31) ToFloatExponent[i] = ((uint)i) << 23;                  // Negative:                  else ToFloatExponent[i] = 0x80000000 + (((uint)(i - 32)) << 23);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateExponentTable,The following statement contains a magic number: for (int i = 1; i < 63; i++) {                  // Positive:                  if (i < 31) ToFloatExponent[i] = ((uint)i) << 23;                  // Negative:                  else ToFloatExponent[i] = 0x80000000 + (((uint)(i - 32)) << 23);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateExponentTable,The following statement contains a magic number: ToFloatExponent[31] = 0x47800000;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateExponentTable,The following statement contains a magic number: ToFloatExponent[32] = 0x80000000;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateExponentTable,The following statement contains a magic number: ToFloatExponent[63] = 0xC7800000;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateOffsetTable,The following statement contains a magic number: for (int i = 1; i < 64; i++) ToFloatOffset[i] = 1024;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateOffsetTable,The following statement contains a magic number: for (int i = 1; i < 64; i++) ToFloatOffset[i] = 1024;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,PopulateOffsetTable,The following statement contains a magic number: ToFloatOffset[32] = 0;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,GenerateToHalf,The following statement contains a magic number: for (int i = 0; i < 256; i++) {                  int e = i - 127;                  if (e < -24) MapToZero(i);                  else if (e < -14) MapToDenorm(i' e);                  else if (e <= 15) MapToPrecisionLoss(i' e);                  else if (e < 128) MapToInfinity(i);                  else MapForNaN(i);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,GenerateToHalf,The following statement contains a magic number: for (int i = 0; i < 256; i++) {                  int e = i - 127;                  if (e < -24) MapToZero(i);                  else if (e < -14) MapToDenorm(i' e);                  else if (e <= 15) MapToPrecisionLoss(i' e);                  else if (e < 128) MapToInfinity(i);                  else MapForNaN(i);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,GenerateToHalf,The following statement contains a magic number: for (int i = 0; i < 256; i++) {                  int e = i - 127;                  if (e < -24) MapToZero(i);                  else if (e < -14) MapToDenorm(i' e);                  else if (e <= 15) MapToPrecisionLoss(i' e);                  else if (e < 128) MapToInfinity(i);                  else MapForNaN(i);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,GenerateToHalf,The following statement contains a magic number: for (int i = 0; i < 256; i++) {                  int e = i - 127;                  if (e < -24) MapToZero(i);                  else if (e < -14) MapToDenorm(i' e);                  else if (e <= 15) MapToPrecisionLoss(i' e);                  else if (e < 128) MapToInfinity(i);                  else MapForNaN(i);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,GenerateToHalf,The following statement contains a magic number: for (int i = 0; i < 256; i++) {                  int e = i - 127;                  if (e < -24) MapToZero(i);                  else if (e < -14) MapToDenorm(i' e);                  else if (e <= 15) MapToPrecisionLoss(i' e);                  else if (e < 128) MapToInfinity(i);                  else MapForNaN(i);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,GenerateToHalf,The following statement contains a magic number: for (int i = 0; i < 256; i++) {                  int e = i - 127;                  if (e < -24) MapToZero(i);                  else if (e < -14) MapToDenorm(i' e);                  else if (e <= 15) MapToPrecisionLoss(i' e);                  else if (e < 128) MapToInfinity(i);                  else MapForNaN(i);              }
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToZero,The following statement contains a magic number: ToHalfShift[i | 0x000] = 24;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToZero,The following statement contains a magic number: ToHalfShift[i | 0x100] = 24;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToDenorm,The following statement contains a magic number: ToHalfBase[i | 0x000] = (ushort)((0x0400 >> (-e - 14)));
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToDenorm,The following statement contains a magic number: ToHalfBase[i | 0x100] = (ushort)((0x0400 >> (-e - 14)) | 0x8000);
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToPrecisionLoss,The following statement contains a magic number: ToHalfBase[i | 0x000] = (ushort)(((e + 15) << 10));
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToPrecisionLoss,The following statement contains a magic number: ToHalfBase[i | 0x000] = (ushort)(((e + 15) << 10));
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToPrecisionLoss,The following statement contains a magic number: ToHalfBase[i | 0x100] = (ushort)(((e + 15) << 10) | 0x8000);
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToPrecisionLoss,The following statement contains a magic number: ToHalfBase[i | 0x100] = (ushort)(((e + 15) << 10) | 0x8000);
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToPrecisionLoss,The following statement contains a magic number: ToHalfShift[i | 0x000] = 13;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToPrecisionLoss,The following statement contains a magic number: ToHalfShift[i | 0x100] = 13;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToInfinity,The following statement contains a magic number: ToHalfShift[i | 0x000] = 24;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapToInfinity,The following statement contains a magic number: ToHalfShift[i | 0x100] = 24;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapForNaN,The following statement contains a magic number: ToHalfShift[i | 0x000] = 13;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,MapForNaN,The following statement contains a magic number: ToHalfShift[i | 0x100] = 13;
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,HalfToFloat,The following statement contains a magic number: conv.uintValue = ToFloatMantissa[ToFloatOffset[value >> 10] + (((uint)value) & 0x3ff)] + ToFloatExponent[value >> 10];
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,HalfToFloat,The following statement contains a magic number: conv.uintValue = ToFloatMantissa[ToFloatOffset[value >> 10] + (((uint)value) & 0x3ff)] + ToFloatExponent[value >> 10];
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,FloatToHalf,The following statement contains a magic number: return (ushort)(ToHalfBase[(conv.uintValue >> 23) & 0x1ff] + ((conv.uintValue & 0x007fffff) >> ToHalfShift[(conv.uintValue >> 23) & 0x1ff]));
Magic Number,MassiveNet,HalfConverter,C:\repos\jakevn_MassiveNet\MassiveNet\HalfConverter.cs,FloatToHalf,The following statement contains a magic number: return (ushort)(ToHalfBase[(conv.uintValue >> 23) & 0x1ff] + ((conv.uintValue & 0x007fffff) >> ToHalfShift[(conv.uintValue >> 23) & 0x1ff]));
Magic Number,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,IncrementalSyncViews,The following statement contains a magic number: if (syncFrame > 4) syncFrame = 1;
Magic Number,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,ReceiveCreateView,The following statement contains a magic number: string prefabRoot = (string)message.Parameters[2];
Magic Number,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,ReceiveCreateView,The following statement contains a magic number: var stream = (NetStream)message.Parameters[3];
Magic Number,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,ReceiveCreateView,The following statement contains a magic number: if (relation == NetView.Relation.Creator || relation == NetView.Relation.Peer) {                  var ipendpoint = (IPEndPoint)message.Parameters[4];                  if (ipendpoint != null) {                      if (Socket.EndpointConnected(ipendpoint)) controller = Socket.EndpointToConnection(ipendpoint);                      else NetLog.Error("Failed to create view' controller endpoint not connected: " + ipendpoint);                  }              }
Magic Number,MassiveNet,NetZoneServer,C:\repos\jakevn_MassiveNet\MassiveNet\NetZoneServer.cs,IncrementalHandoffCheck,The following statement contains a magic number: if (incHandoffFrame != (Application.targetFrameRate*2)) return;
Magic Number,MassiveNet,NetZoneServer,C:\repos\jakevn_MassiveNet\MassiveNet\NetZoneServer.cs,IncrementalHandoffCheck,The following statement contains a magic number: handoffBatchSize = (ViewManager.Views.Count/(Application.targetFrameRate*2)) + 1;
Magic Number,MassiveNet,NetZoneServer,C:\repos\jakevn_MassiveNet\MassiveNet\NetZoneServer.cs,PeerConnected,The following statement contains a magic number: connection.InternalScope.OutScopeDist = (int)(peer.HandoverMaxDistance * 1.25);
Missing Default,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,WriteUInt,The following switch statement is missing a default case: switch ((bits + 7) / 8) {                  case 1:                      InternalWriteByte(a' bits);                      break;                  case 2:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' bits - 8);                      break;                  case 3:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' bits - 16);                      break;                  case 4:                      InternalWriteByte(a' 8);                      InternalWriteByte(b' 8);                      InternalWriteByte(c' 8);                      InternalWriteByte(d' bits - 24);                      break;              }
Missing Default,MassiveNet,NetStream,C:\repos\jakevn_MassiveNet\MassiveNet\NetStream.cs,ReadUInt,The following switch statement is missing a default case: switch ((bits + 7) / 8) {                  case 1:                      a = InternalReadByte(bits);                      break;                  case 2:                      a = InternalReadByte(8);                      b = InternalReadByte(bits - 8);                      break;                  case 3:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(bits - 16);                      break;                  case 4:                      a = InternalReadByte(8);                      b = InternalReadByte(8);                      c = InternalReadByte(8);                      d = InternalReadByte(bits - 24);                      break;              }
Missing Default,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,Send,The following switch statement is missing a default case: switch (target) {                  case (RpcTarget.All):                      for (int i = 0; i < Socket.Connections.Count; i++) {                          var connection = Socket.Connections[i];                          if (!connection.HasScope) continue;                          if (view.Group != 0 && !connection.InGroup(view.Group)) continue;                          if ((netMessage.Reliable && connection.Scope.In(view.Id)) || connection.Scope.In(view.Id' syncFrame) || view.IsController(connection)) connection.Send(netMessage);                      }                      break;                  case (RpcTarget.Controllers):                      foreach (NetConnection controller in view.Controllers) {                          if (controller == Socket.Self) continue;                          controller.Send(netMessage);                      }                      break;                  case (RpcTarget.NonControllers):                      for (int i = 0; i < Socket.Connections.Count; i++) {                          var connection = Socket.Connections[i];                          if (connection.IsServer || !connection.HasScope) continue;                          if (view.IsController(connection)) continue;                          if (view.Group != 0 && !connection.InGroup(view.Group)) continue;                          if ((netMessage.Reliable && connection.Scope.In(view.Id)) || connection.Scope.In(view.Id' syncFrame)) connection.Send(netMessage);                      }                      break;                  case (RpcTarget.Server):                      if (view.Server != Socket.Self) view.Server.Send(netMessage);                      else NetLog.Warning("Trying to send message to self.");                      break;                  case (RpcTarget.AllInclOutOfScope):                      for (int i = 0; i < Socket.Connections.Count; i++) {                          var connection = Socket.Connections[i];                          if (view.Group != 0 && !connection.InGroup(view.Group)) continue;                          connection.Send(netMessage);                      }                      break;              }
Missing Default,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,ReceiveCreateView,The following switch statement is missing a default case: switch (message.MessageId) {                  case (int)ViewCmd.CreateOwnerView:                      controller = Socket.Self;                      relation = NetView.Relation.Owner;                      break;                  case (int)ViewCmd.CreatePeerView:                      relation = NetView.Relation.Peer;                      break;                  case (int)ViewCmd.CreateCreatorView:                      server = Socket.Self;                      relation = NetView.Relation.Creator;                      break;                  case (int)ViewCmd.CreateProxyView:                      relation = NetView.Relation.Proxy;                      break;              }
Missing Default,MassiveNet,NetViewManager,C:\repos\jakevn_MassiveNet\MassiveNet\NetViewManager.cs,GetTarget,The following switch statement is missing a default case: switch (target) {                  case RpcTarget.Server:                      return view.Server;                  case RpcTarget.Controllers:                      return view.Controllers[0];              }
