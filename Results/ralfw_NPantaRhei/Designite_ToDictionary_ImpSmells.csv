Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ToDictionary,sample_ToDictionary,C:\repos\ralfw_NPantaRhei\source\npantarhei.samples\ToDictionary\sample_ToDictionary.cs,Run_flat,The length of the statement  "				frc.AddFunc<string' IEnumerable<string>>("Split"' configuration => configuration.Split(new[] {';'}' StringSplitOptions.RemoveEmptyEntries)); " is 140.
Long Statement,ToDictionary,sample_ToDictionary,C:\repos\ralfw_NPantaRhei\source\npantarhei.samples\ToDictionary\sample_ToDictionary.cs,Run_nested,The length of the statement  "				frc.AddFunc<string' IEnumerable<string>>("Split"' configuration => configuration.Split(new[] {';'}' StringSplitOptions.RemoveEmptyEntries)); " is 140.
Magic Number,ToDictionary,sample_ToDictionary,C:\repos\ralfw_NPantaRhei\source\npantarhei.samples\ToDictionary\sample_ToDictionary.cs,Run_flat,The following statement contains a magic number: using (var fr = new FlowRuntime())  			{  				/*  				 * (.in) -> (Split) -> (Map) -> (Build) -> (.out)  				 */  				var frc = new FlowRuntimeConfiguration();  				frc.AddStream(new Stream(".in"' "Split"));  				frc.AddStream(new Stream("Split"' "Map"));  				frc.AddStream(new Stream("Map"' "Build"));  				frc.AddStream(new Stream("Build"' ".out"));    				frc.AddFunc<string' IEnumerable<string>>("Split"' configuration => configuration.Split(new[] {';'}' StringSplitOptions.RemoveEmptyEntries));  				frc.AddAction<IEnumerable<string>' IEnumerable<KeyValuePair<string' string>>>("Map"' Map);  				frc.AddFunc<IEnumerable<KeyValuePair<string' string>>' Dictionary<string' string>>("Build"' Build);  				fr.Configure(frc);    				Dictionary<string' string> dict = null;  				var are = new AutoResetEvent(false);  				fr.Result += _ =>  								{  									dict = (Dictionary<string' string>) _.Data;  									are.Set();  								};    				fr.Process(new Message(".in"' "a=1;b=2"));    				Assert.IsTrue(are.WaitOne(500));  				Assert.AreEqual(2' dict.Count);  				Assert.AreEqual("1"' dict["a"]);  				Assert.AreEqual("2"' dict["b"]);  			}
Magic Number,ToDictionary,sample_ToDictionary,C:\repos\ralfw_NPantaRhei\source\npantarhei.samples\ToDictionary\sample_ToDictionary.cs,Run_flat,The following statement contains a magic number: using (var fr = new FlowRuntime())  			{  				/*  				 * (.in) -> (Split) -> (Map) -> (Build) -> (.out)  				 */  				var frc = new FlowRuntimeConfiguration();  				frc.AddStream(new Stream(".in"' "Split"));  				frc.AddStream(new Stream("Split"' "Map"));  				frc.AddStream(new Stream("Map"' "Build"));  				frc.AddStream(new Stream("Build"' ".out"));    				frc.AddFunc<string' IEnumerable<string>>("Split"' configuration => configuration.Split(new[] {';'}' StringSplitOptions.RemoveEmptyEntries));  				frc.AddAction<IEnumerable<string>' IEnumerable<KeyValuePair<string' string>>>("Map"' Map);  				frc.AddFunc<IEnumerable<KeyValuePair<string' string>>' Dictionary<string' string>>("Build"' Build);  				fr.Configure(frc);    				Dictionary<string' string> dict = null;  				var are = new AutoResetEvent(false);  				fr.Result += _ =>  								{  									dict = (Dictionary<string' string>) _.Data;  									are.Set();  								};    				fr.Process(new Message(".in"' "a=1;b=2"));    				Assert.IsTrue(are.WaitOne(500));  				Assert.AreEqual(2' dict.Count);  				Assert.AreEqual("1"' dict["a"]);  				Assert.AreEqual("2"' dict["b"]);  			}
Magic Number,ToDictionary,sample_ToDictionary,C:\repos\ralfw_NPantaRhei\source\npantarhei.samples\ToDictionary\sample_ToDictionary.cs,Run_nested,The following statement contains a magic number: using (var fr = new FlowRuntime())  			{  				/*  				 * (.in) -> (ToDict) -> (.out).  				 * ToDict {  				 * 		(.in) -> (Split) -> (Map) -> (Build) -> (.out)  				 * }  				 */  				var frc = new FlowRuntimeConfiguration();  				frc.AddStream(new Stream(".in"' "ToDict/Split"));  				frc.AddStream(new Stream("ToDict/Split"' "ToDict/Map"));  				frc.AddStream(new Stream("ToDict/Map"' "ToDict/Build"));  				frc.AddStream(new Stream("ToDict/Build"' ".out"));    				frc.AddFunc<string' IEnumerable<string>>("Split"' configuration => configuration.Split(new[] {';'}' StringSplitOptions.RemoveEmptyEntries));  				frc.AddAction<IEnumerable<string>' IEnumerable<KeyValuePair<string' string>>>("Map"' Map);  				frc.AddFunc<IEnumerable<KeyValuePair<string' string>>' Dictionary<string' string>>("Build"' Build);  				fr.Configure(frc);    				Dictionary<string' string> dict = null;  				var are = new AutoResetEvent(false);  				fr.Result += _ =>  								{  									dict = (Dictionary<string' string>) _.Data;  									are.Set();  								};    				fr.Process(new Message(".in"' "a=1;b=2"));  				Assert.IsTrue(are.WaitOne(500));  				Assert.AreEqual(2' dict.Count);  				Assert.AreEqual("1"' dict["a"]);  				Assert.AreEqual("2"' dict["b"]);    				fr.Process(new Message(".in"' "x=9;y=8;z=7"));  				Assert.IsTrue(are.WaitOne(500));  				Assert.AreEqual(3' dict.Count);  				Assert.AreEqual("9"' dict["x"]);  				Assert.AreEqual("8"' dict["y"]);  				Assert.AreEqual("7"' dict["z"]);  			}
Magic Number,ToDictionary,sample_ToDictionary,C:\repos\ralfw_NPantaRhei\source\npantarhei.samples\ToDictionary\sample_ToDictionary.cs,Run_nested,The following statement contains a magic number: using (var fr = new FlowRuntime())  			{  				/*  				 * (.in) -> (ToDict) -> (.out).  				 * ToDict {  				 * 		(.in) -> (Split) -> (Map) -> (Build) -> (.out)  				 * }  				 */  				var frc = new FlowRuntimeConfiguration();  				frc.AddStream(new Stream(".in"' "ToDict/Split"));  				frc.AddStream(new Stream("ToDict/Split"' "ToDict/Map"));  				frc.AddStream(new Stream("ToDict/Map"' "ToDict/Build"));  				frc.AddStream(new Stream("ToDict/Build"' ".out"));    				frc.AddFunc<string' IEnumerable<string>>("Split"' configuration => configuration.Split(new[] {';'}' StringSplitOptions.RemoveEmptyEntries));  				frc.AddAction<IEnumerable<string>' IEnumerable<KeyValuePair<string' string>>>("Map"' Map);  				frc.AddFunc<IEnumerable<KeyValuePair<string' string>>' Dictionary<string' string>>("Build"' Build);  				fr.Configure(frc);    				Dictionary<string' string> dict = null;  				var are = new AutoResetEvent(false);  				fr.Result += _ =>  								{  									dict = (Dictionary<string' string>) _.Data;  									are.Set();  								};    				fr.Process(new Message(".in"' "a=1;b=2"));  				Assert.IsTrue(are.WaitOne(500));  				Assert.AreEqual(2' dict.Count);  				Assert.AreEqual("1"' dict["a"]);  				Assert.AreEqual("2"' dict["b"]);    				fr.Process(new Message(".in"' "x=9;y=8;z=7"));  				Assert.IsTrue(are.WaitOne(500));  				Assert.AreEqual(3' dict.Count);  				Assert.AreEqual("9"' dict["x"]);  				Assert.AreEqual("8"' dict["y"]);  				Assert.AreEqual("7"' dict["z"]);  			}
Magic Number,ToDictionary,sample_ToDictionary,C:\repos\ralfw_NPantaRhei\source\npantarhei.samples\ToDictionary\sample_ToDictionary.cs,Run_nested,The following statement contains a magic number: using (var fr = new FlowRuntime())  			{  				/*  				 * (.in) -> (ToDict) -> (.out).  				 * ToDict {  				 * 		(.in) -> (Split) -> (Map) -> (Build) -> (.out)  				 * }  				 */  				var frc = new FlowRuntimeConfiguration();  				frc.AddStream(new Stream(".in"' "ToDict/Split"));  				frc.AddStream(new Stream("ToDict/Split"' "ToDict/Map"));  				frc.AddStream(new Stream("ToDict/Map"' "ToDict/Build"));  				frc.AddStream(new Stream("ToDict/Build"' ".out"));    				frc.AddFunc<string' IEnumerable<string>>("Split"' configuration => configuration.Split(new[] {';'}' StringSplitOptions.RemoveEmptyEntries));  				frc.AddAction<IEnumerable<string>' IEnumerable<KeyValuePair<string' string>>>("Map"' Map);  				frc.AddFunc<IEnumerable<KeyValuePair<string' string>>' Dictionary<string' string>>("Build"' Build);  				fr.Configure(frc);    				Dictionary<string' string> dict = null;  				var are = new AutoResetEvent(false);  				fr.Result += _ =>  								{  									dict = (Dictionary<string' string>) _.Data;  									are.Set();  								};    				fr.Process(new Message(".in"' "a=1;b=2"));  				Assert.IsTrue(are.WaitOne(500));  				Assert.AreEqual(2' dict.Count);  				Assert.AreEqual("1"' dict["a"]);  				Assert.AreEqual("2"' dict["b"]);    				fr.Process(new Message(".in"' "x=9;y=8;z=7"));  				Assert.IsTrue(are.WaitOne(500));  				Assert.AreEqual(3' dict.Count);  				Assert.AreEqual("9"' dict["x"]);  				Assert.AreEqual("8"' dict["y"]);  				Assert.AreEqual("7"' dict["z"]);  			}
Magic Number,ToDictionary,sample_ToDictionary,C:\repos\ralfw_NPantaRhei\source\npantarhei.samples\ToDictionary\sample_ToDictionary.cs,Run_nested,The following statement contains a magic number: using (var fr = new FlowRuntime())  			{  				/*  				 * (.in) -> (ToDict) -> (.out).  				 * ToDict {  				 * 		(.in) -> (Split) -> (Map) -> (Build) -> (.out)  				 * }  				 */  				var frc = new FlowRuntimeConfiguration();  				frc.AddStream(new Stream(".in"' "ToDict/Split"));  				frc.AddStream(new Stream("ToDict/Split"' "ToDict/Map"));  				frc.AddStream(new Stream("ToDict/Map"' "ToDict/Build"));  				frc.AddStream(new Stream("ToDict/Build"' ".out"));    				frc.AddFunc<string' IEnumerable<string>>("Split"' configuration => configuration.Split(new[] {';'}' StringSplitOptions.RemoveEmptyEntries));  				frc.AddAction<IEnumerable<string>' IEnumerable<KeyValuePair<string' string>>>("Map"' Map);  				frc.AddFunc<IEnumerable<KeyValuePair<string' string>>' Dictionary<string' string>>("Build"' Build);  				fr.Configure(frc);    				Dictionary<string' string> dict = null;  				var are = new AutoResetEvent(false);  				fr.Result += _ =>  								{  									dict = (Dictionary<string' string>) _.Data;  									are.Set();  								};    				fr.Process(new Message(".in"' "a=1;b=2"));  				Assert.IsTrue(are.WaitOne(500));  				Assert.AreEqual(2' dict.Count);  				Assert.AreEqual("1"' dict["a"]);  				Assert.AreEqual("2"' dict["b"]);    				fr.Process(new Message(".in"' "x=9;y=8;z=7"));  				Assert.IsTrue(are.WaitOne(500));  				Assert.AreEqual(3' dict.Count);  				Assert.AreEqual("9"' dict["x"]);  				Assert.AreEqual("8"' dict["y"]);  				Assert.AreEqual("7"' dict["z"]);  			}
