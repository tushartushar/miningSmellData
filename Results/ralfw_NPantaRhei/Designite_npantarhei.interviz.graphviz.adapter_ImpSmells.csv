Implementation smell,Namespace,Class,File,Method,Description
Long Statement,npantarhei.interviz.graphviz.adapter,GraphVizAdapter,C:\repos\ralfw_NPantaRhei\source\npantarhei.interviz\npantarhei.interviz.graphviz.adapter\GraphVizAdapter.cs,Compile_graph_to_node_map,The length of the statement  "            var nodeMapSource = Compile_graph_to<string>(dotSource' "plain"' s => { using(var sr = new StreamReader(s)) { return sr.ReadToEnd(); } }); " is 138.
Magic Number,npantarhei.interviz.graphviz.adapter,GraphVizAdapter,C:\repos\ralfw_NPantaRhei\source\npantarhei.interviz\npantarhei.interviz.graphviz.adapter\GraphVizAdapter.cs,Compile_node_map,The following statement contains a magic number: using(var r = new StringReader(nodeMapSource))              {                  var enUS = new CultureInfo("en-US");                    var l = r.ReadLine();                  var graphParts = l.Split(' ');                  var graphWidthInches = double.Parse(graphParts[2]' enUS);                  var graphHeightInches = double.Parse(graphParts[3]' enUS);                    var widthFactor = imageWidthPixels/graphWidthInches;                  var heightFactor = imageHeightPixels/graphHeightInches;                    var nodeAreaList = new List<NodeMap.NodeArea>();                    while(true)                  {                      l = r.ReadLine();                      if (l == null) break;                        if (l.StartsWith("node"))                      {                          var nodeParts = l.Split(' ');                          var nodeCenterXInches = double.Parse(nodeParts[2]' enUS);                          var nodeCenterYInches = double.Parse(nodeParts[3]' enUS);                          var nodeWidthInches = double.Parse(nodeParts[4]' enUS);                          var nodeHeightInches = double.Parse(nodeParts[5]' enUS);                            var nodeRectWidth = (int)(nodeWidthInches*widthFactor);                          var nodeRectHeight = (int)(nodeHeightInches*heightFactor);                          var nodeRectX = (int)(nodeCenterXInches*widthFactor) - nodeRectWidth/2;                          var nodeRectY = imageHeightPixels - ((int)(nodeCenterYInches*heightFactor) - nodeRectHeight/2) - nodeRectHeight;                          var nodeRect = new Rectangle(nodeRectX' nodeRectY' nodeRectWidth' nodeRectHeight);                            var nodeLabel = nodeParts[6];                          if (l.IndexOf("\"") >= 0)                          {                              var iLabelStart = l.IndexOf("\"");                              var iLabelEnd = l.IndexOf("\""' iLabelStart + 1);                              nodeLabel = l.Substring(iLabelStart + 1' iLabelEnd - iLabelStart - 1);                          }                            nodeAreaList.Add(new NodeMap.NodeArea(nodeLabel' nodeRect));                      }                  }                    return new NodeMap(nodeAreaList);              }
Magic Number,npantarhei.interviz.graphviz.adapter,GraphVizAdapter,C:\repos\ralfw_NPantaRhei\source\npantarhei.interviz\npantarhei.interviz.graphviz.adapter\GraphVizAdapter.cs,Compile_node_map,The following statement contains a magic number: using(var r = new StringReader(nodeMapSource))              {                  var enUS = new CultureInfo("en-US");                    var l = r.ReadLine();                  var graphParts = l.Split(' ');                  var graphWidthInches = double.Parse(graphParts[2]' enUS);                  var graphHeightInches = double.Parse(graphParts[3]' enUS);                    var widthFactor = imageWidthPixels/graphWidthInches;                  var heightFactor = imageHeightPixels/graphHeightInches;                    var nodeAreaList = new List<NodeMap.NodeArea>();                    while(true)                  {                      l = r.ReadLine();                      if (l == null) break;                        if (l.StartsWith("node"))                      {                          var nodeParts = l.Split(' ');                          var nodeCenterXInches = double.Parse(nodeParts[2]' enUS);                          var nodeCenterYInches = double.Parse(nodeParts[3]' enUS);                          var nodeWidthInches = double.Parse(nodeParts[4]' enUS);                          var nodeHeightInches = double.Parse(nodeParts[5]' enUS);                            var nodeRectWidth = (int)(nodeWidthInches*widthFactor);                          var nodeRectHeight = (int)(nodeHeightInches*heightFactor);                          var nodeRectX = (int)(nodeCenterXInches*widthFactor) - nodeRectWidth/2;                          var nodeRectY = imageHeightPixels - ((int)(nodeCenterYInches*heightFactor) - nodeRectHeight/2) - nodeRectHeight;                          var nodeRect = new Rectangle(nodeRectX' nodeRectY' nodeRectWidth' nodeRectHeight);                            var nodeLabel = nodeParts[6];                          if (l.IndexOf("\"") >= 0)                          {                              var iLabelStart = l.IndexOf("\"");                              var iLabelEnd = l.IndexOf("\""' iLabelStart + 1);                              nodeLabel = l.Substring(iLabelStart + 1' iLabelEnd - iLabelStart - 1);                          }                            nodeAreaList.Add(new NodeMap.NodeArea(nodeLabel' nodeRect));                      }                  }                    return new NodeMap(nodeAreaList);              }
Magic Number,npantarhei.interviz.graphviz.adapter,GraphVizAdapter,C:\repos\ralfw_NPantaRhei\source\npantarhei.interviz\npantarhei.interviz.graphviz.adapter\GraphVizAdapter.cs,Compile_node_map,The following statement contains a magic number: using(var r = new StringReader(nodeMapSource))              {                  var enUS = new CultureInfo("en-US");                    var l = r.ReadLine();                  var graphParts = l.Split(' ');                  var graphWidthInches = double.Parse(graphParts[2]' enUS);                  var graphHeightInches = double.Parse(graphParts[3]' enUS);                    var widthFactor = imageWidthPixels/graphWidthInches;                  var heightFactor = imageHeightPixels/graphHeightInches;                    var nodeAreaList = new List<NodeMap.NodeArea>();                    while(true)                  {                      l = r.ReadLine();                      if (l == null) break;                        if (l.StartsWith("node"))                      {                          var nodeParts = l.Split(' ');                          var nodeCenterXInches = double.Parse(nodeParts[2]' enUS);                          var nodeCenterYInches = double.Parse(nodeParts[3]' enUS);                          var nodeWidthInches = double.Parse(nodeParts[4]' enUS);                          var nodeHeightInches = double.Parse(nodeParts[5]' enUS);                            var nodeRectWidth = (int)(nodeWidthInches*widthFactor);                          var nodeRectHeight = (int)(nodeHeightInches*heightFactor);                          var nodeRectX = (int)(nodeCenterXInches*widthFactor) - nodeRectWidth/2;                          var nodeRectY = imageHeightPixels - ((int)(nodeCenterYInches*heightFactor) - nodeRectHeight/2) - nodeRectHeight;                          var nodeRect = new Rectangle(nodeRectX' nodeRectY' nodeRectWidth' nodeRectHeight);                            var nodeLabel = nodeParts[6];                          if (l.IndexOf("\"") >= 0)                          {                              var iLabelStart = l.IndexOf("\"");                              var iLabelEnd = l.IndexOf("\""' iLabelStart + 1);                              nodeLabel = l.Substring(iLabelStart + 1' iLabelEnd - iLabelStart - 1);                          }                            nodeAreaList.Add(new NodeMap.NodeArea(nodeLabel' nodeRect));                      }                  }                    return new NodeMap(nodeAreaList);              }
Magic Number,npantarhei.interviz.graphviz.adapter,GraphVizAdapter,C:\repos\ralfw_NPantaRhei\source\npantarhei.interviz\npantarhei.interviz.graphviz.adapter\GraphVizAdapter.cs,Compile_node_map,The following statement contains a magic number: using(var r = new StringReader(nodeMapSource))              {                  var enUS = new CultureInfo("en-US");                    var l = r.ReadLine();                  var graphParts = l.Split(' ');                  var graphWidthInches = double.Parse(graphParts[2]' enUS);                  var graphHeightInches = double.Parse(graphParts[3]' enUS);                    var widthFactor = imageWidthPixels/graphWidthInches;                  var heightFactor = imageHeightPixels/graphHeightInches;                    var nodeAreaList = new List<NodeMap.NodeArea>();                    while(true)                  {                      l = r.ReadLine();                      if (l == null) break;                        if (l.StartsWith("node"))                      {                          var nodeParts = l.Split(' ');                          var nodeCenterXInches = double.Parse(nodeParts[2]' enUS);                          var nodeCenterYInches = double.Parse(nodeParts[3]' enUS);                          var nodeWidthInches = double.Parse(nodeParts[4]' enUS);                          var nodeHeightInches = double.Parse(nodeParts[5]' enUS);                            var nodeRectWidth = (int)(nodeWidthInches*widthFactor);                          var nodeRectHeight = (int)(nodeHeightInches*heightFactor);                          var nodeRectX = (int)(nodeCenterXInches*widthFactor) - nodeRectWidth/2;                          var nodeRectY = imageHeightPixels - ((int)(nodeCenterYInches*heightFactor) - nodeRectHeight/2) - nodeRectHeight;                          var nodeRect = new Rectangle(nodeRectX' nodeRectY' nodeRectWidth' nodeRectHeight);                            var nodeLabel = nodeParts[6];                          if (l.IndexOf("\"") >= 0)                          {                              var iLabelStart = l.IndexOf("\"");                              var iLabelEnd = l.IndexOf("\""' iLabelStart + 1);                              nodeLabel = l.Substring(iLabelStart + 1' iLabelEnd - iLabelStart - 1);                          }                            nodeAreaList.Add(new NodeMap.NodeArea(nodeLabel' nodeRect));                      }                  }                    return new NodeMap(nodeAreaList);              }
Magic Number,npantarhei.interviz.graphviz.adapter,GraphVizAdapter,C:\repos\ralfw_NPantaRhei\source\npantarhei.interviz\npantarhei.interviz.graphviz.adapter\GraphVizAdapter.cs,Compile_node_map,The following statement contains a magic number: using(var r = new StringReader(nodeMapSource))              {                  var enUS = new CultureInfo("en-US");                    var l = r.ReadLine();                  var graphParts = l.Split(' ');                  var graphWidthInches = double.Parse(graphParts[2]' enUS);                  var graphHeightInches = double.Parse(graphParts[3]' enUS);                    var widthFactor = imageWidthPixels/graphWidthInches;                  var heightFactor = imageHeightPixels/graphHeightInches;                    var nodeAreaList = new List<NodeMap.NodeArea>();                    while(true)                  {                      l = r.ReadLine();                      if (l == null) break;                        if (l.StartsWith("node"))                      {                          var nodeParts = l.Split(' ');                          var nodeCenterXInches = double.Parse(nodeParts[2]' enUS);                          var nodeCenterYInches = double.Parse(nodeParts[3]' enUS);                          var nodeWidthInches = double.Parse(nodeParts[4]' enUS);                          var nodeHeightInches = double.Parse(nodeParts[5]' enUS);                            var nodeRectWidth = (int)(nodeWidthInches*widthFactor);                          var nodeRectHeight = (int)(nodeHeightInches*heightFactor);                          var nodeRectX = (int)(nodeCenterXInches*widthFactor) - nodeRectWidth/2;                          var nodeRectY = imageHeightPixels - ((int)(nodeCenterYInches*heightFactor) - nodeRectHeight/2) - nodeRectHeight;                          var nodeRect = new Rectangle(nodeRectX' nodeRectY' nodeRectWidth' nodeRectHeight);                            var nodeLabel = nodeParts[6];                          if (l.IndexOf("\"") >= 0)                          {                              var iLabelStart = l.IndexOf("\"");                              var iLabelEnd = l.IndexOf("\""' iLabelStart + 1);                              nodeLabel = l.Substring(iLabelStart + 1' iLabelEnd - iLabelStart - 1);                          }                            nodeAreaList.Add(new NodeMap.NodeArea(nodeLabel' nodeRect));                      }                  }                    return new NodeMap(nodeAreaList);              }
Magic Number,npantarhei.interviz.graphviz.adapter,GraphVizAdapter,C:\repos\ralfw_NPantaRhei\source\npantarhei.interviz\npantarhei.interviz.graphviz.adapter\GraphVizAdapter.cs,Compile_node_map,The following statement contains a magic number: using(var r = new StringReader(nodeMapSource))              {                  var enUS = new CultureInfo("en-US");                    var l = r.ReadLine();                  var graphParts = l.Split(' ');                  var graphWidthInches = double.Parse(graphParts[2]' enUS);                  var graphHeightInches = double.Parse(graphParts[3]' enUS);                    var widthFactor = imageWidthPixels/graphWidthInches;                  var heightFactor = imageHeightPixels/graphHeightInches;                    var nodeAreaList = new List<NodeMap.NodeArea>();                    while(true)                  {                      l = r.ReadLine();                      if (l == null) break;                        if (l.StartsWith("node"))                      {                          var nodeParts = l.Split(' ');                          var nodeCenterXInches = double.Parse(nodeParts[2]' enUS);                          var nodeCenterYInches = double.Parse(nodeParts[3]' enUS);                          var nodeWidthInches = double.Parse(nodeParts[4]' enUS);                          var nodeHeightInches = double.Parse(nodeParts[5]' enUS);                            var nodeRectWidth = (int)(nodeWidthInches*widthFactor);                          var nodeRectHeight = (int)(nodeHeightInches*heightFactor);                          var nodeRectX = (int)(nodeCenterXInches*widthFactor) - nodeRectWidth/2;                          var nodeRectY = imageHeightPixels - ((int)(nodeCenterYInches*heightFactor) - nodeRectHeight/2) - nodeRectHeight;                          var nodeRect = new Rectangle(nodeRectX' nodeRectY' nodeRectWidth' nodeRectHeight);                            var nodeLabel = nodeParts[6];                          if (l.IndexOf("\"") >= 0)                          {                              var iLabelStart = l.IndexOf("\"");                              var iLabelEnd = l.IndexOf("\""' iLabelStart + 1);                              nodeLabel = l.Substring(iLabelStart + 1' iLabelEnd - iLabelStart - 1);                          }                            nodeAreaList.Add(new NodeMap.NodeArea(nodeLabel' nodeRect));                      }                  }                    return new NodeMap(nodeAreaList);              }
Magic Number,npantarhei.interviz.graphviz.adapter,GraphVizAdapter,C:\repos\ralfw_NPantaRhei\source\npantarhei.interviz\npantarhei.interviz.graphviz.adapter\GraphVizAdapter.cs,Compile_node_map,The following statement contains a magic number: using(var r = new StringReader(nodeMapSource))              {                  var enUS = new CultureInfo("en-US");                    var l = r.ReadLine();                  var graphParts = l.Split(' ');                  var graphWidthInches = double.Parse(graphParts[2]' enUS);                  var graphHeightInches = double.Parse(graphParts[3]' enUS);                    var widthFactor = imageWidthPixels/graphWidthInches;                  var heightFactor = imageHeightPixels/graphHeightInches;                    var nodeAreaList = new List<NodeMap.NodeArea>();                    while(true)                  {                      l = r.ReadLine();                      if (l == null) break;                        if (l.StartsWith("node"))                      {                          var nodeParts = l.Split(' ');                          var nodeCenterXInches = double.Parse(nodeParts[2]' enUS);                          var nodeCenterYInches = double.Parse(nodeParts[3]' enUS);                          var nodeWidthInches = double.Parse(nodeParts[4]' enUS);                          var nodeHeightInches = double.Parse(nodeParts[5]' enUS);                            var nodeRectWidth = (int)(nodeWidthInches*widthFactor);                          var nodeRectHeight = (int)(nodeHeightInches*heightFactor);                          var nodeRectX = (int)(nodeCenterXInches*widthFactor) - nodeRectWidth/2;                          var nodeRectY = imageHeightPixels - ((int)(nodeCenterYInches*heightFactor) - nodeRectHeight/2) - nodeRectHeight;                          var nodeRect = new Rectangle(nodeRectX' nodeRectY' nodeRectWidth' nodeRectHeight);                            var nodeLabel = nodeParts[6];                          if (l.IndexOf("\"") >= 0)                          {                              var iLabelStart = l.IndexOf("\"");                              var iLabelEnd = l.IndexOf("\""' iLabelStart + 1);                              nodeLabel = l.Substring(iLabelStart + 1' iLabelEnd - iLabelStart - 1);                          }                            nodeAreaList.Add(new NodeMap.NodeArea(nodeLabel' nodeRect));                      }                  }                    return new NodeMap(nodeAreaList);              }
Magic Number,npantarhei.interviz.graphviz.adapter,GraphVizAdapter,C:\repos\ralfw_NPantaRhei\source\npantarhei.interviz\npantarhei.interviz.graphviz.adapter\GraphVizAdapter.cs,Compile_node_map,The following statement contains a magic number: using(var r = new StringReader(nodeMapSource))              {                  var enUS = new CultureInfo("en-US");                    var l = r.ReadLine();                  var graphParts = l.Split(' ');                  var graphWidthInches = double.Parse(graphParts[2]' enUS);                  var graphHeightInches = double.Parse(graphParts[3]' enUS);                    var widthFactor = imageWidthPixels/graphWidthInches;                  var heightFactor = imageHeightPixels/graphHeightInches;                    var nodeAreaList = new List<NodeMap.NodeArea>();                    while(true)                  {                      l = r.ReadLine();                      if (l == null) break;                        if (l.StartsWith("node"))                      {                          var nodeParts = l.Split(' ');                          var nodeCenterXInches = double.Parse(nodeParts[2]' enUS);                          var nodeCenterYInches = double.Parse(nodeParts[3]' enUS);                          var nodeWidthInches = double.Parse(nodeParts[4]' enUS);                          var nodeHeightInches = double.Parse(nodeParts[5]' enUS);                            var nodeRectWidth = (int)(nodeWidthInches*widthFactor);                          var nodeRectHeight = (int)(nodeHeightInches*heightFactor);                          var nodeRectX = (int)(nodeCenterXInches*widthFactor) - nodeRectWidth/2;                          var nodeRectY = imageHeightPixels - ((int)(nodeCenterYInches*heightFactor) - nodeRectHeight/2) - nodeRectHeight;                          var nodeRect = new Rectangle(nodeRectX' nodeRectY' nodeRectWidth' nodeRectHeight);                            var nodeLabel = nodeParts[6];                          if (l.IndexOf("\"") >= 0)                          {                              var iLabelStart = l.IndexOf("\"");                              var iLabelEnd = l.IndexOf("\""' iLabelStart + 1);                              nodeLabel = l.Substring(iLabelStart + 1' iLabelEnd - iLabelStart - 1);                          }                            nodeAreaList.Add(new NodeMap.NodeArea(nodeLabel' nodeRect));                      }                  }                    return new NodeMap(nodeAreaList);              }
Magic Number,npantarhei.interviz.graphviz.adapter,GraphVizAdapter,C:\repos\ralfw_NPantaRhei\source\npantarhei.interviz\npantarhei.interviz.graphviz.adapter\GraphVizAdapter.cs,Compile_node_map,The following statement contains a magic number: using(var r = new StringReader(nodeMapSource))              {                  var enUS = new CultureInfo("en-US");                    var l = r.ReadLine();                  var graphParts = l.Split(' ');                  var graphWidthInches = double.Parse(graphParts[2]' enUS);                  var graphHeightInches = double.Parse(graphParts[3]' enUS);                    var widthFactor = imageWidthPixels/graphWidthInches;                  var heightFactor = imageHeightPixels/graphHeightInches;                    var nodeAreaList = new List<NodeMap.NodeArea>();                    while(true)                  {                      l = r.ReadLine();                      if (l == null) break;                        if (l.StartsWith("node"))                      {                          var nodeParts = l.Split(' ');                          var nodeCenterXInches = double.Parse(nodeParts[2]' enUS);                          var nodeCenterYInches = double.Parse(nodeParts[3]' enUS);                          var nodeWidthInches = double.Parse(nodeParts[4]' enUS);                          var nodeHeightInches = double.Parse(nodeParts[5]' enUS);                            var nodeRectWidth = (int)(nodeWidthInches*widthFactor);                          var nodeRectHeight = (int)(nodeHeightInches*heightFactor);                          var nodeRectX = (int)(nodeCenterXInches*widthFactor) - nodeRectWidth/2;                          var nodeRectY = imageHeightPixels - ((int)(nodeCenterYInches*heightFactor) - nodeRectHeight/2) - nodeRectHeight;                          var nodeRect = new Rectangle(nodeRectX' nodeRectY' nodeRectWidth' nodeRectHeight);                            var nodeLabel = nodeParts[6];                          if (l.IndexOf("\"") >= 0)                          {                              var iLabelStart = l.IndexOf("\"");                              var iLabelEnd = l.IndexOf("\""' iLabelStart + 1);                              nodeLabel = l.Substring(iLabelStart + 1' iLabelEnd - iLabelStart - 1);                          }                            nodeAreaList.Add(new NodeMap.NodeArea(nodeLabel' nodeRect));                      }                  }                    return new NodeMap(nodeAreaList);              }
