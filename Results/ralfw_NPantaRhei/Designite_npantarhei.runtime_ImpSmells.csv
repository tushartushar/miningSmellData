Implementation smell,Namespace,Class,File,Method,Description
Long Statement,npantarhei.runtime,FlowLoader,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\FlowLoader.cs,LoadFromEmbeddedResource,The length of the statement  "                if (stream == null) throw new InvalidOperationException(string.Format("Flow resource {0} not found in assembly {1}"' resourcename' resourceAssembly.FullName)); " is 159.
Long Statement,npantarhei.runtime,FlowRuntimeConfiguration,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\FlowRuntimeConfiguration.cs,AddStreamsFrom,The length of the statement  "{ this.AddStreams(FlowLoader.LoadFromEmbeddedResource(FlowLoader.ROOT_FLOW_NAME' resourceAssembly' resourceName)); return this; }" is 129.
Long Statement,npantarhei.runtime.messagetypes,Message,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\messagetypes\Message.cs,ToString,The length of the statement  "			return string.Format("Message(Port='{0}'' Data='{1}'' Causalities={2}' FlowStack depth={3}' CorrelationId={4})"' this.Port' this.Data' !this.Causalities.IsEmpty' this.FlowStack.Depth' Extract_string(this.CorrelationId.ToString()' 6)); " is 234.
Long Statement,npantarhei.runtime.operations,Map_message_to_input_ports,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\operations\Map_message_to_input_ports.cs,Process,The length of the statement  "				Result(new Message(port' outputMessage.Data' outputMessage.CorrelationId){Causalities = outputMessage.Causalities' FlowStack = outputMessage.FlowStack});	 " is 153.
Long Statement,npantarhei.runtime.flows,Nest_message_flow,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\flows\Process_message.cs,Process,The length of the statement  "				var output = new Message(Port.Build(message.Port.OperationName' ""' message.Port.Name)' message.Data' message.CorrelationId) " is 124.
Long Statement,npantarhei.runtime.flows,Nest_message_flow,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\flows\Process_message.cs,Process,The length of the statement  "                var output = new Message(Port.Build(parentFlowname' Create_operation_name(message)' message.Port.Name)' message.Data' message.CorrelationId) " is 140.
Long Statement,npantarhei.runtime.patterns,EBCOperation,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\EBCOperation.cs,Create_method_operation,The length of the statement  "            var ebcOp = new EbcMethodOperation(base.Name + "." + input.Port.Name' _eventBasedComponent' input_port_method' _dispatcher); " is 124.
Long Statement,npantarhei.runtime.patterns,EBCOperation,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\EBCOperation.cs,Assign_handlers_to_output_port_events,The length of the statement  "                    eiOutput.AddEventHandler(ebc' builder.CreateEventHandlerForActionOf(eiOutput.EventHandlerType.GetGenericArguments()[0])); " is 121.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Find_method_operations,The length of the statement  "            var candidateMethods = operationsType.GetMethods(BindingFlags.Public | (findStatic ? BindingFlags.Static : BindingFlags.Instance)); " is 131.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The length of the statement  "                    implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {Create_continuation(operationMethod.GetParameters()[0]' name' input' outputCont)}); " is 166.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The length of the statement  "                    implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {Create_continuation(operationMethod.GetParameters()[0]' name + Get_continuation_output_portname(operationMethod.GetParameters()[0])' input' outputCont)' " is 235.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The length of the statement  "                                                                                                       Create_continuation(operationMethod.GetParameters()[1]' name + Get_continuation_output_portname(operationMethod.GetParameters()[1])' input' outputCont)}); " is 154.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The length of the statement  "                    implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {input.Data' Create_continuation(operationMethod.GetParameters()[1]' name' input' outputCont)}); " is 178.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The length of the statement  "                                                                                                       Create_continuation(operationMethod.GetParameters()[1]' name + Get_continuation_output_portname(operationMethod.GetParameters()[1])' input' outputCont)' " is 152.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The length of the statement  "                                                                                                       Create_continuation(operationMethod.GetParameters()[2]' name + Get_continuation_output_portname(operationMethod.GetParameters()[2])' input' outputCont)}); " is 154.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The length of the statement  "                    throw new NotImplementedException(string.Format("{0}.{1}: Procedure signature not supported as an operation!"' instance.GetType().Name' operationMethod.Name)); " is 159.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The length of the statement  "                throw new NotImplementedException(string.Format("{0}.{1}: Function signature not supported as an operation!"' instance.GetType().Name' operationMethod.Name)); " is 158.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The length of the statement  "            return Schedule_operation_according_to_attributes(asyncerCache' operationMethod' new Operation(name' exceptionAwareImplementation)); " is 132.
Long Statement,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_continuation,The length of the statement  "            if (param.ParameterType == typeof(Action)) return new Action(() => outputCont(new Message(name' null' input.CorrelationId))); " is 125.
Long Statement,npantarhei.runtime.patterns.operations,Correlator,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\operations\Correlator.cs,Process,The length of the statement  "            if ("encode decode".IndexOf(input.Port.Name.ToLower()) < 0) throw new ArgumentException("Invalid input port! Valid input ports of Correlator are .encode and .decode."); " is 168.
Magic Number,npantarhei.runtime.data,NotifyingMultiQueue<T>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\data\NotifyingMultiQueue.cs,Enqueue,The following statement contains a magic number: _lock.AcquireWriterLock(500);
Magic Number,npantarhei.runtime.data,NotifyingMultiQueue<T>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\data\NotifyingMultiQueue.cs,TryDequeue,The following statement contains a magic number: _lock.AcquireWriterLock(500);
Magic Number,npantarhei.runtime.data,NotifyingMultiQueue<T>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\data\NotifyingMultiQueue.cs,Notify,The following statement contains a magic number: _lock.AcquireReaderLock(500);
Magic Number,npantarhei.runtime.data,NotifyingPartionedQueue<T>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\data\NotifyingPartionedQueue.cs,Enqueue,The following statement contains a magic number: _lock.AcquireWriterLock(500);
Magic Number,npantarhei.runtime.data,NotifyingPartionedQueue<T>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\data\NotifyingPartionedQueue.cs,TryDequeue,The following statement contains a magic number: _lock.AcquireWriterLock(500);
Magic Number,npantarhei.runtime.data,NotifyingPartionedQueue<T>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\data\NotifyingPartionedQueue.cs,Notify,The following statement contains a magic number: _lock.AcquireReaderLock(500);
Magic Number,npantarhei.runtime.data,NotifyingSingleQueue<T>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\data\NotifyingSingleQueue.cs,Enqueue,The following statement contains a magic number: _lock.AcquireWriterLock(500);
Magic Number,npantarhei.runtime.data,NotifyingSingleQueue<T>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\data\NotifyingSingleQueue.cs,TryDequeue,The following statement contains a magic number: _lock.AcquireWriterLock(500);
Magic Number,npantarhei.runtime.data,NotifyingSingleQueue<T>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\data\NotifyingSingleQueue.cs,Notify,The following statement contains a magic number: _lock.AcquireReaderLock(500);
Magic Number,npantarhei.runtime.messagetypes,Message,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\messagetypes\Message.cs,ToString,The following statement contains a magic number: return string.Format("Message(Port='{0}'' Data='{1}'' Causalities={2}' FlowStack depth={3}' CorrelationId={4})"' this.Port' this.Data' !this.Causalities.IsEmpty' this.FlowStack.Depth' Extract_string(this.CorrelationId.ToString()' 6));
Magic Number,npantarhei.runtime.messagetypes,Message,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\messagetypes\Message.cs,Extract_string,The following statement contains a magic number: if (text.Length <= maxLength || text.Length < 3) return text;
Magic Number,npantarhei.runtime.messagetypes,Message,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\messagetypes\Message.cs,Extract_string,The following statement contains a magic number: return text.Substring(0' 3) + ".." + text.Substring(text.Length - 3' 3);
Magic Number,npantarhei.runtime.messagetypes,Message,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\messagetypes\Message.cs,Extract_string,The following statement contains a magic number: return text.Substring(0' 3) + ".." + text.Substring(text.Length - 3' 3);
Magic Number,npantarhei.runtime.messagetypes,Message,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\messagetypes\Message.cs,Extract_string,The following statement contains a magic number: return text.Substring(0' 3) + ".." + text.Substring(text.Length - 3' 3);
Magic Number,npantarhei.runtime.operations,Execute_task,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\operations\Execute_task.cs,Catch_exception_with_causality,The following statement contains a magic number: var cMsg = new Message(c.Port' ex' task.Message.CorrelationId) { Priority = 99 };
Magic Number,npantarhei.runtime.patterns,AutoResetJoin<T0;T1;T2>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\AutoResetJoinOf.cs,Create_join_tuple,The following statement contains a magic number: return new Tuple<T0' T1' T2>((T0)joinList[0]'                                           (T1)joinList[1]'                                           (T2)joinList[2]);
Magic Number,npantarhei.runtime.patterns,AutoResetJoinBase,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\AutoResetJoinOf.cs,AutoResetJoinBase,The following statement contains a magic number: if (numberOfInputs>10) throw new ArgumentException("Maximum of 10 input ports exceeded!");
Magic Number,npantarhei.runtime.patterns,ManualResetJoin<T0;T1;T2>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\ManualResetJoinOf.cs,Create_join_tuple,The following statement contains a magic number: return new Tuple<T0' T1' T2>((T0)joinList[0]'                                           (T1)joinList[1]'                                           (T2)joinList[2]);
Magic Number,npantarhei.runtime.patterns,ManualResetJoinBase,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\ManualResetJoinOf.cs,ManualResetJoinBase,The following statement contains a magic number: if (numberOfInputs>10) throw new ArgumentException("Maximum of 10 input ports exceeded!");
Magic Number,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The following statement contains a magic number: if (Is_a_procedure(operationMethod))              {                  if (operationMethod.GetParameters().Length == 0)                      implementation = (input' outputCont' _) =>                                                          {                                                              operationMethod.Invoke(instance' null);                                                              outputCont(new Message(name' null' input.CorrelationId));                                                          };                  else                  if (Parameter_types_ok(operationMethod' "c"))                      implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {Create_continuation(operationMethod.GetParameters()[0]' name' input' outputCont)});                  else                  if (Parameter_types_ok(operationMethod' "v"))                      implementation = (input' outputCont' _) =>                                                          {                                                              operationMethod.Invoke(instance' new[] { input.Data });                                                              outputCont(new Message(name' null' input.CorrelationId));                                                          };                  else                  if (Parameter_types_ok(operationMethod' "cc"))                      implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {Create_continuation(operationMethod.GetParameters()[0]' name + Get_continuation_output_portname(operationMethod.GetParameters()[0])' input' outputCont)'                                                                                                         Create_continuation(operationMethod.GetParameters()[1]' name + Get_continuation_output_portname(operationMethod.GetParameters()[1])' input' outputCont)});                  else                  if (Parameter_types_ok(operationMethod' "vc"))                      implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {input.Data' Create_continuation(operationMethod.GetParameters()[1]' name' input' outputCont)});                  else                  if (Parameter_types_ok(operationMethod' "vcc"))                      implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {input.Data'                                                                                                          Create_continuation(operationMethod.GetParameters()[1]' name + Get_continuation_output_portname(operationMethod.GetParameters()[1])' input' outputCont)'                                                                                                         Create_continuation(operationMethod.GetParameters()[2]' name + Get_continuation_output_portname(operationMethod.GetParameters()[2])' input' outputCont)});                  else                      throw new NotImplementedException(string.Format("{0}.{1}: Procedure signature not supported as an operation!"' instance.GetType().Name' operationMethod.Name));              }              else              if (operationMethod.GetParameters().Length == 0)                  implementation = (input' outputCont' _) =>                                                      {                                                          var result = operationMethod.Invoke(instance' null);                                                          outputCont(new Message(name' result' input.CorrelationId));                                                      };              else              if (Parameter_types_ok(operationMethod' "v"))                  implementation = (input' outputCont' _) =>                                                      {                                                          var result = operationMethod.Invoke(instance' new[] { input.Data });                                                          outputCont(new Message(name' result' input.CorrelationId));                                                      };              else                  throw new NotImplementedException(string.Format("{0}.{1}: Function signature not supported as an operation!"' instance.GetType().Name' operationMethod.Name));
Magic Number,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Create_method_operation,The following statement contains a magic number: if (Is_a_procedure(operationMethod))              {                  if (operationMethod.GetParameters().Length == 0)                      implementation = (input' outputCont' _) =>                                                          {                                                              operationMethod.Invoke(instance' null);                                                              outputCont(new Message(name' null' input.CorrelationId));                                                          };                  else                  if (Parameter_types_ok(operationMethod' "c"))                      implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {Create_continuation(operationMethod.GetParameters()[0]' name' input' outputCont)});                  else                  if (Parameter_types_ok(operationMethod' "v"))                      implementation = (input' outputCont' _) =>                                                          {                                                              operationMethod.Invoke(instance' new[] { input.Data });                                                              outputCont(new Message(name' null' input.CorrelationId));                                                          };                  else                  if (Parameter_types_ok(operationMethod' "cc"))                      implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {Create_continuation(operationMethod.GetParameters()[0]' name + Get_continuation_output_portname(operationMethod.GetParameters()[0])' input' outputCont)'                                                                                                         Create_continuation(operationMethod.GetParameters()[1]' name + Get_continuation_output_portname(operationMethod.GetParameters()[1])' input' outputCont)});                  else                  if (Parameter_types_ok(operationMethod' "vc"))                      implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {input.Data' Create_continuation(operationMethod.GetParameters()[1]' name' input' outputCont)});                  else                  if (Parameter_types_ok(operationMethod' "vcc"))                      implementation = (input' outputCont' _) => operationMethod.Invoke(instance' new[] {input.Data'                                                                                                          Create_continuation(operationMethod.GetParameters()[1]' name + Get_continuation_output_portname(operationMethod.GetParameters()[1])' input' outputCont)'                                                                                                         Create_continuation(operationMethod.GetParameters()[2]' name + Get_continuation_output_portname(operationMethod.GetParameters()[2])' input' outputCont)});                  else                      throw new NotImplementedException(string.Format("{0}.{1}: Procedure signature not supported as an operation!"' instance.GetType().Name' operationMethod.Name));              }              else              if (operationMethod.GetParameters().Length == 0)                  implementation = (input' outputCont' _) =>                                                      {                                                          var result = operationMethod.Invoke(instance' null);                                                          outputCont(new Message(name' result' input.CorrelationId));                                                      };              else              if (Parameter_types_ok(operationMethod' "v"))                  implementation = (input' outputCont' _) =>                                                      {                                                          var result = operationMethod.Invoke(instance' new[] { input.Data });                                                          outputCont(new Message(name' result' input.CorrelationId));                                                      };              else                  throw new NotImplementedException(string.Format("{0}.{1}: Function signature not supported as an operation!"' instance.GetType().Name' operationMethod.Name));
Magic Number,npantarhei.runtime.patterns,Wait_for_work<T>,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\Wait_for_work.cs,Dequeue_messages,The following statement contains a magic number: do  			{  			    var work = _getWorkFromResource();  				if (work.Item1)   					Dequeued(work.Item2);  				else  					_resource.Wait(1000);  			} while(isRunning());
Missing Default,npantarhei.runtime.patterns,OperationsFactory,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\OperationsFactory.cs,Parameter_types_ok,The following switch statement is missing a default case: switch (signature[i])                      {                          case 'v':                              numberOfParamsOk += Is_continuation_parameter(mi.GetParameters()[i]) ? 0 : 1;                              break;                          case 'c':                              numberOfParamsOk += Is_continuation_parameter(mi.GetParameters()[i]) ? 1 : 0;                              break;                      }
Missing Default,npantarhei.runtime.patterns.operations,Correlator,C:\repos\ralfw_NPantaRhei\source\npantarhei.runtime\npantarhei.runtime\patterns\operations\Correlator.cs,Process,The following switch statement is missing a default case: switch (input.Port.Name.ToLower())              {                  case "encode":                      corr = (Correlation)input.Data;                      msg = new Message(base.Name + ".encoded"' corr.Data' corr.Id);                      break;                    case "decode":                      corr = new Correlation(input.CorrelationId' input.Data);                      msg = new Message(base.Name + ".decoded"' corr' corr.Id);                      break;              }
