Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DemoDataFeeder,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\DemoDataFeeder\Program.cs,Main,The length of the statement  "        var client = new Statsd(options.Host' options.Port' prefix : options.Namespace' connectionType : options.UseTCP ? ConnectionType.Tcp : ConnectionType.Udp); " is 155.
Magic Number,DemoDataFeeder,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\DemoDataFeeder\Program.cs,Main,The following statement contains a magic number: var task = Task.Factory.StartNew( () =>              {                var rnd = new Random();                int taskNumber = myTaskNumber;                if ( taskNumber == 0 )                {                  Console.WriteLine( "Feeding stats to {0}:{1}' ctrl+c to exit."' options.Host' options.Port );                }                while ( true )                {                  client.LogCount( "test.count.one." + rnd.Next( 5 ) );                  client.LogCount( "test.count.bigValue"' rnd.Next( 50 ) );                  client.LogTiming( "test.timing." + rnd.Next( 5 )' rnd.Next( 100' 2000 ) );                  client.LogGauge( "test.gauge." + rnd.Next( 5 )' rnd.Next( 100 ) );                  client.LogCalendargram("test.calendargram.users"' letters.Next()' CalendargramRetentionPeriod.ONE_MINUTE);                  Thread.Sleep( options.Delay );                  Interlocked.Add( ref totalMetricsSent' 4 );                    if ( taskNumber == 0 && stopwatch.ElapsedMilliseconds >= 5000 )                  {                    Console.WriteLine( "Total sent: {0}"' totalMetricsSent );                    stopwatch.Restart();                  }                }              }'              tokenSource.Token );
Magic Number,DemoDataFeeder,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\DemoDataFeeder\Program.cs,Main,The following statement contains a magic number: var task = Task.Factory.StartNew( () =>              {                var rnd = new Random();                int taskNumber = myTaskNumber;                if ( taskNumber == 0 )                {                  Console.WriteLine( "Feeding stats to {0}:{1}' ctrl+c to exit."' options.Host' options.Port );                }                while ( true )                {                  client.LogCount( "test.count.one." + rnd.Next( 5 ) );                  client.LogCount( "test.count.bigValue"' rnd.Next( 50 ) );                  client.LogTiming( "test.timing." + rnd.Next( 5 )' rnd.Next( 100' 2000 ) );                  client.LogGauge( "test.gauge." + rnd.Next( 5 )' rnd.Next( 100 ) );                  client.LogCalendargram("test.calendargram.users"' letters.Next()' CalendargramRetentionPeriod.ONE_MINUTE);                  Thread.Sleep( options.Delay );                  Interlocked.Add( ref totalMetricsSent' 4 );                    if ( taskNumber == 0 && stopwatch.ElapsedMilliseconds >= 5000 )                  {                    Console.WriteLine( "Total sent: {0}"' totalMetricsSent );                    stopwatch.Restart();                  }                }              }'              tokenSource.Token );
Magic Number,DemoDataFeeder,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\DemoDataFeeder\Program.cs,Main,The following statement contains a magic number: var task = Task.Factory.StartNew( () =>              {                var rnd = new Random();                int taskNumber = myTaskNumber;                if ( taskNumber == 0 )                {                  Console.WriteLine( "Feeding stats to {0}:{1}' ctrl+c to exit."' options.Host' options.Port );                }                while ( true )                {                  client.LogCount( "test.count.one." + rnd.Next( 5 ) );                  client.LogCount( "test.count.bigValue"' rnd.Next( 50 ) );                  client.LogTiming( "test.timing." + rnd.Next( 5 )' rnd.Next( 100' 2000 ) );                  client.LogGauge( "test.gauge." + rnd.Next( 5 )' rnd.Next( 100 ) );                  client.LogCalendargram("test.calendargram.users"' letters.Next()' CalendargramRetentionPeriod.ONE_MINUTE);                  Thread.Sleep( options.Delay );                  Interlocked.Add( ref totalMetricsSent' 4 );                    if ( taskNumber == 0 && stopwatch.ElapsedMilliseconds >= 5000 )                  {                    Console.WriteLine( "Total sent: {0}"' totalMetricsSent );                    stopwatch.Restart();                  }                }              }'              tokenSource.Token );
Magic Number,DemoDataFeeder,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\DemoDataFeeder\Program.cs,Main,The following statement contains a magic number: var task = Task.Factory.StartNew( () =>              {                var rnd = new Random();                int taskNumber = myTaskNumber;                if ( taskNumber == 0 )                {                  Console.WriteLine( "Feeding stats to {0}:{1}' ctrl+c to exit."' options.Host' options.Port );                }                while ( true )                {                  client.LogCount( "test.count.one." + rnd.Next( 5 ) );                  client.LogCount( "test.count.bigValue"' rnd.Next( 50 ) );                  client.LogTiming( "test.timing." + rnd.Next( 5 )' rnd.Next( 100' 2000 ) );                  client.LogGauge( "test.gauge." + rnd.Next( 5 )' rnd.Next( 100 ) );                  client.LogCalendargram("test.calendargram.users"' letters.Next()' CalendargramRetentionPeriod.ONE_MINUTE);                  Thread.Sleep( options.Delay );                  Interlocked.Add( ref totalMetricsSent' 4 );                    if ( taskNumber == 0 && stopwatch.ElapsedMilliseconds >= 5000 )                  {                    Console.WriteLine( "Total sent: {0}"' totalMetricsSent );                    stopwatch.Restart();                  }                }              }'              tokenSource.Token );
Magic Number,DemoDataFeeder,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\DemoDataFeeder\Program.cs,Main,The following statement contains a magic number: var task = Task.Factory.StartNew( () =>              {                var rnd = new Random();                int taskNumber = myTaskNumber;                if ( taskNumber == 0 )                {                  Console.WriteLine( "Feeding stats to {0}:{1}' ctrl+c to exit."' options.Host' options.Port );                }                while ( true )                {                  client.LogCount( "test.count.one." + rnd.Next( 5 ) );                  client.LogCount( "test.count.bigValue"' rnd.Next( 50 ) );                  client.LogTiming( "test.timing." + rnd.Next( 5 )' rnd.Next( 100' 2000 ) );                  client.LogGauge( "test.gauge." + rnd.Next( 5 )' rnd.Next( 100 ) );                  client.LogCalendargram("test.calendargram.users"' letters.Next()' CalendargramRetentionPeriod.ONE_MINUTE);                  Thread.Sleep( options.Delay );                  Interlocked.Add( ref totalMetricsSent' 4 );                    if ( taskNumber == 0 && stopwatch.ElapsedMilliseconds >= 5000 )                  {                    Console.WriteLine( "Total sent: {0}"' totalMetricsSent );                    stopwatch.Restart();                  }                }              }'              tokenSource.Token );
Magic Number,DemoDataFeeder,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\DemoDataFeeder\Program.cs,Main,The following statement contains a magic number: var task = Task.Factory.StartNew( () =>              {                var rnd = new Random();                int taskNumber = myTaskNumber;                if ( taskNumber == 0 )                {                  Console.WriteLine( "Feeding stats to {0}:{1}' ctrl+c to exit."' options.Host' options.Port );                }                while ( true )                {                  client.LogCount( "test.count.one." + rnd.Next( 5 ) );                  client.LogCount( "test.count.bigValue"' rnd.Next( 50 ) );                  client.LogTiming( "test.timing." + rnd.Next( 5 )' rnd.Next( 100' 2000 ) );                  client.LogGauge( "test.gauge." + rnd.Next( 5 )' rnd.Next( 100 ) );                  client.LogCalendargram("test.calendargram.users"' letters.Next()' CalendargramRetentionPeriod.ONE_MINUTE);                  Thread.Sleep( options.Delay );                  Interlocked.Add( ref totalMetricsSent' 4 );                    if ( taskNumber == 0 && stopwatch.ElapsedMilliseconds >= 5000 )                  {                    Console.WriteLine( "Total sent: {0}"' totalMetricsSent );                    stopwatch.Restart();                  }                }              }'              tokenSource.Token );
Magic Number,DemoDataFeeder,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\DemoDataFeeder\Program.cs,Main,The following statement contains a magic number: var task = Task.Factory.StartNew( () =>              {                var rnd = new Random();                int taskNumber = myTaskNumber;                if ( taskNumber == 0 )                {                  Console.WriteLine( "Feeding stats to {0}:{1}' ctrl+c to exit."' options.Host' options.Port );                }                while ( true )                {                  client.LogCount( "test.count.one." + rnd.Next( 5 ) );                  client.LogCount( "test.count.bigValue"' rnd.Next( 50 ) );                  client.LogTiming( "test.timing." + rnd.Next( 5 )' rnd.Next( 100' 2000 ) );                  client.LogGauge( "test.gauge." + rnd.Next( 5 )' rnd.Next( 100 ) );                  client.LogCalendargram("test.calendargram.users"' letters.Next()' CalendargramRetentionPeriod.ONE_MINUTE);                  Thread.Sleep( options.Delay );                  Interlocked.Add( ref totalMetricsSent' 4 );                    if ( taskNumber == 0 && stopwatch.ElapsedMilliseconds >= 5000 )                  {                    Console.WriteLine( "Total sent: {0}"' totalMetricsSent );                    stopwatch.Restart();                  }                }              }'              tokenSource.Token );
Magic Number,DemoDataFeeder,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\DemoDataFeeder\Program.cs,Main,The following statement contains a magic number: var task = Task.Factory.StartNew( () =>              {                var rnd = new Random();                int taskNumber = myTaskNumber;                if ( taskNumber == 0 )                {                  Console.WriteLine( "Feeding stats to {0}:{1}' ctrl+c to exit."' options.Host' options.Port );                }                while ( true )                {                  client.LogCount( "test.count.one." + rnd.Next( 5 ) );                  client.LogCount( "test.count.bigValue"' rnd.Next( 50 ) );                  client.LogTiming( "test.timing." + rnd.Next( 5 )' rnd.Next( 100' 2000 ) );                  client.LogGauge( "test.gauge." + rnd.Next( 5 )' rnd.Next( 100 ) );                  client.LogCalendargram("test.calendargram.users"' letters.Next()' CalendargramRetentionPeriod.ONE_MINUTE);                  Thread.Sleep( options.Delay );                  Interlocked.Add( ref totalMetricsSent' 4 );                    if ( taskNumber == 0 && stopwatch.ElapsedMilliseconds >= 5000 )                  {                    Console.WriteLine( "Total sent: {0}"' totalMetricsSent );                    stopwatch.Restart();                  }                }              }'              tokenSource.Token );
Magic Number,DemoDataFeeder,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\DemoDataFeeder\Program.cs,Main,The following statement contains a magic number: var task = Task.Factory.StartNew( () =>              {                var rnd = new Random();                int taskNumber = myTaskNumber;                if ( taskNumber == 0 )                {                  Console.WriteLine( "Feeding stats to {0}:{1}' ctrl+c to exit."' options.Host' options.Port );                }                while ( true )                {                  client.LogCount( "test.count.one." + rnd.Next( 5 ) );                  client.LogCount( "test.count.bigValue"' rnd.Next( 50 ) );                  client.LogTiming( "test.timing." + rnd.Next( 5 )' rnd.Next( 100' 2000 ) );                  client.LogGauge( "test.gauge." + rnd.Next( 5 )' rnd.Next( 100 ) );                  client.LogCalendargram("test.calendargram.users"' letters.Next()' CalendargramRetentionPeriod.ONE_MINUTE);                  Thread.Sleep( options.Delay );                  Interlocked.Add( ref totalMetricsSent' 4 );                    if ( taskNumber == 0 && stopwatch.ElapsedMilliseconds >= 5000 )                  {                    Console.WriteLine( "Total sent: {0}"' totalMetricsSent );                    stopwatch.Restart();                  }                }              }'              tokenSource.Token );
