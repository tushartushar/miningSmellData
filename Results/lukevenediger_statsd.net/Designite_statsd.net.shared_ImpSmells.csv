Implementation smell,Namespace,Class,File,Method,Description
Complex Method,statsd.net.shared.Structures,TimeWindow,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Structures\TimeWindow.cs,GetDifferences,Cyclomatic complexity of the method is 8
Long Parameter List,statsd.net.shared.Listeners,MSSQLRelayListener,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Listeners\MSSQLRelayListener.cs,MSSQLRelayListener,The method has 6 parameters. Parameters: connectionString' pollInterval' cancellationToken' batchSize' deleteAfterSend' metrics
Long Parameter List,statsd.net.shared.Structures,PercentileBucket,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Structures\PercentileBucket.cs,PercentileBucket,The method has 5 parameters. Parameters: timings' epoch' rootNamespace' percentileName' percentile
Long Identifier,statsd.net.shared,BetterExpando,C:\repos\lukevenediger_statsd.net\statsd.net.shared\BetterExpando.cs,BetterExpando,The length of the parameter returnEmptyStringForMissingProperties is 37.
Long Identifier,statsd.net.shared,BetterExpando,C:\repos\lukevenediger_statsd.net\statsd.net.shared\BetterExpando.cs,,The length of the parameter _returnEmptyStringForMissingProperties is 38.
Long Statement,statsd.net.shared.Listeners,RequestDelegate,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Listeners\HttpStatsListener.cs,ProcessPOSTRequest,The length of the statement  "              // Further split by ''' to match the GET while keeping backward compatibility and allowing you to use the join for both methods. " is 128.
Empty Catch Block,statsd.net.shared.Listeners,UdpStatsListener,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Listeners\UdpStatsListener.cs,LinkTo,The method has an empty catch block.
Magic Number,statsd.net.shared.Listeners,MSSQLRelayListener,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Listeners\MSSQLRelayListener.cs,ReadAndFeed,The following statement contains a magic number: try              {                  _metrics.LogCount("listeners.mssql-relay.feed.attempt");                  var lines = GetNewLinesFromDB();                  foreach (String line in lines)                  {                      var parts = line.Split(SPACE_SPLITTER' StringSplitOptions.RemoveEmptyEntries);                      _target.Post(parts[0] + ":" + parts[1] + "|r|" + parts[2]);                  }                  _metrics.LogCount("listeners.mssql-relay.lines.posted" + lines.Count);                  _metrics.LogCount("listeners.mssql-relay.feed.success");              }               catch (Exception ex)              {                  _metrics.LogCount("listeners.mssql-relay.error." + ex.GetType().Name);                  _metrics.LogCount("listeners.mssql-relay.feed.failure");              }
Magic Number,statsd.net.shared.Listeners,StatsdnetTcpListener,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Listeners\StatsdnetTcpListener.cs,DecodePacketAndForward,The following statement contains a magic number: try        {          byte[] rawData;          if (packet.isCompressed)          {            rawData = packet.data.Decompress();            _systemMetrics.LogCount("listeners.statsdnet.bytes.gzip"' packet.data.Length);          }          else          {            rawData = packet.data;          }            _systemMetrics.LogCount("listeners.statsdnet.bytes.raw"' rawData.Length);          var lines = Encoding.UTF8.GetString(rawData).Split(            NEWLINE_SPLITTER'            StringSplitOptions.RemoveEmptyEntries          );          foreach(var line in lines)          {            // Format this as raw and send it on.            var parts = line.Split(SPACE_SPLITTER' StringSplitOptions.RemoveEmptyEntries);            _target.Post(parts[0] + ":" + parts[1] + "|r|" + parts[2]);          }          _systemMetrics.LogCount("listeners.statsdnet.lines"' lines.Length);        }        catch (Exception ex)        {          _systemMetrics.LogCount("listeners.statsdnet.decodingError." + ex.GetType().Name);        }
Magic Number,statsd.net.shared.Listeners,TcpStatsListener,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Listeners\TcpStatsListener.cs,ProcessIncomingConnection,The following statement contains a magic number: try        {          Interlocked.Increment(ref _activeConnections);          _systemMetrics.LogGauge("tcp.activeConnections"' _activeConnections);          _systemMetrics.LogCount("tcp.connection.open");          using (var networkStream = tcpClient.GetStream())          {            // Set an aggressive read timeout            networkStream.ReadTimeout = 1000; /* one second */            var buffer = new byte[4096];            while (!_token.IsCancellationRequested)            {              var byteCount = networkStream.Read(buffer' 0' buffer.Length);              if ( byteCount == 0 )              {                return;              }              _systemMetrics.LogCount("tcp.reads");              _systemMetrics.LogCount("tcp.bytes"' byteCount);              var lines = Encoding.UTF8.GetString(buffer' 0' byteCount).Replace("\r"' "").Split('\n');              // Post what we have              _systemMetrics.LogCount("tcp.lines"' lines.Length);              lines.Where(p => !String.IsNullOrEmpty(p)).PostManyTo(_target);              // Two blank lines means end the connection              if (lines.Length >= 2 && lines[lines.Length - 2] == "" && lines[lines.Length - 1] == "")              {                return;              }            }          }        }        catch (SocketException se)        {          // oops' we're done            _systemMetrics.LogCount("tcp.error.SocketException." + se.SocketErrorCode.ToString());        }        catch (IOException)        {          // Not much we can do here.          _systemMetrics.LogCount("tcp.error.IOException");        }        finally        {          try          {            tcpClient.Close();          }          catch          {            // Do nothing but log that this happened            _systemMetrics.LogCount("tcp.error.closeThrewException");          }            _systemMetrics.LogCount("tcp.connection.closed");          Interlocked.Decrement(ref _activeConnections);          _systemMetrics.LogGauge("tcp.activeConnections"' _activeConnections);        }
Magic Number,statsd.net.shared.Listeners,TcpStatsListener,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Listeners\TcpStatsListener.cs,ProcessIncomingConnection,The following statement contains a magic number: try        {          Interlocked.Increment(ref _activeConnections);          _systemMetrics.LogGauge("tcp.activeConnections"' _activeConnections);          _systemMetrics.LogCount("tcp.connection.open");          using (var networkStream = tcpClient.GetStream())          {            // Set an aggressive read timeout            networkStream.ReadTimeout = 1000; /* one second */            var buffer = new byte[4096];            while (!_token.IsCancellationRequested)            {              var byteCount = networkStream.Read(buffer' 0' buffer.Length);              if ( byteCount == 0 )              {                return;              }              _systemMetrics.LogCount("tcp.reads");              _systemMetrics.LogCount("tcp.bytes"' byteCount);              var lines = Encoding.UTF8.GetString(buffer' 0' byteCount).Replace("\r"' "").Split('\n');              // Post what we have              _systemMetrics.LogCount("tcp.lines"' lines.Length);              lines.Where(p => !String.IsNullOrEmpty(p)).PostManyTo(_target);              // Two blank lines means end the connection              if (lines.Length >= 2 && lines[lines.Length - 2] == "" && lines[lines.Length - 1] == "")              {                return;              }            }          }        }        catch (SocketException se)        {          // oops' we're done            _systemMetrics.LogCount("tcp.error.SocketException." + se.SocketErrorCode.ToString());        }        catch (IOException)        {          // Not much we can do here.          _systemMetrics.LogCount("tcp.error.IOException");        }        finally        {          try          {            tcpClient.Close();          }          catch          {            // Do nothing but log that this happened            _systemMetrics.LogCount("tcp.error.closeThrewException");          }            _systemMetrics.LogCount("tcp.connection.closed");          Interlocked.Decrement(ref _activeConnections);          _systemMetrics.LogGauge("tcp.activeConnections"' _activeConnections);        }
Magic Number,statsd.net.shared.Listeners,TcpStatsListener,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Listeners\TcpStatsListener.cs,ProcessIncomingConnection,The following statement contains a magic number: try        {          Interlocked.Increment(ref _activeConnections);          _systemMetrics.LogGauge("tcp.activeConnections"' _activeConnections);          _systemMetrics.LogCount("tcp.connection.open");          using (var networkStream = tcpClient.GetStream())          {            // Set an aggressive read timeout            networkStream.ReadTimeout = 1000; /* one second */            var buffer = new byte[4096];            while (!_token.IsCancellationRequested)            {              var byteCount = networkStream.Read(buffer' 0' buffer.Length);              if ( byteCount == 0 )              {                return;              }              _systemMetrics.LogCount("tcp.reads");              _systemMetrics.LogCount("tcp.bytes"' byteCount);              var lines = Encoding.UTF8.GetString(buffer' 0' byteCount).Replace("\r"' "").Split('\n');              // Post what we have              _systemMetrics.LogCount("tcp.lines"' lines.Length);              lines.Where(p => !String.IsNullOrEmpty(p)).PostManyTo(_target);              // Two blank lines means end the connection              if (lines.Length >= 2 && lines[lines.Length - 2] == "" && lines[lines.Length - 1] == "")              {                return;              }            }          }        }        catch (SocketException se)        {          // oops' we're done            _systemMetrics.LogCount("tcp.error.SocketException." + se.SocketErrorCode.ToString());        }        catch (IOException)        {          // Not much we can do here.          _systemMetrics.LogCount("tcp.error.IOException");        }        finally        {          try          {            tcpClient.Close();          }          catch          {            // Do nothing but log that this happened            _systemMetrics.LogCount("tcp.error.closeThrewException");          }            _systemMetrics.LogCount("tcp.connection.closed");          Interlocked.Decrement(ref _activeConnections);          _systemMetrics.LogGauge("tcp.activeConnections"' _activeConnections);        }
Magic Number,statsd.net.shared.Listeners,TcpStatsListener,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Listeners\TcpStatsListener.cs,ProcessIncomingConnection,The following statement contains a magic number: try        {          Interlocked.Increment(ref _activeConnections);          _systemMetrics.LogGauge("tcp.activeConnections"' _activeConnections);          _systemMetrics.LogCount("tcp.connection.open");          using (var networkStream = tcpClient.GetStream())          {            // Set an aggressive read timeout            networkStream.ReadTimeout = 1000; /* one second */            var buffer = new byte[4096];            while (!_token.IsCancellationRequested)            {              var byteCount = networkStream.Read(buffer' 0' buffer.Length);              if ( byteCount == 0 )              {                return;              }              _systemMetrics.LogCount("tcp.reads");              _systemMetrics.LogCount("tcp.bytes"' byteCount);              var lines = Encoding.UTF8.GetString(buffer' 0' byteCount).Replace("\r"' "").Split('\n');              // Post what we have              _systemMetrics.LogCount("tcp.lines"' lines.Length);              lines.Where(p => !String.IsNullOrEmpty(p)).PostManyTo(_target);              // Two blank lines means end the connection              if (lines.Length >= 2 && lines[lines.Length - 2] == "" && lines[lines.Length - 1] == "")              {                return;              }            }          }        }        catch (SocketException se)        {          // oops' we're done            _systemMetrics.LogCount("tcp.error.SocketException." + se.SocketErrorCode.ToString());        }        catch (IOException)        {          // Not much we can do here.          _systemMetrics.LogCount("tcp.error.IOException");        }        finally        {          try          {            tcpClient.Close();          }          catch          {            // Do nothing but log that this happened            _systemMetrics.LogCount("tcp.error.closeThrewException");          }            _systemMetrics.LogCount("tcp.connection.closed");          Interlocked.Decrement(ref _activeConnections);          _systemMetrics.LogGauge("tcp.activeConnections"' _activeConnections);        }
Magic Number,statsd.net.shared.Messages,StatsdMessageFactory,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Messages\StatsdMessageFactory.cs,ParseMessage,The following statement contains a magic number: try        {          string[] nameAndValue = line.Split(':');          if (nameAndValue[0].Length == 0)          {            return new InvalidMessage("Name cannot be empty.");          }          string[] statProperties = nameAndValue[1].Split(splitter' StringSplitOptions.RemoveEmptyEntries);          if (statProperties.Length < 2)          {            return new InvalidMessage("Malformed message.");          }            switch (statProperties[1])          {            case "c":              if (statProperties.Length == 2)              {                // gorets:1|c                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                // gorets:1|c|@0.1                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0])' float.Parse(statProperties[2].Remove(0' 1)));              }            case "ms":              // glork:320|ms              return new Timing(nameAndValue[0]' Double.Parse(statProperties[0]));            case "g":              // gaugor:333|g              return new Gauge(nameAndValue[0]' Double.Parse(statProperties[0]));            case "s":              // uniques:765|s              // uniques:ABSA434As1|s              return new Set(nameAndValue[0]' statProperties[0]);            case "r":              // some.other.value:12312|r              // some.other.value:12312|r|99988883333              if (statProperties.Length == 2)              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0])' long.Parse(statProperties[2]));              }            case "cg":              // calendargram.key:value|cg|{h'd'w'm'dow}              return new Calendargram(nameAndValue[0]' statProperties[0]' statProperties[2]);            default:              return new InvalidMessage("Unknown message type: " + statProperties[1]);          }        }        catch (Exception ex)        {          return new InvalidMessage("Couldn't parse message: " + ex.Message);        }
Magic Number,statsd.net.shared.Messages,StatsdMessageFactory,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Messages\StatsdMessageFactory.cs,ParseMessage,The following statement contains a magic number: try        {          string[] nameAndValue = line.Split(':');          if (nameAndValue[0].Length == 0)          {            return new InvalidMessage("Name cannot be empty.");          }          string[] statProperties = nameAndValue[1].Split(splitter' StringSplitOptions.RemoveEmptyEntries);          if (statProperties.Length < 2)          {            return new InvalidMessage("Malformed message.");          }            switch (statProperties[1])          {            case "c":              if (statProperties.Length == 2)              {                // gorets:1|c                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                // gorets:1|c|@0.1                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0])' float.Parse(statProperties[2].Remove(0' 1)));              }            case "ms":              // glork:320|ms              return new Timing(nameAndValue[0]' Double.Parse(statProperties[0]));            case "g":              // gaugor:333|g              return new Gauge(nameAndValue[0]' Double.Parse(statProperties[0]));            case "s":              // uniques:765|s              // uniques:ABSA434As1|s              return new Set(nameAndValue[0]' statProperties[0]);            case "r":              // some.other.value:12312|r              // some.other.value:12312|r|99988883333              if (statProperties.Length == 2)              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0])' long.Parse(statProperties[2]));              }            case "cg":              // calendargram.key:value|cg|{h'd'w'm'dow}              return new Calendargram(nameAndValue[0]' statProperties[0]' statProperties[2]);            default:              return new InvalidMessage("Unknown message type: " + statProperties[1]);          }        }        catch (Exception ex)        {          return new InvalidMessage("Couldn't parse message: " + ex.Message);        }
Magic Number,statsd.net.shared.Messages,StatsdMessageFactory,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Messages\StatsdMessageFactory.cs,ParseMessage,The following statement contains a magic number: try        {          string[] nameAndValue = line.Split(':');          if (nameAndValue[0].Length == 0)          {            return new InvalidMessage("Name cannot be empty.");          }          string[] statProperties = nameAndValue[1].Split(splitter' StringSplitOptions.RemoveEmptyEntries);          if (statProperties.Length < 2)          {            return new InvalidMessage("Malformed message.");          }            switch (statProperties[1])          {            case "c":              if (statProperties.Length == 2)              {                // gorets:1|c                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                // gorets:1|c|@0.1                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0])' float.Parse(statProperties[2].Remove(0' 1)));              }            case "ms":              // glork:320|ms              return new Timing(nameAndValue[0]' Double.Parse(statProperties[0]));            case "g":              // gaugor:333|g              return new Gauge(nameAndValue[0]' Double.Parse(statProperties[0]));            case "s":              // uniques:765|s              // uniques:ABSA434As1|s              return new Set(nameAndValue[0]' statProperties[0]);            case "r":              // some.other.value:12312|r              // some.other.value:12312|r|99988883333              if (statProperties.Length == 2)              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0])' long.Parse(statProperties[2]));              }            case "cg":              // calendargram.key:value|cg|{h'd'w'm'dow}              return new Calendargram(nameAndValue[0]' statProperties[0]' statProperties[2]);            default:              return new InvalidMessage("Unknown message type: " + statProperties[1]);          }        }        catch (Exception ex)        {          return new InvalidMessage("Couldn't parse message: " + ex.Message);        }
Magic Number,statsd.net.shared.Messages,StatsdMessageFactory,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Messages\StatsdMessageFactory.cs,ParseMessage,The following statement contains a magic number: try        {          string[] nameAndValue = line.Split(':');          if (nameAndValue[0].Length == 0)          {            return new InvalidMessage("Name cannot be empty.");          }          string[] statProperties = nameAndValue[1].Split(splitter' StringSplitOptions.RemoveEmptyEntries);          if (statProperties.Length < 2)          {            return new InvalidMessage("Malformed message.");          }            switch (statProperties[1])          {            case "c":              if (statProperties.Length == 2)              {                // gorets:1|c                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                // gorets:1|c|@0.1                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0])' float.Parse(statProperties[2].Remove(0' 1)));              }            case "ms":              // glork:320|ms              return new Timing(nameAndValue[0]' Double.Parse(statProperties[0]));            case "g":              // gaugor:333|g              return new Gauge(nameAndValue[0]' Double.Parse(statProperties[0]));            case "s":              // uniques:765|s              // uniques:ABSA434As1|s              return new Set(nameAndValue[0]' statProperties[0]);            case "r":              // some.other.value:12312|r              // some.other.value:12312|r|99988883333              if (statProperties.Length == 2)              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0])' long.Parse(statProperties[2]));              }            case "cg":              // calendargram.key:value|cg|{h'd'w'm'dow}              return new Calendargram(nameAndValue[0]' statProperties[0]' statProperties[2]);            default:              return new InvalidMessage("Unknown message type: " + statProperties[1]);          }        }        catch (Exception ex)        {          return new InvalidMessage("Couldn't parse message: " + ex.Message);        }
Magic Number,statsd.net.shared.Messages,StatsdMessageFactory,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Messages\StatsdMessageFactory.cs,ParseMessage,The following statement contains a magic number: try        {          string[] nameAndValue = line.Split(':');          if (nameAndValue[0].Length == 0)          {            return new InvalidMessage("Name cannot be empty.");          }          string[] statProperties = nameAndValue[1].Split(splitter' StringSplitOptions.RemoveEmptyEntries);          if (statProperties.Length < 2)          {            return new InvalidMessage("Malformed message.");          }            switch (statProperties[1])          {            case "c":              if (statProperties.Length == 2)              {                // gorets:1|c                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                // gorets:1|c|@0.1                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0])' float.Parse(statProperties[2].Remove(0' 1)));              }            case "ms":              // glork:320|ms              return new Timing(nameAndValue[0]' Double.Parse(statProperties[0]));            case "g":              // gaugor:333|g              return new Gauge(nameAndValue[0]' Double.Parse(statProperties[0]));            case "s":              // uniques:765|s              // uniques:ABSA434As1|s              return new Set(nameAndValue[0]' statProperties[0]);            case "r":              // some.other.value:12312|r              // some.other.value:12312|r|99988883333              if (statProperties.Length == 2)              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0])' long.Parse(statProperties[2]));              }            case "cg":              // calendargram.key:value|cg|{h'd'w'm'dow}              return new Calendargram(nameAndValue[0]' statProperties[0]' statProperties[2]);            default:              return new InvalidMessage("Unknown message type: " + statProperties[1]);          }        }        catch (Exception ex)        {          return new InvalidMessage("Couldn't parse message: " + ex.Message);        }
Magic Number,statsd.net.shared.Messages,StatsdMessageFactory,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Messages\StatsdMessageFactory.cs,ParseMessage,The following statement contains a magic number: try        {          string[] nameAndValue = line.Split(':');          if (nameAndValue[0].Length == 0)          {            return new InvalidMessage("Name cannot be empty.");          }          string[] statProperties = nameAndValue[1].Split(splitter' StringSplitOptions.RemoveEmptyEntries);          if (statProperties.Length < 2)          {            return new InvalidMessage("Malformed message.");          }            switch (statProperties[1])          {            case "c":              if (statProperties.Length == 2)              {                // gorets:1|c                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                // gorets:1|c|@0.1                return new Counter(nameAndValue[0]' Double.Parse(statProperties[0])' float.Parse(statProperties[2].Remove(0' 1)));              }            case "ms":              // glork:320|ms              return new Timing(nameAndValue[0]' Double.Parse(statProperties[0]));            case "g":              // gaugor:333|g              return new Gauge(nameAndValue[0]' Double.Parse(statProperties[0]));            case "s":              // uniques:765|s              // uniques:ABSA434As1|s              return new Set(nameAndValue[0]' statProperties[0]);            case "r":              // some.other.value:12312|r              // some.other.value:12312|r|99988883333              if (statProperties.Length == 2)              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0]));              }              else              {                return new Raw(nameAndValue[0]' Double.Parse(statProperties[0])' long.Parse(statProperties[2]));              }            case "cg":              // calendargram.key:value|cg|{h'd'w'm'dow}              return new Calendargram(nameAndValue[0]' statProperties[0]' statProperties[2]);            default:              return new InvalidMessage("Unknown message type: " + statProperties[1]);          }        }        catch (Exception ex)        {          return new InvalidMessage("Couldn't parse message: " + ex.Message);        }
Magic Number,statsd.net.shared.Services,IntervalService,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Services\IntervalService.cs,Cancel,The following statement contains a magic number: if (!dontWaitForCallback)              {                  // Wait until the callback has finised executing                  _callbackComplete.WaitOne(new TimeSpan(0' 0' 30));              }
Magic Number,statsd.net.shared.Services,PercentileCalculator,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Services\PercentileCalculator.cs,TryCompute,The following statement contains a magic number: if (percentile < 0 || percentile > 100)        {          throw new ArgumentException("Percentile value must be between 0 and 1.0");        }
Magic Number,statsd.net.shared.Services,PercentileCalculator,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Services\PercentileCalculator.cs,TryCompute,The following statement contains a magic number: if (data.Count < 3)          {          return false;        }
Magic Number,statsd.net.shared.Services,PercentileCalculator,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Services\PercentileCalculator.cs,TryCompute,The following statement contains a magic number: if (percentile == 100)        {          percentileValue = data[data.Count - 1];          return true;        }
Magic Number,statsd.net.shared.Services,PercentileCalculator,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Services\PercentileCalculator.cs,TryCompute,The following statement contains a magic number: var n = (int)Math.Round((data.Count * (percentile / 100.0)) + 0.5' 0);
Magic Number,statsd.net.shared.Services,PercentileCalculator,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Services\PercentileCalculator.cs,TryCompute,The following statement contains a magic number: var n = (int)Math.Round((data.Count * (percentile / 100.0)) + 0.5' 0);
Magic Number,statsd.net.shared.Services,SystemMetricsService,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Services\SystemMetricsService.cs,SystemMetricsService,The following statement contains a magic number: if (intervalService == null)        {          intervalService = new IntervalService(10);        }
Magic Number,statsd.net.shared.Structures,TimeWindow,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Structures\TimeWindow.cs,TimeWindow,The following statement contains a magic number: FiveMinute = FIVE_MINUTE + "_" + (now.Minute / 5);
Missing Default,statsd.net.shared,Utility,C:\repos\lukevenediger_statsd.net\statsd.net.shared\Utility.cs,ConvertToTimespan,The following switch statement is missing a default case: switch (character)                      {                          case 's':                              return new TimeSpan(0' 0' value);                          case 'm':                              return new TimeSpan(0' value' 0);                          case 'h':                              return new TimeSpan(value' 0' 0);                          case 'd':                              return new TimeSpan(value' 0' 0' 0);                      }
