Implementation smell,Namespace,Class,File,Method,Description
Complex Method,statsd.net.Backends.Librato,LibratoBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\Librato\LibratoBackend.cs,ProcessBucket,Cyclomatic complexity of the method is 10
Complex Method,statsd.net.Configuration,ConfigurationFactory,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Configuration\ConfigurationFactory.cs,Parse,Cyclomatic complexity of the method is 17
Complex Method,statsd.net.Framework,StatsdMessageRouterBlock,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Framework\StatsdMessageRouterBlock.cs,OfferMessage,Cyclomatic complexity of the method is 9
Complex Method,statsd.net,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Program.cs,Main,Cyclomatic complexity of the method is 8
Long Parameter List,statsd.net.Backends.Librato,LibratoTiming,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\Librato\LibratoTiming.cs,LibratoTiming,The method has 7 parameters. Parameters: name' count' sum' sumOfSquares' min' max' epoch
Long Parameter List,statsd.net.Backends.Statsdnet,StatsdnetForwardingClient,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\Statsdnet\StatsdnetForwardingClient.cs,StatsdnetForwardingClient,The method has 5 parameters. Parameters: host' port' systemMetrics' numRetries' enableCompression
Long Parameter List,statsd.net.Configuration,LibratoBackendConfiguration,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Configuration\BackendConfiguration.cs,LibratoBackendConfiguration,The method has 7 parameters. Parameters: email' token' retryDelay' numRetries' postTimeout' maxBatchSize' countersAsGauges
Long Parameter List,statsd.net.Framework,TimedCalendargramAggregatorBlockFactory,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Framework\TimedCalendargramAggregatorBlockFactory.cs,CreateBlock,The method has 5 parameters. Parameters: target' rootNamespace' intervalService' timeWindowService' log
Long Parameter List,statsd.net.Framework,TimedLatencyPercentileAggregatorBlockFactory,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Framework\TimedLatencyPercentileAggregatorBlockFactory.cs,CreateBlock,The method has 7 parameters. Parameters: target' rootNamespace' intervalService' percentile' percentileName' log' maxItemsPerBucket
Long Parameter List,statsd.net.Framework,TimedLatencyAggregatorBlockFactory,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Framework\TimedLatencyAggregatorBlockFactory.cs,CreateBlock,The method has 6 parameters. Parameters: target' rootNamespace' intervalService' calculateSumSquares' log' maxItemsPerBucket
Long Parameter List,statsd.net.Framework,TimedGaugeAggregatorBlockFactory,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Framework\TimedGaugeAggregatorBlockFactory.cs,CreateBlock,The method has 5 parameters. Parameters: target' rootNamespace' removeZeroGauges' intervalService' log
Long Identifier,statsd.net.Framework,TimedCalendargramAggregatorBlockFactory,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Framework\TimedCalendargramAggregatorBlockFactory.cs,,The length of the parameter METRIC_IDENTIFIER_SEPARATOR_SPLITTER is 36.
Long Identifier,statsd.net.Framework,TimedSetAggregatorBlockFactory,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Framework\TimedSetAggregatorBlockFactory.cs,,The length of the parameter METRIC_IDENTIFIER_SEPARATOR_SPLITTER is 36.
Long Statement,statsd.net.Backends.Librato,LibratoBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\Librato\LibratoBackend.cs,Configure,The length of the statement  "        _log.Warn(String.Format("Retry {0} failed. Trying again. Delay {1}' Error: {2}"' args.CurrentRetryCount' args.Delay' args.LastException.Message)' args.LastException); " is 166.
Long Statement,statsd.net.Backends.Librato,LibratoBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\Librato\LibratoBackend.cs,PostToLibratoInternal,The length of the statement  "                throw new UnauthorizedAccessException("Librato.com reports that your access is not authorised. Is your API key and email address correct?"); " is 140.
Long Statement,statsd.net.Backends.Librato,LibratoBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\Librato\LibratoBackend.cs,GetPayload,The length of the statement  "      var gauges = lines.Where(p => p.MetricType == LibratoMetricType.Gauge || p.MetricType == LibratoMetricType.Timing).ToArray(); " is 125.
Long Statement,statsd.net.Backends.SqlServer,SqlServerBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\SqlServer\SqlServerBackend.cs,Configure,The length of the statement  "      var config = new SqlServerConfiguration(configElement.Attribute("connectionString").Value' configElement.ToInt("writeBatchSize")); " is 130.
Long Statement,statsd.net.Backends.SqlServer,SqlServerBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\SqlServer\SqlServerBackend.cs,Configure,The length of the statement  "      _actionBlock = new ActionBlock<GraphiteLine[]>(p => SendToDB(p)' new ExecutionDataflowBlockOptions() { MaxDegreeOfParallelism = 1 }); " is 133.
Long Statement,statsd.net.Backends.SqlServer,SqlServerBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\SqlServer\SqlServerBackend.cs,InitialiseRetryHandling,The length of the statement  "          _log.Warn(String.Format("Retry {0} failed. Trying again. Delay {1}' Error: {2}"' args.CurrentRetryCount' args.Delay' args.LastException.Message)' args.LastException); " is 166.
Long Statement,statsd.net.Configuration,ConfigurationFactory,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Configuration\ConfigurationFactory.cs,Parse,The length of the statement  "                        var timerConfig = new TimersAggregationConfig(ns: item.Attribute("namespace").Value' calculateSumSquares: item.ToBoolean("calculateSumSquares")); " is 145.
Long Statement,statsd.net.Configuration,StatsdnetConfiguration,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Configuration\StatsdnetConfiguration.cs,GetConfiguredBackends,The length of the statement  "        IBackend backend = AvailableBackends.FirstOrDefault(x => x.Name.Equals(backendName' StringComparison.OrdinalIgnoreCase)); " is 121.
Long Statement,statsd.net.Framework,TimedSetAggregatorBlockFactory,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Framework\TimedSetAggregatorBlockFactory.cs,CreateBlock,The length of the statement  "                              var metricName = metricsAndValues[index].Key.Split(METRIC_IDENTIFIER_SEPARATOR_SPLITTER' StringSplitOptions.RemoveEmptyEntries)[0] + qualifier; " is 143.
Empty Catch Block,statsd.net.Backends,GraphiteTCPBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\GraphiteTCPBackend.cs,EnsureConnectedClient,The method has an empty catch block.
Empty Catch Block,statsd.net.Backends.Statsdnet,StatsdnetForwardingClient,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\Statsdnet\StatsdnetForwardingClient.cs,Send,The method has an empty catch block.
Magic Number,statsd.net.Backends.Librato,LibratoBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\Librato\LibratoBackend.cs,Configure,The following statement contains a magic number: _retryStrategy = new Incremental(_config.NumRetries' _config.RetryDelay' TimeSpan.FromSeconds(2));
Magic Number,statsd.net.Backends.SqlServer,SqlServerBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\SqlServer\SqlServerBackend.cs,InitialiseRetryHandling,The following statement contains a magic number: _retryStrategy = new Incremental(_retries' TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(2));
Magic Number,statsd.net.Configuration,SqlServerConfiguration,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Configuration\BackendConfiguration.cs,SqlServerConfiguration,The following statement contains a magic number: Retries = 3;
Magic Number,statsd.net.Configuration,StatsdBackendConfiguration,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Configuration\BackendConfiguration.cs,StatsdBackendConfiguration,The following statement contains a magic number: FlushInterval = flushInterval ?? new TimeSpan(0' 0' 5);
Magic Number,statsd.net,Program,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Program.cs,Main,The following statement contains a magic number: switch (action)          {            case "--install":              InstallService();              break;            case "--uninstall":              UninstallService();              break;            case "--version":              PrintVersion();              break;            case "--console":              RunConsoleMode(args.Length == 2 ? args[1] : null);              break;            case "--help":              PrintHelp();              break;            default:  #if DEBUG              if ( global::System.Diagnostics.Debugger.IsAttached )              {                RunConsoleMode();              }  #endif              PrintHelp(action);              Environment.Exit(1);              break;          }
Missing Default,statsd.net.Backends.Librato,LibratoBackend,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Backends\Librato\LibratoBackend.cs,ProcessBucket,The following switch statement is missing a default case: switch (bucket.BucketType)        {          case BucketType.Count:            var counterBucket = bucket as CounterBucket;            foreach (var count in counterBucket.Items)            {              if (_config.CountersAsGauges)              {                _batchBlock.Post(new LibratoGauge(counterBucket.RootNamespace + count.Key' count.Value' bucket.Epoch));              }              else              {                _batchBlock.Post(new LibratoCounter(counterBucket.RootNamespace + count.Key' count.Value' bucket.Epoch));              }            }            break;          case BucketType.Gauge:            var gaugeBucket = bucket as GaugesBucket;            foreach (var gauge in gaugeBucket.Gauges)            {              _batchBlock.Post(new LibratoGauge(gaugeBucket.RootNamespace + gauge.Key' gauge.Value' bucket.Epoch));            }            break;          case BucketType.Timing:            var timingBucket = bucket as LatencyBucket;            foreach (var timing in timingBucket.Latencies)            {              _batchBlock.Post(new LibratoTiming(timingBucket.RootNamespace + timing.Key'                timing.Value.Count'                timing.Value.Sum'                timing.Value.SumSquares'                timing.Value.Min'                timing.Value.Max'                bucket.Epoch));            }            break;          case BucketType.Percentile:            var percentileBucket = bucket as PercentileBucket;            double percentileValue;            foreach (var pair in percentileBucket.Timings)            {              if (percentileBucket.TryComputePercentile(pair' out percentileValue))              {                _batchBlock.Post(new LibratoGauge(percentileBucket.RootNamespace + pair.Key + percentileBucket.PercentileName'                  percentileValue'                  bucket.Epoch));              }            }            break;        }
Missing Default,statsd.net.Configuration,ConfigurationFactory,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Configuration\ConfigurationFactory.cs,Parse,The following switch statement is missing a default case: switch (item.Name.LocalName)                  {                      case "gauges":                          config.Aggregators.Add("gauges"' new GaugeAggregatorConfig(ns: item.Attribute("namespace").Value'                              removeZeroGauges: item.ToBoolean("removeZeroGauges")));                          break;                      case "counters":                          config.Aggregators.Add("counters"' new CounterAggregationConfig(ns: item.Attribute("namespace").Value));                          break;                      case "sets":                          config.Aggregators.Add("sets"' new SetAggregationConfig(ns: item.Attribute("namespace").Value));                          break;                      case "calendargrams":                          config.Aggregators.Add("calendargrams"' new CalendargramAggregationConfig(ns: item.Attribute("namespace").Value));                          break;                      case "timers":                          var timerConfig = new TimersAggregationConfig(ns: item.Attribute("namespace").Value' calculateSumSquares: item.ToBoolean("calculateSumSquares"));                          config.Aggregators.Add("timers"' timerConfig);                          // Now add the percentiles                          foreach (var subItem in item.Elements())                          {                              if (!timerConfig.AddPercentile(new PercentileConfig(                                name: subItem.Attribute("name").Value'                                threshold: subItem.ToInt("threshold")'                                flushInterval: subItem.ToTimeSpan("flushInterval")                                )))                              {                                  // TODO: log that a duplicate percentile was ignored                              }                          }                          break;                  }
Missing Default,statsd.net.Framework,StatsdMessageRouterBlock,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Framework\StatsdMessageRouterBlock.cs,AddTarget,The following switch statement is missing a default case: switch (message)              {                  case MessageType.Counter: _counters = target; break;                  case MessageType.Gauge: _gauges = target; break;                  case MessageType.Timing: _timings.Add(target); break;                  case MessageType.Raw: _raw = target; break;                  case MessageType.Calendargram: _calendargrams = target; break;              }
Missing Default,statsd.net,Statsd,D:\research\architectureSmells\repos\lukevenediger_statsd.net\statsd.net\Statsd.cs,LoadAggregators,The following switch statement is missing a default case: switch (aggregator.Key)                  {                      case "counters":                          var counter = aggregator.Value as CounterAggregationConfig;                          AddAggregator(MessageType.Counter'                            TimedCounterAggregatorBlockFactory.CreateBlock(messageBroadcaster'                              counter.Namespace'                              intervalService'                              _log)'                            systemMetrics);                          break;                      case "gauges":                          var gauge = aggregator.Value as GaugeAggregatorConfig;                          AddAggregator(MessageType.Gauge'                            TimedGaugeAggregatorBlockFactory.CreateBlock(messageBroadcaster'                              gauge.Namespace'                              gauge.RemoveZeroGauges'                              intervalService'                              _log)'                            systemMetrics);                          break;                      case "calendargrams":                          var calendargram = aggregator.Value as CalendargramAggregationConfig;                          AddAggregator(MessageType.Calendargram'                              TimedCalendargramAggregatorBlockFactory.CreateBlock(messageBroadcaster'                                  calendargram.Namespace'                                  intervalService'                                  new TimeWindowService()'                                  _log)'                                  systemMetrics);                          break;                      case "timers":                          var timer = aggregator.Value as TimersAggregationConfig;                          AddAggregator(MessageType.Timing'                            TimedLatencyAggregatorBlockFactory.CreateBlock(messageBroadcaster'                              timer.Namespace'                              intervalService'                              timer.CalculateSumSquares'                              _log)'                            systemMetrics);                          // Add Percentiles                          foreach (var percentile in timer.Percentiles)                          {                              AddAggregator(MessageType.Timing'                                TimedLatencyPercentileAggregatorBlockFactory.CreateBlock(messageBroadcaster'                                  timer.Namespace'                                  intervalService'                                  percentile.Threshold'                                  percentile.Name'                                  _log)'                                systemMetrics);                          }                          break;                    }
