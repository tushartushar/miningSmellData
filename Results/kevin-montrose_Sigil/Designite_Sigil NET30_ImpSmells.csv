Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The method has 1924 lines of code.
Long Method,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The method has 101 lines of code.
Long Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,VerifyAndDoArithmetic,The method has 121 lines of code.
Long Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadElement,The method has 215 lines of code.
Long Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadIndirect,The method has 291 lines of code.
Long Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreElement,The method has 146 lines of code.
Long Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreIndirect,The method has 183 lines of code.
Complex Method,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,Disassemble,Cyclomatic complexity of the method is 14
Complex Method,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,GetOperations,Cyclomatic complexity of the method is 22
Complex Method,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,CheckForExceptionOperations,Cyclomatic complexity of the method is 13
Complex Method,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,Cyclomatic complexity of the method is 210
Complex Method,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,Cyclomatic complexity of the method is 48
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,InjectTailCall,Cyclomatic complexity of the method is 12
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,Cyclomatic complexity of the method is 10
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,Cyclomatic complexity of the method is 8
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,Cyclomatic complexity of the method is 17
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallVirtual,Cyclomatic complexity of the method is 9
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Convert,Cyclomatic complexity of the method is 15
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,ConvertOverflow,Cyclomatic complexity of the method is 15
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,UnsignedConvertOverflow,Cyclomatic complexity of the method is 15
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,RemoveInstruction,Cyclomatic complexity of the method is 14
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,InsertInstruction,Cyclomatic complexity of the method is 14
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Jump,Cyclomatic complexity of the method is 10
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,PatchBranches,Cyclomatic complexity of the method is 19
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadArgument,Cyclomatic complexity of the method is 11
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,Cyclomatic complexity of the method is 21
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,Cyclomatic complexity of the method is 21
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadElement,Cyclomatic complexity of the method is 14
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadField,Cyclomatic complexity of the method is 9
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadIndirect,Cyclomatic complexity of the method is 19
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadLocal,Cyclomatic complexity of the method is 12
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,DeclareLocal,Cyclomatic complexity of the method is 18
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreElement,Cyclomatic complexity of the method is 11
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreField,Cyclomatic complexity of the method is 9
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreIndirect,Cyclomatic complexity of the method is 13
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreLocal,Cyclomatic complexity of the method is 12
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Switch,Cyclomatic complexity of the method is 9
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,EndExceptionBlock,Cyclomatic complexity of the method is 13
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BeginCatchBlock,Cyclomatic complexity of the method is 9
Complex Method,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,ValidateTryCatchFinallyBranches,Cyclomatic complexity of the method is 9
Complex Method,Sigil,Operation,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Operation.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Sigil,SigilVerificationException,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\SigilVerificationException.cs,GetMessage,Cyclomatic complexity of the method is 9
Complex Method,Sigil,SigilVerificationException,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\SigilVerificationException.cs,GetDebugInfo,Cyclomatic complexity of the method is 11
Complex Method,Sigil.Impl,ExtensionMethods,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\ExtensionMethods.cs,IsAssignableFrom,Cyclomatic complexity of the method is 10
Complex Method,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,Cyclomatic complexity of the method is 53
Complex Method,Sigil.Impl,LinqAlternative,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\LinqAlternative.cs,Any,Cyclomatic complexity of the method is 9
Complex Method,Sigil.Impl,LinqAlternative,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\LinqAlternative.cs,Last,Cyclomatic complexity of the method is 8
Complex Method,Sigil.Impl,LinqAlternative,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\LinqAlternative.cs,SingleOrDefault,Cyclomatic complexity of the method is 8
Complex Method,Sigil.Impl,ReturnTracer,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\ReturnTracer.cs,TraceFrom,Cyclomatic complexity of the method is 8
Complex Method,Sigil.Impl,RollingVerifier,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\RollingVerifier.cs,CompareStacks,Cyclomatic complexity of the method is 9
Complex Method,Sigil.Impl,TypeOnStack,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\TypeOnStack.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,Sigil.Impl,VerifiableTracker,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerifiableTracker.cs,UpdateStack,Cyclomatic complexity of the method is 10
Complex Method,Sigil.Impl,VerifiableTracker,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerifiableTracker.cs,GetLegalTransitions,Cyclomatic complexity of the method is 13
Complex Method,Sigil.Impl,VerifiableTracker,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerifiableTracker.cs,CollapseAndVerify,Cyclomatic complexity of the method is 13
Long Parameter List,Sigil,DisassembledOperations,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\DisassembledOperations.cs,DisassembledOperations,The method has 5 parameters.
Long Parameter List,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,InferTypes,The method has 5 parameters.
Long Parameter List,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,GetOperations,The method has 8 parameters.
Long Parameter List,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,CheckForExceptionOperations,The method has 11 parameters.
Long Parameter List,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOp,The method has 9 parameters.
Long Parameter List,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The method has 6 parameters.
Long Parameter List,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The method has 8 parameters.
Long Parameter List,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Emit,The method has 6 parameters.
Long Parameter List,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,MakeNonGenericEmit,The method has 6 parameters.
Long Parameter List,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,DisassemblerDynamicMethod,The method has 5 parameters.
Long Parameter List,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BuildMethod,The method has 7 parameters.
Long Parameter List,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BuildStaticMethod,The method has 5 parameters.
Long Parameter List,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BuildInstanceMethod,The method has 5 parameters.
Long Parameter List,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BuildConstructor,The method has 6 parameters.
Long Parameter List,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,UpdateState,The method has 6 parameters.
Long Parameter List,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,UpdateState,The method has 6 parameters.
Long Parameter List,Sigil,Local,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Local.cs,Local,The method has 7 parameters.
Long Parameter List,Sigil.Impl,LinqAlternative,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\LinqAlternative.cs,_Partition,The method has 6 parameters.
Long Parameter List,Sigil.Impl,VerificationResult,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerificationResult.cs,FailureTypeMismatch,The method has 5 parameters.
Long Parameter List,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewDynamicMethod,The method has 6 parameters.
Long Parameter List,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,BuildMethod,The method has 9 parameters.
Long Parameter List,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,BuildInstanceMethod,The method has 8 parameters.
Long Parameter List,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,BuildStaticMethod,The method has 8 parameters.
Long Parameter List,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,BuildConstructor,The method has 7 parameters.
Long Statement,Sigil,DisassembledOperations,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\DisassembledOperations.cs,EmitFrom,The length of the statement  "		throw new InvalidOperationException ("from + length must be less than " + Operations.Count + "; found " + (from + length)); " is 123.
Long Statement,Sigil,DisassembledOperations,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\DisassembledOperations.cs,EmitFrom,The length of the statement  "	var e1 = Emit<DelegateType>.DisassemblerDynamicMethod (LinqAlternative.Select (Parameters' p => p.ParameterType).ToArray ()' name' module); " is 139.
Long Statement,Sigil,DisassembledOperations,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\DisassembledOperations.cs,Emit,The length of the statement  "		throw new InvalidOperationException ("Cannot emit this DisassembledOperations object' check CanEmit before calling any Emit methods"); " is 134.
Long Statement,Sigil,DisassembledOperations,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\DisassembledOperations.cs,Emit,The length of the statement  "		throw new InvalidOperationException ("length must be between 0 and " + Operations.Count + "' inclusive; found " + length); " is 122.
Long Statement,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,Disassemble,The length of the statement  "	var ls = new LinqList<LocalVariableInfo> (locals).OrderBy (_ => _.LocalIndex).Select ((l' ix) => new Local (null' (ushort)l.LocalIndex' l.LocalType' null' "_local" + ix' null' 0)).ToList ().AsEnumerable (); " is 206.
Long Statement,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,Disassemble,The length of the statement  "	var ops = new List<SigilTuple<int' Operation<DelegateType>>> (GetOperations (asDel.Method.Module' cil' ps' ls' labels' excBlocks' asLabels' needsInference)); " is 157.
Long Statement,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,Disassemble,The length of the statement  "		needsInference = new List<SigilTuple<int' Operation<DelegateType>>> (LinqAlternative.Where (ops' w => w.Item2.IsOpCode && w.Item2.Parameters == null).AsEnumerable ()); " is 167.
Long Statement,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,Disassemble,The length of the statement  "	return new DisassembledOperations<DelegateType> (new List<Operation<DelegateType>> (new LinqList<SigilTuple<int' Operation<DelegateType>>> (ops).Select (d => d.Item2).AsEnumerable ())' ps' ls' asLabels' canBeEmitted); " is 217.
Long Statement,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,InferTypes,The length of the statement  "	var tempDisasm = new DisassembledOperations<DelegateType> (new List<Operation<DelegateType>> (new LinqList<SigilTuple<int' Operation<DelegateType>>> (ops).Select (d => d.Item2).AsEnumerable ())' ps' ls' asLabels' canEmit: false); " is 229.
Long Statement,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The length of the statement  "		var inOrder = LinqAlternative.OrderBy<Operation<DelegateType>' int> (LinqAlternative.Select (group' _ => _.Item2).AsEnumerable ()' op => { " is 138.
Long Statement,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,GetOperations,The length of the statement  "	CheckForExceptionOperations (0' exceptionStart' exceptionEnd' catchStart' catchEnd' finallyStart' finallyEnd' activeExceptionBlocks' activeCatchBlocks' activeFinallyBlocks' ret); " is 178.
Long Statement,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,GetOperations,The length of the statement  "		CheckForExceptionOperations (i' exceptionStart' exceptionEnd' catchStart' catchEnd' finallyStart' finallyEnd' activeExceptionBlocks' activeCatchBlocks' activeFinallyBlocks' ret); " is 178.
Long Statement,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The length of the statement  "	if (op == OpCodes.Prefix1 || op == OpCodes.Prefix2 || op == OpCodes.Prefix3 || op == OpCodes.Prefix4 || op == OpCodes.Prefix5 || op == OpCodes.Prefix6 || op == OpCodes.Prefix7 || op == OpCodes.Prefixref) { " is 205.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "	if (HasFlag (emit.CallingConventions' CallingConventions.VarArgs) && !HasFlag (emit.CallingConventions' CallingConventions.Standard)) { " is 135.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "	var firstParamIsThis = HasFlag (emit.CallingConventions' CallingConventions.HasThis) || HasFlag (emit.CallingConventions' CallingConventions.ExplicitThis); " is 155.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "	UpdateState (OpCodes.Call' methodInfo' emit.ParameterTypes' Wrap (transitions' "Call")' firstParamIsThis: firstParamIsThis' arglist: arglist); " is 142.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "	if (HasFlag (method.CallingConvention' CallingConventions.VarArgs) && !HasFlag (method.CallingConvention' CallingConventions.Standard)) { " is 137.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "	var expectedParams = ((LinqArray<ParameterInfo>)method.GetParameters ()).Select (s => TypeOnStack.Get (s.ParameterType)).ToList (); " is 131.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "	var firstParamIsThis = HasFlag (method.CallingConvention' CallingConventions.HasThis) || HasFlag (method.CallingConvention' CallingConventions.ExplicitThis); " is 157.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "	UpdateState (OpCodes.Call' method' ((LinqArray<ParameterInfo>)method.GetParameters ()).Select (s => s.ParameterType).AsEnumerable ()' Wrap (transitions' "Call")' firstParamIsThis: firstParamIsThis' arglist: arglist); " is 216.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "	if (HasFlag (cons.CallingConvention' CallingConventions.VarArgs) && !HasFlag (cons.CallingConvention' CallingConventions.Standard)) { " is 133.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "		throw new SigilVerificationException ("Constructors may only be called directly from within a constructor' use NewObject to allocate a new object with a specific constructor."' IL.Instructions (AllLocals)); " is 206.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "		throw new SigilVerificationException ("Only constructors defined in the current class or it's base class may be called"' IL.Instructions (AllLocals)); " is 150.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "	var expectedParams = ((LinqArray<ParameterInfo>)cons.GetParameters ()).Select (s => TypeOnStack.Get (s.ParameterType)).ToList (); " is 129.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Call,The length of the statement  "	UpdateState (OpCodes.Call' cons' ((LinqArray<ParameterInfo>)cons.GetParameters ()).Select (s => s.ParameterType).AsEnumerable ()' Wrap (transitions' "Call")); " is 158.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)); " is 130.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)); " is 154.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)); " is 178.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)); " is 202.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)); " is 226.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)); " is 250.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)); " is 274.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)); " is 299.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)); " is 324.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)' typeof(ParameterType12)); " is 349.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)' typeof(ParameterType12)' typeof(ParameterType13)); " is 374.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)' typeof(ParameterType12)' typeof(ParameterType13)' typeof(ParameterType14)); " is 399.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)' typeof(ParameterType12)' typeof(ParameterType13)' typeof(ParameterType14)' typeof(ParameterType15)); " is 424.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	return CallIndirect (callConventions' typeof(ReturnType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)' typeof(ParameterType12)' typeof(ParameterType13)' typeof(ParameterType14)' typeof(ParameterType15)' typeof(ParameterType16)); " is 449.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	var known = CallingConventions.Any | CallingConventions.ExplicitThis | CallingConventions.HasThis | CallingConventions.Standard | CallingConventions.VarArgs; " is 157.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "				throw new SigilVerificationException ("CallIndirect expects method calling conventions to match' found " + funcPtr.CallingConvention + " on the stack"' IL.Instructions (AllLocals)); " is 181.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "					throw new SigilVerificationException ("CallIndirect expects a 'this' value assignable to " + funcPtr.InstanceType + "' found " + thisRef' IL.Instructions (AllLocals)); " is 167.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "				throw new SigilVerificationException ("CallIndirect expects method return types to match' found " + funcPtr.ReturnType + " on the stack"' IL.Instructions (AllLocals)); " is 167.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallVirtual,The length of the statement  "	if (HasFlag (method.CallingConvention' CallingConventions.VarArgs) && !HasFlag (method.CallingConvention' CallingConventions.Standard)) { " is 137.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallVirtual,The length of the statement  "	var expectedParams = ((LinqArray<ParameterInfo>)method.GetParameters ()).Select (s => TypeOnStack.Get (s.ParameterType)).ToList (); " is 131.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CallVirtual,The length of the statement  "	UpdateState (OpCodes.Callvirt' method' ((LinqArray<ParameterInfo>)method.GetParameters ()).Select (s => s.ParameterType).AsEnumerable ()' Wrap (transitions' "CallVirtual")' arglist: arglist); " is 191.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,MakeNonGenericEmit,The length of the statement  "	return new Emit<NonGenericPlaceholderDelegate> (callConvention' returnType' parameterTypes' allowUnverifiable' doVerify' strictBranchVerification); " is 147.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,TraceOperationResultUsage,The length of the statement  "		var allUsage = new LinqList<InstructionAndTransitions> (r.Value.SelectMany (k => k.UsedBy.Select (u => u.Item1)).AsEnumerable ()); " is 130.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,TraceOperationResultUsage,The length of the statement  "		var usedBy = new List<Operation<DelegateType>> (allUsage.Select (u => IL.Operations [u.InstructionIndex.Value]).Distinct ().AsEnumerable ()); " is 141.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CreateDelegate,The length of the statement  "		throw new InvalidOperationException ("Emit was not created to build a DynamicMethod' thus CreateDelegate cannot be called"); " is 124.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CreateDelegate,The length of the statement  "	CreatedDelegate = (DelegateType)(object)InnerCreateDelegate (typeof(DelegateType)' out instructions' optimizationOptions); " is 122.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CreateConstructor,The length of the statement  "		throw new InvalidOperationException ("Emit was not created to build a constructor' thus CreateConstructor cannot be called"); " is 125.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CreateTypeInitializer,The length of the statement  "		throw new InvalidOperationException ("Emit was not created to build a type initializer' thus CreateTypeInitializer cannot be called"); " is 134.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewDynamicMethod,The length of the statement  "	return DisassemblerDynamicMethod (name: name' module: module' doVerify: doVerify' strictBranchVerification: strictBranchVerification); " is 134.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,DisassemblerDynamicMethod,The length of the statement  "	var ret = new Emit<DelegateType> (dynMethod.CallingConvention' returnType' parameterTypes' AllowsUnverifiableCode (module)' doVerify' strictBranchVerification); " is 160.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewDynamicMethod,The length of the statement  "	var ret = new Emit<DelegateType> (dynMethod.CallingConvention' returnType' parameterTypes' allowUnverifiable' doVerify' strictBranchVerification); " is 146.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CheckAttributesAndConventions,The length of the statement  "	if ((attributes & ~(MethodAttributes.Abstract | MethodAttributes.Assembly | MethodAttributes.CheckAccessOnOverride | MethodAttributes.FamANDAssem | MethodAttributes.Family | MethodAttributes.FamORAssem | MethodAttributes.Final | MethodAttributes.HasSecurity | MethodAttributes.HideBySig | MethodAttributes.MemberAccessMask | MethodAttributes.NewSlot | MethodAttributes.PinvokeImpl | MethodAttributes.Private | MethodAttributes.PrivateScope | MethodAttributes.Public | MethodAttributes.RequireSecObject | MethodAttributes.ReuseSlot | MethodAttributes.RTSpecialName | MethodAttributes.SpecialName | MethodAttributes.Static | MethodAttributes.UnmanagedExport | MethodAttributes.Virtual | MethodAttributes.VtableLayoutMask)) != 0) { " is 728.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CheckAttributesAndConventions,The length of the statement  "	if ((callingConvention & ~(CallingConventions.Any | CallingConventions.ExplicitThis | CallingConventions.HasThis | CallingConventions.Standard | CallingConventions.VarArgs)) != 0) { " is 181.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BuildMethod,The length of the statement  "	var ret = new Emit<DelegateType> (callingConvention' returnType' parameterTypes' allowUnverifiableCode' doVerify' strictBranchVerification); " is 140.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BuildStaticMethod,The length of the statement  "	return BuildMethod (type' name' attributes | MethodAttributes.Static' CallingConventions.Standard' allowUnverifiableCode' doVerify); " is 132.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BuildConstructor,The length of the statement  "	var ret = new Emit<DelegateType> (callingConvention' typeof(void)' parameterTypes' allowUnverifiableCode' doVerify' strictBranchVerification); " is 142.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BuildTypeInitializer,The length of the statement  "	var ret = new Emit<DelegateType> (CallingConventions.Standard' typeof(void)' TypeHelpers.EmptyTypes' allowUnverifiableCode' doVerify' strictBranchVerification); " is 160.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Jump,The length of the statement  "		throw new ArgumentException ("Jump expected a calling convention of " + CallingConventions + "' found " + method.CallingConvention); " is 132.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Jump,The length of the statement  "		throw new ArgumentException ("Jump expected a method with " + ParameterTypes.Length + " parameters' found " + paras.Length); " is 124.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Jump,The length of the statement  "			throw new SigilVerificationException ("Jump expected the #" + i + " parameter to be assignable from " + actuallyIs + "' but found " + shouldBe' IL.Instructions (AllLocals)); " is 173.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,MarkLabel,The length of the statement  "		throw new InvalidOperationException ("label [" + label.Name + "] has already been marked' and cannot be marked a second time"); " is 127.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadArgumentAddress,The length of the statement  "		UpdateState (OpCodes.Ldarga_S' asByte' Wrap (StackTransition.Push (ParameterTypes [index].MakePointerType ())' "LoadArgumentAddress")); " is 135.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadArgumentAddress,The length of the statement  "	UpdateState (OpCodes.Ldarga' asShort' Wrap (StackTransition.Push (ParameterTypes [index].MakePointerType ())' "LoadArgumentAddress")); " is 134.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The length of the statement  "	UpdateState (OpCodes.Ldtoken' method' TypeHelpers.EmptyTypes' Wrap (StackTransition.Push<RuntimeMethodHandle> ()' "LoadConstant")); " is 131.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,InjectReadOnly,The length of the statement  "		var asPtrToLdind = value.CountMarks (OpCodes.Ldind_I' 0) + value.CountMarks (OpCodes.Ldind_I1' 0) + value.CountMarks (OpCodes.Ldind_I2' 0) + value.CountMarks (OpCodes.Ldind_I4' 0) + value.CountMarks (OpCodes.Ldind_I8' 0) + value.CountMarks (OpCodes.Ldind_R4' 0) + value.CountMarks (OpCodes.Ldind_R8' 0) + value.CountMarks (OpCodes.Ldind_Ref' 0) + value.CountMarks (OpCodes.Ldind_U1' 0) + value.CountMarks (OpCodes.Ldind_U2' 0) + value.CountMarks (OpCodes.Ldind_U4' 0); " is 468.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,InjectReadOnly,The length of the statement  "		var totalAllowedUses = asObjToLdfd + asObjToLdfda + asObjToStfd + asPtrToLdobj + asPtrToLdind + asSourceToCpobj + asObjToCall; " is 126.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadFieldAddress,The length of the statement  "		UpdateState (OpCodes.Ldsflda' field' Wrap (StackTransition.Push (field.FieldType.MakeByRefType ())' "LoadFieldAddress")); " is 121.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,InnerLoadFunctionPointer,The length of the statement  "	var type = TypeOnStack.GetKnownFunctionPointer (method.CallingConvention' HasFlag (method.CallingConvention' CallingConventions.HasThis) ? method.DeclaringType : null' method.ReturnType' parameterTypes); " is 203.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadIndirect,The length of the statement  "		throw new InvalidOperationException ("LoadIndirect cannot be used with " + type + "' LoadObject may be more appropriate"); " is 122.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,InnerLoadVirtualFunctionPointer,The length of the statement  "	var type = TypeOnStack.GetKnownFunctionPointer (method.CallingConvention' thisType' method.ReturnType' paramList.ToArray ()); " is 125.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)); " is 137.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)); " is 161.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)); " is 185.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)); " is 209.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)); " is 233.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)); " is 257.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)); " is 282.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)); " is 307.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)' typeof(ParameterType12)); " is 332.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)' typeof(ParameterType12)' typeof(ParameterType13)); " is 357.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)' typeof(ParameterType12)' typeof(ParameterType13)' typeof(ParameterType14)); " is 382.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)' typeof(ParameterType12)' typeof(ParameterType13)' typeof(ParameterType14)' typeof(ParameterType15)); " is 407.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	return NewObject (typeof(ReferenceType)' typeof(ParameterType1)' typeof(ParameterType2)' typeof(ParameterType3)' typeof(ParameterType4)' typeof(ParameterType5)' typeof(ParameterType6)' typeof(ParameterType7)' typeof(ParameterType8)' typeof(ParameterType9)' typeof(ParameterType10)' typeof(ParameterType11)' typeof(ParameterType12)' typeof(ParameterType13)' typeof(ParameterType14)' typeof(ParameterType15)' typeof(ParameterType16)); " is 432.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "	var cons = LinqAlternative.Where (allCons' c => c.GetParameters ().Length == parameterTypes.Length && LinqAlternative.Select (c.GetParameters ()' (p' i) => p.ParameterType == parameterTypes [i]).Aggregate (true' (a' b) => a && b)).SingleOrDefault (); " is 250.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,NewObject,The length of the statement  "		throw new InvalidOperationException ("Type " + type + " must have a constructor that matches parameters [" + BufferedILGenerator<DelegateType>.Join ("' "' ((LinqArray<Type>)parameterTypes).AsEnumerable ()) + "]"); " is 213.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreIndirect,The length of the statement  "	throw new InvalidOperationException ("StoreIndirect cannot be used with " + type + "' StoreObject may be more appropriate"); " is 124.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,EndExceptionBlock,The length of the statement  "		throw new InvalidOperationException ("Cannot end outer ExceptionBlock " + forTry + " while inner EmitExceptionBlock " + CurrentExceptionBlock.Peek () + " is open"); " is 164.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,EndExceptionBlock,The length of the statement  "	if (!CatchBlocks.Any (k => k.Key.ExceptionBlock == forTry) && !FinallyBlocks.Any (k => k.Key.ExceptionBlock == forTry)) { " is 121.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,EndExceptionBlock,The length of the statement  "		throw new InvalidOperationException ("Cannot end ExceptionBlock without defining at least one of a catch or finally block"); " is 124.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BeginCatchBlock,The length of the statement  "		throw new InvalidOperationException ("Cannot start CatchBlock on " + forTry + " while inner ExceptionBlock is still open"); " is 123.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BeginCatchBlock,The length of the statement  "		throw new ArgumentException ("BeginCatchBlock expects a type descending from Exception' found " + exceptionType' "exceptionType"); " is 130.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BeginCatchBlock,The length of the statement  "	var currentlyOpen = CatchBlocks.Where (c => c.Key.ExceptionBlock == forTry && c.Value.Item2 == -1).Select (s => s.Key).SingleOrDefault (); " is 138.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BeginCatchBlock,The length of the statement  "		throw new SigilVerificationException ("BeginCatchBlock expects an unclosed exception block' but " + forTry + " is already closed"' IL.Instructions (AllLocals)); " is 160.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BeginFinallyBlock,The length of the statement  "		throw new InvalidOperationException ("BeginFinallyBlock expects an unclosed exception block' but " + forTry + " is already closed"); " is 132.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BeginFinallyBlock,The length of the statement  "		throw new InvalidOperationException ("Cannot begin FinallyBlock on " + forTry + " while inner ExceptionBlock " + CurrentExceptionBlock.Peek () + " is still open"); " is 163.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,BeginFinallyBlock,The length of the statement  "		throw new InvalidOperationException ("There can only be one finally block per ExceptionBlock' and one is already defined for " + forTry); " is 137.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,EndFinallyBlock,The length of the statement  "		throw new InvalidOperationException ("EndFinallyBlock expects an unclosed finally block' but " + forFinally + " is already closed"); " is 132.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,FailStackUnderflow,The length of the statement  "		throw new SigilVerificationException (method + " expects a value on the stack' but it was empty"' IL.Instructions (AllLocals)); " is 127.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,FailStackUnderflow,The length of the statement  "	throw new SigilVerificationException (method + " expects " + expected + " values on the stack"' IL.Instructions (AllLocals)); " is 125.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,ValidateTryCatchFinallyBranches,The length of the statement  "		if (fromTryBlock == null && fromCatchBlock == null && fromFinallyBlock == null && toTryBlock == null && toCatchBlock == null && toFinallyBlock == null) { " is 153.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,ValidateTryCatchFinallyBranches,The length of the statement  "				throw new SigilVerificationException ("Cannot branch from inside " + fromCatchBlock + " to outside' exit the ExceptionBlock first"' IL.Instructions (AllLocals)); " is 161.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,ValidateTryCatchFinallyBranches,The length of the statement  "			throw new SigilVerificationException ("Cannot branch from inside " + fromFinallyBlock + " to outside' exit the ExceptionBlock first"' IL.Instructions (AllLocals)); " is 163.
Long Statement,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,ValidateTryCatchFinallyBranches,The length of the statement  "				throw new SigilVerificationException ("Cannot branch from inside " + fromTryBlock + " to outside' exit the ExceptionBlock first"' IL.Instructions (AllLocals)); " is 159.
Long Statement,Sigil,SigilVerificationException,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\SigilVerificationException.cs,GetMessage,The length of the statement  "			return method + " expected " + (ExtensionMethods.StartsWithVowel (expected) ? "an " : "a ") + expected + "; found " + found; " is 124.
Long Statement,Sigil,SigilVerificationException,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\SigilVerificationException.cs,GetDebugInfo,The length of the statement  "		if ((VerificationFailure.IsStackUnderflow || VerificationFailure.IsStackSizeFailure) && VerificationFailure.Stack != null) { " is 124.
Long Statement,Sigil,SigilVerificationException,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\SigilVerificationException.cs,GetDebugInfo,The length of the statement  "	var instrIx = VerificationFailure != null && VerificationFailure.TransitionIndex != null ? VerificationFailure.Verifier.GetInstructionIndex (VerificationFailure.TransitionIndex.Value) : -1; " is 189.
Long Statement,Sigil.Impl,BufferedILGenerator,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\BufferedILGenerator.cs,GetInScopeAt,The length of the statement  "	return allLocals.Where (l => l.DeclaredAtIndex <= ix && (l.ReleasedAtIndex == null || l.ReleasedAtIndex > ix)).ToDictionary (d => (int)d.Index' d => d); " is 152.
Long Statement,Sigil.Impl,BufferedILGenerator,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\BufferedILGenerator.cs,Emit,The length of the statement  "		log.AppendLine (op + " " + callConventions + " " + returnType + " " + Join (" "' ((LinqArray<Type>)parameterTypes).AsEnumerable ())); " is 133.
Long Statement,Sigil.Impl,BufferedILGenerator,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\BufferedILGenerator.cs,EmitCalli,The length of the statement  "		log.AppendLine (OpCodes.Calli + " " + callingConvention + " " + returnType + " " + Join (" "' (IEnumerable<Type>)parameterTypes) + " __arglist(" + Join ("' "' arglist) + ")"); " is 175.
Long Statement,Sigil.Impl,InstructionAndTransitions,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionAndTransitions.cs,ToString,The length of the statement  "	return "[" + Instruction + " @" + InstructionIndex + "] " + string.Join ("' "' Transitions.Select (t => t.ToString ()).ToArray ()); " is 131.
Long Statement,Sigil.Impl,ReturnTracer,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\ReturnTracer.cs,TraceFrom,The length of the statement  "	var nextBranches = Branches.Where (b => b.Item3 >= startAt).GroupBy (g => g.Item3).OrderBy (x => x.Key).FirstOrDefault (); " is 122.
Long Statement,Sigil.Impl,RollingVerifier,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\RollingVerifier.cs,RemoveUnnecessaryVerifiers,The length of the statement  "	// if anything's rooted' we only need one of them (since the IL stream being currently valid means they must in the future) " is 123.
Long Statement,Sigil.Impl,RollingVerifier,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\RollingVerifier.cs,RemoveUnnecessaryVerifiers,The length of the statement  "	// remove any verifiers that have duplicate terminal stack states; we know that another verifier will do just as well' no need to verify the whole instruction stream again " is 171.
Long Statement,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,Equals,The length of the statement  "	return EqualityComparer<T1>.Default.Equals (obj.item1' this.item1) && EqualityComparer<T2>.Default.Equals (obj.item2' this.item2); " is 130.
Long Statement,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,Equals,The length of the statement  "	return EqualityComparer<T1>.Default.Equals (obj.item1' this.item1) && EqualityComparer<T2>.Default.Equals (obj.item2' this.item2) && EqualityComparer<T3>.Default.Equals (obj.item3' this.item3); " is 193.
Long Statement,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,Equals,The length of the statement  "	return EqualityComparer<T1>.Default.Equals (obj.item1' this.item1) && EqualityComparer<T2>.Default.Equals (obj.item2' this.item2) && EqualityComparer<T3>.Default.Equals (obj.item3' this.item3) && EqualityComparer<T4>.Default.Equals (obj.item4' this.item4); " is 256.
Long Statement,Sigil.Impl,StackTransition,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\StackTransition.cs,ToString,The length of the statement  "	return "(" + string.Join ("' "' ((LinqArray<TypeOnStack>)PoppedFromStack).Select (p => p.ToString ()).ToArray ()) + ") => (" + string.Join ("' "' ((LinqArray<TypeOnStack>)PushedToStack).Select (p => p.ToString ()).ToArray ()) + ")"; " is 232.
Long Statement,Sigil.Impl,VerifiableTracker,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerifiableTracker.cs,Concat,The length of the statement  "	var branchTo = BranchesAtTransitions.ContainsKey (other.BeganAt) ? BranchesAtTransitions [other.BeganAt] : Transitions.Count; " is 125.
Long Statement,Sigil.Impl,VerifiableTracker,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerifiableTracker.cs,Concat,The length of the statement  "		CachedVerifyStack = canReuseCache ? new LinqStack<LinqList<TypeOnStack>> (CachedVerifyStack.Reverse ().AsEnumerable ()) : null' " is 127.
Long Statement,Sigil.Impl,VerifiableTracker,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerifiableTracker.cs,GetLegalTransitions,The length of the statement  "			var shouldBePointer = LinqAlternative.SelectMany (onStack' p => p.Where (x => x.IsPointer || x == TypeOnStack.Get<WildcardType> ()).AsEnumerable ()).Distinct ().ToList (); " is 171.
Long Statement,Sigil.Impl,VerifiableTracker,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerifiableTracker.cs,GetLegalTransitions,The length of the statement  "			var shouldBeByRef = LinqAlternative.SelectMany (onStack' p => p.Where (x => x.IsReference || x == TypeOnStack.Get<WildcardType> ()).AsEnumerable ()).Distinct ().ToList (); " is 171.
Long Statement,Sigil.Impl,VerifiableTracker,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerifiableTracker.cs,CollapseAndVerify,The length of the statement  "			UpdateStack (runningStack' new InstructionAndTransitions (wrapped.Instruction' wrapped.InstructionIndex' new LinqList<StackTransition> (new[] { " is 143.
Long Statement,Sigil.Impl,VerifiableTracker,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerifiableTracker.cs,CollapseAndVerify,The length of the statement  "			UpdateStack (runningStack' new InstructionAndTransitions (wrapped.Instruction' wrapped.InstructionIndex' legal)' IsBaseless); " is 125.
Long Statement,Sigil.Impl,VerifiableTracker,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\VerifiableTracker.cs,ToString,The length of the statement  "		ret.AppendLine ("starts with: " + string.Join ("' "' StartingStack.Select (s => "[" + string.Join ("' or"' s.Select (x => x.ToString ()).ToArray ()) + "]").ToArray ())); " is 169.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,Call,The length of the statement  "		var dynMethod = new System.Reflection.Emit.DynamicMethod (emit.Name' emit.ReturnType' emit.ParameterTypes' emit.Module' skipVisibility: true); " is 142.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5> (callConventions); " is 133.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6> (callConventions); " is 149.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7> (callConventions); " is 165.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8> (callConventions); " is 181.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9> (callConventions); " is 197.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10> (callConventions); " is 214.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11> (callConventions); " is 231.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11' ParameterType12> (callConventions); " is 248.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11' ParameterType12' ParameterType13> (callConventions); " is 265.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11' ParameterType12' ParameterType13' ParameterType14> (callConventions); " is 282.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11' ParameterType12' ParameterType13' ParameterType14' ParameterType15> (callConventions); " is 299.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CallIndirect,The length of the statement  "	InnerEmit.CallIndirect<ReturnType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11' ParameterType12' ParameterType13' ParameterType14' ParameterType15' ParameterType16> (callConventions); " is 316.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewDynamicMethod,The length of the statement  "	var innerEmit = Emit<NonGenericPlaceholderDelegate>.MakeNonGenericEmit (CallingConventions.Standard' returnType' parameterTypes' Emit<NonGenericPlaceholderDelegate>.AllowsUnverifiableCode (module)' doVerify' strictBranchVerification); " is 234.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,ValidateDelegateType,The length of the statement  "		throw new ArgumentException ("Expected delegateType to take " + ParameterTypes.Length + " parameters' found " + parameterTypes.Length); " is 135.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,ValidateDelegateType,The length of the statement  "			throw new ArgumentException ("Expected delegateType's parameter at index " + i + " to be a " + expectedType + "' found " + actualType); " is 135.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CreateDelegate,The length of the statement  "		throw new InvalidOperationException ("Emit was not created to build a DynamicMethod' thus CreateDelegate cannot be called"); " is 124.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,BuildMethod,The length of the statement  "	var innerEmit = Emit<NonGenericPlaceholderDelegate>.MakeNonGenericEmit (callingConvention' returnType' parameterTypes' allowUnverifiableCode' doVerify' strictBranchVerification); " is 178.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,BuildInstanceMethod,The length of the statement  "	return BuildMethod (returnType' parameterTypes' type' name' attributes' CallingConventions.HasThis' allowUnverifiableCode' doVerify' strictBranchVerification); " is 159.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,BuildStaticMethod,The length of the statement  "	return BuildMethod (returnType' parameterTypes' type' name' attributes | MethodAttributes.Static' CallingConventions.Standard' allowUnverifiableCode' doVerify' strictBranchVerification); " is 186.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,BuildConstructor,The length of the statement  "	var innerEmit = Emit<NonGenericPlaceholderDelegate>.MakeNonGenericEmit (callingConvention' typeof(void)' parameterTypes' allowUnverifiableCode' doVerify' strictBranchVerification); " is 180.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,BuildTypeInitializer,The length of the statement  "	var innerEmit = Emit<NonGenericPlaceholderDelegate>.MakeNonGenericEmit (CallingConventions.Standard' typeof(void)' TypeHelpers.EmptyTypes' allowUnverifiableCode' doVerify' strictBranchVerification); " is 198.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CreateConstructor,The length of the statement  "		throw new InvalidOperationException ("Emit was not created to build a constructor' thus CreateConstructor cannot be called"); " is 125.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,CreateTypeInitializer,The length of the statement  "		throw new InvalidOperationException ("Emit was not created to build a type initializer' thus CreateTypeInitializer cannot be called"); " is 134.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6> (); " is 134.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7> (); " is 150.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8> (); " is 166.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9> (); " is 182.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10> (); " is 199.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11> (); " is 216.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11' ParameterType12> (); " is 233.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11' ParameterType12' ParameterType13> (); " is 250.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11' ParameterType12' ParameterType13' ParameterType14> (); " is 267.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11' ParameterType12' ParameterType13' ParameterType14' ParameterType15> (); " is 284.
Long Statement,Sigil.NonGeneric,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\NonGeneric\Emit.ArgumentList.cs,NewObject,The length of the statement  "	InnerEmit.NewObject<ReferenceType' ParameterType1' ParameterType2' ParameterType3' ParameterType4' ParameterType5' ParameterType6' ParameterType7' ParameterType8' ParameterType9' ParameterType10' ParameterType11' ParameterType12' ParameterType13' ParameterType14' ParameterType15' ParameterType16> (); " is 301.
Complex Conditional,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The conditional expression  "op == OpCodes.Prefix1 || op == OpCodes.Prefix2 || op == OpCodes.Prefix3 || op == OpCodes.Prefix4 || op == OpCodes.Prefix5 || op == OpCodes.Prefix6 || op == OpCodes.Prefix7 || op == OpCodes.Prefixref"  is complex.
Complex Conditional,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CopyBlock,The conditional expression  "unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)"  is complex.
Complex Conditional,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,InitializeBlock,The conditional expression  "unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)"  is complex.
Complex Conditional,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadField,The conditional expression  "unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)"  is complex.
Complex Conditional,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadIndirect,The conditional expression  "unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)"  is complex.
Complex Conditional,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadObject,The conditional expression  "unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)"  is complex.
Complex Conditional,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreField,The conditional expression  "unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)"  is complex.
Complex Conditional,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreIndirect,The conditional expression  "unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)"  is complex.
Complex Conditional,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreObject,The conditional expression  "unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)"  is complex.
Complex Conditional,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,ValidateTryCatchFinallyBranches,The conditional expression  "fromTryBlock == null && fromCatchBlock == null && fromFinallyBlock == null && toTryBlock == null && toCatchBlock == null && toFinallyBlock == null"  is complex.
Complex Conditional,Sigil.Impl,ExtensionMethods,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\ExtensionMethods.cs,IsAssignableFrom,The conditional expression  "(type1.IsPointer || type1.IsReference) && !(type2.IsPointer || type2.IsReference)"  is complex.
Complex Conditional,Sigil.Impl,ExtensionMethods,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\ExtensionMethods.cs,IsAssignableFrom,The conditional expression  "(type2.IsPointer || type2.IsReference) && !(type1.IsPointer || type1.IsReference)"  is complex.
Complex Conditional,Sigil.Impl,RollingVerifier,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\RollingVerifier.cs,GetCurrentStack,The conditional expression  "ret == null || (innerRet.Item1 && !ret.Item1) || innerRet.Item2.Count > ret.Item2.Count"  is complex.
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,Disassembler,The following statement contains a magic number: foreach (var field in typeof(OpCodes).GetFields (BindingFlags.Public | BindingFlags.Static)) {  	var op = (OpCode)field.GetValue (null);  	if (op.Size == 1) {  		oneByte.Add (op);  		continue;  	}  	if (op.Size == 2) {  		twoByte.Add (op);  		continue;  	}  	throw new Exception ("Unexpected op size for " + op);  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,Disassembler,The following statement contains a magic number: if (op.Size == 2) {  	twoByte.Add (op);  	continue;  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: foreach (var group in grouped.OrderBy (o => o.Key).AsEnumerable ()) {  	var inOrder = LinqAlternative.OrderBy<Operation<DelegateType>' int> (LinqAlternative.Select (group' _ => _.Item2).AsEnumerable ()' op => {  		if (op.IsCatchBlockEnd)  			return -1000000;  		if (op.IsFinallyBlockEnd)  			return -10000;  		if (op.IsExceptionBlockEnd)  			return -1000;  		if (op.IsExceptionBlockStart)  			return -100;  		if (op.IsCatchBlockStart)  			return -10;  		if (op.IsFinallyBlockStart)  			return -1;  		if (op.IsMarkLabel)  			return 0;  		return 1;  	}).AsEnumerable ();  	foreach (var i in inOrder) {  		ret.Add (SigilTuple.Create (group.Key' i));  	}  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: foreach (var group in grouped.OrderBy (o => o.Key).AsEnumerable ()) {  	var inOrder = LinqAlternative.OrderBy<Operation<DelegateType>' int> (LinqAlternative.Select (group' _ => _.Item2).AsEnumerable ()' op => {  		if (op.IsCatchBlockEnd)  			return -1000000;  		if (op.IsFinallyBlockEnd)  			return -10000;  		if (op.IsExceptionBlockEnd)  			return -1000;  		if (op.IsExceptionBlockStart)  			return -100;  		if (op.IsCatchBlockStart)  			return -10;  		if (op.IsFinallyBlockStart)  			return -1;  		if (op.IsMarkLabel)  			return 0;  		return 1;  	}).AsEnumerable ();  	foreach (var i in inOrder) {  		ret.Add (SigilTuple.Create (group.Key' i));  	}  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: foreach (var group in grouped.OrderBy (o => o.Key).AsEnumerable ()) {  	var inOrder = LinqAlternative.OrderBy<Operation<DelegateType>' int> (LinqAlternative.Select (group' _ => _.Item2).AsEnumerable ()' op => {  		if (op.IsCatchBlockEnd)  			return -1000000;  		if (op.IsFinallyBlockEnd)  			return -10000;  		if (op.IsExceptionBlockEnd)  			return -1000;  		if (op.IsExceptionBlockStart)  			return -100;  		if (op.IsCatchBlockStart)  			return -10;  		if (op.IsFinallyBlockStart)  			return -1;  		if (op.IsMarkLabel)  			return 0;  		return 1;  	}).AsEnumerable ();  	foreach (var i in inOrder) {  		ret.Add (SigilTuple.Create (group.Key' i));  	}  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: foreach (var group in grouped.OrderBy (o => o.Key).AsEnumerable ()) {  	var inOrder = LinqAlternative.OrderBy<Operation<DelegateType>' int> (LinqAlternative.Select (group' _ => _.Item2).AsEnumerable ()' op => {  		if (op.IsCatchBlockEnd)  			return -1000000;  		if (op.IsFinallyBlockEnd)  			return -10000;  		if (op.IsExceptionBlockEnd)  			return -1000;  		if (op.IsExceptionBlockStart)  			return -100;  		if (op.IsCatchBlockStart)  			return -10;  		if (op.IsFinallyBlockStart)  			return -1;  		if (op.IsMarkLabel)  			return 0;  		return 1;  	}).AsEnumerable ();  	foreach (var i in inOrder) {  		ret.Add (SigilTuple.Create (group.Key' i));  	}  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: foreach (var group in grouped.OrderBy (o => o.Key).AsEnumerable ()) {  	var inOrder = LinqAlternative.OrderBy<Operation<DelegateType>' int> (LinqAlternative.Select (group' _ => _.Item2).AsEnumerable ()' op => {  		if (op.IsCatchBlockEnd)  			return -1000000;  		if (op.IsFinallyBlockEnd)  			return -10000;  		if (op.IsExceptionBlockEnd)  			return -1000;  		if (op.IsExceptionBlockStart)  			return -100;  		if (op.IsCatchBlockStart)  			return -10;  		if (op.IsFinallyBlockStart)  			return -1;  		if (op.IsMarkLabel)  			return 0;  		return 1;  	}).AsEnumerable ();  	foreach (var i in inOrder) {  		ret.Add (SigilTuple.Create (group.Key' i));  	}  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: if (op.IsCatchBlockEnd)  	return -1000000;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: return -1000000;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: if (op.IsFinallyBlockEnd)  	return -10000;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: return -10000;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: if (op.IsExceptionBlockEnd)  	return -1000;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: return -1000;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: if (op.IsExceptionBlockStart)  	return -100;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: return -100;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: if (op.IsCatchBlockStart)  	return -10;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,OrderOperations,The following statement contains a magic number: return -10;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOp,The following statement contains a magic number: if (first == ContinueOpcode) {  	var next = cil [ix + 1];  	opcode = TwoByteOps [next];  	advance += 2;  } else {  	opcode = OneByteOps [first];  	advance++;  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOp,The following statement contains a magic number: advance += 2;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldarg_2) {  	ushort ix = 2;  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			ix  		}'  		Replay = emit => emit.LoadArgument (ix)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldarg_3) {  	ushort ix = 3;  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			ix  		}'  		Replay = emit => emit.LoadArgument (ix)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldc_I4_2) {  	int c = 2;  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			c  		}'  		Replay = emit => emit.LoadConstant (c)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldc_I4_3) {  	int c = 3;  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			c  		}'  		Replay = emit => emit.LoadConstant (c)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldc_I4_4) {  	int c = 4;  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			c  		}'  		Replay = emit => emit.LoadConstant (c)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldc_I4_5) {  	int c = 5;  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			c  		}'  		Replay = emit => emit.LoadConstant (c)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldc_I4_6) {  	int c = 6;  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			c  		}'  		Replay = emit => emit.LoadConstant (c)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldc_I4_7) {  	int c = 7;  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			c  		}'  		Replay = emit => emit.LoadConstant (c)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldc_I4_8) {  	int c = 8;  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			c  		}'  		Replay = emit => emit.LoadConstant (c)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldloc_2) {  	ushort ix = 2;  	var loc = locals [ix];  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			loc  		}'  		Replay = emit => emit.LoadLocal (loc)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Ldloc_3) {  	ushort ix = 3;  	var loc = locals [ix];  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			loc  		}'  		Replay = emit => emit.LoadLocal (loc)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Stloc_2) {  	ushort ix = 2;  	var loc = locals [ix];  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			loc  		}'  		Replay = emit => emit.StoreLocal (loc)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,MakeReplayableOperation,The following statement contains a magic number: if (op == OpCodes.Stloc_3) {  	ushort ix = 3;  	var loc = locals [ix];  	return new Operation<DelegateType> {  		OpCode = op'  		Parameters = new object[] {  			loc  		}'  		Replay = emit => emit.StoreLocal (loc)  	};  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadLong,The following statement contains a magic number: return (((long)b) << 32) | a;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadInt,The following statement contains a magic number: return cil [at] | (cil [at + 1] << 8) | (cil [at + 2] << 16) | (cil [at + 3] << 24);  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadInt,The following statement contains a magic number: return cil [at] | (cil [at + 1] << 8) | (cil [at + 2] << 16) | (cil [at + 3] << 24);  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadInt,The following statement contains a magic number: return cil [at] | (cil [at + 1] << 8) | (cil [at + 2] << 16) | (cil [at + 3] << 24);  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadInt,The following statement contains a magic number: return cil [at] | (cil [at + 1] << 8) | (cil [at + 2] << 16) | (cil [at + 3] << 24);  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadInt,The following statement contains a magic number: return cil [at] | (cil [at + 1] << 8) | (cil [at + 2] << 16) | (cil [at + 3] << 24);  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadFloat,The following statement contains a magic number: arr [2] = cil [at + 2];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadFloat,The following statement contains a magic number: arr [2] = cil [at + 2];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadFloat,The following statement contains a magic number: arr [3] = cil [at + 3];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadFloat,The following statement contains a magic number: arr [3] = cil [at + 3];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [2] = cil [at + 2];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [2] = cil [at + 2];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [3] = cil [at + 3];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [3] = cil [at + 3];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [4] = cil [at + 4];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [4] = cil [at + 4];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [5] = cil [at + 5];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [5] = cil [at + 5];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [6] = cil [at + 6];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [6] = cil [at + 6];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [7] = cil [at + 7];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadDouble,The following statement contains a magic number: arr [7] = cil [at + 7];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadSingle,The following statement contains a magic number: arr [2] = cil [at + 2];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadSingle,The following statement contains a magic number: arr [2] = cil [at + 2];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadSingle,The following statement contains a magic number: arr [3] = cil [at + 3];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadSingle,The following statement contains a magic number: arr [3] = cil [at + 3];  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	advance += 4;  	var offset = ReadInt (cil' operandStart);  	var jumpTarget = instrStart + advance + offset;  	return new object[] {  		jumpTarget  	};  case OperandType.InlineSwitch:  	advance += 4;  	var len = ReadInt (cil' operandStart);  	var offset1 = instrStart + len * 4;  	var ret = new object[len];  	for (var i = 0; i < len; i++) {  		var step = ReadInt (cil' operandStart + advance);  		advance += 4;  		ret [i] = offset1 + step;  	}  	return ret;  case OperandType.ShortInlineBrTarget:  	advance += 1;  	var offset2 = (sbyte)cil [operandStart];  	var jumpTarget2 = instrStart + advance + offset2;  	return new object[] {  		jumpTarget2  	};  case OperandType.InlineField:  case OperandType.InlineTok:  case OperandType.InlineType:  case OperandType.InlineMethod:  	advance += 4;  	var mem = mod.ResolveMember (ReadInt (cil' operandStart));  	return new object[] {  		mem  	};  case OperandType.InlineI:  	advance += 4;  	return new object[] {  		ReadInt (cil' operandStart)  	};  case OperandType.InlineI8:  	advance += 8;  	return new object[] {  		ReadLong (cil' operandStart)  	};  case OperandType.InlineNone:  	return new object[0];  case OperandType.InlineR:  	advance += 8;  	return new object[] {  		ReadDouble (cil' operandStart)  	};  case OperandType.InlineSig:  	advance += 4;  	var sig = mod.ResolveSignature (ReadInt (cil' operandStart));  	return new object[] {  		sig  	};  case OperandType.InlineString:  	advance += 4;  	var str = mod.ResolveString (ReadInt (cil' operandStart));  	return new object[] {  		str  	};  case OperandType.InlineVar:  	advance += 2;  	return new object[] {  		ReadShort (cil' operandStart)  	};  case OperandType.ShortInlineI:  	advance += 1;  	if (op == OpCodes.Ldc_I4_S) {  		return new object[] {  			(sbyte)cil [operandStart]  		};  	} else {  		return new object[] {  			cil [operandStart]  		};  	}  case OperandType.ShortInlineR:  	advance += 4;  	if (op == OpCodes.Ldc_R4) {  		return new object[] {  			ReadSingle (cil' operandStart)  		};  	} else {  		return new object[] {  			ReadShort (cil' operandStart)  		};  	}  case OperandType.ShortInlineVar:  	advance += 1;  	return new object[] {  		cil [operandStart]  	};  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: for (var i = 0; i < len; i++) {  	var step = ReadInt (cil' operandStart + advance);  	advance += 4;  	ret [i] = offset1 + step;  }  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 8;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 8;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 2;  
Magic Number,Sigil,Disassembler,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Disassembler.cs,ReadOperands,The following statement contains a magic number: advance += 4;  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CopyBlock,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4"' "unaligned");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CopyBlock,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4"' "unaligned");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,Instructions,The following statement contains a magic number: foreach (var line in ((LinqArray<string>)IL.Instructions (AllLocals)).Skip (2).AsEnumerable ()) {  	ret.AppendLine (line);  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,AllowsUnverifiableCode,The following statement contains a magic number: il.Emit (OpCodes.Ldc_I4' 1024);  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,InitializeBlock,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,InitializeBlock,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadArgument,The following statement contains a magic number: switch (index) {  case 0:  	UpdateState (OpCodes.Ldarg_0' transitions);  	return this;  case 1:  	UpdateState (OpCodes.Ldarg_1' transitions);  	return this;  case 2:  	UpdateState (OpCodes.Ldarg_2' transitions);  	return this;  case 3:  	UpdateState (OpCodes.Ldarg_3' transitions);  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadArgument,The following statement contains a magic number: switch (index) {  case 0:  	UpdateState (OpCodes.Ldarg_0' transitions);  	return this;  case 1:  	UpdateState (OpCodes.Ldarg_1' transitions);  	return this;  case 2:  	UpdateState (OpCodes.Ldarg_2' transitions);  	return this;  case 3:  	UpdateState (OpCodes.Ldarg_3' transitions);  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case -1:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case -1:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case -1:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case -1:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case -1:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case -1:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case -1:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case uint.MaxValue:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case uint.MaxValue:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case uint.MaxValue:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case uint.MaxValue:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case uint.MaxValue:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case uint.MaxValue:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following statement contains a magic number: switch (i) {  case uint.MaxValue:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadField,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadField,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadIndirect,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadIndirect,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadLocal,The following statement contains a magic number: switch (local.Index) {  case 0:  	UpdateState (OpCodes.Ldloc_0' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  case 1:  	UpdateState (OpCodes.Ldloc_1' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  case 2:  	UpdateState (OpCodes.Ldloc_2' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  case 3:  	UpdateState (OpCodes.Ldloc_3' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadLocal,The following statement contains a magic number: switch (local.Index) {  case 0:  	UpdateState (OpCodes.Ldloc_0' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  case 1:  	UpdateState (OpCodes.Ldloc_1' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  case 2:  	UpdateState (OpCodes.Ldloc_2' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  case 3:  	UpdateState (OpCodes.Ldloc_3' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadObject,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadObject,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreField,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreField,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreIndirect,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreIndirect,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreLocal,The following statement contains a magic number: switch (local.Index) {  case 0:  	UpdateState (OpCodes.Stloc_0' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  case 1:  	UpdateState (OpCodes.Stloc_1' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  case 2:  	UpdateState (OpCodes.Stloc_2' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  case 3:  	UpdateState (OpCodes.Stloc_3' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreLocal,The following statement contains a magic number: switch (local.Index) {  case 0:  	UpdateState (OpCodes.Stloc_0' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  case 1:  	UpdateState (OpCodes.Stloc_1' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  case 2:  	UpdateState (OpCodes.Stloc_2' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  case 3:  	UpdateState (OpCodes.Stloc_3' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreObject,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreObject,The following statement contains a magic number: if (unaligned.HasValue && (unaligned != 1 && unaligned != 2 && unaligned != 4)) {  	throw new ArgumentException ("unaligned must be null' 1' 2' or 4");  }  
Magic Number,Sigil,SigilVerificationException,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\SigilVerificationException.cs,GetDebugInfo,The following statement contains a magic number: for (var i = 2; i < Instructions.Length; i++) {  	var line = Instructions [i];  	if (i == instrIx)  		line = line + "  // relevant instruction";  	if (!string.IsNullOrEmpty (line)) {  		ret.AppendLine (line);  	}  }  
Magic Number,Sigil.Impl,BufferedILGenerator,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\BufferedILGenerator.cs,UnBuffer,The following statement contains a magic number: for (var i = 2; i < Buffer.Count; i++) {  	var x = Buffer [i];  	x (il' false' log);  }  
Magic Number,Sigil.Impl,BufferedILGenerator,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\BufferedILGenerator.cs,Instructions,The following statement contains a magic number: for (var i = 0; i < Buffer.Count; i++) {  	var x = Buffer [i];  	x (il' true' instrs);  	var line = instrs.ToString ().TrimEnd ();  	if (line.StartsWith (OpCodes.Ldloc_0.ToString ()) || line.StartsWith (OpCodes.Stloc_0.ToString ())) {  		line += " // " + GetInScopeAt (locals' i) [0];  	}  	if (line.StartsWith (OpCodes.Ldloc_1.ToString ()) || line.StartsWith (OpCodes.Stloc_1.ToString ())) {  		line += " // " + GetInScopeAt (locals' i) [1];  	}  	if (line.StartsWith (OpCodes.Ldloc_2.ToString ()) || line.StartsWith (OpCodes.Stloc_2.ToString ())) {  		line += " // " + GetInScopeAt (locals' i) [2];  	}  	if (line.StartsWith (OpCodes.Ldloc_3.ToString ()) || line.StartsWith (OpCodes.Stloc_3.ToString ())) {  		line += " // " + GetInScopeAt (locals' i) [3];  	}  	if (line.StartsWith (OpCodes.Ldloc_S.ToString ()) || line.StartsWith (OpCodes.Stloc_S.ToString ())) {  		line += " // " + ExtractLocal (line' locals' i);  	}  	ret.Add (line);  	instrs.Length = 0;  }  
Magic Number,Sigil.Impl,BufferedILGenerator,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\BufferedILGenerator.cs,Instructions,The following statement contains a magic number: for (var i = 0; i < Buffer.Count; i++) {  	var x = Buffer [i];  	x (il' true' instrs);  	var line = instrs.ToString ().TrimEnd ();  	if (line.StartsWith (OpCodes.Ldloc_0.ToString ()) || line.StartsWith (OpCodes.Stloc_0.ToString ())) {  		line += " // " + GetInScopeAt (locals' i) [0];  	}  	if (line.StartsWith (OpCodes.Ldloc_1.ToString ()) || line.StartsWith (OpCodes.Stloc_1.ToString ())) {  		line += " // " + GetInScopeAt (locals' i) [1];  	}  	if (line.StartsWith (OpCodes.Ldloc_2.ToString ()) || line.StartsWith (OpCodes.Stloc_2.ToString ())) {  		line += " // " + GetInScopeAt (locals' i) [2];  	}  	if (line.StartsWith (OpCodes.Ldloc_3.ToString ()) || line.StartsWith (OpCodes.Stloc_3.ToString ())) {  		line += " // " + GetInScopeAt (locals' i) [3];  	}  	if (line.StartsWith (OpCodes.Ldloc_S.ToString ()) || line.StartsWith (OpCodes.Stloc_S.ToString ())) {  		line += " // " + ExtractLocal (line' locals' i);  	}  	ret.Add (line);  	instrs.Length = 0;  }  
Magic Number,Sigil.Impl,BufferedILGenerator,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\BufferedILGenerator.cs,Instructions,The following statement contains a magic number: if (line.StartsWith (OpCodes.Ldloc_2.ToString ()) || line.StartsWith (OpCodes.Stloc_2.ToString ())) {  	line += " // " + GetInScopeAt (locals' i) [2];  }  
Magic Number,Sigil.Impl,BufferedILGenerator,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\BufferedILGenerator.cs,Instructions,The following statement contains a magic number: line += " // " + GetInScopeAt (locals' i) [2];  
Magic Number,Sigil.Impl,BufferedILGenerator,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\BufferedILGenerator.cs,Instructions,The following statement contains a magic number: if (line.StartsWith (OpCodes.Ldloc_3.ToString ()) || line.StartsWith (OpCodes.Stloc_3.ToString ())) {  	line += " // " + GetInScopeAt (locals' i) [3];  }  
Magic Number,Sigil.Impl,BufferedILGenerator,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\BufferedILGenerator.cs,Instructions,The following statement contains a magic number: line += " // " + GetInScopeAt (locals' i) [3];  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: switch (op.OperandType) {  case OperandType.InlineBrTarget:  	operandSize = 4;  	break;  case OperandType.InlineField:  	operandSize = 4;  	break;  case OperandType.InlineI:  	operandSize = 4;  	break;  case OperandType.InlineI8:  	operandSize = 8;  	break;  case OperandType.InlineMethod:  	operandSize = 4;  	break;  case OperandType.InlineNone:  	operandSize = 0;  	break;  case OperandType.InlineR:  	operandSize = 8;  	break;  case OperandType.InlineSig:  	operandSize = 4;  	break;  case OperandType.InlineString:  	operandSize = 4;  	break;  case OperandType.InlineSwitch:  	operandSize = 4 + labels.Length * 4;  	break;  case OperandType.InlineTok:  	operandSize = 4;  	break;  case OperandType.InlineType:  	operandSize = 4;  	break;  case OperandType.InlineVar:  	operandSize = 2;  	break;  case OperandType.ShortInlineBrTarget:  	operandSize = 1;  	break;  case OperandType.ShortInlineI:  	operandSize = 1;  	break;  case OperandType.ShortInlineR:  	operandSize = 4;  	break;  case OperandType.ShortInlineVar:  	operandSize = 1;  	break;  default:  	throw new Exception ("Unexpected operand type [" + op.OperandType + "]");  }  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 8;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 8;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4 + labels.Length * 4;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4 + labels.Length * 4;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 2;  
Magic Number,Sigil.Impl,InstructionSize,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\InstructionSize.cs,Get,The following statement contains a magic number: operandSize = 4;  
Magic Number,Sigil.Impl,LinqAlternative,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\LinqAlternative.cs,_QuickSort,The following statement contains a magic number: while (stack.Count > 0) {  	var leftRight = stack.Pop ();  	var left = leftRight.Item1;  	var right = leftRight.Item2;  	if (right > left) {  		int pivot = left + (right - left) / 2;  		int pivotPosition = _Partition (ixs' keys' left' right' pivot' c);  		stack.Push (SigilTuple.Create (pivotPosition + 1' right));  		stack.Push (SigilTuple.Create (left' pivotPosition - 1));  	} else {  		while (nextYield <= right) {  			yield return data [ixs [nextYield]];  			nextYield++;  		}  	}  }  
Magic Number,Sigil.Impl,LinqAlternative,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\LinqAlternative.cs,_QuickSort,The following statement contains a magic number: if (right > left) {  	int pivot = left + (right - left) / 2;  	int pivotPosition = _Partition (ixs' keys' left' right' pivot' c);  	stack.Push (SigilTuple.Create (pivotPosition + 1' right));  	stack.Push (SigilTuple.Create (left' pivotPosition - 1));  } else {  	while (nextYield <= right) {  		yield return data [ixs [nextYield]];  		nextYield++;  	}  }  
Magic Number,Sigil.Impl,RollingVerifier,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\RollingVerifier.cs,RemoveUnnecessaryVerifiers,The following statement contains a magic number: if (rooted.Count >= 2) {  	for (var i = 1; i < rooted.Count; i++) {  		var toRemove = rooted [i];  		var ix = CurrentlyInScope.IndexOf (toRemove);  		RemoveAt (ix);  	}  }  
Magic Number,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,GetHashCode,The following statement contains a magic number: hash = (hash * -17) + EqualityComparer<T1>.Default.GetHashCode (this.item1);  
Magic Number,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,GetHashCode,The following statement contains a magic number: hash = (hash * -17) + EqualityComparer<T2>.Default.GetHashCode (this.item2);  
Magic Number,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,GetHashCode,The following statement contains a magic number: hash = (hash * -17) + EqualityComparer<T1>.Default.GetHashCode (this.item1);  
Magic Number,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,GetHashCode,The following statement contains a magic number: hash = (hash * -17) + EqualityComparer<T2>.Default.GetHashCode (this.item2);  
Magic Number,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,GetHashCode,The following statement contains a magic number: hash = (hash * -17) + EqualityComparer<T3>.Default.GetHashCode (this.item3);  
Magic Number,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,GetHashCode,The following statement contains a magic number: hash = (hash * -17) + EqualityComparer<T1>.Default.GetHashCode (this.item1);  
Magic Number,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,GetHashCode,The following statement contains a magic number: hash = (hash * -17) + EqualityComparer<T2>.Default.GetHashCode (this.item2);  
Magic Number,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,GetHashCode,The following statement contains a magic number: hash = (hash * -17) + EqualityComparer<T3>.Default.GetHashCode (this.item3);  
Magic Number,Sigil.Impl,SigilTuple,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Impl\SigilTuple.cs,GetHashCode,The following statement contains a magic number: hash = (hash * -17) + EqualityComparer<T4>.Default.GetHashCode (this.item4);  
Duplicate Code,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,VerifyAndDoArithmetic,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 47)' (75' 116))
Duplicate Code,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,CheckConvertible,The method contains a code clone-set at the following line numbers (starting from the method definition): ((25' 48)' (30' 53))
Missing Default,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadArgument,The following switch statement is missing a default case: switch (index) {  case 0:  	UpdateState (OpCodes.Ldarg_0' transitions);  	return this;  case 1:  	UpdateState (OpCodes.Ldarg_1' transitions);  	return this;  case 2:  	UpdateState (OpCodes.Ldarg_2' transitions);  	return this;  case 3:  	UpdateState (OpCodes.Ldarg_3' transitions);  	return this;  }  
Missing Default,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following switch statement is missing a default case: switch (i) {  case -1:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Missing Default,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadConstant,The following switch statement is missing a default case: switch (i) {  case uint.MaxValue:  	UpdateState (OpCodes.Ldc_I4_M1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 0:  	UpdateState (OpCodes.Ldc_I4_0' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 1:  	UpdateState (OpCodes.Ldc_I4_1' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 2:  	UpdateState (OpCodes.Ldc_I4_2' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 3:  	UpdateState (OpCodes.Ldc_I4_3' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 4:  	UpdateState (OpCodes.Ldc_I4_4' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 5:  	UpdateState (OpCodes.Ldc_I4_5' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 6:  	UpdateState (OpCodes.Ldc_I4_6' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 7:  	UpdateState (OpCodes.Ldc_I4_7' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  case 8:  	UpdateState (OpCodes.Ldc_I4_8' Wrap (StackTransition.Push<int> ()' "LoadConstant"));  	return this;  }  
Missing Default,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,LoadLocal,The following switch statement is missing a default case: switch (local.Index) {  case 0:  	UpdateState (OpCodes.Ldloc_0' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  case 1:  	UpdateState (OpCodes.Ldloc_1' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  case 2:  	UpdateState (OpCodes.Ldloc_2' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  case 3:  	UpdateState (OpCodes.Ldloc_3' Wrap (StackTransition.Push (local.StackType)' "LoadLocal"));  	return this;  }  
Missing Default,Sigil,Emit,F:\newReposMay17\kevin-montrose_Sigil\Sigil NET30\..\Sigil\Emit.ArgumentList.cs,StoreLocal,The following switch statement is missing a default case: switch (local.Index) {  case 0:  	UpdateState (OpCodes.Stloc_0' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  case 1:  	UpdateState (OpCodes.Stloc_1' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  case 2:  	UpdateState (OpCodes.Stloc_2' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  case 3:  	UpdateState (OpCodes.Stloc_3' Wrap (StackTransition.Pop (local.StackType)' "StoreLocal"));  	return this;  }  
