Implementation smell,Namespace,Class,File,Method,Description
Long Method,JwtAuthForWebAPI,JwtAuthenticationMessageHandler,C:\repos\jamiekurtz_JwtAuthForWebAPI\src\JwtAuthForWebAPI\JwtAuthenticationMessageHandler.cs,SendAsync,The method has 123 lines of code.
Complex Method,JwtAuthForWebAPI,JwtAuthenticationMessageHandler,C:\repos\jamiekurtz_JwtAuthForWebAPI\src\JwtAuthForWebAPI\JwtAuthenticationMessageHandler.cs,SendAsync,Cyclomatic complexity of the method is 8
Magic Number,JwtAuthForWebAPI,JwtAuthenticationMessageHandler,C:\repos\jamiekurtz_JwtAuthForWebAPI\src\JwtAuthForWebAPI\JwtAuthenticationMessageHandler.cs,SendAsync,The following statement contains a magic number: try              {                  var tokenHandler = CreateTokenHandler();                  IPrincipal principal = tokenHandler.ValidateToken(token' parameters);                    if (PrincipalTransformer != null)                  {                      principal = PrincipalTransformer.Transform((ClaimsPrincipal) principal);                      CheckPrincipal(principal' PrincipalTransformer.GetType());                  }                    Thread.CurrentPrincipal = principal;                  _logger.DebugFormat("Thread principal set with identity '{0}'"' principal.Identity.Name);                    if (HttpContext.Current != null)                  {                      HttpContext.Current.User = principal;                  }              }              catch (SecurityTokenExpiredException e)              {                  _logger.ErrorFormat("Security token expired: {0}"' e);                    var response = new HttpResponseMessage((HttpStatusCode) 440)                  {                      Content = new StringContent("Security token expired exception")                  };                    var tsc = new TaskCompletionSource<HttpResponseMessage>();                  tsc.SetResult(response);                  return tsc.Task;              }              catch (SecurityTokenSignatureKeyNotFoundException e)              {                  _logger.ErrorFormat("Error during JWT validation: {0}"' e);                    var response = new HttpResponseMessage(HttpStatusCode.Unauthorized)                  {                      Content = new StringContent("Untrusted signing cert")                  };                    var tsc = new TaskCompletionSource<HttpResponseMessage>();                  tsc.SetResult(response);                  return tsc.Task;              }              catch (SecurityTokenInvalidAudienceException e)              {                  _logger.ErrorFormat("Error during JWT validation: {0}"' e);                    var response = new HttpResponseMessage(HttpStatusCode.Unauthorized)                  {                      Content = new StringContent("Invalid token audience")                  };                    var tsc = new TaskCompletionSource<HttpResponseMessage>();                  tsc.SetResult(response);                  return tsc.Task;              }              catch (SecurityTokenValidationException e)              {                  _logger.ErrorFormat("Error during JWT validation: {0}"' e);                    var response = new HttpResponseMessage(HttpStatusCode.Unauthorized)                  {                      Content = new StringContent("Invalid token")                  };                    var tsc = new TaskCompletionSource<HttpResponseMessage>();                  tsc.SetResult(response);                  return tsc.Task;              }              catch (SignatureVerificationFailedException e)              {                  _logger.ErrorFormat("Error during JWT validation: {0}"' e);                    var response = new HttpResponseMessage(HttpStatusCode.Unauthorized)                  {                      Content = new StringContent("Invalid token signature")                  };                    var tsc = new TaskCompletionSource<HttpResponseMessage>();                  tsc.SetResult(response);                  return tsc.Task;              }              catch (Exception e)              {                  _logger.ErrorFormat("Error during JWT validation: {0}"' e);                  throw;              }
