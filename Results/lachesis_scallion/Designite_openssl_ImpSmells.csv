Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The method has 158 lines of code.
Complex Method,OpenSSL.Crypto,CryptoKey,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\CryptoKey.cs,Print,Cyclomatic complexity of the method is 11
Complex Method,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,Cyclomatic complexity of the method is 90
Complex Method,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,BeginRead,Cyclomatic complexity of the method is 8
Complex Method,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,InternalReadCallback,Cyclomatic complexity of the method is 13
Complex Method,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,BeginWrite,Cyclomatic complexity of the method is 8
Complex Method,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,AsyncHandshakeCallback,Cyclomatic complexity of the method is 8
Complex Method,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,GetCipherString,Cyclomatic complexity of the method is 9
Complex Method,OpenSSL.SSL,SslStreamServer,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamServer.cs,InitializeServerContext,Cyclomatic complexity of the method is 9
Complex Method,OpenSSL.X509,FileSerialNumber,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\X509CertificateAuthority.cs,Next,Cyclomatic complexity of the method is 8
Long Parameter List,OpenSSL.Core,MemoryTracker,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\MemoryTracker.cs,OnMemoryLeak,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,CRYPTO_add_lock,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,CRYPTO_dbg_malloc,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,CRYPTO_dbg_realloc,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,CRYPTO_set_mem_debug_functions,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,X509_add1_ext_i2d,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,X509_NAME_add_entry_by_NID,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,X509_NAME_add_entry_by_txt,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,DSA_generate_parameters_ex,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,DSA_sign,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,DSA_verify,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,RSA_public_encrypt,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,RSA_private_encrypt,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,RSA_public_decrypt,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,RSA_private_decrypt,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,RSA_sign,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,RSA_verify,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,BN_div,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,PKCS12_create,The method has 10 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,PKCS12_parse,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,PEM_write_bio_PKCS8PrivateKey,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,PEM_X509_INFO_write_bio,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,PEM_write_bio_DSAPrivateKey,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,PEM_write_bio_RSAPrivateKey,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,PEM_write_bio_PrivateKey,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,HMAC_Init_ex,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,HMAC,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EVP_CipherInit_ex,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EVP_CipherUpdate,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EVP_OpenInit,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EVP_SealInit,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EVP_DecryptUpdate,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EVP_EncryptUpdate,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EVP_BytesToKey,The method has 8 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EVP_Digest,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_GROUP_set_curve_GFp,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_GROUP_get_curve_GFp,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_GROUP_set_curve_GF2m,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_GROUP_get_curve_GF2m,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_set_Jprojective_coordinates_GFp,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_get_Jprojective_coordinates_GFp,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_set_affine_coordinates_GFp,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_get_affine_coordinates_GFp,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_set_compressed_coordinates_GFp,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_set_affine_coordinates_GF2m,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_get_affine_coordinates_GF2m,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_set_compressed_coordinates_GF2m,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_point2oct,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_oct2point,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_point2bn,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_add,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINTs_mul,The method has 7 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_POINT_mul,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,EC_KEY_insert_key_method_data,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,ECDSA_do_sign_ex,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,ECDSA_sign,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,ECDSA_sign_ex,The method has 8 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,ECDSA_verify,The method has 6 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,ECDSA_get_ex_new_index,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,ECDH_compute_key,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,ECDH_get_ex_new_index,The method has 5 parameters.
Long Parameter List,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,X509V3_set_ctx,The method has 6 parameters.
Long Parameter List,OpenSSL.Crypto,CipherContext,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\Cipher.cs,Crypt,The method has 5 parameters.
Long Parameter List,OpenSSL.Crypto,CipherContext,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\Cipher.cs,BytesToKey,The method has 5 parameters.
Long Parameter List,OpenSSL.Crypto,DSA,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\DSA.cs,DSA,The method has 5 parameters.
Long Parameter List,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,BeginRead,The method has 5 parameters.
Long Parameter List,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,AuthenticateAsClient,The method has 6 parameters.
Long Parameter List,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,BeginAuthenticateAsClient,The method has 8 parameters.
Long Parameter List,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,AuthenticateAsServer,The method has 6 parameters.
Long Parameter List,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,BeginAuthenticateAsServer,The method has 8 parameters.
Long Parameter List,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,BeginRead,The method has 5 parameters.
Long Parameter List,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,OpenSSL.SSL,SslStreamClient,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamClient.cs,SslStreamClient,The method has 10 parameters.
Long Parameter List,OpenSSL.SSL,SslStreamServer,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamServer.cs,SslStreamServer,The method has 9 parameters.
Long Parameter List,OpenSSL.SSL,SslStreamServer,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamServer.cs,InitializeServerContext,The method has 6 parameters.
Long Parameter List,OpenSSL.X509,PKCS12,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\PKCS12.cs,PKCS12,The method has 9 parameters.
Long Parameter List,OpenSSL.X509,PKCS12,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\PKCS12.cs,Create,The method has 9 parameters.
Long Parameter List,OpenSSL.X509,X509Certificate,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\X509Certificate.cs,X509Certificate,The method has 6 parameters.
Long Parameter List,OpenSSL.X509,X509CertificateAuthority,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\X509CertificateAuthority.cs,SelfSigned,The method has 5 parameters.
Long Parameter List,OpenSSL.X509,X509CertificateAuthority,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\X509CertificateAuthority.cs,SelfSigned,The method has 7 parameters.
Long Parameter List,OpenSSL.X509,X509CertificateAuthority,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\X509CertificateAuthority.cs,SelfSigned,The method has 7 parameters.
Long Parameter List,OpenSSL.X509,X509Extension,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\X509Extension.cs,X509Extension,The method has 5 parameters.
Long Identifier,OpenSSL.SSL,SslStreamClient,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamClient.cs,SslStreamClient,The length of the parameter checkCertificateRevocationStatus is 32.
Long Statement,OpenSSL.Core,Asn1DateTime,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Asn1DateTime.cs,AsnTimeToDateTime,The length of the statement  "	return DateTime.ParseExact (str' fmts' new DateTimeFormatInfo ()' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 133.
Long Statement,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,CRYPTO_malloc_debug_init,The length of the statement  "	CRYPTO_set_mem_debug_functions (ptr_CRYPTO_dbg_malloc' ptr_CRYPTO_dbg_realloc' ptr_CRYPTO_dbg_free' ptr_CRYPTO_dbg_set_options' ptr_CRYPTO_dbg_get_options); " is 156.
Long Statement,OpenSSL.Crypto,CryptoKey,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\CryptoKey.cs,FromPrivateKey,The length of the statement  "	IntPtr ptr = Native.ExpectNonNull (Native.PEM_read_bio_PrivateKey (bio.Handle' IntPtr.Zero' thunk.Callback' IntPtr.Zero)); " is 122.
Long Statement,OpenSSL.Crypto,CryptoKey,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\CryptoKey.cs,WritePrivateKey,The length of the statement  "	Native.ExpectSuccess (Native.PEM_write_bio_PKCS8PrivateKey (bp.Handle' this.ptr' cipher.Handle' IntPtr.Zero' 0' thunk.Callback' IntPtr.Zero)); " is 142.
Long Statement,OpenSSL.Crypto,DSA,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\DSA.cs,FromPublicKey,The length of the statement  "	return new DSA (Native.ExpectNonNull (Native.PEM_read_bio_DSA_PUBKEY (bio.Handle' IntPtr.Zero' null' IntPtr.Zero))' true); " is 122.
Long Statement,OpenSSL.Crypto,DSA,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\DSA.cs,FromPrivateKey,The length of the statement  "	return new DSA (Native.ExpectNonNull (Native.PEM_read_bio_DSAPrivateKey (bio.Handle' IntPtr.Zero' null' IntPtr.Zero))' true); " is 125.
Long Statement,OpenSSL.Crypto,DSA,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\DSA.cs,WritePrivateKey,The length of the statement  "	Native.ExpectSuccess (Native.PEM_write_bio_DSAPrivateKey (bio.Handle' this.ptr' enc == null ? IntPtr.Zero : enc.Handle' null' 0' thunk.Callback' IntPtr.Zero)); " is 159.
Long Statement,OpenSSL.Crypto,RSA,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\RSA.cs,WritePrivateKey,The length of the statement  "	Native.ExpectSuccess (Native.PEM_write_bio_RSAPrivateKey (bio.Handle' this.ptr' enc == null ? IntPtr.Zero : enc.Handle' null' 0' thunk.Callback' IntPtr.Zero)); " is 159.
Long Statement,OpenSSL.Crypto.EC,Point,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\EC\Point.cs,GetAffineCoordinatesGF2m,The length of the statement  "	Native.ExpectSuccess (Native.EC_POINT_get_affine_coordinates_GF2m (this.group.Handle' this.ptr' x.Handle' y.Handle' ctx.Handle)); " is 129.
Long Statement,OpenSSL.Crypto.EC,Point,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\EC\Point.cs,GetAffineCoordinatesGFp,The length of the statement  "	Native.ExpectSuccess (Native.EC_POINT_get_affine_coordinates_GFp (this.group.Handle' this.ptr' x.Handle' y.Handle' ctx.Handle)); " is 128.
Long Statement,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,AuthenticateAsClient,The length of the statement  "	EndAuthenticateAsClient (BeginAuthenticateAsClient (targetHost' certificates' caCertificates' enabledSslProtocols' sslStrength' checkCertificateRevocation' null' null)); " is 169.
Long Statement,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,BeginAuthenticateAsClient,The length of the statement  "	return BeginAuthenticateAsClient (targetHost' null' null' SslProtocols.Default' SslStrength.Medium' false' asyncCallback' asyncState); " is 134.
Long Statement,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,BeginAuthenticateAsClient,The length of the statement  "	SslStreamClient client_stream = new SslStreamClient (InnerStream' false' targetHost' clientCertificates' caCertificates' enabledSslProtocols' sslStrength' checkCertificateRevocation' remoteCertificateValidationCallback' localCertificateSelectionCallback); " is 255.
Long Statement,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,AuthenticateAsServer,The length of the statement  "	EndAuthenticateAsServer (BeginAuthenticateAsServer (serverCertificate' clientCertificateRequired' caCertificates' enabledSslProtocols' sslStrength' checkCertificateRevocation' null' null)); " is 189.
Long Statement,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,BeginAuthenticateAsServer,The length of the statement  "	return BeginAuthenticateAsServer (serverCertificate' false' null' SslProtocols.Default' SslStrength.Medium' false' asyncCallback' asyncState); " is 142.
Long Statement,OpenSSL.SSL,SslStream,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStream.cs,BeginAuthenticateAsServer,The length of the statement  "	SslStreamServer server_stream = new SslStreamServer (InnerStream' false' serverCertificate' clientCertificateRequired' caCerts' enabledSslProtocols' sslStrength' checkCertificateRevocation' remoteCertificateValidationCallback); " is 227.
Long Statement,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,BeginRead,The length of the statement  "	InternalAsyncResult internalAsyncResult = new InternalAsyncResult (asyncCallback' asyncState' buffer' offset' count' false' proceedAfterHandshake); " is 147.
Long Statement,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,InternalReadCallback,The length of the statement  "				innerStream.BeginRead (read_buffer' 0' read_buffer.Length' new AsyncCallback (InternalReadCallback)' internalAsyncResult); " is 122.
Long Statement,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,InternalReadCallback,The length of the statement  "				bytesReadIntoUserBuffer = decrypted_data_stream.Read (internalAsyncResult.Buffer' internalAsyncResult.Offset' internalAsyncResult.Count); " is 137.
Long Statement,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,BeginWrite,The length of the statement  "	InternalAsyncResult asyncResult = new InternalAsyncResult (asyncCallback' asyncState' buffer' offset' count' true' proceedAfterHandshake); " is 138.
Long Statement,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,BeginHandshake,The length of the statement  "	InternalAsyncResult handshakeAsyncResult = new InternalAsyncResult (new AsyncCallback (AsyncHandshakeComplete)' readwriteAsyncResult' null' 0' 0' readwriteAsyncResult.IsWriteOperation' readwriteAsyncResult.ContinueAfterHandshake); " is 230.
Long Statement,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,GetCipherString,The length of the statement  "	if ((sslProtocols == SslProtocols.Default) || (sslProtocols == SslProtocols.Tls) || (sslProtocols == SslProtocols.Ssl3)) { " is 122.
Long Statement,OpenSSL.SSL,SslStreamClient,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamClient.cs,InitializeClientContext,The length of the statement  "	if ((enabledSslProtocols & SslProtocols.Ssl3) != SslProtocols.Ssl3 && ((enabledSslProtocols & SslProtocols.Default) != SslProtocols.Default)) { " is 143.
Long Statement,OpenSSL.SSL,SslStreamClient,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamClient.cs,InitializeClientContext,The length of the statement  "	if ((enabledSslProtocols & SslProtocols.Tls) != SslProtocols.Tls && (enabledSslProtocols & SslProtocols.Default) != SslProtocols.Default) { " is 139.
Long Statement,OpenSSL.SSL,SslStreamClient,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamClient.cs,InitializeClientContext,The length of the statement  "		sslContext.SetVerify (VerifyMode.SSL_VERIFY_PEER | VerifyMode.SSL_VERIFY_FAIL_IF_NO_PEER_CERT' remoteCertificateSelectionCallback); " is 131.
Long Statement,OpenSSL.SSL,SslStreamClient,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamClient.cs,InternalClientCertificateSelectionCallback,The length of the statement  "		X509Certificate cert = localCertificateSelectionCallback (this' targetHost' clientCertificates' ssl.GetPeerCertificate ()' strIssuers); " is 135.
Long Statement,OpenSSL.SSL,SslStreamServer,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamServer.cs,ProcessHandshake,The length of the statement  "	if (lastError == SslError.SSL_ERROR_WANT_READ || lastError == SslError.SSL_ERROR_WANT_WRITE || lastError == SslError.SSL_ERROR_NONE) { " is 134.
Long Statement,OpenSSL.SSL,SslStreamServer,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamServer.cs,InitializeServerContext,The length of the statement  "	if ((enabledSslProtocols & SslProtocols.Ssl3) != SslProtocols.Ssl3 && ((enabledSslProtocols & SslProtocols.Default) != SslProtocols.Default)) { " is 143.
Long Statement,OpenSSL.SSL,SslStreamServer,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamServer.cs,InitializeServerContext,The length of the statement  "	if ((enabledSslProtocols & SslProtocols.Tls) != SslProtocols.Tls && (enabledSslProtocols & SslProtocols.Default) != SslProtocols.Default) { " is 139.
Long Statement,OpenSSL.SSL,SslStreamServer,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamServer.cs,InitializeServerContext,The length of the statement  "		sslContext.SetVerify (VerifyMode.SSL_VERIFY_PEER | VerifyMode.SSL_VERIFY_FAIL_IF_NO_PEER_CERT' remoteCertificateSelectionCallback); " is 131.
Long Statement,OpenSSL.X509,Configuration,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\Configuration.cs,ApplyExtensions,The length of the statement  "		Native.ExpectSuccess (Native.X509V3_EXT_add_nconf (this.ptr' ctx.Handle' Encoding.ASCII.GetBytes (section)' subject.Handle)); " is 125.
Long Statement,OpenSSL.X509,PKCS12,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\PKCS12.cs,Create,The length of the statement  "	return Native.ExpectNonNull (Native.PKCS12_create (password' name' key.Handle' cert.Handle' ca.Handle' (int)keyPbe' (int)certPbe' iterations' 1' (int)keyType)); " is 160.
Long Statement,OpenSSL.X509,X509CertificateAuthority,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\X509CertificateAuthority.cs,ProcessRequest,The length of the statement  "	X509Certificate cert = new X509Certificate (serial.Next ()' request.Subject' this.caCert.Subject' request.PublicKey' startTime' endTime); " is 137.
Long Statement,OpenSSL.X509,X509Name,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\X509Name.cs,Print,The length of the statement  "	const int flags = Native.ASN1_STRFLGS_RFC2253 | Native.ASN1_STRFLGS_ESC_QUOTE | Native.XN_FLAG_SEP_COMMA_PLUS | Native.XN_FLAG_FN_SN; " is 133.
Long Statement,OpenSSL.X509,X509StoreContext,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\X509StoreContext.cs,Init,The length of the statement  "	Native.ExpectSuccess (Native.X509_STORE_CTX_init (this.ptr' store.Handle' cert != null ? cert.Handle : IntPtr.Zero' uchain.Handle)); " is 132.
Virtual Method Call from Constructor,OpenSSL.Core,Base,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Base.cs,Base,The constructor "Base" calls a virtual method "OnNewHandle".
Magic Number,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,PtrToStringAnsi,The following statement contains a magic number: for (int i = 0; i < 1024; i++' len++) {  	byte octet = Marshal.ReadByte (ptr' i);  	if (octet == 0)  		break;  }  
Magic Number,OpenSSL.Core,Native,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Core\Native.cs,PtrToStringAnsi,The following statement contains a magic number: if (len == 1024)  	return "Invalid string";  
Magic Number,OpenSSL.Crypto,DSA,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\DSA.cs,DSA,The following statement contains a magic number: Native.ExpectSuccess (Native.DSA_generate_parameters_ex (this.ptr' 512' null' 0' out this.counter' out this.h' null));  
Magic Number,OpenSSL.Crypto,MessageDigestContext,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\MessageDigest.cs,Sign,The following statement contains a magic number: while (true) {  	ArraySegment<byte> bytes = bmd.ReadBytes (1024 * 4);  	if (bytes.Count == 0)  		break;  }  
Magic Number,OpenSSL.Crypto,MessageDigestContext,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\MessageDigest.cs,Sign,The following statement contains a magic number: while (true) {  	ArraySegment<byte> bytes = bmd.ReadBytes (1024 * 4);  	if (bytes.Count == 0)  		break;  }  
Magic Number,OpenSSL.Crypto,MessageDigestContext,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\MessageDigest.cs,Verify,The following statement contains a magic number: while (true) {  	ArraySegment<byte> bytes = bmd.ReadBytes (1024 * 4);  	if (bytes.Count == 0)  		break;  }  
Magic Number,OpenSSL.Crypto,MessageDigestContext,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\MessageDigest.cs,Verify,The following statement contains a magic number: while (true) {  	ArraySegment<byte> bytes = bmd.ReadBytes (1024 * 4);  	if (bytes.Count == 0)  		break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,ExportPrivateKeyLength,The following statement contains a magic number: if ((algo_strength & SSL_EXP40) > 0) {  	return 512;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,ExportPrivateKeyLength,The following statement contains a magic number: return 512;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,ExportPrivateKeyLength,The following statement contains a magic number: return 1024;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,ExportKeyLength,The following statement contains a magic number: if ((algo_strength & SSL_EXP40) > 0) {  	return 5;  } else {  	if ((algorithms & SSL_ENC_MASK) == SSL_DES) {  		return 8;  	}  	return 7;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,ExportKeyLength,The following statement contains a magic number: if ((algo_strength & SSL_EXP40) > 0) {  	return 5;  } else {  	if ((algorithms & SSL_ENC_MASK) == SSL_DES) {  		return 8;  	}  	return 7;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,ExportKeyLength,The following statement contains a magic number: if ((algo_strength & SSL_EXP40) > 0) {  	return 5;  } else {  	if ((algorithms & SSL_ENC_MASK) == SSL_DES) {  		return 8;  	}  	return 7;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,ExportKeyLength,The following statement contains a magic number: return 5;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,ExportKeyLength,The following statement contains a magic number: if ((algorithms & SSL_ENC_MASK) == SSL_DES) {  	return 8;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,ExportKeyLength,The following statement contains a magic number: return 8;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,ExportKeyLength,The following statement contains a magic number: return 7;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport && keyLength == 5) {  	cipherStrength = 40;  } else {  	cipherStrength = 56;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport && keyLength == 5) {  	cipherStrength = 40;  } else {  	cipherStrength = 56;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport && keyLength == 5) {  	cipherStrength = 40;  } else {  	cipherStrength = 56;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 40;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 56;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 168;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport) {  	if (keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  } else {  	if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  		cipherStrength = 64;  	} else {  		cipherStrength = 128;  	}  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport) {  	if (keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  } else {  	if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  		cipherStrength = 64;  	} else {  		cipherStrength = 128;  	}  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport) {  	if (keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  } else {  	if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  		cipherStrength = 64;  	} else {  		cipherStrength = 128;  	}  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport) {  	if (keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  } else {  	if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  		cipherStrength = 64;  	} else {  		cipherStrength = 128;  	}  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport) {  	if (keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  } else {  	if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  		cipherStrength = 64;  	} else {  		cipherStrength = 128;  	}  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (keyLength == 5) {  	cipherStrength = 40;  } else {  	cipherStrength = 56;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (keyLength == 5) {  	cipherStrength = 40;  } else {  	cipherStrength = 56;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (keyLength == 5) {  	cipherStrength = 40;  } else {  	cipherStrength = 56;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 40;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 56;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  	cipherStrength = 64;  } else {  	cipherStrength = 128;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  	cipherStrength = 64;  } else {  	cipherStrength = 128;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 64;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 128;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport) {  	if (keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  } else {  	cipherStrength = 128;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport) {  	if (keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  } else {  	cipherStrength = 128;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport) {  	if (keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  } else {  	cipherStrength = 128;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (isExport) {  	if (keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  } else {  	cipherStrength = 128;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (keyLength == 5) {  	cipherStrength = 40;  } else {  	cipherStrength = 56;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (keyLength == 5) {  	cipherStrength = 40;  } else {  	cipherStrength = 56;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: if (keyLength == 5) {  	cipherStrength = 40;  } else {  	cipherStrength = 56;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 40;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 56;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 128;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 128;  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.strength_bits) {  case 128:  	cipherAlgorithm = CipherAlgorithmType.Aes128;  	break;  case 192:  	cipherAlgorithm = CipherAlgorithmType.Aes192;  	break;  case 256:  	cipherAlgorithm = CipherAlgorithmType.Aes256;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.strength_bits) {  case 128:  	cipherAlgorithm = CipherAlgorithmType.Aes128;  	break;  case 192:  	cipherAlgorithm = CipherAlgorithmType.Aes192;  	break;  case 256:  	cipherAlgorithm = CipherAlgorithmType.Aes256;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.strength_bits) {  case 128:  	cipherAlgorithm = CipherAlgorithmType.Aes128;  	break;  case 192:  	cipherAlgorithm = CipherAlgorithmType.Aes192;  	break;  case 256:  	cipherAlgorithm = CipherAlgorithmType.Aes256;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.strength_bits) {  case 128:  	cipherAlgorithm = CipherAlgorithmType.Camellia128;  	break;  case 256:  	cipherAlgorithm = CipherAlgorithmType.Camellia256;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: switch (raw.strength_bits) {  case 128:  	cipherAlgorithm = CipherAlgorithmType.Camellia128;  	break;  case 256:  	cipherAlgorithm = CipherAlgorithmType.Camellia256;  	break;  }  
Magic Number,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following statement contains a magic number: cipherStrength = 128;  
Magic Number,OpenSSL.SSL,SslStreamBase,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamBase.cs,SslStreamBase,The following statement contains a magic number: read_buffer = new byte[16384];  
Magic Number,OpenSSL.SSL,SslStreamServer,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslStreamServer.cs,InitializeServerContext,The following statement contains a magic number: sslContext.SetVerifyDepth (10);  
Magic Number,OpenSSL.X509,X509Certificate,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\X509\X509Certificate.cs,X509Certificate,The following statement contains a magic number: this.Version = 2;  
Missing Default,OpenSSL.Crypto,CryptoKey,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\Crypto\CryptoKey.cs,Print,The following switch statement is missing a default case: switch (this.Type) {  case KeyType.RSA:  	GetRSA ().Print (bio);  	break;  case KeyType.DSA:  	GetDSA ().Print (bio);  	break;  case KeyType.EC:  	break;  case KeyType.DH:  	GetDH ().Print (bio);  	break;  }  
Missing Default,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following switch statement is missing a default case: switch (raw.algorithms & SSL_MKEY_MASK) {  case SSL_kRSA:  	keyExchangeAlgorithm = ExchangeAlgorithmType.RsaKeyX;  	break;  case SSL_kDHr:  case SSL_kDHd:  case SSL_kEDH:  	keyExchangeAlgorithm = ExchangeAlgorithmType.DiffieHellman;  	break;  case SSL_kKRB5:  /* VRS */case SSL_KRB5:  	/* VRS */keyExchangeAlgorithm = ExchangeAlgorithmType.Kerberos;  	break;  case SSL_kFZA:  	keyExchangeAlgorithm = ExchangeAlgorithmType.Fortezza;  	break;  case SSL_kECDH:  case SSL_kECDHE:  	keyExchangeAlgorithm = ExchangeAlgorithmType.ECDiffieHellman;  	break;  }  
Missing Default,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following switch statement is missing a default case: switch (raw.algorithms & SSL_AUTH_MASK) {  case SSL_aRSA:  	authMethod = AuthenticationMethod.Rsa;  	break;  case SSL_aDSS:  	authMethod = AuthenticationMethod.Dss;  	break;  case SSL_aDH:  	authMethod = AuthenticationMethod.DiffieHellman;  	break;  case SSL_aKRB5:  /* VRS */case SSL_KRB5:  	/* VRS */authMethod = AuthenticationMethod.Kerberos;  	break;  case SSL_aFZA:  case SSL_aNULL:  	authMethod = AuthenticationMethod.None;  	break;  case SSL_aECDSA:  	authMethod = AuthenticationMethod.ECDsa;  	break;  }  
Missing Default,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following switch statement is missing a default case: switch (raw.algorithms & SSL_ENC_MASK) {  case SSL_DES:  	cipherAlgorithm = CipherAlgorithmType.Des;  	if (isExport && keyLength == 5) {  		cipherStrength = 40;  	} else {  		cipherStrength = 56;  	}  	break;  case SSL_3DES:  	cipherAlgorithm = CipherAlgorithmType.TripleDes;  	cipherStrength = 168;  	break;  case SSL_RC4:  	cipherAlgorithm = CipherAlgorithmType.Rc4;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		if ((raw.algorithm2 & SSL2_CF_8_BYTE_ENC) == SSL2_CF_8_BYTE_ENC) {  			cipherStrength = 64;  		} else {  			cipherStrength = 128;  		}  	}  	break;  case SSL_RC2:  	cipherAlgorithm = CipherAlgorithmType.Rc2;  	if (isExport) {  		if (keyLength == 5) {  			cipherStrength = 40;  		} else {  			cipherStrength = 56;  		}  	} else {  		cipherStrength = 128;  	}  	break;  case SSL_IDEA:  	cipherAlgorithm = CipherAlgorithmType.Idea;  	cipherStrength = 128;  	break;  case SSL_eFZA:  	cipherAlgorithm = CipherAlgorithmType.Fortezza;  	break;  case SSL_eNULL:  	cipherAlgorithm = CipherAlgorithmType.None;  	break;  case SSL_AES:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Aes128;  		break;  	case 192:  		cipherAlgorithm = CipherAlgorithmType.Aes192;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Aes256;  		break;  	}  	break;  case SSL_CAMELLIA:  	switch (raw.strength_bits) {  	case 128:  		cipherAlgorithm = CipherAlgorithmType.Camellia128;  		break;  	case 256:  		cipherAlgorithm = CipherAlgorithmType.Camellia256;  		break;  	}  	break;  case SSL_SEED:  	cipherAlgorithm = CipherAlgorithmType.Seed;  	cipherStrength = 128;  	break;  }  
Missing Default,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following switch statement is missing a default case: switch (raw.strength_bits) {  case 128:  	cipherAlgorithm = CipherAlgorithmType.Aes128;  	break;  case 192:  	cipherAlgorithm = CipherAlgorithmType.Aes192;  	break;  case 256:  	cipherAlgorithm = CipherAlgorithmType.Aes256;  	break;  }  
Missing Default,OpenSSL.SSL,SslCipher,F:\newReposMay17\lachesis_scallion\openssl-net-0.5\ManagedOpenSsl\SSL\SslCipher.cs,Initialize,The following switch statement is missing a default case: switch (raw.strength_bits) {  case 128:  	cipherAlgorithm = CipherAlgorithmType.Camellia128;  	break;  case 256:  	cipherAlgorithm = CipherAlgorithmType.Camellia256;  	break;  }  
