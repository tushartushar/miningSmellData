Implementation smell,Namespace,Class,File,Method,Description
Complex Method,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,Cyclomatic complexity of the method is 12
Complex Method,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ValidateRemoteCert,Cyclomatic complexity of the method is 8
Complex Method,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ValidateRemoteCert,Cyclomatic complexity of the method is 8
Long Parameter List,UnitTests,TestRSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRSA.cs,SetKey,The method has 9 parameters. Parameters: key' n' e' d' p' q' dmp1' dmq1' iqmp
Long Parameter List,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,clientCertificateSelectionCallback,The method has 5 parameters. Parameters: sender' targetHost' localCerts' remoteCert' acceptableIssuers
Long Parameter List,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ValidateRemoteCert,The method has 5 parameters. Parameters: obj' cert' chain' depth' result
Long Parameter List,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,clientCertificateSelectionCallback,The method has 5 parameters. Parameters: sender' targetHost' localCerts' remoteCert' acceptableIssuers
Long Parameter List,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ValidateRemoteCert,The method has 5 parameters. Parameters: obj' cert' chain' depth' result
Long Identifier,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,,The length of the parameter clientRemoteCertificateValidationCallback is 41.
Long Identifier,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,,The length of the parameter clientLocalCertificateSelectionCallback is 39.
Long Identifier,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,,The length of the parameter serverRemoteCertificateValidationCallback is 41.
Long Identifier,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,,The length of the parameter clientRemoteCertificateValidationCallback is 41.
Long Identifier,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,,The length of the parameter clientLocalCertificateSelectionCallback is 39.
Long Identifier,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,,The length of the parameter serverRemoteCertificateValidationCallback is 41.
Long Statement,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AdvancedServerTest,The length of the statement  "					sslStream.AuthenticateAsServer(testServer.serverCertificate' true' testServer.serverCAChain' SslProtocols.Tls' SslStrength.All' true); " is 134.
Long Statement,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,DoServerReadWrite,The length of the statement  "					Console.WriteLine("BasicServerTest Read Failure:\nExpected:{0}\nGot:{1}"' clientMessage.ToString()' serverReadBuffer.ToString()); " is 129.
Long Statement,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,IntermediateClientTest,The length of the statement  "					sslStream.AuthenticateAsClient("localhost"' null' null' SslProtocols.Tls' SslStrength.Medium | SslStrength.High' false); " is 120.
Long Statement,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,IntermediateClientTest,The length of the statement  "						Console.WriteLine("Cipher was {0}' expected {0}"' sslStream.CipherAlgorithm.ToString()' CipherAlgorithmType.Aes256.ToString()); " is 127.
Long Statement,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AdvancedClientTest,The length of the statement  "					sslStream = new SslStream(client.GetStream()' false' clientRemoteCertificateValidationCallback' clientLocalCertificateSelectionCallback); " is 137.
Long Statement,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AdvancedClientTest,The length of the statement  "					sslStream.AuthenticateAsClient("localhost"' testServer.clientCertificateList' testServer.clientCAChain' SslProtocols.Tls' SslStrength.Medium | SslStrength.High' true); " is 167.
Long Statement,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AdvancedClientTest,The length of the statement  "						Console.WriteLine("Cipher was {0}' expected {0}"' sslStream.CipherAlgorithm.ToString()' CipherAlgorithmType.Aes256.ToString()); " is 127.
Long Statement,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,DoClientReadWrite,The length of the statement  "					Console.WriteLine("BasicServerTest Read Failure:\nExpected:{0}\nGot:{1}"' serverMessage.ToString()' clientReadBuffer.ToString()); " is 129.
Long Statement,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncServerAccept,The length of the statement  "					sslStream.BeginAuthenticateAsServer(testServer.serverCertificate' new AsyncCallback(OnAsyncAuthenticateAsServer)' null); " is 120.
Long Statement,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncServerAccept,The length of the statement  "					sslStream.BeginAuthenticateAsServer(testServer.serverCertificate' false' null' SslProtocols.Tls' SslStrength.All' false' new AsyncCallback(OnAsyncAuthenticateAsServer)' null); " is 175.
Long Statement,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncServerAccept,The length of the statement  "					sslStream.BeginAuthenticateAsServer(testServer.serverCertificate' true' testServer.serverCAChain' SslProtocols.Tls' SslStrength.All' true' new AsyncCallback(OnAsyncAuthenticateAsServer)' null); " is 193.
Long Statement,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncServerRead,The length of the statement  "					Console.WriteLine("{0} Read Failure:\nExpected:{0}\nGot:{1}"' testName' clientMessage.ToString()' serverReadBuffer.ToString()); " is 127.
Long Statement,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncClientConnect,The length of the statement  "					sslStream.BeginAuthenticateAsClient("localhost"' null' null' SslProtocols.Tls' SslStrength.Medium | SslStrength.High' false' new AsyncCallback(OnAsyncAuthenticateAsClient)' null); " is 179.
Long Statement,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncClientConnect,The length of the statement  "					sslStream = new SslStream(client.GetStream()' false' clientRemoteCertificateValidationCallback' clientLocalCertificateSelectionCallback); " is 137.
Long Statement,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncClientConnect,The length of the statement  "					sslStream.BeginAuthenticateAsClient("localhost"' testServer.clientCertificateList' testServer.clientCAChain' SslProtocols.Tls' SslStrength.Medium | SslStrength.High' true' new AsyncCallback(OnAsyncAuthenticateAsClient)' null); " is 226.
Long Statement,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncAuthenticateAsClient,The length of the statement  "							Console.WriteLine("Cipher was {0}' expected {0}"' sslStream.CipherAlgorithm.ToString()' CipherAlgorithmType.Aes256.ToString()); " is 127.
Long Statement,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncClientRead,The length of the statement  "					Console.WriteLine("BasicAsyncClientTest Read Failure:\nExpected:{0}\nGot:{1}"' serverMessage.ToString()' clientReadBuffer.ToString()); " is 134.
Magic Number,UnitTests,SourceForgeBugs,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\SourceForgeBugs.cs,Bug3018093_2,The following statement contains a magic number: Assert.AreEqual(2' fsn1.Next());
Magic Number,UnitTests,SourceForgeBugs,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\SourceForgeBugs.cs,Bug3018093_2,The following statement contains a magic number: Assert.AreEqual(2' fsn2.Next());
Magic Number,UnitTests,TestAES,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestAES.cs,TestCase,The following statement contains a magic number: const int PKCS5_SALT_LEN = 8;
Magic Number,UnitTests,TestDH,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestDH.cs,TestCase,The following statement contains a magic number: DH a = new DH(64' DH.Generator5' cb' Console.Out);
Magic Number,UnitTests,TestDH,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestDH.cs,TestCase,The following statement contains a magic number: aout.Length < 4 || astr != bstr
Magic Number,UnitTests,TestDH,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestDH.cs,OnStatus,The following statement contains a magic number: switch (p) {  				case 0: cout.Write('.'); break;  				case 1: cout.Write('+'); break;  				case 2: cout.Write('*'); break;  				case 3: cout.WriteLine(); break;  			}
Magic Number,UnitTests,TestDH,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestDH.cs,OnStatus,The following statement contains a magic number: switch (p) {  				case 0: cout.Write('.'); break;  				case 1: cout.Write('+'); break;  				case 2: cout.Write('*'); break;  				case 3: cout.WriteLine(); break;  			}
Magic Number,UnitTests,TestDSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestDSA.cs,DoTest,The following statement contains a magic number: Assert.AreEqual(105' dsa.Counter);
Magic Number,UnitTests,TestDSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestDSA.cs,DoTest,The following statement contains a magic number: Assert.AreEqual(2' dsa.H.ToInt32());
Magic Number,UnitTests,TestDSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestDSA.cs,OnStatus,The following statement contains a magic number: switch (p) {  				case 0: cout.Write('.'); num++; break;  				case 1: cout.Write('+'); break;  				case 2: cout.Write('*'); ok++; break;  				case 3: cout.WriteLine(); break;  			}
Magic Number,UnitTests,TestDSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestDSA.cs,OnStatus,The following statement contains a magic number: switch (p) {  				case 0: cout.Write('.'); num++; break;  				case 1: cout.Write('+'); break;  				case 2: cout.Write('*'); ok++; break;  				case 3: cout.WriteLine(); break;  			}
Magic Number,UnitTests,TestRSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRSA.cs,TestKey,The following statement contains a magic number: switch (v % 3) {  				case 0: ctext_ex = Key1(key); break;  				case 1: ctext_ex = Key2(key); break;  				case 2: ctext_ex = Key3(key); break;  			}
Magic Number,UnitTests,TestRSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRSA.cs,TestKey,The following statement contains a magic number: switch (v % 3) {  				case 0: ctext_ex = Key1(key); break;  				case 1: ctext_ex = Key2(key); break;  				case 2: ctext_ex = Key3(key); break;  			}
Magic Number,UnitTests,TestRSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRSA.cs,TestKey,The following statement contains a magic number: v / 3 >= 1
Magic Number,UnitTests,TestRSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRSA.cs,TestCase,The following statement contains a magic number: v < 6
Magic Number,UnitTests,TestECDH,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestECDH.cs,test_ecdh_curve,The following statement contains a magic number: Assert.Greater(aout' 4);
Magic Number,UnitTests,TestECDSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestECDSA.cs,test_builtin,The following statement contains a magic number: byte[] digest = Random.PseudoBytes(20);
Magic Number,UnitTests,TestECDSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestECDSA.cs,test_builtin,The following statement contains a magic number: byte[] wrong_digest = Random.PseudoBytes(20);
Magic Number,UnitTests,TestECDSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestECDSA.cs,test_builtin,The following statement contains a magic number: eckey.Group.Degree < 160
Magic Number,UnitTests,TestCryptoKey,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestCryptoKey.cs,CanCompare,The following statement contains a magic number: rsa.GenerateKeys(1024' BigNumber.One' null' null);
Magic Number,UnitTests,TestCryptoKey,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestCryptoKey.cs,CanCompare,The following statement contains a magic number: rsa2.GenerateKeys(1024' BigNumber.One' null' null);
Magic Number,UnitTests,TestCryptoKey,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestCryptoKey.cs,CanCreateFromRSA,The following statement contains a magic number: rsa.GenerateKeys(1024' BigNumber.One' null' null);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanLoadFromPEM,The following statement contains a magic number: TestCert(cert' "CN=Root"' "CN=Root"' 1234);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanLoadFromDER,The following statement contains a magic number: TestCert(cert' "CN=Root"' "CN=Root"' 1234);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanLoadFromPKCS7_PEM,The following statement contains a magic number: TestCert(cert' "CN=Root"' "CN=Root"' 1234);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanLoadFromPKCS7_DER,The following statement contains a magic number: TestCert(cert' "CN=Root"' "CN=Root"' 1234);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanLoadFromPCKS12,The following statement contains a magic number: TestCert(cert' "CN=localhost"' "CN=Root"' 1235);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanCreatePKCS12,The following statement contains a magic number: TestCert(new_pfx.Certificate' "CN=localhost"' "CN=Root"' 1235);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanCreateWithArgs,The following statement contains a magic number: int serial = 101;
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanCreateWithArgs,The following statement contains a magic number: DateTime end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanGetAndSetProperties,The following statement contains a magic number: int serial = 101;
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanGetAndSetProperties,The following statement contains a magic number: DateTime end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CannotSetUnmatchedPrivateKey,The following statement contains a magic number: DateTime end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanCompare,The following statement contains a magic number: DateTime end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanSign,The following statement contains a magic number: DateTime end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanCheckPrivateKey,The following statement contains a magic number: DateTime end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanVerify,The following statement contains a magic number: DateTime end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanCreateRequest,The following statement contains a magic number: DateTime end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestX509Certificate,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509Certificate.cs,CanAddExtensions,The following statement contains a magic number: DateTime end = start + TimeSpan.FromMinutes(10);
Magic Number,UnitTests,TestHMAC,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestHMAC.cs,VerifyHMAC,The following statement contains a magic number: byte[] buf = Encoding.ASCII.GetBytes(new string('a'' 1000));
Magic Number,UnitTests,TestHMAC,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestHMAC.cs,VerifyHMAC,The following statement contains a magic number: i < 1000
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: byte[] buf = OpenSSL.Core.Random.PseudoBytes(2500);
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: uint[] n2 = new uint[16];
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: uint['] runs = new uint[2' 34];
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: uint['] runs = new uint[2' 34];
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: n2[(j >> 4) & 0x0f]++;
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: k < 8
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: nsign = 34;
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: nsign > 34
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((9654 < n1) && (n1 < 10346));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((9654 < n1) && (n1 < 10346));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: i < 16
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: d = (d * 8) / 25 - 500000;
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: d = (d * 8) / 25 - 500000;
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: d = (d * 8) / 25 - 500000;
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((103 < d) && (d < 5740));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((103 < d) && (d < 5740));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((2267 < runs[i' 0]) && (runs[i' 0] < 2733));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((2267 < runs[i' 0]) && (runs[i' 0] < 2733));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((1079 < runs[i' 1]) && (runs[i' 1] < 1421));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((1079 < runs[i' 1]) && (runs[i' 1] < 1421));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((502 < runs[i' 2]) && (runs[i' 2] < 748));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((502 < runs[i' 2]) && (runs[i' 2] < 748));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((502 < runs[i' 2]) && (runs[i' 2] < 748));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((502 < runs[i' 2]) && (runs[i' 2] < 748));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((223 < runs[i' 3]) && (runs[i' 3] < 402));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((223 < runs[i' 3]) && (runs[i' 3] < 402));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((223 < runs[i' 3]) && (runs[i' 3] < 402));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((223 < runs[i' 3]) && (runs[i' 3] < 402));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 4]) && (runs[i' 4] < 223));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 4]) && (runs[i' 4] < 223));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 4]) && (runs[i' 4] < 223));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 4]) && (runs[i' 4] < 223));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 5]) && (runs[i' 5] < 223));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 5]) && (runs[i' 5] < 223));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 5]) && (runs[i' 5] < 223));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.IsTrue((90 < runs[i' 5]) && (runs[i' 5] < 223));
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: i < 2
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.AreEqual(0' runs[0' 33]);
Magic Number,UnitTests,TestRandom,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRandom.cs,TestCase,The following statement contains a magic number: Assert.AreEqual(0' runs[1' 33]);
Magic Number,UnitTests,TestSHA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA.cs,TestCase,The following statement contains a magic number: byte[] buf = Encoding.ASCII.GetBytes(new string('a'' 1000));
Magic Number,UnitTests,TestSHA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA.cs,TestCase,The following statement contains a magic number: i < 1000
Magic Number,UnitTests,TestSHA1,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA1.cs,TestCase,The following statement contains a magic number: byte[] buf = Encoding.ASCII.GetBytes(new string('a'' 1000));
Magic Number,UnitTests,TestSHA1,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA1.cs,TestCase,The following statement contains a magic number: i < 1000
Magic Number,UnitTests,TestSHA256,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < 160 ? 1000000 - i : 160;
Magic Number,UnitTests,TestSHA256,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < 160 ? 1000000 - i : 160;
Magic Number,UnitTests,TestSHA256,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < 160 ? 1000000 - i : 160;
Magic Number,UnitTests,TestSHA256,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < 160 ? 1000000 - i : 160;
Magic Number,UnitTests,TestSHA256,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: i < 1000000
Magic Number,UnitTests,TestSHA256,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA256.cs,GenericTest,The following statement contains a magic number: str2 = BitConverter.ToString(results[2]);
Magic Number,UnitTests,TestSHA512,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA512.cs,TestCase,The following statement contains a magic number: this.GenericTest("SHA-512"' ctx' this.app' 288);
Magic Number,UnitTests,TestSHA512,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA512.cs,TestCase,The following statement contains a magic number: this.GenericTest("SHA-384"' ctx' this.addenum' 64);
Magic Number,UnitTests,TestSHA512,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA512.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < alen ? 1000000 - i : alen;
Magic Number,UnitTests,TestSHA512,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA512.cs,GenericTest,The following statement contains a magic number: int len = (1000000 - i) < alen ? 1000000 - i : alen;
Magic Number,UnitTests,TestSHA512,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA512.cs,GenericTest,The following statement contains a magic number: i < 1000000
Magic Number,UnitTests,TestSHA512,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestSHA512.cs,GenericTest,The following statement contains a magic number: str2 = BitConverter.ToString(results[2]);
Magic Number,UnitTests,TestX509,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509.cs,TestRsaSha1,The following statement contains a magic number: rsa.GenerateKeys(2048' bn' OnGenerator' null);
Magic Number,UnitTests,TestX509,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509.cs,TestWithoutCfg,The following statement contains a magic number: rsa.GenerateKeys(2048' bn' OnGenerator' null);
Magic Number,UnitTests,TestX509,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509.cs,OnGenerator,The following statement contains a magic number: switch (p) {  				case 0: cout.Write('.'); break;  				case 1: cout.Write('+'); break;  				case 2: cout.Write('*'); break;  				case 3: cout.WriteLine(); break;  			}
Magic Number,UnitTests,TestX509,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509.cs,OnGenerator,The following statement contains a magic number: switch (p) {  				case 0: cout.Write('.'); break;  				case 1: cout.Write('+'); break;  				case 2: cout.Write('*'); break;  				case 3: cout.WriteLine(); break;  			}
Magic Number,UnitTests,TestServer,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ClientTestThreadProc,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,UnitTests,TestServer,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ClientTestThreadProc,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,UnitTests,TestServer,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ClientTestThreadProc,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,UnitTests,TestServer,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ClientTestThreadProc,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,UnitTests,TestServer,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ClientTestThreadProc,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,IntermediateServerTest,The following statement contains a magic number: sslStream.CipherStrength < 256
Magic Number,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AdvancedServerTest,The following statement contains a magic number: sslStream.CipherStrength < 256
Magic Number,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AcceptConnection,The following statement contains a magic number: listener = new TcpListener(IPAddress.Any' 9000);
Magic Number,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AcceptConnection,The following statement contains a magic number: listener.Start(5);
Magic Number,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,BasicClientTest,The following statement contains a magic number: client = new TcpClient("localhost"' 9000);
Magic Number,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,IntermediateClientTest,The following statement contains a magic number: client = new TcpClient("localhost"' 9000);
Magic Number,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,IntermediateClientTest,The following statement contains a magic number: sslStream.CipherStrength < 256
Magic Number,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AdvancedClientTest,The following statement contains a magic number: client = new TcpClient("localhost"' 9000);
Magic Number,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AdvancedClientTest,The following statement contains a magic number: sslStream.CipherStrength < 256
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,BasicAsyncServerTest,The following statement contains a magic number: listener = new TcpListener(IPAddress.Any' 9000);
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,BasicAsyncServerTest,The following statement contains a magic number: listener.Start(5);
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,IntermediateAsyncServerTest,The following statement contains a magic number: listener = new TcpListener(IPAddress.Any' 9000);
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,IntermediateAsyncServerTest,The following statement contains a magic number: listener.Start(5);
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AdvancedAsyncServerTest,The following statement contains a magic number: listener = new TcpListener(IPAddress.Any' 9000);
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AdvancedAsyncServerTest,The following statement contains a magic number: listener.Start(5);
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncAuthenticateAsServer,The following statement contains a magic number: sslStream.CipherStrength < 256
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,BasicAsyncClientTest,The following statement contains a magic number: client.BeginConnect("localhost"' 9000' new AsyncCallback(OnAsyncClientConnect)' null);
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,IntermediateAsyncClientTest,The following statement contains a magic number: client.BeginConnect("localhost"' 9000' new AsyncCallback(OnAsyncClientConnect)' null);
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,AdvancedAsyncClientTest,The following statement contains a magic number: client.BeginConnect("localhost"' 9000' new AsyncCallback(OnAsyncClientConnect)' null);
Magic Number,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,OnAsyncAuthenticateAsClient,The following statement contains a magic number: sslStream.CipherStrength < 256
Missing Default,UnitTests,TestDH,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestDH.cs,OnStatus,The following switch statement is missing a default case: switch (p) {  				case 0: cout.Write('.'); break;  				case 1: cout.Write('+'); break;  				case 2: cout.Write('*'); break;  				case 3: cout.WriteLine(); break;  			}
Missing Default,UnitTests,TestDSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestDSA.cs,OnStatus,The following switch statement is missing a default case: switch (p) {  				case 0: cout.Write('.'); num++; break;  				case 1: cout.Write('+'); break;  				case 2: cout.Write('*'); ok++; break;  				case 3: cout.WriteLine(); break;  			}
Missing Default,UnitTests,TestRSA,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestRSA.cs,TestKey,The following switch statement is missing a default case: switch (v % 3) {  				case 0: ctext_ex = Key1(key); break;  				case 1: ctext_ex = Key2(key); break;  				case 2: ctext_ex = Key3(key); break;  			}
Missing Default,UnitTests,TestX509,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestX509.cs,OnGenerator,The following switch statement is missing a default case: switch (p) {  				case 0: cout.Write('.'); break;  				case 1: cout.Write('+'); break;  				case 2: cout.Write('*'); break;  				case 3: cout.WriteLine(); break;  			}
Missing Default,UnitTests,SyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ValidateRemoteCert,The following switch statement is missing a default case: switch (result) {  					case VerifyResult.X509_V_ERR_CERT_UNTRUSTED:  					case VerifyResult.X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:  					case VerifyResult.X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY:  					case VerifyResult.X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: {  							// Check the chain to see if there is a match for the cert  							ret = CheckCert(cert' chain);  							if (!ret && depth != 0) {  								ret = true;  // We want to keep checking until we get to depth 0  							}  						}  						break;  					case VerifyResult.X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD:  					case VerifyResult.X509_V_ERR_CERT_NOT_YET_VALID: {  							Console.WriteLine("Certificate is not valid yet");  							ret = false;  						}  						break;  					case VerifyResult.X509_V_ERR_CERT_HAS_EXPIRED:  					case VerifyResult.X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: {  							Console.WriteLine("Certificate is expired");  							ret = false;  						}  						break;  					case VerifyResult.X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: {  							// we received a self signed cert - check to see if it's in our store  							ret = CheckCert(cert' chain);  						}  						break;  					case VerifyResult.X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: {  							// A self signed certificate was encountered in the chain  							// Check the chain to see if there is a match for the cert  							ret = CheckCert(cert' chain);  							if (!ret && depth != 0) {  								ret = true;  // We want to keep checking until we get to depth 0  							}  						}  						break;  					case VerifyResult.X509_V_OK: {  							ret = true;  						}  						break;  				}
Missing Default,UnitTests,AsyncServerTests,D:\research\architectureSmells\repos\lachesis_scallion\openssl-net-0.5\test\TestServer.cs,ValidateRemoteCert,The following switch statement is missing a default case: switch (result) {  					case VerifyResult.X509_V_ERR_CERT_UNTRUSTED:  					case VerifyResult.X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT:  					case VerifyResult.X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY:  					case VerifyResult.X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: {  							// Check the chain to see if there is a match for the cert  							ret = CheckCert(cert' chain);  							if (!ret && depth != 0) {  								ret = true;  // We want to keep checking until we get to depth 0  							}  						}  						break;  					case VerifyResult.X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD:  					case VerifyResult.X509_V_ERR_CERT_NOT_YET_VALID: {  							Console.WriteLine("Certificate is not valid yet");  							ret = false;  						}  						break;  					case VerifyResult.X509_V_ERR_CERT_HAS_EXPIRED:  					case VerifyResult.X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: {  							Console.WriteLine("Certificate is expired");  							ret = false;  						}  						break;  					case VerifyResult.X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: {  							// we received a self signed cert - check to see if it's in our store  							ret = CheckCert(cert' chain);  						}  						break;  					case VerifyResult.X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: {  							// A self signed certificate was encountered in the chain  							// Check the chain to see if there is a match for the cert  							ret = CheckCert(cert' chain);  							if (!ret && depth != 0) {  								ret = true;  // We want to keep checking until we get to depth 0  							}  						}  						break;  					case VerifyResult.X509_V_OK: {  							ret = true;  						}  						break;  				}
