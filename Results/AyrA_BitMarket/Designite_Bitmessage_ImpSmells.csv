Implementation smell,Namespace,Class,File,Method,Description
Long Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseTransaction,The method has 117 lines of code.
Long Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseFile,The method has 162 lines of code.
Long Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The method has 221 lines of code.
Long Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,setOffer,The method has 100 lines of code.
Complex Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,Process,Cyclomatic complexity of the method is 21
Complex Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseRating,Cyclomatic complexity of the method is 15
Complex Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseTransaction,Cyclomatic complexity of the method is 38
Complex Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseFile,Cyclomatic complexity of the method is 23
Complex Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,Cyclomatic complexity of the method is 34
Complex Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,setOffer,Cyclomatic complexity of the method is 17
Complex Method,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseMain,Cyclomatic complexity of the method is 27
Complex Method,SQL,PriceRange,C:\repos\AyrA_BitMarket\Bitmessage\clsPriceRange.cs,PriceRange,Cyclomatic complexity of the method is 17
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,BitmessageServer_GenericServerLog,The length of the statement  "	File.AppendAllText ("#DBG#-Bitmessage.log"' string.Format ("[{0}] [{1}] {2}\r\n"' DateTime.Now.ToString ("dd.MM.yyyy hh:mm:ss")' GLT' Text)); " is 141.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Start,The length of the statement  "	if (!QuickSettings.Has ("API-ADDR") || !QuickSettings.Has ("API-NAME") || !QuickSettings.Has ("API-PASS") || !QuickSettings.Has ("BM-ADDR")) { " is 142.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Start,The length of the statement  "			GenericServerLog (this' GenericLogType.Fatal' true' "API Settings for Bitmessage have not been made. Please configure Bitmessage Plugin"); " is 138.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Start,The length of the statement  "	BA.Headers.Add ("Authorization"' "Basic " + JsonConverter.B64enc (string.Format ("{0}:{1}"' QuickSettings.Get ("API-NAME")' QuickSettings.Get ("API-PASS")))); " is 158.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Start,The length of the statement  "			GenericServerLog (this' GenericLogType.Error' true' "API Settings for Bitmessage are wrong. The API seems to answer' but the answer is incorrect. Please check settings"); " is 170.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Start,The length of the statement  "			throw new Exception ("API Settings for Bitmessage are wrong. The API seems to answer' but the answer is incorrect. Please check settings"); " is 139.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Start,The length of the statement  "		GenericServerLog (this' GenericLogType.Error' true' "Cannot contact Bitmessage API. Verify the client is running' has the API enabled and the settings are correct"); " is 165.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Start,The length of the statement  "		throw new Exception ("Cannot contact Bitmessage API. Verify the client is running' has the API enabled and the settings are correct"); " is 134.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Config,The length of the statement  "		GenericServerLog (this' GenericLogType.Info' false' "API settings have changed. Restart the Bitmessage component for changes to take effect"); " is 142.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Config,The length of the statement  "		GenericServerLog (this' GenericLogType.Warning' true' "API settings have been set to invalid values and are not stored. Please try again"); " is 139.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Send,The length of the statement  "		GenericServerLog (this' GenericLogType.Info' false' string.Format ("Sending Message from {0} to {1}"' Addr' MSG.Receiver)); " is 123.
Long Statement,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,AskAPI,The length of the statement  "	if (IP.Length > 0 && Port.Length > 0 && UN.Length > 0 && PW.Length > 0 && ushort.TryParse (Port' out i) && Addr.Length > 0) { " is 125.
Long Statement,Bitmessage,Crypt,C:\repos\AyrA_BitMarket\Bitmessage\clsCrypt.cs,Encrypt,The length of the statement  "		cs = new CryptoStream (fsCrypt' RMCrypto.CreateEncryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Write); " is 141.
Long Statement,Bitmessage,Crypt,C:\repos\AyrA_BitMarket\Bitmessage\clsCrypt.cs,Decrypt,The length of the statement  "		cs = new CryptoStream (fsIn' RMCrypto.CreateDecryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Read); " is 137.
Long Statement,SQL,BitTransaction,C:\repos\AyrA_BitMarket\Bitmessage\clsBitTransaction.cs,Update,The length of the statement  "		if (State == TransactionState.Completed && !string.IsNullOrEmpty (_buyerComment) && !string.IsNullOrEmpty (_sellerComment) && _buyerRating != Rating.Unrated && _sellerRating != Rating.Unrated) { " is 194.
Long Statement,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseRating,The length of the statement  "				Ratings.AppendFormat ("{0}\t{1}\t{2}\t{3}\r\n"' (int)r.Values ["State"]' r.Values ["AddressSeller"].ToString ()' (int)r.Values ["SellerRating"]' Base.B64enc (r.Values ["SellerComment"].ToString ())); " is 199.
Long Statement,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseRating,The length of the statement  "				Ratings.AppendFormat ("{0}\t{1}\t{2}\t{3}\r\n"' (int)r.Values ["State"]' r.Values ["AddressBuyer"].ToString ()' (int)r.Values ["BuyerRating"]' Base.B64enc (r.Values ["BuyerComment"].ToString ())); " is 196.
Long Statement,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseTransaction,The length of the statement  "TransactionTime={9}"' BT.AddressBuyer' BT.AddressSeller' BT.Offer' (int)BT.State' BT.Amount' Base.B64enc (BT.BuyerComment)' (int)BT.BuyerRating' Base.B64enc (BT.SellerComment)' (int)BT.SellerRating' BT.TransactionTime.ToString (Base.DT_FORMAT))' " is 245.
Long Statement,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The length of the statement  ""' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))' " is 228.
Long Statement,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseMain,The length of the statement  "			SQLRow[] SRo = MarketInterface.ExecReader ("SELECT ID'Category'Stock'PriceMap'Title FROM BitOffer WHERE Category!=-2 ORDER BY LastModify DESC"); " is 144.
Long Statement,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseMain,The length of the statement  "				SBo.AppendFormat ("{0}'{1}'{2}'{3}'{4}\n"' R.Values ["ID"]' R.Values ["Category"]' R.Values ["Stock"]' R.Values ["PriceMap"]' R.Values ["Title"]); " is 146.
Long Statement,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,sendBroadcast,The length of the statement  "			GenericServerLog (this' GenericLogType.Error' false' "Server '" + GS.ToString () + "' could not send a Broadcast: " + ex.Message); " is 130.
Long Statement,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,getUnconfirmedStock,The length of the statement  "	var Rows = MarketInterface.ExecReader ("SELECT SUM(Amount) AS Q FROM BitTransaction WHERE Offer=? AND State=0"' new object[] { " is 126.
Complex Conditional,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Start,The conditional expression  "!QuickSettings.Has ("API-ADDR") || !QuickSettings.Has ("API-NAME") || !QuickSettings.Has ("API-PASS") || !QuickSettings.Has ("BM-ADDR")"  is complex.
Complex Conditional,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,AskAPI,The conditional expression  "IP.Length > 0 && Port.Length > 0 && UN.Length > 0 && PW.Length > 0 && ushort.TryParse (Port' out i) && Addr.Length > 0"  is complex.
Complex Conditional,SQL,BitOffer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitOffer.cs,CanBuy,The conditional expression  "Amount > 0 && UnderStock > 0 && UnderStock <= Amount && Amount <= Stock"  is complex.
Complex Conditional,SQL,BitTransaction,C:\repos\AyrA_BitMarket\Bitmessage\clsBitTransaction.cs,Update,The conditional expression  "State == TransactionState.Completed && !string.IsNullOrEmpty (_buyerComment) && !string.IsNullOrEmpty (_sellerComment) && _buyerRating != Rating.Unrated && _sellerRating != Rating.Unrated"  is complex.
Empty Catch Block,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Stop,The method has an empty catch block.
Magic Number,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Stop,The following statement contains a magic number: if (T != null) {  	cont = false;  	T.Join (2000);  	if (T.IsAlive) {  		try {  			T.Abort ();  		}  		catch {  		}  	}  	T = null;  }  
Magic Number,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,Stop,The following statement contains a magic number: T.Join (2000);  
Magic Number,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,run,The following statement contains a magic number: while (cont) {  	//loop messages  	BitMsg[] MSGs = JsonConverter.getMessages (BA.getAllInboxMessages ());  	foreach (BitMsg M in MSGs) {  		if (M.toAddress == Addr) {  			GenericMessageReceived (new GenericMessage () {  				Server = this'  				Tag = M.msgid'  				Sender = M.fromAddress'  				Receiver = M.toAddress'  				RawContent = M.message'  				Command = M.subject  			});  		}  		else {  			GenericServerLog (this' GenericLogType.Debug' false' "Ignoring message to " + M.toAddress);  		}  	}  	for (int i = 0; i < 20 && cont; i++) {  		Thread.Sleep (500);  	}  }  
Magic Number,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,run,The following statement contains a magic number: while (cont) {  	//loop messages  	BitMsg[] MSGs = JsonConverter.getMessages (BA.getAllInboxMessages ());  	foreach (BitMsg M in MSGs) {  		if (M.toAddress == Addr) {  			GenericMessageReceived (new GenericMessage () {  				Server = this'  				Tag = M.msgid'  				Sender = M.fromAddress'  				Receiver = M.toAddress'  				RawContent = M.message'  				Command = M.subject  			});  		}  		else {  			GenericServerLog (this' GenericLogType.Debug' false' "Ignoring message to " + M.toAddress);  		}  	}  	for (int i = 0; i < 20 && cont; i++) {  		Thread.Sleep (500);  	}  }  
Magic Number,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,run,The following statement contains a magic number: for (int i = 0; i < 20 && cont; i++) {  	Thread.Sleep (500);  }  
Magic Number,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,run,The following statement contains a magic number: for (int i = 0; i < 20 && cont; i++) {  	Thread.Sleep (500);  }  
Magic Number,Bitmessage,BitmessageServer,C:\repos\AyrA_BitMarket\Bitmessage\clsBitmessageServer.cs,run,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Bitmessage,Crypt,C:\repos\AyrA_BitMarket\Bitmessage\clsCrypt.cs,Encrypt,The following statement contains a magic number: try {  	cs = new CryptoStream (fsCrypt' RMCrypto.CreateEncryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Write);  }  catch {  	if (fsCrypt != null) {  		fsCrypt.Close ();  		fsCrypt.Dispose ();  	}  	RMCrypto.Clear ();  	throw new Exception ("Error creating encryptors");  }  
Magic Number,Bitmessage,Crypt,C:\repos\AyrA_BitMarket\Bitmessage\clsCrypt.cs,Encrypt,The following statement contains a magic number: try {  	cs = new CryptoStream (fsCrypt' RMCrypto.CreateEncryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Write);  }  catch {  	if (fsCrypt != null) {  		fsCrypt.Close ();  		fsCrypt.Dispose ();  	}  	RMCrypto.Clear ();  	throw new Exception ("Error creating encryptors");  }  
Magic Number,Bitmessage,Crypt,C:\repos\AyrA_BitMarket\Bitmessage\clsCrypt.cs,Encrypt,The following statement contains a magic number: cs = new CryptoStream (fsCrypt' RMCrypto.CreateEncryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Write);  
Magic Number,Bitmessage,Crypt,C:\repos\AyrA_BitMarket\Bitmessage\clsCrypt.cs,Encrypt,The following statement contains a magic number: cs = new CryptoStream (fsCrypt' RMCrypto.CreateEncryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Write);  
Magic Number,Bitmessage,Crypt,C:\repos\AyrA_BitMarket\Bitmessage\clsCrypt.cs,Decrypt,The following statement contains a magic number: try {  	cs = new CryptoStream (fsIn' RMCrypto.CreateDecryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Read);  }  catch {  	if (fsIn != null) {  		fsIn.Close ();  		fsIn.Dispose ();  	}  }  
Magic Number,Bitmessage,Crypt,C:\repos\AyrA_BitMarket\Bitmessage\clsCrypt.cs,Decrypt,The following statement contains a magic number: try {  	cs = new CryptoStream (fsIn' RMCrypto.CreateDecryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Read);  }  catch {  	if (fsIn != null) {  		fsIn.Close ();  		fsIn.Dispose ();  	}  }  
Magic Number,Bitmessage,Crypt,C:\repos\AyrA_BitMarket\Bitmessage\clsCrypt.cs,Decrypt,The following statement contains a magic number: cs = new CryptoStream (fsIn' RMCrypto.CreateDecryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Read);  
Magic Number,Bitmessage,Crypt,C:\repos\AyrA_BitMarket\Bitmessage\clsCrypt.cs,Decrypt,The following statement contains a magic number: cs = new CryptoStream (fsIn' RMCrypto.CreateDecryptor (getSizedByte (password' 32)' getSizedByte (password' 16))' CryptoStreamMode.Read);  
Magic Number,SQL,BitTransaction,C:\repos\AyrA_BitMarket\Bitmessage\clsBitTransaction.cs,canRate,The following statement contains a magic number: if (!Expired && (BMA == _addrBuyer || BMA == _addrSeller)) {  	//Transaction is valid for comment  	if ((int)State >= 0 && (int)State < 3) {  		return true;  	}  	if (State < 0) {  		//Transaction was rejected.  		//Can only comment if not done already  		if (BMA == _addrBuyer && (string.IsNullOrEmpty (_buyerComment) || _buyerRating == Rating.Unrated)) {  			return true;  		}  		if (BMA == _addrSeller && (string.IsNullOrEmpty (_sellerComment) || _sellerRating == Rating.Unrated)) {  			return true;  		}  	}  }  
Magic Number,SQL,BitTransaction,C:\repos\AyrA_BitMarket\Bitmessage\clsBitTransaction.cs,canRate,The following statement contains a magic number: if ((int)State >= 0 && (int)State < 3) {  	return true;  }  
Magic Number,SQL,BitTransaction,C:\repos\AyrA_BitMarket\Bitmessage\clsBitTransaction.cs,Update,The following statement contains a magic number: if ((int)State < 3 && (int)State >= 0) {  	if (State == TransactionState.Completed && !string.IsNullOrEmpty (_buyerComment) && !string.IsNullOrEmpty (_sellerComment) && _buyerRating != Rating.Unrated && _sellerRating != Rating.Unrated) {  		State = TransactionState.Commented;  	}  	else if (Expired) {  		if (State == TransactionState.Completed || State == TransactionState.Confirmed) {  			//TODO: Reset transaction after expiration  		}  	}  }  
Magic Number,SQL,BitTransaction,C:\repos\AyrA_BitMarket\Bitmessage\clsBitTransaction.cs,Reject,The following statement contains a magic number: if (!Expired) {  	if ((int)State < 2) {  		if (BMA == _addrBuyer) {  			if (State == TransactionState.RejectedBySeller) {  				State = TransactionState.RejectedByBoth;  			}  			else {  				State = TransactionState.RejectedByBuyer;  			}  		}  		else if (BMA == _addrSeller) {  			if (State == TransactionState.RejectedByBuyer) {  				State = TransactionState.RejectedByBoth;  			}  			else {  				State = TransactionState.RejectedBySeller;  			}  		}  		else {  			throw new Exception ("This is not your transaction");  		}  	}  	else {  		throw new Exception ("You cannot reject a confirmed or completed transaction");  	}  }  else {  	throw new Exception ("This transaction has expired and can no longer be rejected");  }  
Magic Number,SQL,BitTransaction,C:\repos\AyrA_BitMarket\Bitmessage\clsBitTransaction.cs,Reject,The following statement contains a magic number: if ((int)State < 2) {  	if (BMA == _addrBuyer) {  		if (State == TransactionState.RejectedBySeller) {  			State = TransactionState.RejectedByBoth;  		}  		else {  			State = TransactionState.RejectedByBuyer;  		}  	}  	else if (BMA == _addrSeller) {  		if (State == TransactionState.RejectedByBuyer) {  			State = TransactionState.RejectedByBoth;  		}  		else {  			State = TransactionState.RejectedBySeller;  		}  	}  	else {  		throw new Exception ("This is not your transaction");  	}  }  else {  	throw new Exception ("You cannot reject a confirmed or completed transaction");  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseRating,The following statement contains a magic number: if (Parts.Length == 3) {  	switch (Parts [2].ToUpper ()) {  	case "GET":  		StringBuilder Ratings = new StringBuilder ();  		SQLRow[] Rows;  		Rows = MarketInterface.ExecReader ("SELECT * FROM BitTransaction WHERE AddressBuyer=?"' new object[] {  			Parts [1]  		});  		foreach (SQLRow r in Rows) {  			Ratings.AppendFormat ("{0}\t{1}\t{2}\t{3}\r\n"' (int)r.Values ["State"]' r.Values ["AddressSeller"].ToString ()' (int)r.Values ["SellerRating"]' Base.B64enc (r.Values ["SellerComment"].ToString ()));  		}  		Rows = MarketInterface.ExecReader ("SELECT * FROM BitTransaction WHERE AddressSeller=?"' new object[] {  			Parts [1]  		});  		foreach (SQLRow r in Rows) {  			Ratings.AppendFormat ("{0}\t{1}\t{2}\t{3}\r\n"' (int)r.Values ["State"]' r.Values ["AddressBuyer"].ToString ()' (int)r.Values ["BuyerRating"]' Base.B64enc (r.Values ["BuyerComment"].ToString ()));  		}  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = M.Command'  			RawContent = Ratings.ToString ()'  			Server = M.Server  		});  		break;  	default:  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "invalid RATING command"'  			Server = M.Server  		});  		break;  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseRating,The following statement contains a magic number: if (Parts.Length == 3) {  	switch (Parts [2].ToUpper ()) {  	case "GET":  		StringBuilder Ratings = new StringBuilder ();  		SQLRow[] Rows;  		Rows = MarketInterface.ExecReader ("SELECT * FROM BitTransaction WHERE AddressBuyer=?"' new object[] {  			Parts [1]  		});  		foreach (SQLRow r in Rows) {  			Ratings.AppendFormat ("{0}\t{1}\t{2}\t{3}\r\n"' (int)r.Values ["State"]' r.Values ["AddressSeller"].ToString ()' (int)r.Values ["SellerRating"]' Base.B64enc (r.Values ["SellerComment"].ToString ()));  		}  		Rows = MarketInterface.ExecReader ("SELECT * FROM BitTransaction WHERE AddressSeller=?"' new object[] {  			Parts [1]  		});  		foreach (SQLRow r in Rows) {  			Ratings.AppendFormat ("{0}\t{1}\t{2}\t{3}\r\n"' (int)r.Values ["State"]' r.Values ["AddressBuyer"].ToString ()' (int)r.Values ["BuyerRating"]' Base.B64enc (r.Values ["BuyerComment"].ToString ()));  		}  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = M.Command'  			RawContent = Ratings.ToString ()'  			Server = M.Server  		});  		break;  	default:  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "invalid RATING command"'  			Server = M.Server  		});  		break;  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseRating,The following statement contains a magic number: switch (Parts [2].ToUpper ()) {  case "GET":  	StringBuilder Ratings = new StringBuilder ();  	SQLRow[] Rows;  	Rows = MarketInterface.ExecReader ("SELECT * FROM BitTransaction WHERE AddressBuyer=?"' new object[] {  		Parts [1]  	});  	foreach (SQLRow r in Rows) {  		Ratings.AppendFormat ("{0}\t{1}\t{2}\t{3}\r\n"' (int)r.Values ["State"]' r.Values ["AddressSeller"].ToString ()' (int)r.Values ["SellerRating"]' Base.B64enc (r.Values ["SellerComment"].ToString ()));  	}  	Rows = MarketInterface.ExecReader ("SELECT * FROM BitTransaction WHERE AddressSeller=?"' new object[] {  		Parts [1]  	});  	foreach (SQLRow r in Rows) {  		Ratings.AppendFormat ("{0}\t{1}\t{2}\t{3}\r\n"' (int)r.Values ["State"]' r.Values ["AddressBuyer"].ToString ()' (int)r.Values ["BuyerRating"]' Base.B64enc (r.Values ["BuyerComment"].ToString ()));  	}  	sendMsg (new GenericMessage () {  		Receiver = M.Sender'  		Command = M.Command'  		RawContent = Ratings.ToString ()'  		Server = M.Server  	});  	break;  default:  	sendErr (new GenericMessage () {  		Receiver = M.Sender'  		RawContent = "invalid RATING command"'  		Server = M.Server  	});  	break;  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseTransaction,The following statement contains a magic number: if (Parts.Length == 3) {  	int index = -1;  	if (int.TryParse (Parts [1]' out index)) {  		BitTransaction BT = null;  		try {  			//check if transaction exists and if user is member of it.  			BT = new BitTransaction (index);  			if (BT.AddressBuyer != M.Sender && BT.AddressSeller != M.Sender) {  				throw new Exception ("CRAP!");  			}  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "invalid transaction ID"'  				Server = M.Server  			});  			return;  		}  		switch (Parts [2].ToUpper ()) {  		case "GET":  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = M.Command'  				RawContent = string.Format (@"AddressBuyer={0} AddressSeller={1} Amount={2} Offer={3} State={4} BuyerComment={5} BuyerRating={6} SellerComment={7} SellerRating={8} TransactionTime={9}"' BT.AddressBuyer' BT.AddressSeller' BT.Offer' (int)BT.State' BT.Amount' Base.B64enc (BT.BuyerComment)' (int)BT.BuyerRating' Base.B64enc (BT.SellerComment)' (int)BT.SellerRating' BT.TransactionTime.ToString (Base.DT_FORMAT))'  				Server = M.Server  			});  			break;  		case "CONFIRM":  			try {  				BT.Confirm (M.Sender);  			}  			catch (Exception ex) {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "cannot confirm transaction: " + ex.Message'  					Server = M.Server  				});  				break;  			}  			GenericMessage Clone1 = M.Clone ();  			Clone1.Command = "TRANSACTION " + BT.Index.ToString () + " GET";  			Clone1.Sender = BT.AddressSeller;  			parseTransaction (Clone1);  			Clone1.Sender = BT.AddressBuyer;  			parseTransaction (Clone1);  			break;  		case "REJECT":  			try {  				BT.Reject (M.Sender);  			}  			catch (Exception ex) {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "cannot reject transaction: " + ex.Message'  					Server = M.Server  				});  				break;  			}  			GenericMessage Clone2 = M.Clone ();  			Clone2.Command = "TRANSACTION " + BT.Index.ToString () + " GET";  			Clone2.Sender = BT.AddressSeller;  			parseTransaction (Clone2);  			Clone2.Sender = BT.AddressBuyer;  			parseTransaction (Clone2);  			break;  		case "COMMENT":  			var NVC = Base.ParseContent (M.RawContent);  			if (BT.canRate (M.Sender)) {  				try {  					if (!string.IsNullOrEmpty (NVC ["Comment"])) {  						BT.Comment (M.Sender' Base.B64dec (NVC ["Comment"]));  					}  					if (!string.IsNullOrEmpty (NVC ["Rating"])) {  						BT.Rate (M.Sender' (Rating)int.Parse (NVC ["Rating"]));  					}  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "The value for 'Comment' or 'Rating' is invalid"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "You cannot rate the given transaction"'  					Server = M.Server  				});  			}  			break;  		default:  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "invalid TRANSACTION command"'  				Server = M.Server  			});  			break;  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseTransaction,The following statement contains a magic number: if (Parts.Length == 3) {  	int index = -1;  	if (int.TryParse (Parts [1]' out index)) {  		BitTransaction BT = null;  		try {  			//check if transaction exists and if user is member of it.  			BT = new BitTransaction (index);  			if (BT.AddressBuyer != M.Sender && BT.AddressSeller != M.Sender) {  				throw new Exception ("CRAP!");  			}  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "invalid transaction ID"'  				Server = M.Server  			});  			return;  		}  		switch (Parts [2].ToUpper ()) {  		case "GET":  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = M.Command'  				RawContent = string.Format (@"AddressBuyer={0} AddressSeller={1} Amount={2} Offer={3} State={4} BuyerComment={5} BuyerRating={6} SellerComment={7} SellerRating={8} TransactionTime={9}"' BT.AddressBuyer' BT.AddressSeller' BT.Offer' (int)BT.State' BT.Amount' Base.B64enc (BT.BuyerComment)' (int)BT.BuyerRating' Base.B64enc (BT.SellerComment)' (int)BT.SellerRating' BT.TransactionTime.ToString (Base.DT_FORMAT))'  				Server = M.Server  			});  			break;  		case "CONFIRM":  			try {  				BT.Confirm (M.Sender);  			}  			catch (Exception ex) {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "cannot confirm transaction: " + ex.Message'  					Server = M.Server  				});  				break;  			}  			GenericMessage Clone1 = M.Clone ();  			Clone1.Command = "TRANSACTION " + BT.Index.ToString () + " GET";  			Clone1.Sender = BT.AddressSeller;  			parseTransaction (Clone1);  			Clone1.Sender = BT.AddressBuyer;  			parseTransaction (Clone1);  			break;  		case "REJECT":  			try {  				BT.Reject (M.Sender);  			}  			catch (Exception ex) {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "cannot reject transaction: " + ex.Message'  					Server = M.Server  				});  				break;  			}  			GenericMessage Clone2 = M.Clone ();  			Clone2.Command = "TRANSACTION " + BT.Index.ToString () + " GET";  			Clone2.Sender = BT.AddressSeller;  			parseTransaction (Clone2);  			Clone2.Sender = BT.AddressBuyer;  			parseTransaction (Clone2);  			break;  		case "COMMENT":  			var NVC = Base.ParseContent (M.RawContent);  			if (BT.canRate (M.Sender)) {  				try {  					if (!string.IsNullOrEmpty (NVC ["Comment"])) {  						BT.Comment (M.Sender' Base.B64dec (NVC ["Comment"]));  					}  					if (!string.IsNullOrEmpty (NVC ["Rating"])) {  						BT.Rate (M.Sender' (Rating)int.Parse (NVC ["Rating"]));  					}  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "The value for 'Comment' or 'Rating' is invalid"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "You cannot rate the given transaction"'  					Server = M.Server  				});  			}  			break;  		default:  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "invalid TRANSACTION command"'  				Server = M.Server  			});  			break;  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseTransaction,The following statement contains a magic number: if (int.TryParse (Parts [1]' out index)) {  	BitTransaction BT = null;  	try {  		//check if transaction exists and if user is member of it.  		BT = new BitTransaction (index);  		if (BT.AddressBuyer != M.Sender && BT.AddressSeller != M.Sender) {  			throw new Exception ("CRAP!");  		}  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "invalid transaction ID"'  			Server = M.Server  		});  		return;  	}  	switch (Parts [2].ToUpper ()) {  	case "GET":  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = M.Command'  			RawContent = string.Format (@"AddressBuyer={0} AddressSeller={1} Amount={2} Offer={3} State={4} BuyerComment={5} BuyerRating={6} SellerComment={7} SellerRating={8} TransactionTime={9}"' BT.AddressBuyer' BT.AddressSeller' BT.Offer' (int)BT.State' BT.Amount' Base.B64enc (BT.BuyerComment)' (int)BT.BuyerRating' Base.B64enc (BT.SellerComment)' (int)BT.SellerRating' BT.TransactionTime.ToString (Base.DT_FORMAT))'  			Server = M.Server  		});  		break;  	case "CONFIRM":  		try {  			BT.Confirm (M.Sender);  		}  		catch (Exception ex) {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "cannot confirm transaction: " + ex.Message'  				Server = M.Server  			});  			break;  		}  		GenericMessage Clone1 = M.Clone ();  		Clone1.Command = "TRANSACTION " + BT.Index.ToString () + " GET";  		Clone1.Sender = BT.AddressSeller;  		parseTransaction (Clone1);  		Clone1.Sender = BT.AddressBuyer;  		parseTransaction (Clone1);  		break;  	case "REJECT":  		try {  			BT.Reject (M.Sender);  		}  		catch (Exception ex) {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "cannot reject transaction: " + ex.Message'  				Server = M.Server  			});  			break;  		}  		GenericMessage Clone2 = M.Clone ();  		Clone2.Command = "TRANSACTION " + BT.Index.ToString () + " GET";  		Clone2.Sender = BT.AddressSeller;  		parseTransaction (Clone2);  		Clone2.Sender = BT.AddressBuyer;  		parseTransaction (Clone2);  		break;  	case "COMMENT":  		var NVC = Base.ParseContent (M.RawContent);  		if (BT.canRate (M.Sender)) {  			try {  				if (!string.IsNullOrEmpty (NVC ["Comment"])) {  					BT.Comment (M.Sender' Base.B64dec (NVC ["Comment"]));  				}  				if (!string.IsNullOrEmpty (NVC ["Rating"])) {  					BT.Rate (M.Sender' (Rating)int.Parse (NVC ["Rating"]));  				}  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "The value for 'Comment' or 'Rating' is invalid"'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "You cannot rate the given transaction"'  				Server = M.Server  			});  		}  		break;  	default:  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "invalid TRANSACTION command"'  			Server = M.Server  		});  		break;  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseTransaction,The following statement contains a magic number: switch (Parts [2].ToUpper ()) {  case "GET":  	sendMsg (new GenericMessage () {  		Receiver = M.Sender'  		Command = M.Command'  		RawContent = string.Format (@"AddressBuyer={0} AddressSeller={1} Amount={2} Offer={3} State={4} BuyerComment={5} BuyerRating={6} SellerComment={7} SellerRating={8} TransactionTime={9}"' BT.AddressBuyer' BT.AddressSeller' BT.Offer' (int)BT.State' BT.Amount' Base.B64enc (BT.BuyerComment)' (int)BT.BuyerRating' Base.B64enc (BT.SellerComment)' (int)BT.SellerRating' BT.TransactionTime.ToString (Base.DT_FORMAT))'  		Server = M.Server  	});  	break;  case "CONFIRM":  	try {  		BT.Confirm (M.Sender);  	}  	catch (Exception ex) {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "cannot confirm transaction: " + ex.Message'  			Server = M.Server  		});  		break;  	}  	GenericMessage Clone1 = M.Clone ();  	Clone1.Command = "TRANSACTION " + BT.Index.ToString () + " GET";  	Clone1.Sender = BT.AddressSeller;  	parseTransaction (Clone1);  	Clone1.Sender = BT.AddressBuyer;  	parseTransaction (Clone1);  	break;  case "REJECT":  	try {  		BT.Reject (M.Sender);  	}  	catch (Exception ex) {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "cannot reject transaction: " + ex.Message'  			Server = M.Server  		});  		break;  	}  	GenericMessage Clone2 = M.Clone ();  	Clone2.Command = "TRANSACTION " + BT.Index.ToString () + " GET";  	Clone2.Sender = BT.AddressSeller;  	parseTransaction (Clone2);  	Clone2.Sender = BT.AddressBuyer;  	parseTransaction (Clone2);  	break;  case "COMMENT":  	var NVC = Base.ParseContent (M.RawContent);  	if (BT.canRate (M.Sender)) {  		try {  			if (!string.IsNullOrEmpty (NVC ["Comment"])) {  				BT.Comment (M.Sender' Base.B64dec (NVC ["Comment"]));  			}  			if (!string.IsNullOrEmpty (NVC ["Rating"])) {  				BT.Rate (M.Sender' (Rating)int.Parse (NVC ["Rating"]));  			}  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "The value for 'Comment' or 'Rating' is invalid"'  				Server = M.Server  			});  		}  	}  	else {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "You cannot rate the given transaction"'  			Server = M.Server  		});  	}  	break;  default:  	sendErr (new GenericMessage () {  		Receiver = M.Sender'  		RawContent = "invalid TRANSACTION command"'  		Server = M.Server  	});  	break;  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseFile,The following statement contains a magic number: if (Parts.Length == 3) {  	int index = -1;  	if (int.TryParse (Parts [1]' out index)) {  		switch (Parts [2].ToUpper ()) {  		case "GET":  			try {  				BitFile BF = new BitFile (index);  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "FILE"'  					RawContent = string.Format ("ID={0}\nNAME={1}\nCONTENT={2}"' BF.Index' BF.Name' A85 (BF.Contents))'  					Server = M.Server  				});  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "File not found"'  					Server = M.Server  				});  			}  			break;  		case "SET":  			if (index >= 0) {  				BitFile BF;  				//edit File contents  				try {  					BF = new BitFile (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "File not found"'  						Server = M.Server  					});  					break;  				}  				if (BF.Address == M.Sender) {  					string Name = getValue (M.RawContent' "NAME");  					byte[] content = A85 (M.RawContent);  					if (!string.IsNullOrEmpty (Name)) {  						BF.Name = Name;  						if (BF.Name == Name) {  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = "FILE"'  								RawContent = "File renamed"'  								Server = M.Server  							});  						}  						else {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Invalid file name"'  								Server = M.Server  							});  						}  					}  					if (content != null && !Base.compare (BF.Contents' content)) {  						BF.Contents = content;  						if (Base.compare (BF.Contents' content)) {  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = "FILE"'  								RawContent = "File contents updated"'  								Server = M.Server  							});  						}  						else {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Cannot update file contents"'  								Server = M.Server  							});  						}  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid or empty A85 encoding"'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Access denied for" + M.Sender'  						Server = M.Server  					});  				}  			}  			else {  				//new file  				string Name = getValue (M.RawContent' "NAME");  				byte[] content = A85 (M.RawContent);  				if (!string.IsNullOrEmpty (Name) && content != null) {  					BitFile BF = new BitFile ();  					BF.Name = Name;  					BF.Contents = content;  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "FILE"'  						RawContent = string.Format ("ID={0}\nNAME={1}"' BF.Index' BF.Name)'  						Server = M.Server  					});  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid File name or A85 contents"'  						Server = M.Server  					});  				}  			}  			break;  		case "DEL":  			if (index >= 0) {  				try {  					BitFile BF = new BitFile (index);  					if (BF.Address == M.Sender) {  						BF.Kill ();  						BF = null;  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "FILE"'  							RawContent = "File deleted"'  							Server = M.Server  						});  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Access denied for " + M.Sender'  							Server = M.Server  						});  					}  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "File not found"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "File not found"'  					Server = M.Server  				});  			}  			break;  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseFile,The following statement contains a magic number: if (Parts.Length == 3) {  	int index = -1;  	if (int.TryParse (Parts [1]' out index)) {  		switch (Parts [2].ToUpper ()) {  		case "GET":  			try {  				BitFile BF = new BitFile (index);  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "FILE"'  					RawContent = string.Format ("ID={0}\nNAME={1}\nCONTENT={2}"' BF.Index' BF.Name' A85 (BF.Contents))'  					Server = M.Server  				});  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "File not found"'  					Server = M.Server  				});  			}  			break;  		case "SET":  			if (index >= 0) {  				BitFile BF;  				//edit File contents  				try {  					BF = new BitFile (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "File not found"'  						Server = M.Server  					});  					break;  				}  				if (BF.Address == M.Sender) {  					string Name = getValue (M.RawContent' "NAME");  					byte[] content = A85 (M.RawContent);  					if (!string.IsNullOrEmpty (Name)) {  						BF.Name = Name;  						if (BF.Name == Name) {  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = "FILE"'  								RawContent = "File renamed"'  								Server = M.Server  							});  						}  						else {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Invalid file name"'  								Server = M.Server  							});  						}  					}  					if (content != null && !Base.compare (BF.Contents' content)) {  						BF.Contents = content;  						if (Base.compare (BF.Contents' content)) {  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = "FILE"'  								RawContent = "File contents updated"'  								Server = M.Server  							});  						}  						else {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Cannot update file contents"'  								Server = M.Server  							});  						}  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid or empty A85 encoding"'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Access denied for" + M.Sender'  						Server = M.Server  					});  				}  			}  			else {  				//new file  				string Name = getValue (M.RawContent' "NAME");  				byte[] content = A85 (M.RawContent);  				if (!string.IsNullOrEmpty (Name) && content != null) {  					BitFile BF = new BitFile ();  					BF.Name = Name;  					BF.Contents = content;  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "FILE"'  						RawContent = string.Format ("ID={0}\nNAME={1}"' BF.Index' BF.Name)'  						Server = M.Server  					});  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid File name or A85 contents"'  						Server = M.Server  					});  				}  			}  			break;  		case "DEL":  			if (index >= 0) {  				try {  					BitFile BF = new BitFile (index);  					if (BF.Address == M.Sender) {  						BF.Kill ();  						BF = null;  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "FILE"'  							RawContent = "File deleted"'  							Server = M.Server  						});  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Access denied for " + M.Sender'  							Server = M.Server  						});  					}  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "File not found"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "File not found"'  					Server = M.Server  				});  			}  			break;  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseFile,The following statement contains a magic number: if (int.TryParse (Parts [1]' out index)) {  	switch (Parts [2].ToUpper ()) {  	case "GET":  		try {  			BitFile BF = new BitFile (index);  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = "FILE"'  				RawContent = string.Format ("ID={0}\nNAME={1}\nCONTENT={2}"' BF.Index' BF.Name' A85 (BF.Contents))'  				Server = M.Server  			});  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "File not found"'  				Server = M.Server  			});  		}  		break;  	case "SET":  		if (index >= 0) {  			BitFile BF;  			//edit File contents  			try {  				BF = new BitFile (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "File not found"'  					Server = M.Server  				});  				break;  			}  			if (BF.Address == M.Sender) {  				string Name = getValue (M.RawContent' "NAME");  				byte[] content = A85 (M.RawContent);  				if (!string.IsNullOrEmpty (Name)) {  					BF.Name = Name;  					if (BF.Name == Name) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "FILE"'  							RawContent = "File renamed"'  							Server = M.Server  						});  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid file name"'  							Server = M.Server  						});  					}  				}  				if (content != null && !Base.compare (BF.Contents' content)) {  					BF.Contents = content;  					if (Base.compare (BF.Contents' content)) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "FILE"'  							RawContent = "File contents updated"'  							Server = M.Server  						});  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Cannot update file contents"'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid or empty A85 encoding"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Access denied for" + M.Sender'  					Server = M.Server  				});  			}  		}  		else {  			//new file  			string Name = getValue (M.RawContent' "NAME");  			byte[] content = A85 (M.RawContent);  			if (!string.IsNullOrEmpty (Name) && content != null) {  				BitFile BF = new BitFile ();  				BF.Name = Name;  				BF.Contents = content;  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "FILE"'  					RawContent = string.Format ("ID={0}\nNAME={1}"' BF.Index' BF.Name)'  					Server = M.Server  				});  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid File name or A85 contents"'  					Server = M.Server  				});  			}  		}  		break;  	case "DEL":  		if (index >= 0) {  			try {  				BitFile BF = new BitFile (index);  				if (BF.Address == M.Sender) {  					BF.Kill ();  					BF = null;  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "FILE"'  						RawContent = "File deleted"'  						Server = M.Server  					});  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Access denied for " + M.Sender'  						Server = M.Server  					});  				}  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "File not found"'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "File not found"'  				Server = M.Server  			});  		}  		break;  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseFile,The following statement contains a magic number: switch (Parts [2].ToUpper ()) {  case "GET":  	try {  		BitFile BF = new BitFile (index);  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = "FILE"'  			RawContent = string.Format ("ID={0}\nNAME={1}\nCONTENT={2}"' BF.Index' BF.Name' A85 (BF.Contents))'  			Server = M.Server  		});  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "File not found"'  			Server = M.Server  		});  	}  	break;  case "SET":  	if (index >= 0) {  		BitFile BF;  		//edit File contents  		try {  			BF = new BitFile (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "File not found"'  				Server = M.Server  			});  			break;  		}  		if (BF.Address == M.Sender) {  			string Name = getValue (M.RawContent' "NAME");  			byte[] content = A85 (M.RawContent);  			if (!string.IsNullOrEmpty (Name)) {  				BF.Name = Name;  				if (BF.Name == Name) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "FILE"'  						RawContent = "File renamed"'  						Server = M.Server  					});  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid file name"'  						Server = M.Server  					});  				}  			}  			if (content != null && !Base.compare (BF.Contents' content)) {  				BF.Contents = content;  				if (Base.compare (BF.Contents' content)) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "FILE"'  						RawContent = "File contents updated"'  						Server = M.Server  					});  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Cannot update file contents"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid or empty A85 encoding"'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Access denied for" + M.Sender'  				Server = M.Server  			});  		}  	}  	else {  		//new file  		string Name = getValue (M.RawContent' "NAME");  		byte[] content = A85 (M.RawContent);  		if (!string.IsNullOrEmpty (Name) && content != null) {  			BitFile BF = new BitFile ();  			BF.Name = Name;  			BF.Contents = content;  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = "FILE"'  				RawContent = string.Format ("ID={0}\nNAME={1}"' BF.Index' BF.Name)'  				Server = M.Server  			});  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid File name or A85 contents"'  				Server = M.Server  			});  		}  	}  	break;  case "DEL":  	if (index >= 0) {  		try {  			BitFile BF = new BitFile (index);  			if (BF.Address == M.Sender) {  				BF.Kill ();  				BF = null;  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "FILE"'  					RawContent = "File deleted"'  					Server = M.Server  				});  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Access denied for " + M.Sender'  					Server = M.Server  				});  			}  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "File not found"'  				Server = M.Server  			});  		}  	}  	else {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "File not found"'  			Server = M.Server  		});  	}  	break;  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (Parts.Length == 3) {  	int index = -1;  	if (int.TryParse (Parts [1]' out index)) {  		BitOffer BO;  		switch (Parts [2].ToUpper ()) {  		case "GET":  			try {  				BO = new BitOffer (index);  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = M.Command'  					RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  					Server = M.Server  				});  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  			}  			break;  		case "SET":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address == M.Sender) {  					if (setOffer (BO' M)) {  						if (BO.Category == -2) {  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = "OFFER " + BO.Index.ToString () + " SET"'  								RawContent = BO.Index.ToString ()'  								Server = M.Server  							});  						}  						else {  							sendBroadcast (new GenericMessage () {  								Command = "OFFER " + BO.Index.ToString () + " SET"'  								RawContent = BO.Index.ToString ()'  								Server = M.Server  							});  						}  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "This is not your offer. You cannot modify it"'  						Server = M.Server  					});  				}  			}  			else {  				//new offer  				BO = new BitOffer ();  				if (setOffer (BO' M)) {  					if (BO.Category == -2) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER -1 SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER -1 SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  				}  			}  			break;  		case "DEL":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address == M.Sender) {  					bool hidden = BO.Category == -2;  					BO.Kill ();  					if (hidden) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER " + index.ToString () + " DEL"'  							RawContent = index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER " + index.ToString () + " DEL"'  							RawContent = index.ToString ()'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "This is not your offer. You cannot modify it"'  						Server = M.Server  					});  				}  			}  			break;  		case "BUY":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address != M.Sender) {  					var NVC = Base.ParseContent (M.RawContent);  					int amount' understock;  					//check if valid amount  					if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  						//check or create underStock  						if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  							if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  								sendErr (new GenericMessage () {  									Receiver = M.Sender'  									RawContent = "Invalid UnderStock value"'  									Server = M.Server  								});  								break;  							}  						}  						else {  							understock = amount;  						}  						if (BO.CanBuy (amount' understock)) {  							BitTransaction BT = BO.Buy (amount' understock);  							if (BT != null) {  								BT.AddressBuyer = M.Sender;  								sendMsg (new GenericMessage () {  									Receiver = M.Sender'  									Command = M.Command'  									RawContent = BT.Index.ToString ()'  									Server = M.Server  								});  								sendMsg (new GenericMessage () {  									Receiver = BT.AddressSeller'  									Command = M.Command'  									RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  									Server = M.Server  								});  							}  							else {  								sendErr (new GenericMessage () {  									Receiver = M.Sender'  									RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  									Server = M.Server  								});  							}  						}  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid stock amount"'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "You cannot buy your own stuff"'  						Server = M.Server  					});  				}  			}  			break;  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (Parts.Length == 3) {  	int index = -1;  	if (int.TryParse (Parts [1]' out index)) {  		BitOffer BO;  		switch (Parts [2].ToUpper ()) {  		case "GET":  			try {  				BO = new BitOffer (index);  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = M.Command'  					RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  					Server = M.Server  				});  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  			}  			break;  		case "SET":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address == M.Sender) {  					if (setOffer (BO' M)) {  						if (BO.Category == -2) {  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = "OFFER " + BO.Index.ToString () + " SET"'  								RawContent = BO.Index.ToString ()'  								Server = M.Server  							});  						}  						else {  							sendBroadcast (new GenericMessage () {  								Command = "OFFER " + BO.Index.ToString () + " SET"'  								RawContent = BO.Index.ToString ()'  								Server = M.Server  							});  						}  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "This is not your offer. You cannot modify it"'  						Server = M.Server  					});  				}  			}  			else {  				//new offer  				BO = new BitOffer ();  				if (setOffer (BO' M)) {  					if (BO.Category == -2) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER -1 SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER -1 SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  				}  			}  			break;  		case "DEL":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address == M.Sender) {  					bool hidden = BO.Category == -2;  					BO.Kill ();  					if (hidden) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER " + index.ToString () + " DEL"'  							RawContent = index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER " + index.ToString () + " DEL"'  							RawContent = index.ToString ()'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "This is not your offer. You cannot modify it"'  						Server = M.Server  					});  				}  			}  			break;  		case "BUY":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address != M.Sender) {  					var NVC = Base.ParseContent (M.RawContent);  					int amount' understock;  					//check if valid amount  					if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  						//check or create underStock  						if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  							if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  								sendErr (new GenericMessage () {  									Receiver = M.Sender'  									RawContent = "Invalid UnderStock value"'  									Server = M.Server  								});  								break;  							}  						}  						else {  							understock = amount;  						}  						if (BO.CanBuy (amount' understock)) {  							BitTransaction BT = BO.Buy (amount' understock);  							if (BT != null) {  								BT.AddressBuyer = M.Sender;  								sendMsg (new GenericMessage () {  									Receiver = M.Sender'  									Command = M.Command'  									RawContent = BT.Index.ToString ()'  									Server = M.Server  								});  								sendMsg (new GenericMessage () {  									Receiver = BT.AddressSeller'  									Command = M.Command'  									RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  									Server = M.Server  								});  							}  							else {  								sendErr (new GenericMessage () {  									Receiver = M.Sender'  									RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  									Server = M.Server  								});  							}  						}  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid stock amount"'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "You cannot buy your own stuff"'  						Server = M.Server  					});  				}  			}  			break;  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (Parts.Length == 3) {  	int index = -1;  	if (int.TryParse (Parts [1]' out index)) {  		BitOffer BO;  		switch (Parts [2].ToUpper ()) {  		case "GET":  			try {  				BO = new BitOffer (index);  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = M.Command'  					RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  					Server = M.Server  				});  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  			}  			break;  		case "SET":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address == M.Sender) {  					if (setOffer (BO' M)) {  						if (BO.Category == -2) {  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = "OFFER " + BO.Index.ToString () + " SET"'  								RawContent = BO.Index.ToString ()'  								Server = M.Server  							});  						}  						else {  							sendBroadcast (new GenericMessage () {  								Command = "OFFER " + BO.Index.ToString () + " SET"'  								RawContent = BO.Index.ToString ()'  								Server = M.Server  							});  						}  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "This is not your offer. You cannot modify it"'  						Server = M.Server  					});  				}  			}  			else {  				//new offer  				BO = new BitOffer ();  				if (setOffer (BO' M)) {  					if (BO.Category == -2) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER -1 SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER -1 SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  				}  			}  			break;  		case "DEL":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address == M.Sender) {  					bool hidden = BO.Category == -2;  					BO.Kill ();  					if (hidden) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER " + index.ToString () + " DEL"'  							RawContent = index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER " + index.ToString () + " DEL"'  							RawContent = index.ToString ()'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "This is not your offer. You cannot modify it"'  						Server = M.Server  					});  				}  			}  			break;  		case "BUY":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address != M.Sender) {  					var NVC = Base.ParseContent (M.RawContent);  					int amount' understock;  					//check if valid amount  					if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  						//check or create underStock  						if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  							if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  								sendErr (new GenericMessage () {  									Receiver = M.Sender'  									RawContent = "Invalid UnderStock value"'  									Server = M.Server  								});  								break;  							}  						}  						else {  							understock = amount;  						}  						if (BO.CanBuy (amount' understock)) {  							BitTransaction BT = BO.Buy (amount' understock);  							if (BT != null) {  								BT.AddressBuyer = M.Sender;  								sendMsg (new GenericMessage () {  									Receiver = M.Sender'  									Command = M.Command'  									RawContent = BT.Index.ToString ()'  									Server = M.Server  								});  								sendMsg (new GenericMessage () {  									Receiver = BT.AddressSeller'  									Command = M.Command'  									RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  									Server = M.Server  								});  							}  							else {  								sendErr (new GenericMessage () {  									Receiver = M.Sender'  									RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  									Server = M.Server  								});  							}  						}  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid stock amount"'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "You cannot buy your own stuff"'  						Server = M.Server  					});  				}  			}  			break;  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (Parts.Length == 3) {  	int index = -1;  	if (int.TryParse (Parts [1]' out index)) {  		BitOffer BO;  		switch (Parts [2].ToUpper ()) {  		case "GET":  			try {  				BO = new BitOffer (index);  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = M.Command'  					RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  					Server = M.Server  				});  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  			}  			break;  		case "SET":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address == M.Sender) {  					if (setOffer (BO' M)) {  						if (BO.Category == -2) {  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = "OFFER " + BO.Index.ToString () + " SET"'  								RawContent = BO.Index.ToString ()'  								Server = M.Server  							});  						}  						else {  							sendBroadcast (new GenericMessage () {  								Command = "OFFER " + BO.Index.ToString () + " SET"'  								RawContent = BO.Index.ToString ()'  								Server = M.Server  							});  						}  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "This is not your offer. You cannot modify it"'  						Server = M.Server  					});  				}  			}  			else {  				//new offer  				BO = new BitOffer ();  				if (setOffer (BO' M)) {  					if (BO.Category == -2) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER -1 SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER -1 SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  				}  			}  			break;  		case "DEL":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address == M.Sender) {  					bool hidden = BO.Category == -2;  					BO.Kill ();  					if (hidden) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER " + index.ToString () + " DEL"'  							RawContent = index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER " + index.ToString () + " DEL"'  							RawContent = index.ToString ()'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "This is not your offer. You cannot modify it"'  						Server = M.Server  					});  				}  			}  			break;  		case "BUY":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address != M.Sender) {  					var NVC = Base.ParseContent (M.RawContent);  					int amount' understock;  					//check if valid amount  					if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  						//check or create underStock  						if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  							if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  								sendErr (new GenericMessage () {  									Receiver = M.Sender'  									RawContent = "Invalid UnderStock value"'  									Server = M.Server  								});  								break;  							}  						}  						else {  							understock = amount;  						}  						if (BO.CanBuy (amount' understock)) {  							BitTransaction BT = BO.Buy (amount' understock);  							if (BT != null) {  								BT.AddressBuyer = M.Sender;  								sendMsg (new GenericMessage () {  									Receiver = M.Sender'  									Command = M.Command'  									RawContent = BT.Index.ToString ()'  									Server = M.Server  								});  								sendMsg (new GenericMessage () {  									Receiver = BT.AddressSeller'  									Command = M.Command'  									RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  									Server = M.Server  								});  							}  							else {  								sendErr (new GenericMessage () {  									Receiver = M.Sender'  									RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  									Server = M.Server  								});  							}  						}  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid stock amount"'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "You cannot buy your own stuff"'  						Server = M.Server  					});  				}  			}  			break;  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (Parts.Length == 3) {  	int index = -1;  	if (int.TryParse (Parts [1]' out index)) {  		BitOffer BO;  		switch (Parts [2].ToUpper ()) {  		case "GET":  			try {  				BO = new BitOffer (index);  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = M.Command'  					RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  					Server = M.Server  				});  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  			}  			break;  		case "SET":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address == M.Sender) {  					if (setOffer (BO' M)) {  						if (BO.Category == -2) {  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = "OFFER " + BO.Index.ToString () + " SET"'  								RawContent = BO.Index.ToString ()'  								Server = M.Server  							});  						}  						else {  							sendBroadcast (new GenericMessage () {  								Command = "OFFER " + BO.Index.ToString () + " SET"'  								RawContent = BO.Index.ToString ()'  								Server = M.Server  							});  						}  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "This is not your offer. You cannot modify it"'  						Server = M.Server  					});  				}  			}  			else {  				//new offer  				BO = new BitOffer ();  				if (setOffer (BO' M)) {  					if (BO.Category == -2) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER -1 SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER -1 SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  				}  			}  			break;  		case "DEL":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address == M.Sender) {  					bool hidden = BO.Category == -2;  					BO.Kill ();  					if (hidden) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER " + index.ToString () + " DEL"'  							RawContent = index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER " + index.ToString () + " DEL"'  							RawContent = index.ToString ()'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "This is not your offer. You cannot modify it"'  						Server = M.Server  					});  				}  			}  			break;  		case "BUY":  			if (index >= 0) {  				try {  					BO = new BitOffer (index);  				}  				catch {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid Offer ID"'  						Server = M.Server  					});  					break;  				}  				if (BO.Address != M.Sender) {  					var NVC = Base.ParseContent (M.RawContent);  					int amount' understock;  					//check if valid amount  					if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  						//check or create underStock  						if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  							if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  								sendErr (new GenericMessage () {  									Receiver = M.Sender'  									RawContent = "Invalid UnderStock value"'  									Server = M.Server  								});  								break;  							}  						}  						else {  							understock = amount;  						}  						if (BO.CanBuy (amount' understock)) {  							BitTransaction BT = BO.Buy (amount' understock);  							if (BT != null) {  								BT.AddressBuyer = M.Sender;  								sendMsg (new GenericMessage () {  									Receiver = M.Sender'  									Command = M.Command'  									RawContent = BT.Index.ToString ()'  									Server = M.Server  								});  								sendMsg (new GenericMessage () {  									Receiver = BT.AddressSeller'  									Command = M.Command'  									RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  									Server = M.Server  								});  							}  							else {  								sendErr (new GenericMessage () {  									Receiver = M.Sender'  									RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  									Server = M.Server  								});  							}  						}  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid stock amount"'  							Server = M.Server  						});  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "You cannot buy your own stuff"'  						Server = M.Server  					});  				}  			}  			break;  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (int.TryParse (Parts [1]' out index)) {  	BitOffer BO;  	switch (Parts [2].ToUpper ()) {  	case "GET":  		try {  			BO = new BitOffer (index);  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = M.Command'  				RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  				Server = M.Server  			});  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  		}  		break;  	case "SET":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address == M.Sender) {  				if (setOffer (BO' M)) {  					if (BO.Category == -2) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER " + BO.Index.ToString () + " SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER " + BO.Index.ToString () + " SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "This is not your offer. You cannot modify it"'  					Server = M.Server  				});  			}  		}  		else {  			//new offer  			BO = new BitOffer ();  			if (setOffer (BO' M)) {  				if (BO.Category == -2) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER -1 SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER -1 SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  			}  		}  		break;  	case "DEL":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address == M.Sender) {  				bool hidden = BO.Category == -2;  				BO.Kill ();  				if (hidden) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER " + index.ToString () + " DEL"'  						RawContent = index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER " + index.ToString () + " DEL"'  						RawContent = index.ToString ()'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "This is not your offer. You cannot modify it"'  					Server = M.Server  				});  			}  		}  		break;  	case "BUY":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address != M.Sender) {  				var NVC = Base.ParseContent (M.RawContent);  				int amount' understock;  				//check if valid amount  				if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  					//check or create underStock  					if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  						if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Invalid UnderStock value"'  								Server = M.Server  							});  							break;  						}  					}  					else {  						understock = amount;  					}  					if (BO.CanBuy (amount' understock)) {  						BitTransaction BT = BO.Buy (amount' understock);  						if (BT != null) {  							BT.AddressBuyer = M.Sender;  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = M.Command'  								RawContent = BT.Index.ToString ()'  								Server = M.Server  							});  							sendMsg (new GenericMessage () {  								Receiver = BT.AddressSeller'  								Command = M.Command'  								RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  								Server = M.Server  							});  						}  						else {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  								Server = M.Server  							});  						}  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid stock amount"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "You cannot buy your own stuff"'  					Server = M.Server  				});  			}  		}  		break;  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (int.TryParse (Parts [1]' out index)) {  	BitOffer BO;  	switch (Parts [2].ToUpper ()) {  	case "GET":  		try {  			BO = new BitOffer (index);  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = M.Command'  				RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  				Server = M.Server  			});  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  		}  		break;  	case "SET":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address == M.Sender) {  				if (setOffer (BO' M)) {  					if (BO.Category == -2) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER " + BO.Index.ToString () + " SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER " + BO.Index.ToString () + " SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "This is not your offer. You cannot modify it"'  					Server = M.Server  				});  			}  		}  		else {  			//new offer  			BO = new BitOffer ();  			if (setOffer (BO' M)) {  				if (BO.Category == -2) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER -1 SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER -1 SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  			}  		}  		break;  	case "DEL":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address == M.Sender) {  				bool hidden = BO.Category == -2;  				BO.Kill ();  				if (hidden) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER " + index.ToString () + " DEL"'  						RawContent = index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER " + index.ToString () + " DEL"'  						RawContent = index.ToString ()'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "This is not your offer. You cannot modify it"'  					Server = M.Server  				});  			}  		}  		break;  	case "BUY":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address != M.Sender) {  				var NVC = Base.ParseContent (M.RawContent);  				int amount' understock;  				//check if valid amount  				if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  					//check or create underStock  					if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  						if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Invalid UnderStock value"'  								Server = M.Server  							});  							break;  						}  					}  					else {  						understock = amount;  					}  					if (BO.CanBuy (amount' understock)) {  						BitTransaction BT = BO.Buy (amount' understock);  						if (BT != null) {  							BT.AddressBuyer = M.Sender;  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = M.Command'  								RawContent = BT.Index.ToString ()'  								Server = M.Server  							});  							sendMsg (new GenericMessage () {  								Receiver = BT.AddressSeller'  								Command = M.Command'  								RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  								Server = M.Server  							});  						}  						else {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  								Server = M.Server  							});  						}  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid stock amount"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "You cannot buy your own stuff"'  					Server = M.Server  				});  			}  		}  		break;  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (int.TryParse (Parts [1]' out index)) {  	BitOffer BO;  	switch (Parts [2].ToUpper ()) {  	case "GET":  		try {  			BO = new BitOffer (index);  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = M.Command'  				RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  				Server = M.Server  			});  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  		}  		break;  	case "SET":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address == M.Sender) {  				if (setOffer (BO' M)) {  					if (BO.Category == -2) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER " + BO.Index.ToString () + " SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER " + BO.Index.ToString () + " SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "This is not your offer. You cannot modify it"'  					Server = M.Server  				});  			}  		}  		else {  			//new offer  			BO = new BitOffer ();  			if (setOffer (BO' M)) {  				if (BO.Category == -2) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER -1 SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER -1 SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  			}  		}  		break;  	case "DEL":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address == M.Sender) {  				bool hidden = BO.Category == -2;  				BO.Kill ();  				if (hidden) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER " + index.ToString () + " DEL"'  						RawContent = index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER " + index.ToString () + " DEL"'  						RawContent = index.ToString ()'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "This is not your offer. You cannot modify it"'  					Server = M.Server  				});  			}  		}  		break;  	case "BUY":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address != M.Sender) {  				var NVC = Base.ParseContent (M.RawContent);  				int amount' understock;  				//check if valid amount  				if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  					//check or create underStock  					if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  						if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Invalid UnderStock value"'  								Server = M.Server  							});  							break;  						}  					}  					else {  						understock = amount;  					}  					if (BO.CanBuy (amount' understock)) {  						BitTransaction BT = BO.Buy (amount' understock);  						if (BT != null) {  							BT.AddressBuyer = M.Sender;  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = M.Command'  								RawContent = BT.Index.ToString ()'  								Server = M.Server  							});  							sendMsg (new GenericMessage () {  								Receiver = BT.AddressSeller'  								Command = M.Command'  								RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  								Server = M.Server  							});  						}  						else {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  								Server = M.Server  							});  						}  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid stock amount"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "You cannot buy your own stuff"'  					Server = M.Server  				});  			}  		}  		break;  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (int.TryParse (Parts [1]' out index)) {  	BitOffer BO;  	switch (Parts [2].ToUpper ()) {  	case "GET":  		try {  			BO = new BitOffer (index);  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = M.Command'  				RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  				Server = M.Server  			});  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  		}  		break;  	case "SET":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address == M.Sender) {  				if (setOffer (BO' M)) {  					if (BO.Category == -2) {  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = "OFFER " + BO.Index.ToString () + " SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  					else {  						sendBroadcast (new GenericMessage () {  							Command = "OFFER " + BO.Index.ToString () + " SET"'  							RawContent = BO.Index.ToString ()'  							Server = M.Server  						});  					}  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "This is not your offer. You cannot modify it"'  					Server = M.Server  				});  			}  		}  		else {  			//new offer  			BO = new BitOffer ();  			if (setOffer (BO' M)) {  				if (BO.Category == -2) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER -1 SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER -1 SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  			}  		}  		break;  	case "DEL":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address == M.Sender) {  				bool hidden = BO.Category == -2;  				BO.Kill ();  				if (hidden) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER " + index.ToString () + " DEL"'  						RawContent = index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER " + index.ToString () + " DEL"'  						RawContent = index.ToString ()'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "This is not your offer. You cannot modify it"'  					Server = M.Server  				});  			}  		}  		break;  	case "BUY":  		if (index >= 0) {  			try {  				BO = new BitOffer (index);  			}  			catch {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid Offer ID"'  					Server = M.Server  				});  				break;  			}  			if (BO.Address != M.Sender) {  				var NVC = Base.ParseContent (M.RawContent);  				int amount' understock;  				//check if valid amount  				if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  					//check or create underStock  					if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  						if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Invalid UnderStock value"'  								Server = M.Server  							});  							break;  						}  					}  					else {  						understock = amount;  					}  					if (BO.CanBuy (amount' understock)) {  						BitTransaction BT = BO.Buy (amount' understock);  						if (BT != null) {  							BT.AddressBuyer = M.Sender;  							sendMsg (new GenericMessage () {  								Receiver = M.Sender'  								Command = M.Command'  								RawContent = BT.Index.ToString ()'  								Server = M.Server  							});  							sendMsg (new GenericMessage () {  								Receiver = BT.AddressSeller'  								Command = M.Command'  								RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  								Server = M.Server  							});  						}  						else {  							sendErr (new GenericMessage () {  								Receiver = M.Sender'  								RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  								Server = M.Server  							});  						}  					}  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid stock amount"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "You cannot buy your own stuff"'  					Server = M.Server  				});  			}  		}  		break;  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: switch (Parts [2].ToUpper ()) {  case "GET":  	try {  		BO = new BitOffer (index);  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = M.Command'  			RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  			Server = M.Server  		});  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "Invalid Offer ID"'  			Server = M.Server  		});  	}  	break;  case "SET":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address == M.Sender) {  			if (setOffer (BO' M)) {  				if (BO.Category == -2) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER " + BO.Index.ToString () + " SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER " + BO.Index.ToString () + " SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "This is not your offer. You cannot modify it"'  				Server = M.Server  			});  		}  	}  	else {  		//new offer  		BO = new BitOffer ();  		if (setOffer (BO' M)) {  			if (BO.Category == -2) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER -1 SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER -1 SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  		}  	}  	break;  case "DEL":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address == M.Sender) {  			bool hidden = BO.Category == -2;  			BO.Kill ();  			if (hidden) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER " + index.ToString () + " DEL"'  					RawContent = index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER " + index.ToString () + " DEL"'  					RawContent = index.ToString ()'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "This is not your offer. You cannot modify it"'  				Server = M.Server  			});  		}  	}  	break;  case "BUY":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address != M.Sender) {  			var NVC = Base.ParseContent (M.RawContent);  			int amount' understock;  			//check if valid amount  			if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  				//check or create underStock  				if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  					if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid UnderStock value"'  							Server = M.Server  						});  						break;  					}  				}  				else {  					understock = amount;  				}  				if (BO.CanBuy (amount' understock)) {  					BitTransaction BT = BO.Buy (amount' understock);  					if (BT != null) {  						BT.AddressBuyer = M.Sender;  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = M.Command'  							RawContent = BT.Index.ToString ()'  							Server = M.Server  						});  						sendMsg (new GenericMessage () {  							Receiver = BT.AddressSeller'  							Command = M.Command'  							RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  							Server = M.Server  						});  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  							Server = M.Server  						});  					}  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid stock amount"'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "You cannot buy your own stuff"'  				Server = M.Server  			});  		}  	}  	break;  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: switch (Parts [2].ToUpper ()) {  case "GET":  	try {  		BO = new BitOffer (index);  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = M.Command'  			RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  			Server = M.Server  		});  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "Invalid Offer ID"'  			Server = M.Server  		});  	}  	break;  case "SET":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address == M.Sender) {  			if (setOffer (BO' M)) {  				if (BO.Category == -2) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER " + BO.Index.ToString () + " SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER " + BO.Index.ToString () + " SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "This is not your offer. You cannot modify it"'  				Server = M.Server  			});  		}  	}  	else {  		//new offer  		BO = new BitOffer ();  		if (setOffer (BO' M)) {  			if (BO.Category == -2) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER -1 SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER -1 SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  		}  	}  	break;  case "DEL":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address == M.Sender) {  			bool hidden = BO.Category == -2;  			BO.Kill ();  			if (hidden) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER " + index.ToString () + " DEL"'  					RawContent = index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER " + index.ToString () + " DEL"'  					RawContent = index.ToString ()'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "This is not your offer. You cannot modify it"'  				Server = M.Server  			});  		}  	}  	break;  case "BUY":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address != M.Sender) {  			var NVC = Base.ParseContent (M.RawContent);  			int amount' understock;  			//check if valid amount  			if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  				//check or create underStock  				if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  					if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid UnderStock value"'  							Server = M.Server  						});  						break;  					}  				}  				else {  					understock = amount;  				}  				if (BO.CanBuy (amount' understock)) {  					BitTransaction BT = BO.Buy (amount' understock);  					if (BT != null) {  						BT.AddressBuyer = M.Sender;  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = M.Command'  							RawContent = BT.Index.ToString ()'  							Server = M.Server  						});  						sendMsg (new GenericMessage () {  							Receiver = BT.AddressSeller'  							Command = M.Command'  							RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  							Server = M.Server  						});  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  							Server = M.Server  						});  					}  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid stock amount"'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "You cannot buy your own stuff"'  				Server = M.Server  			});  		}  	}  	break;  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: switch (Parts [2].ToUpper ()) {  case "GET":  	try {  		BO = new BitOffer (index);  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = M.Command'  			RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  			Server = M.Server  		});  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "Invalid Offer ID"'  			Server = M.Server  		});  	}  	break;  case "SET":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address == M.Sender) {  			if (setOffer (BO' M)) {  				if (BO.Category == -2) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER " + BO.Index.ToString () + " SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER " + BO.Index.ToString () + " SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "This is not your offer. You cannot modify it"'  				Server = M.Server  			});  		}  	}  	else {  		//new offer  		BO = new BitOffer ();  		if (setOffer (BO' M)) {  			if (BO.Category == -2) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER -1 SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER -1 SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  		}  	}  	break;  case "DEL":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address == M.Sender) {  			bool hidden = BO.Category == -2;  			BO.Kill ();  			if (hidden) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER " + index.ToString () + " DEL"'  					RawContent = index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER " + index.ToString () + " DEL"'  					RawContent = index.ToString ()'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "This is not your offer. You cannot modify it"'  				Server = M.Server  			});  		}  	}  	break;  case "BUY":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address != M.Sender) {  			var NVC = Base.ParseContent (M.RawContent);  			int amount' understock;  			//check if valid amount  			if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  				//check or create underStock  				if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  					if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid UnderStock value"'  							Server = M.Server  						});  						break;  					}  				}  				else {  					understock = amount;  				}  				if (BO.CanBuy (amount' understock)) {  					BitTransaction BT = BO.Buy (amount' understock);  					if (BT != null) {  						BT.AddressBuyer = M.Sender;  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = M.Command'  							RawContent = BT.Index.ToString ()'  							Server = M.Server  						});  						sendMsg (new GenericMessage () {  							Receiver = BT.AddressSeller'  							Command = M.Command'  							RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  							Server = M.Server  						});  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  							Server = M.Server  						});  					}  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid stock amount"'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "You cannot buy your own stuff"'  				Server = M.Server  			});  		}  	}  	break;  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: switch (Parts [2].ToUpper ()) {  case "GET":  	try {  		BO = new BitOffer (index);  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = M.Command'  			RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  			Server = M.Server  		});  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "Invalid Offer ID"'  			Server = M.Server  		});  	}  	break;  case "SET":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address == M.Sender) {  			if (setOffer (BO' M)) {  				if (BO.Category == -2) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER " + BO.Index.ToString () + " SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER " + BO.Index.ToString () + " SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "This is not your offer. You cannot modify it"'  				Server = M.Server  			});  		}  	}  	else {  		//new offer  		BO = new BitOffer ();  		if (setOffer (BO' M)) {  			if (BO.Category == -2) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER -1 SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER -1 SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  		}  	}  	break;  case "DEL":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address == M.Sender) {  			bool hidden = BO.Category == -2;  			BO.Kill ();  			if (hidden) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER " + index.ToString () + " DEL"'  					RawContent = index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER " + index.ToString () + " DEL"'  					RawContent = index.ToString ()'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "This is not your offer. You cannot modify it"'  				Server = M.Server  			});  		}  	}  	break;  case "BUY":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address != M.Sender) {  			var NVC = Base.ParseContent (M.RawContent);  			int amount' understock;  			//check if valid amount  			if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  				//check or create underStock  				if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  					if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid UnderStock value"'  							Server = M.Server  						});  						break;  					}  				}  				else {  					understock = amount;  				}  				if (BO.CanBuy (amount' understock)) {  					BitTransaction BT = BO.Buy (amount' understock);  					if (BT != null) {  						BT.AddressBuyer = M.Sender;  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = M.Command'  							RawContent = BT.Index.ToString ()'  							Server = M.Server  						});  						sendMsg (new GenericMessage () {  							Receiver = BT.AddressSeller'  							Command = M.Command'  							RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  							Server = M.Server  						});  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  							Server = M.Server  						});  					}  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid stock amount"'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "You cannot buy your own stuff"'  				Server = M.Server  			});  		}  	}  	break;  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (index >= 0) {  	try {  		BO = new BitOffer (index);  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "Invalid Offer ID"'  			Server = M.Server  		});  		break;  	}  	if (BO.Address == M.Sender) {  		if (setOffer (BO' M)) {  			if (BO.Category == -2) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER " + BO.Index.ToString () + " SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER " + BO.Index.ToString () + " SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  		}  	}  	else {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "This is not your offer. You cannot modify it"'  			Server = M.Server  		});  	}  }  else {  	//new offer  	BO = new BitOffer ();  	if (setOffer (BO' M)) {  		if (BO.Category == -2) {  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = "OFFER -1 SET"'  				RawContent = BO.Index.ToString ()'  				Server = M.Server  			});  		}  		else {  			sendBroadcast (new GenericMessage () {  				Command = "OFFER -1 SET"'  				RawContent = BO.Index.ToString ()'  				Server = M.Server  			});  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (index >= 0) {  	try {  		BO = new BitOffer (index);  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "Invalid Offer ID"'  			Server = M.Server  		});  		break;  	}  	if (BO.Address == M.Sender) {  		if (setOffer (BO' M)) {  			if (BO.Category == -2) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER " + BO.Index.ToString () + " SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER " + BO.Index.ToString () + " SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  		}  	}  	else {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "This is not your offer. You cannot modify it"'  			Server = M.Server  		});  	}  }  else {  	//new offer  	BO = new BitOffer ();  	if (setOffer (BO' M)) {  		if (BO.Category == -2) {  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = "OFFER -1 SET"'  				RawContent = BO.Index.ToString ()'  				Server = M.Server  			});  		}  		else {  			sendBroadcast (new GenericMessage () {  				Command = "OFFER -1 SET"'  				RawContent = BO.Index.ToString ()'  				Server = M.Server  			});  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (BO.Address == M.Sender) {  	if (setOffer (BO' M)) {  		if (BO.Category == -2) {  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = "OFFER " + BO.Index.ToString () + " SET"'  				RawContent = BO.Index.ToString ()'  				Server = M.Server  			});  		}  		else {  			sendBroadcast (new GenericMessage () {  				Command = "OFFER " + BO.Index.ToString () + " SET"'  				RawContent = BO.Index.ToString ()'  				Server = M.Server  			});  		}  	}  }  else {  	sendErr (new GenericMessage () {  		Receiver = M.Sender'  		RawContent = "This is not your offer. You cannot modify it"'  		Server = M.Server  	});  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (setOffer (BO' M)) {  	if (BO.Category == -2) {  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = "OFFER " + BO.Index.ToString () + " SET"'  			RawContent = BO.Index.ToString ()'  			Server = M.Server  		});  	}  	else {  		sendBroadcast (new GenericMessage () {  			Command = "OFFER " + BO.Index.ToString () + " SET"'  			RawContent = BO.Index.ToString ()'  			Server = M.Server  		});  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (BO.Category == -2) {  	sendMsg (new GenericMessage () {  		Receiver = M.Sender'  		Command = "OFFER " + BO.Index.ToString () + " SET"'  		RawContent = BO.Index.ToString ()'  		Server = M.Server  	});  }  else {  	sendBroadcast (new GenericMessage () {  		Command = "OFFER " + BO.Index.ToString () + " SET"'  		RawContent = BO.Index.ToString ()'  		Server = M.Server  	});  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (setOffer (BO' M)) {  	if (BO.Category == -2) {  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = "OFFER -1 SET"'  			RawContent = BO.Index.ToString ()'  			Server = M.Server  		});  	}  	else {  		sendBroadcast (new GenericMessage () {  			Command = "OFFER -1 SET"'  			RawContent = BO.Index.ToString ()'  			Server = M.Server  		});  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (BO.Category == -2) {  	sendMsg (new GenericMessage () {  		Receiver = M.Sender'  		Command = "OFFER -1 SET"'  		RawContent = BO.Index.ToString ()'  		Server = M.Server  	});  }  else {  	sendBroadcast (new GenericMessage () {  		Command = "OFFER -1 SET"'  		RawContent = BO.Index.ToString ()'  		Server = M.Server  	});  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (index >= 0) {  	try {  		BO = new BitOffer (index);  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "Invalid Offer ID"'  			Server = M.Server  		});  		break;  	}  	if (BO.Address == M.Sender) {  		bool hidden = BO.Category == -2;  		BO.Kill ();  		if (hidden) {  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = "OFFER " + index.ToString () + " DEL"'  				RawContent = index.ToString ()'  				Server = M.Server  			});  		}  		else {  			sendBroadcast (new GenericMessage () {  				Command = "OFFER " + index.ToString () + " DEL"'  				RawContent = index.ToString ()'  				Server = M.Server  			});  		}  	}  	else {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "This is not your offer. You cannot modify it"'  			Server = M.Server  		});  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following statement contains a magic number: if (BO.Address == M.Sender) {  	bool hidden = BO.Category == -2;  	BO.Kill ();  	if (hidden) {  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = "OFFER " + index.ToString () + " DEL"'  			RawContent = index.ToString ()'  			Server = M.Server  		});  	}  	else {  		sendBroadcast (new GenericMessage () {  			Command = "OFFER " + index.ToString () + " DEL"'  			RawContent = index.ToString ()'  			Server = M.Server  		});  	}  }  else {  	sendErr (new GenericMessage () {  		Receiver = M.Sender'  		RawContent = "This is not your offer. You cannot modify it"'  		Server = M.Server  	});  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,setOffer,The following statement contains a magic number: if (getValue (M.RawContent' "Category") != null) {  	int cat = 0;  	if (int.TryParse (getValue (M.RawContent' "Category")' out cat) && cat > -3 && cat != 0) {  		try {  			BitCategory BC = new BitCategory (cat);  			BO.Category = cat;  		}  		catch (Exception ex) {  			sendErr (new GenericMessage () {  				Sender = M.Sender'  				RawContent = "Cannot edit the offer: " + ex.Message'  				Server = M.Server  			});  			return false;  		}  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,setOffer,The following statement contains a magic number: if (int.TryParse (getValue (M.RawContent' "Category")' out cat) && cat > -3 && cat != 0) {  	try {  		BitCategory BC = new BitCategory (cat);  		BO.Category = cat;  	}  	catch (Exception ex) {  		sendErr (new GenericMessage () {  			Sender = M.Sender'  			RawContent = "Cannot edit the offer: " + ex.Message'  			Server = M.Server  		});  		return false;  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,setOffer,The following statement contains a magic number: if (getValue (M.RawContent' "Stock") != null) {  	try {  		int sCount = int.Parse (getValue (M.RawContent' "Stock"));  		if (sCount > -2) {  			BO.Stock = sCount;  		}  		else {  			throw new Exception ("Invalid stock count");  		}  	}  	catch (Exception ex) {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "Cannot edit the offer: " + ex.Message'  			Server = M.Server  		});  		return false;  	}  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,setOffer,The following statement contains a magic number: try {  	int sCount = int.Parse (getValue (M.RawContent' "Stock"));  	if (sCount > -2) {  		BO.Stock = sCount;  	}  	else {  		throw new Exception ("Invalid stock count");  	}  }  catch (Exception ex) {  	sendErr (new GenericMessage () {  		Receiver = M.Sender'  		RawContent = "Cannot edit the offer: " + ex.Message'  		Server = M.Server  	});  	return false;  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,setOffer,The following statement contains a magic number: if (sCount > -2) {  	BO.Stock = sCount;  }  else {  	throw new Exception ("Invalid stock count");  }  
Magic Number,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseMain,The following statement contains a magic number: if (Parts.Length == 2) {  	switch (Parts [1].ToUpper ()) {  	case "INFO":  		if (File.Exists ("INFO.TXT")) {  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = "MAIN INFO"'  				RawContent = "AyrAs BitMarket\n\n" + File.ReadAllText ("INFO.TXT")'  				Server = M.Server  			});  		}  		else {  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = "MAIN INFO"'  				RawContent = "AyrAs BitMarket\n\nThis Market has no informations published yet."'  				Server = M.Server  			});  		}  		break;  	case "SETTINGS":  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = "MAIN SETTINGS"'  			RawContent = string.Format (@"FILE.NAME=50{0}RAW FILE.CONTENT=-1{0}A85 OFFER.NAME=50{0}RAW OFFER.FILES=50{0}RAW OFFER.PRICEMAP=200{0}RAW OFFER.DESCRIPTION=2000{0}A85 OFFER.MESSAGE=-1{0}A85 TRANSACTION.COMMENT=200{0}B64"' '\t')'  			Server = M.Server  		});  		break;  	case "CATLIST":  		SQLRow[] SRc = MarketInterface.ExecReader ("SELECT ID'Parent'Name FROM BitCategory ORDER BY Parent'ID");  		StringBuilder SBc = new StringBuilder ();  		foreach (SQLRow R in SRc) {  			SBc.AppendFormat ("{0}'{1}'{2}\n"' R.Values ["ID"]' R.Values ["Parent"]' R.Values ["Name"]);  		}  		SRc = null;  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = "MAIN CATLIST"'  			RawContent = SBc.ToString ().Trim ()'  			Server = M.Server  		});  		break;  	case "OFFERLIST":  		SQLRow[] SRo = MarketInterface.ExecReader ("SELECT ID'Category'Stock'PriceMap'Title FROM BitOffer WHERE Category!=-2 ORDER BY LastModify DESC");  		StringBuilder SBo = new StringBuilder ();  		foreach (SQLRow R in SRo) {  			SBo.AppendFormat ("{0}'{1}'{2}'{3}'{4}\n"' R.Values ["ID"]' R.Values ["Category"]' R.Values ["Stock"]' R.Values ["PriceMap"]' R.Values ["Title"]);  		}  		SRo = null;  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = "MAIN OFFERLIST"'  			RawContent = SBo.ToString ().Trim ()'  			Server = M.Server  		});  		break;  	default:  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "Invalid MAIN command"'  			Server = M.Server  		});  		break;  	}  }  
Magic Number,SQL,PriceRange,C:\repos\AyrA_BitMarket\Bitmessage\clsPriceRange.cs,PriceRange,The following statement contains a magic number: switch (Parts.Length) {  case 1:  	From = int.Parse (Parts [0]);  	Step = 1;  	To = INFINITY;  	break;  case 2:  	From = int.Parse (Parts [0]);  	Step = int.Parse (Parts [1]);  	To = INFINITY;  	break;  case 3:  	From = int.Parse (Parts [0]);  	Step = int.Parse (Parts [1]);  	To = int.Parse (Parts [2]);  	break;  default:  	throw new Exception ("Invalid Range");  }  
Magic Number,SQL,PriceRange,C:\repos\AyrA_BitMarket\Bitmessage\clsPriceRange.cs,PriceRange,The following statement contains a magic number: switch (Parts.Length) {  case 1:  	From = int.Parse (Parts [0]);  	Step = 1;  	To = INFINITY;  	break;  case 2:  	From = int.Parse (Parts [0]);  	Step = int.Parse (Parts [1]);  	To = INFINITY;  	break;  case 3:  	From = int.Parse (Parts [0]);  	Step = int.Parse (Parts [1]);  	To = int.Parse (Parts [2]);  	break;  default:  	throw new Exception ("Invalid Range");  }  
Magic Number,SQL,PriceRange,C:\repos\AyrA_BitMarket\Bitmessage\clsPriceRange.cs,PriceRange,The following statement contains a magic number: switch (Parts.Length) {  case 1:  	From = int.Parse (Parts [0]);  	Step = 1;  	To = INFINITY;  	break;  case 2:  	From = int.Parse (Parts [0]);  	Step = int.Parse (Parts [1]);  	To = INFINITY;  	break;  case 3:  	From = int.Parse (Parts [0]);  	Step = int.Parse (Parts [1]);  	To = int.Parse (Parts [2]);  	break;  default:  	throw new Exception ("Invalid Range");  }  
Magic Number,SQL,PriceRange,C:\repos\AyrA_BitMarket\Bitmessage\clsPriceRange.cs,PriceRange,The following statement contains a magic number: To = int.Parse (Parts [2]);  
Missing Default,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseFile,The following switch statement is missing a default case: switch (Parts [2].ToUpper ()) {  case "GET":  	try {  		BitFile BF = new BitFile (index);  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = "FILE"'  			RawContent = string.Format ("ID={0}\nNAME={1}\nCONTENT={2}"' BF.Index' BF.Name' A85 (BF.Contents))'  			Server = M.Server  		});  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "File not found"'  			Server = M.Server  		});  	}  	break;  case "SET":  	if (index >= 0) {  		BitFile BF;  		//edit File contents  		try {  			BF = new BitFile (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "File not found"'  				Server = M.Server  			});  			break;  		}  		if (BF.Address == M.Sender) {  			string Name = getValue (M.RawContent' "NAME");  			byte[] content = A85 (M.RawContent);  			if (!string.IsNullOrEmpty (Name)) {  				BF.Name = Name;  				if (BF.Name == Name) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "FILE"'  						RawContent = "File renamed"'  						Server = M.Server  					});  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Invalid file name"'  						Server = M.Server  					});  				}  			}  			if (content != null && !Base.compare (BF.Contents' content)) {  				BF.Contents = content;  				if (Base.compare (BF.Contents' content)) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "FILE"'  						RawContent = "File contents updated"'  						Server = M.Server  					});  				}  				else {  					sendErr (new GenericMessage () {  						Receiver = M.Sender'  						RawContent = "Cannot update file contents"'  						Server = M.Server  					});  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid or empty A85 encoding"'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Access denied for" + M.Sender'  				Server = M.Server  			});  		}  	}  	else {  		//new file  		string Name = getValue (M.RawContent' "NAME");  		byte[] content = A85 (M.RawContent);  		if (!string.IsNullOrEmpty (Name) && content != null) {  			BitFile BF = new BitFile ();  			BF.Name = Name;  			BF.Contents = content;  			sendMsg (new GenericMessage () {  				Receiver = M.Sender'  				Command = "FILE"'  				RawContent = string.Format ("ID={0}\nNAME={1}"' BF.Index' BF.Name)'  				Server = M.Server  			});  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid File name or A85 contents"'  				Server = M.Server  			});  		}  	}  	break;  case "DEL":  	if (index >= 0) {  		try {  			BitFile BF = new BitFile (index);  			if (BF.Address == M.Sender) {  				BF.Kill ();  				BF = null;  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "FILE"'  					RawContent = "File deleted"'  					Server = M.Server  				});  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Access denied for " + M.Sender'  					Server = M.Server  				});  			}  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "File not found"'  				Server = M.Server  			});  		}  	}  	else {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "File not found"'  			Server = M.Server  		});  	}  	break;  }  
Missing Default,SQL,MySQL,C:\repos\AyrA_BitMarket\Bitmessage\clsMySQL.cs,parseOffer,The following switch statement is missing a default case: switch (Parts [2].ToUpper ()) {  case "GET":  	try {  		BO = new BitOffer (index);  		sendMsg (new GenericMessage () {  			Receiver = M.Sender'  			Command = M.Command'  			RawContent = string.Format (@"Title={0} Description={1} Address={2} Category={3} Files={4} Stock={5}'{6} PriceMap={7} LastModify={8} "' BO.Title' A85 (Encoding.UTF8.GetBytes (BO.Description))' BO.Address' BO.Category' BO.Files' BO.Stock' BO.Stock > -1 ? BO.Stock - getUnconfirmedStock (BO.Index) : -1' BO.Prices' BO.LastModify.ToString ("dd.MM.yyyy hh:mm:ss"))'  			Server = M.Server  		});  	}  	catch {  		sendErr (new GenericMessage () {  			Receiver = M.Sender'  			RawContent = "Invalid Offer ID"'  			Server = M.Server  		});  	}  	break;  case "SET":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address == M.Sender) {  			if (setOffer (BO' M)) {  				if (BO.Category == -2) {  					sendMsg (new GenericMessage () {  						Receiver = M.Sender'  						Command = "OFFER " + BO.Index.ToString () + " SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  				else {  					sendBroadcast (new GenericMessage () {  						Command = "OFFER " + BO.Index.ToString () + " SET"'  						RawContent = BO.Index.ToString ()'  						Server = M.Server  					});  				}  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "This is not your offer. You cannot modify it"'  				Server = M.Server  			});  		}  	}  	else {  		//new offer  		BO = new BitOffer ();  		if (setOffer (BO' M)) {  			if (BO.Category == -2) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER -1 SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER -1 SET"'  					RawContent = BO.Index.ToString ()'  					Server = M.Server  				});  			}  		}  	}  	break;  case "DEL":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address == M.Sender) {  			bool hidden = BO.Category == -2;  			BO.Kill ();  			if (hidden) {  				sendMsg (new GenericMessage () {  					Receiver = M.Sender'  					Command = "OFFER " + index.ToString () + " DEL"'  					RawContent = index.ToString ()'  					Server = M.Server  				});  			}  			else {  				sendBroadcast (new GenericMessage () {  					Command = "OFFER " + index.ToString () + " DEL"'  					RawContent = index.ToString ()'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "This is not your offer. You cannot modify it"'  				Server = M.Server  			});  		}  	}  	break;  case "BUY":  	if (index >= 0) {  		try {  			BO = new BitOffer (index);  		}  		catch {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "Invalid Offer ID"'  				Server = M.Server  			});  			break;  		}  		if (BO.Address != M.Sender) {  			var NVC = Base.ParseContent (M.RawContent);  			int amount' understock;  			//check if valid amount  			if (!string.IsNullOrEmpty (NVC ["Amount"]) && int.TryParse (NVC ["Amount"]' out amount) && amount > 0) {  				//check or create underStock  				if (!string.IsNullOrEmpty (NVC ["UnderStock"])) {  					if (!int.TryParse (NVC ["UnderStock"]' out understock) || understock <= 0 || understock > amount) {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Invalid UnderStock value"'  							Server = M.Server  						});  						break;  					}  				}  				else {  					understock = amount;  				}  				if (BO.CanBuy (amount' understock)) {  					BitTransaction BT = BO.Buy (amount' understock);  					if (BT != null) {  						BT.AddressBuyer = M.Sender;  						sendMsg (new GenericMessage () {  							Receiver = M.Sender'  							Command = M.Command'  							RawContent = BT.Index.ToString ()'  							Server = M.Server  						});  						sendMsg (new GenericMessage () {  							Receiver = BT.AddressSeller'  							Command = M.Command'  							RawContent = string.Format (@"ID={0} AddressBuyer={1} Amount={2} Understock={3} Message={4}"' BT.Index.ToString ()' BT.AddressBuyer' amount' understock' NVC ["Message"])'  							Server = M.Server  						});  					}  					else {  						sendErr (new GenericMessage () {  							Receiver = M.Sender'  							RawContent = "Cannot buy the specific amount. Did you match the pricemap?"'  							Server = M.Server  						});  					}  				}  			}  			else {  				sendErr (new GenericMessage () {  					Receiver = M.Sender'  					RawContent = "Invalid stock amount"'  					Server = M.Server  				});  			}  		}  		else {  			sendErr (new GenericMessage () {  				Receiver = M.Sender'  				RawContent = "You cannot buy your own stuff"'  				Server = M.Server  			});  		}  	}  	break;  }  
