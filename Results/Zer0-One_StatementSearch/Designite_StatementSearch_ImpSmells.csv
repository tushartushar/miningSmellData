Implementation smell,Namespace,Class,File,Method,Description
Complex Method,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,Cyclomatic complexity of the method is 8
Complex Method,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,Cyclomatic complexity of the method is 12
Complex Method,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1_FormClosing,Cyclomatic complexity of the method is 11
Long Statement,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadFiles,The length of the statement  "		MessageBox.Show ("No valid records could be found at the specified directory"' "Attention"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 142.
Long Statement,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadRecordsToolStripMenuItem_Click,The length of the statement  "			if (MessageBox.Show ("Loading all records for the first time may take a very long time.\nWould you like to proceed?"' "Attention"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.OK) { " is 226.
Long Statement,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadRecordsToolStripMenuItem_Click,The length of the statement  "		MessageBox.Show ("An indexing operation is already running. Please wait for the current operation to finish."' "Attention"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 174.
Long Statement,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,comboBox1_SelectedIndexChanged,The length of the statement  "		MessageBox.Show ("Please wait for the records to be indexed before attempting a lookup"' "Attention"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 152.
Long Statement,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,button1_Click,The length of the statement  "		MessageBox.Show ("Please wait for the records to be indexed before attempting a lookup"' "Attention"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 152.
Long Statement,StatementSearch,StatementPrintDocument,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,OnPrintPage,The length of the statement  "	height = base.DefaultPageSettings.PaperSize.Height - base.DefaultPageSettings.Margins.Top - base.DefaultPageSettings.Margins.Bottom; " is 132.
Long Statement,StatementSearch,StatementPrintDocument,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,OnPrintPage,The length of the statement  "	width = base.DefaultPageSettings.PaperSize.Width - base.DefaultPageSettings.Margins.Left - base.DefaultPageSettings.Margins.Right; " is 130.
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,The following statement contains a magic number: if (Properties.Settings.Default.names != "") {  	names = new Dictionary<string' List<string>> ();  	string[] s = Properties.Settings.Default.names.Split (new char[] {  		':'  	}' StringSplitOptions.RemoveEmptyEntries);  	int sCount = s.Length;  	for (int i = 0; i < sCount; i += 2) {  		List<string> nameList = s [i + 1].Split (''').ToList ();  		names.Add (s [i]' nameList);  	}  	folderBrowserDialog1.SelectedPath = Properties.Settings.Default.recordPath;  	loadFiles ();  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,The following statement contains a magic number: for (int i = 0; i < sCount; i += 2) {  	List<string> nameList = s [i + 1].Split (''').ToList ();  	names.Add (s [i]' nameList);  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,The following statement contains a magic number: i += 2
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,The following statement contains a magic number: if (Properties.Settings.Default.offsets != "") {  	offsets = new Dictionary<string' Dictionary<string' List<long[]>>> ();  	string[] s = Properties.Settings.Default.offsets.Split (new char[] {  		':'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i < s.Length; i += 2) {  		Dictionary<string' List<long[]>> lo = new Dictionary<string' List<long[]>> ();  		offsets.Add (s [i]' lo);  		string[] q = s [i + 1].Split (new char[] {  			'_'  		}' StringSplitOptions.RemoveEmptyEntries);  		for (int j = 0; j < q.Length; j += 2) {  			string[] t = q [j + 1].Split (new char[] {  				'~'  			}' StringSplitOptions.RemoveEmptyEntries);  			List<long[]> o = new List<long[]> ();  			foreach (string os in t) {  				string[] r = os.Split (new char[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries);  				o.Add (new long[] {  					Convert.ToInt64 (r [0])'  					Convert.ToInt64 (r [1])  				});  			}  			lo.Add (q [j]' o);  		}  	}  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,The following statement contains a magic number: if (Properties.Settings.Default.offsets != "") {  	offsets = new Dictionary<string' Dictionary<string' List<long[]>>> ();  	string[] s = Properties.Settings.Default.offsets.Split (new char[] {  		':'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i < s.Length; i += 2) {  		Dictionary<string' List<long[]>> lo = new Dictionary<string' List<long[]>> ();  		offsets.Add (s [i]' lo);  		string[] q = s [i + 1].Split (new char[] {  			'_'  		}' StringSplitOptions.RemoveEmptyEntries);  		for (int j = 0; j < q.Length; j += 2) {  			string[] t = q [j + 1].Split (new char[] {  				'~'  			}' StringSplitOptions.RemoveEmptyEntries);  			List<long[]> o = new List<long[]> ();  			foreach (string os in t) {  				string[] r = os.Split (new char[] {  					'''  				}' StringSplitOptions.RemoveEmptyEntries);  				o.Add (new long[] {  					Convert.ToInt64 (r [0])'  					Convert.ToInt64 (r [1])  				});  			}  			lo.Add (q [j]' o);  		}  	}  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,The following statement contains a magic number: for (int i = 0; i < s.Length; i += 2) {  	Dictionary<string' List<long[]>> lo = new Dictionary<string' List<long[]>> ();  	offsets.Add (s [i]' lo);  	string[] q = s [i + 1].Split (new char[] {  		'_'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int j = 0; j < q.Length; j += 2) {  		string[] t = q [j + 1].Split (new char[] {  			'~'  		}' StringSplitOptions.RemoveEmptyEntries);  		List<long[]> o = new List<long[]> ();  		foreach (string os in t) {  			string[] r = os.Split (new char[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries);  			o.Add (new long[] {  				Convert.ToInt64 (r [0])'  				Convert.ToInt64 (r [1])  			});  		}  		lo.Add (q [j]' o);  	}  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,The following statement contains a magic number: for (int i = 0; i < s.Length; i += 2) {  	Dictionary<string' List<long[]>> lo = new Dictionary<string' List<long[]>> ();  	offsets.Add (s [i]' lo);  	string[] q = s [i + 1].Split (new char[] {  		'_'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int j = 0; j < q.Length; j += 2) {  		string[] t = q [j + 1].Split (new char[] {  			'~'  		}' StringSplitOptions.RemoveEmptyEntries);  		List<long[]> o = new List<long[]> ();  		foreach (string os in t) {  			string[] r = os.Split (new char[] {  				'''  			}' StringSplitOptions.RemoveEmptyEntries);  			o.Add (new long[] {  				Convert.ToInt64 (r [0])'  				Convert.ToInt64 (r [1])  			});  		}  		lo.Add (q [j]' o);  	}  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,The following statement contains a magic number: i += 2
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,The following statement contains a magic number: for (int j = 0; j < q.Length; j += 2) {  	string[] t = q [j + 1].Split (new char[] {  		'~'  	}' StringSplitOptions.RemoveEmptyEntries);  	List<long[]> o = new List<long[]> ();  	foreach (string os in t) {  		string[] r = os.Split (new char[] {  			'''  		}' StringSplitOptions.RemoveEmptyEntries);  		o.Add (new long[] {  			Convert.ToInt64 (r [0])'  			Convert.ToInt64 (r [1])  		});  	}  	lo.Add (q [j]' o);  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,Form1,The following statement contains a magic number: j += 2
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: foreach (string year in streams.Keys) {  	offsets.Add (year' new Dictionary<string' List<long[]>> ());  	streams.TryGetValue (year' out fs);  	List<string> nlist = new List<string> ();  	long begin_offset' end_offset;  	while (fs.Position != fs.Length) {  		Application.DoEvents ();  		string l = fs.ReadLine (progressBar1' loading);  		if (l == "\f") {  			begin_offset = fs.Position;  			//12th line down has the name. we do i < 11 here to get to the line just before the name  			for (int i = 0; i < 11; i++) {  				fs.ReadLine (progressBar1' loading);  			}  			string name = fs.ReadLine (progressBar1' loading).Trim ();  			//nlist.Add(name);  			Dictionary<string' List<long[]>> oa;  			offsets.TryGetValue (year' out oa);  			//if(!oa.ContainsKey(nlist.Last())){  			//    oa.Add(nlist[nlist.Count - 1]' new List<long[]>());  			//}  			if (!oa.ContainsKey (name)) {  				nlist.Add (name);  				oa.Add (nlist [nlist.Count - 1]' new List<long[]> ());  			}  			bool cont = false;  			while (true) {  				string line = fs.ReadLine (progressBar1' loading);  				if (line.Contains ("Continued on page")) {  					cont = true;  				}  				else if (line.Contains ("\f")) {  					if (cont == true) {  						cont = false;  					}  					else {  						end_offset = fs.Position;  						fs.Seek (-3' SeekOrigin.Current);  						break;  					}  				}  				else if (line == "\0") {  					goto end_of_file;  				}  			}  			List<long[]> ll;  			//oa.TryGetValue(nlist[nlist.Count - 1]' out ll);  			oa.TryGetValue (nlist [nlist.IndexOf (name)]' out ll);  			ll.Add (new long[2] {  				begin_offset'  				end_offset  			});  		}  	}  	end_of_file:  	//nlist = nlist.Distinct().ToList();  	nlist.Sort ();  	names.Add (year' nlist);  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: foreach (string year in streams.Keys) {  	offsets.Add (year' new Dictionary<string' List<long[]>> ());  	streams.TryGetValue (year' out fs);  	List<string> nlist = new List<string> ();  	long begin_offset' end_offset;  	while (fs.Position != fs.Length) {  		Application.DoEvents ();  		string l = fs.ReadLine (progressBar1' loading);  		if (l == "\f") {  			begin_offset = fs.Position;  			//12th line down has the name. we do i < 11 here to get to the line just before the name  			for (int i = 0; i < 11; i++) {  				fs.ReadLine (progressBar1' loading);  			}  			string name = fs.ReadLine (progressBar1' loading).Trim ();  			//nlist.Add(name);  			Dictionary<string' List<long[]>> oa;  			offsets.TryGetValue (year' out oa);  			//if(!oa.ContainsKey(nlist.Last())){  			//    oa.Add(nlist[nlist.Count - 1]' new List<long[]>());  			//}  			if (!oa.ContainsKey (name)) {  				nlist.Add (name);  				oa.Add (nlist [nlist.Count - 1]' new List<long[]> ());  			}  			bool cont = false;  			while (true) {  				string line = fs.ReadLine (progressBar1' loading);  				if (line.Contains ("Continued on page")) {  					cont = true;  				}  				else if (line.Contains ("\f")) {  					if (cont == true) {  						cont = false;  					}  					else {  						end_offset = fs.Position;  						fs.Seek (-3' SeekOrigin.Current);  						break;  					}  				}  				else if (line == "\0") {  					goto end_of_file;  				}  			}  			List<long[]> ll;  			//oa.TryGetValue(nlist[nlist.Count - 1]' out ll);  			oa.TryGetValue (nlist [nlist.IndexOf (name)]' out ll);  			ll.Add (new long[2] {  				begin_offset'  				end_offset  			});  		}  	}  	end_of_file:  	//nlist = nlist.Distinct().ToList();  	nlist.Sort ();  	names.Add (year' nlist);  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: foreach (string year in streams.Keys) {  	offsets.Add (year' new Dictionary<string' List<long[]>> ());  	streams.TryGetValue (year' out fs);  	List<string> nlist = new List<string> ();  	long begin_offset' end_offset;  	while (fs.Position != fs.Length) {  		Application.DoEvents ();  		string l = fs.ReadLine (progressBar1' loading);  		if (l == "\f") {  			begin_offset = fs.Position;  			//12th line down has the name. we do i < 11 here to get to the line just before the name  			for (int i = 0; i < 11; i++) {  				fs.ReadLine (progressBar1' loading);  			}  			string name = fs.ReadLine (progressBar1' loading).Trim ();  			//nlist.Add(name);  			Dictionary<string' List<long[]>> oa;  			offsets.TryGetValue (year' out oa);  			//if(!oa.ContainsKey(nlist.Last())){  			//    oa.Add(nlist[nlist.Count - 1]' new List<long[]>());  			//}  			if (!oa.ContainsKey (name)) {  				nlist.Add (name);  				oa.Add (nlist [nlist.Count - 1]' new List<long[]> ());  			}  			bool cont = false;  			while (true) {  				string line = fs.ReadLine (progressBar1' loading);  				if (line.Contains ("Continued on page")) {  					cont = true;  				}  				else if (line.Contains ("\f")) {  					if (cont == true) {  						cont = false;  					}  					else {  						end_offset = fs.Position;  						fs.Seek (-3' SeekOrigin.Current);  						break;  					}  				}  				else if (line == "\0") {  					goto end_of_file;  				}  			}  			List<long[]> ll;  			//oa.TryGetValue(nlist[nlist.Count - 1]' out ll);  			oa.TryGetValue (nlist [nlist.IndexOf (name)]' out ll);  			ll.Add (new long[2] {  				begin_offset'  				end_offset  			});  		}  	}  	end_of_file:  	//nlist = nlist.Distinct().ToList();  	nlist.Sort ();  	names.Add (year' nlist);  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: while (fs.Position != fs.Length) {  	Application.DoEvents ();  	string l = fs.ReadLine (progressBar1' loading);  	if (l == "\f") {  		begin_offset = fs.Position;  		//12th line down has the name. we do i < 11 here to get to the line just before the name  		for (int i = 0; i < 11; i++) {  			fs.ReadLine (progressBar1' loading);  		}  		string name = fs.ReadLine (progressBar1' loading).Trim ();  		//nlist.Add(name);  		Dictionary<string' List<long[]>> oa;  		offsets.TryGetValue (year' out oa);  		//if(!oa.ContainsKey(nlist.Last())){  		//    oa.Add(nlist[nlist.Count - 1]' new List<long[]>());  		//}  		if (!oa.ContainsKey (name)) {  			nlist.Add (name);  			oa.Add (nlist [nlist.Count - 1]' new List<long[]> ());  		}  		bool cont = false;  		while (true) {  			string line = fs.ReadLine (progressBar1' loading);  			if (line.Contains ("Continued on page")) {  				cont = true;  			}  			else if (line.Contains ("\f")) {  				if (cont == true) {  					cont = false;  				}  				else {  					end_offset = fs.Position;  					fs.Seek (-3' SeekOrigin.Current);  					break;  				}  			}  			else if (line == "\0") {  				goto end_of_file;  			}  		}  		List<long[]> ll;  		//oa.TryGetValue(nlist[nlist.Count - 1]' out ll);  		oa.TryGetValue (nlist [nlist.IndexOf (name)]' out ll);  		ll.Add (new long[2] {  			begin_offset'  			end_offset  		});  	}  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: while (fs.Position != fs.Length) {  	Application.DoEvents ();  	string l = fs.ReadLine (progressBar1' loading);  	if (l == "\f") {  		begin_offset = fs.Position;  		//12th line down has the name. we do i < 11 here to get to the line just before the name  		for (int i = 0; i < 11; i++) {  			fs.ReadLine (progressBar1' loading);  		}  		string name = fs.ReadLine (progressBar1' loading).Trim ();  		//nlist.Add(name);  		Dictionary<string' List<long[]>> oa;  		offsets.TryGetValue (year' out oa);  		//if(!oa.ContainsKey(nlist.Last())){  		//    oa.Add(nlist[nlist.Count - 1]' new List<long[]>());  		//}  		if (!oa.ContainsKey (name)) {  			nlist.Add (name);  			oa.Add (nlist [nlist.Count - 1]' new List<long[]> ());  		}  		bool cont = false;  		while (true) {  			string line = fs.ReadLine (progressBar1' loading);  			if (line.Contains ("Continued on page")) {  				cont = true;  			}  			else if (line.Contains ("\f")) {  				if (cont == true) {  					cont = false;  				}  				else {  					end_offset = fs.Position;  					fs.Seek (-3' SeekOrigin.Current);  					break;  				}  			}  			else if (line == "\0") {  				goto end_of_file;  			}  		}  		List<long[]> ll;  		//oa.TryGetValue(nlist[nlist.Count - 1]' out ll);  		oa.TryGetValue (nlist [nlist.IndexOf (name)]' out ll);  		ll.Add (new long[2] {  			begin_offset'  			end_offset  		});  	}  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: while (fs.Position != fs.Length) {  	Application.DoEvents ();  	string l = fs.ReadLine (progressBar1' loading);  	if (l == "\f") {  		begin_offset = fs.Position;  		//12th line down has the name. we do i < 11 here to get to the line just before the name  		for (int i = 0; i < 11; i++) {  			fs.ReadLine (progressBar1' loading);  		}  		string name = fs.ReadLine (progressBar1' loading).Trim ();  		//nlist.Add(name);  		Dictionary<string' List<long[]>> oa;  		offsets.TryGetValue (year' out oa);  		//if(!oa.ContainsKey(nlist.Last())){  		//    oa.Add(nlist[nlist.Count - 1]' new List<long[]>());  		//}  		if (!oa.ContainsKey (name)) {  			nlist.Add (name);  			oa.Add (nlist [nlist.Count - 1]' new List<long[]> ());  		}  		bool cont = false;  		while (true) {  			string line = fs.ReadLine (progressBar1' loading);  			if (line.Contains ("Continued on page")) {  				cont = true;  			}  			else if (line.Contains ("\f")) {  				if (cont == true) {  					cont = false;  				}  				else {  					end_offset = fs.Position;  					fs.Seek (-3' SeekOrigin.Current);  					break;  				}  			}  			else if (line == "\0") {  				goto end_of_file;  			}  		}  		List<long[]> ll;  		//oa.TryGetValue(nlist[nlist.Count - 1]' out ll);  		oa.TryGetValue (nlist [nlist.IndexOf (name)]' out ll);  		ll.Add (new long[2] {  			begin_offset'  			end_offset  		});  	}  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: if (l == "\f") {  	begin_offset = fs.Position;  	//12th line down has the name. we do i < 11 here to get to the line just before the name  	for (int i = 0; i < 11; i++) {  		fs.ReadLine (progressBar1' loading);  	}  	string name = fs.ReadLine (progressBar1' loading).Trim ();  	//nlist.Add(name);  	Dictionary<string' List<long[]>> oa;  	offsets.TryGetValue (year' out oa);  	//if(!oa.ContainsKey(nlist.Last())){  	//    oa.Add(nlist[nlist.Count - 1]' new List<long[]>());  	//}  	if (!oa.ContainsKey (name)) {  		nlist.Add (name);  		oa.Add (nlist [nlist.Count - 1]' new List<long[]> ());  	}  	bool cont = false;  	while (true) {  		string line = fs.ReadLine (progressBar1' loading);  		if (line.Contains ("Continued on page")) {  			cont = true;  		}  		else if (line.Contains ("\f")) {  			if (cont == true) {  				cont = false;  			}  			else {  				end_offset = fs.Position;  				fs.Seek (-3' SeekOrigin.Current);  				break;  			}  		}  		else if (line == "\0") {  			goto end_of_file;  		}  	}  	List<long[]> ll;  	//oa.TryGetValue(nlist[nlist.Count - 1]' out ll);  	oa.TryGetValue (nlist [nlist.IndexOf (name)]' out ll);  	ll.Add (new long[2] {  		begin_offset'  		end_offset  	});  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: if (l == "\f") {  	begin_offset = fs.Position;  	//12th line down has the name. we do i < 11 here to get to the line just before the name  	for (int i = 0; i < 11; i++) {  		fs.ReadLine (progressBar1' loading);  	}  	string name = fs.ReadLine (progressBar1' loading).Trim ();  	//nlist.Add(name);  	Dictionary<string' List<long[]>> oa;  	offsets.TryGetValue (year' out oa);  	//if(!oa.ContainsKey(nlist.Last())){  	//    oa.Add(nlist[nlist.Count - 1]' new List<long[]>());  	//}  	if (!oa.ContainsKey (name)) {  		nlist.Add (name);  		oa.Add (nlist [nlist.Count - 1]' new List<long[]> ());  	}  	bool cont = false;  	while (true) {  		string line = fs.ReadLine (progressBar1' loading);  		if (line.Contains ("Continued on page")) {  			cont = true;  		}  		else if (line.Contains ("\f")) {  			if (cont == true) {  				cont = false;  			}  			else {  				end_offset = fs.Position;  				fs.Seek (-3' SeekOrigin.Current);  				break;  			}  		}  		else if (line == "\0") {  			goto end_of_file;  		}  	}  	List<long[]> ll;  	//oa.TryGetValue(nlist[nlist.Count - 1]' out ll);  	oa.TryGetValue (nlist [nlist.IndexOf (name)]' out ll);  	ll.Add (new long[2] {  		begin_offset'  		end_offset  	});  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: if (l == "\f") {  	begin_offset = fs.Position;  	//12th line down has the name. we do i < 11 here to get to the line just before the name  	for (int i = 0; i < 11; i++) {  		fs.ReadLine (progressBar1' loading);  	}  	string name = fs.ReadLine (progressBar1' loading).Trim ();  	//nlist.Add(name);  	Dictionary<string' List<long[]>> oa;  	offsets.TryGetValue (year' out oa);  	//if(!oa.ContainsKey(nlist.Last())){  	//    oa.Add(nlist[nlist.Count - 1]' new List<long[]>());  	//}  	if (!oa.ContainsKey (name)) {  		nlist.Add (name);  		oa.Add (nlist [nlist.Count - 1]' new List<long[]> ());  	}  	bool cont = false;  	while (true) {  		string line = fs.ReadLine (progressBar1' loading);  		if (line.Contains ("Continued on page")) {  			cont = true;  		}  		else if (line.Contains ("\f")) {  			if (cont == true) {  				cont = false;  			}  			else {  				end_offset = fs.Position;  				fs.Seek (-3' SeekOrigin.Current);  				break;  			}  		}  		else if (line == "\0") {  			goto end_of_file;  		}  	}  	List<long[]> ll;  	//oa.TryGetValue(nlist[nlist.Count - 1]' out ll);  	oa.TryGetValue (nlist [nlist.IndexOf (name)]' out ll);  	ll.Add (new long[2] {  		begin_offset'  		end_offset  	});  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: for (int i = 0; i < 11; i++) {  	fs.ReadLine (progressBar1' loading);  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: while (true) {  	string line = fs.ReadLine (progressBar1' loading);  	if (line.Contains ("Continued on page")) {  		cont = true;  	}  	else if (line.Contains ("\f")) {  		if (cont == true) {  			cont = false;  		}  		else {  			end_offset = fs.Position;  			fs.Seek (-3' SeekOrigin.Current);  			break;  		}  	}  	else if (line == "\0") {  		goto end_of_file;  	}  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: if (line.Contains ("Continued on page")) {  	cont = true;  }  else if (line.Contains ("\f")) {  	if (cont == true) {  		cont = false;  	}  	else {  		end_offset = fs.Position;  		fs.Seek (-3' SeekOrigin.Current);  		break;  	}  }  else if (line == "\0") {  	goto end_of_file;  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: if (line.Contains ("\f")) {  	if (cont == true) {  		cont = false;  	}  	else {  		end_offset = fs.Position;  		fs.Seek (-3' SeekOrigin.Current);  		break;  	}  }  else if (line == "\0") {  	goto end_of_file;  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: if (cont == true) {  	cont = false;  }  else {  	end_offset = fs.Position;  	fs.Seek (-3' SeekOrigin.Current);  	break;  }  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: fs.Seek (-3' SeekOrigin.Current);  
Magic Number,StatementSearch,Form1,C:\repos\Zer0-One_StatementSearch\StatementSearch\Form1.cs,loadNames,The following statement contains a magic number: ll.Add (new long[2] {  	begin_offset'  	end_offset  });  
