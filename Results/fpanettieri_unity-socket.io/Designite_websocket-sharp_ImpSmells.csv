Implementation smell,Namespace,Class,File,Method,Description
Long Method,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,initEntities,The method has 257 lines of code.
Long Method,WebSocketSharp.Net,WebHeaderCollection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\WebHeaderCollection.cs,WebHeaderCollection,The method has 441 lines of code.
Complex Method,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,TryCreateWebSocketUri,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,createHandshakeRequest,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,Cyclomatic complexity of the method is 9
Complex Method,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,readTrailer,Cyclomatic complexity of the method is 11
Complex Method,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,setChunkSize,Cyclomatic complexity of the method is 12
Complex Method,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,write,Cyclomatic complexity of the method is 10
Complex Method,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,toResponseStringVersion1,Cyclomatic complexity of the method is 10
Complex Method,WebSocketSharp.Net,EndPointListener,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\EndPointListener.cs,searchListener,Cyclomatic complexity of the method is 12
Complex Method,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,AddHeader,Cyclomatic complexity of the method is 11
Complex Method,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,FinishInitialization,Cyclomatic complexity of the method is 9
Complex Method,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,Cyclomatic complexity of the method is 19
Complex Method,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlDecode,Cyclomatic complexity of the method is 10
Complex Method,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 8
Complex Method,WebSocketSharp.Net,ListenerPrefix,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ListenerPrefix.cs,CheckUriPrefix,Cyclomatic complexity of the method is 9
Complex Method,WebSocketSharp.Net,RequestStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\RequestStream.cs,fillFromBuffer,Cyclomatic complexity of the method is 12
Complex Method,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkedRequestStream.cs,BeginRead,Cyclomatic complexity of the method is 8
Long Parameter List,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,readBytes,The method has 5 parameters. Parameters: stream' buffer' offset' length' dest
Long Parameter List,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetWebSocketContext,The method has 5 parameters. Parameters: client' protocol' secure' cert' logger
Long Parameter List,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,WebSocketFrame,The method has 5 parameters. Parameters: fin' opcode' mask' payload' compressed
Long Parameter List,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,CreateFrame,The method has 5 parameters. Parameters: fin' opcode' mask' data' compressed
Long Parameter List,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,hash,The method has 5 parameters. Parameters: i' j' k' l' m
Long Parameter List,WebSocketSharp.Net,EndPointListener,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\EndPointListener.cs,EndPointListener,The method has 5 parameters. Parameters: address' port' secure' certFolderPath' defaultCert
Long Parameter List,WebSocketSharp.Net,RequestStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\RequestStream.cs,RequestStream,The method has 5 parameters. Parameters: stream' buffer' offset' length' contentlength
Long Parameter List,WebSocketSharp.Net,RequestStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\RequestStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,WebSocketSharp.Net,RequestStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\RequestStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,WebSocketSharp.Net,ResponseStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ResponseStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,WebSocketSharp.Net,ResponseStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ResponseStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,WebSocketSharp.Net,WebHeaderCollection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\WebHeaderCollection.cs,doWithCheckingState,The method has 5 parameters. Parameters: action' name' value' response' setState
Long Parameter List,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkedRequestStream.cs,ChunkedRequestStream,The method has 5 parameters. Parameters: context' stream' buffer' offset' length
Long Parameter List,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkedRequestStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,WebSocketSharp.Net,AuthenticationResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationResponse.cs,createA1,The method has 5 parameters. Parameters: username' password' realm' nonce' cnonce
Long Parameter List,WebSocketSharp.Net.WebSockets,TcpListenerWebSocketContext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\WebSockets\TcpListenerWebSocketContext.cs,TcpListenerWebSocketContext,The method has 5 parameters. Parameters: client' protocol' secure' cert' logger
Long Identifier,WebSocketSharp.Net.Security,SslStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Security\SslStream.cs,SslStream,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,WebSocketSharp.Net.Security,SslStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Security\SslStream.cs,SslStream,The length of the parameter userCertificateValidationCallback is 33.
Long Identifier,WebSocketSharp.Net.Security,SslStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Security\SslStream.cs,SslStream,The length of the parameter userCertificateSelectionCallback is 32.
Complex Conditional,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,TryCreateWebSocketUri,The conditional expression  "(scheme == "ws" && port == 443) || (scheme == "wss" && port == 80)"  is complex.
Complex Conditional,WebSocketSharp,WebSocketStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketStream.cs,readHandshakeHeaders,The conditional expression  "stream.ReadByte ().EqualsWith ('\r'' add) &&              stream.ReadByte ().EqualsWith ('\n'' add) &&              stream.ReadByte ().EqualsWith ('\r'' add) &&              stream.ReadByte ().EqualsWith ('\n'' add)"  is complex.
Complex Conditional,WebSocketSharp.Net,CookieCollection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\CookieCollection.cs,searchCookie,The conditional expression  "c.Name.Equals (name' StringComparison.InvariantCultureIgnoreCase) &&              c.Path.Equals (path' StringComparison.InvariantCulture) &&              c.Domain.Equals (domain' StringComparison.InvariantCultureIgnoreCase) &&              c.Version == version"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,Close,The conditional expression  "req.KeepAlive &&                !res.CloseConnection &&                req.FlushInput () &&                (!_chunked || (_chunked && !res.ForceCloseChunked))"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,SetRequestLine,The conditional expression  "parts [2].Length != 8 ||            !parts [2].StartsWith ("HTTP/") ||            !tryCreateVersion (parts [2].Substring (5)' out _version) ||            _version.Major < 1"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,urlEncodeChar,The conditional expression  "(c < '0') ||            (c < 'A' && c > '9') ||            (c > 'Z' && c < 'a') ||            (c > 'z')"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,CreateRequestUrl,The conditional expression  "requestUri == null || requestUri.Length == 0 || host == null || host.Length == 0"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,ParseQueryStringInternally,The conditional expression  "query == null || (len = query.Length) == 0 || (len == 1 && query [0] == '?')"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Complex Conditional,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Empty Catch Block,WebSocketSharp.Net,EndPointListener,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\EndPointListener.cs,getCertificate,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,closeSocket,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,disposeTimer,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,SendError,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,HttpListenerContext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerContext.cs,SetUser,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,ListenerAsyncResult,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ListenerAsyncResult.cs,invokeCallback,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,ResponseStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ResponseStream.cs,WriteInternally,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,ResponseStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ResponseStream.cs,EndWrite,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net,AuthenticationResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationResponse.cs,Parse,The method has an empty catch block.
Empty Catch Block,WebSocketSharp.Net.WebSockets,TcpListenerWebSocketContext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\WebSockets\TcpListenerWebSocketContext.cs,SetUser,The method has an empty catch block.
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,Append,The following statement contains a magic number: using (var buffer = new MemoryStream ()) {          var tmp = code.ToByteArrayInternally (ByteOrder.Big);          buffer.Write (tmp' 0' 2);          if (reason != null && reason.Length > 0) {            tmp = Encoding.UTF8.GetBytes (reason);            buffer.Write (tmp' 0' tmp.Length);          }            buffer.Close ();          return buffer.ToArray ();        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,CheckIfValidControlData,The following statement contains a magic number: return data.Length > 125               ? String.Format ("'{0}' length must be less."' paramName)               : null;
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,CopyTo,The following statement contains a magic number: var bufferLen = 256;
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,EqualsWith,The following statement contains a magic number: if (value < 0 || value > 255)          throw new ArgumentOutOfRangeException ("value");
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,IsPortNumber,The following statement contains a magic number: return value > 0 && value < 65536;
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,SplitHeaderValue,The following statement contains a magic number: var buffer = new StringBuilder (32);
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,TryCreateWebSocketUri,The following statement contains a magic number: if (port > 0) {          if (port > 65535) {            message = "The port part must be between 1 and 65535: " + port;            return false;          }            if ((scheme == "ws" && port == 443) || (scheme == "wss" && port == 80)) {            message = String.Format (              "Invalid pair of scheme and port: {0}' {1}"' scheme' port);            return false;          }        }        else {          port = scheme == "ws" ? 80 : 443;          var url = String.Format (            "{0}://{1}:{2}{3}"' scheme' uri.Host' port' uri.PathAndQuery);          uri = url.ToUri ();        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,TryCreateWebSocketUri,The following statement contains a magic number: if (port > 0) {          if (port > 65535) {            message = "The port part must be between 1 and 65535: " + port;            return false;          }            if ((scheme == "ws" && port == 443) || (scheme == "wss" && port == 80)) {            message = String.Format (              "Invalid pair of scheme and port: {0}' {1}"' scheme' port);            return false;          }        }        else {          port = scheme == "ws" ? 80 : 443;          var url = String.Format (            "{0}://{1}:{2}{3}"' scheme' uri.Host' port' uri.PathAndQuery);          uri = url.ToUri ();        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,TryCreateWebSocketUri,The following statement contains a magic number: if (port > 0) {          if (port > 65535) {            message = "The port part must be between 1 and 65535: " + port;            return false;          }            if ((scheme == "ws" && port == 443) || (scheme == "wss" && port == 80)) {            message = String.Format (              "Invalid pair of scheme and port: {0}' {1}"' scheme' port);            return false;          }        }        else {          port = scheme == "ws" ? 80 : 443;          var url = String.Format (            "{0}://{1}:{2}{3}"' scheme' uri.Host' port' uri.PathAndQuery);          uri = url.ToUri ();        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,TryCreateWebSocketUri,The following statement contains a magic number: if (port > 0) {          if (port > 65535) {            message = "The port part must be between 1 and 65535: " + port;            return false;          }            if ((scheme == "ws" && port == 443) || (scheme == "wss" && port == 80)) {            message = String.Format (              "Invalid pair of scheme and port: {0}' {1}"' scheme' port);            return false;          }        }        else {          port = scheme == "ws" ? 80 : 443;          var url = String.Format (            "{0}://{1}:{2}{3}"' scheme' uri.Host' port' uri.PathAndQuery);          uri = url.ToUri ();        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,TryCreateWebSocketUri,The following statement contains a magic number: if (port > 0) {          if (port > 65535) {            message = "The port part must be between 1 and 65535: " + port;            return false;          }            if ((scheme == "ws" && port == 443) || (scheme == "wss" && port == 80)) {            message = String.Format (              "Invalid pair of scheme and port: {0}' {1}"' scheme' port);            return false;          }        }        else {          port = scheme == "ws" ? 80 : 443;          var url = String.Format (            "{0}://{1}:{2}{3}"' scheme' uri.Host' port' uri.PathAndQuery);          uri = url.ToUri ();        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following statement contains a magic number: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,IsCloseStatusCode,The following statement contains a magic number: return value > 999 && value < 5000;
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,IsCloseStatusCode,The following statement contains a magic number: return value > 999 && value < 5000;
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,IsPredefinedScheme,The following statement contains a magic number: if (value == null || value.Length < 2)          return false;
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,MaybeUri,The following statement contains a magic number: if (i >= 10)          return false;
Magic Number,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,ToString,The following statement contains a magic number: var buffer = new StringBuilder (64);
Magic Number,WebSocketSharp,CloseEventArgs,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\CloseEventArgs.cs,CloseEventArgs,The following statement contains a magic number: _code = len > 1                ? data.SubArray (0' 2).ToUInt16 (ByteOrder.Big)                : (ushort) CloseStatusCode.NoStatusCode;
Magic Number,WebSocketSharp,CloseEventArgs,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\CloseEventArgs.cs,CloseEventArgs,The following statement contains a magic number: _reason = len > 2                  ? Encoding.UTF8.GetString (data.SubArray (2' len - 2))                  : String.Empty;
Magic Number,WebSocketSharp,CloseEventArgs,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\CloseEventArgs.cs,CloseEventArgs,The following statement contains a magic number: _reason = len > 2                  ? Encoding.UTF8.GetString (data.SubArray (2' len - 2))                  : String.Empty;
Magic Number,WebSocketSharp,CloseEventArgs,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\CloseEventArgs.cs,CloseEventArgs,The following statement contains a magic number: _reason = len > 2                  ? Encoding.UTF8.GetString (data.SubArray (2' len - 2))                  : String.Empty;
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,acceptSecWebSocketExtensionsHeader,The following statement contains a magic number: var extensions = new StringBuilder (32);
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,acceptSecWebSocketExtensionsHeader,The following statement contains a magic number: if (len > 0) {          extensions.Length = len - 2;          _extensions = extensions.ToString ();        }
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,close,The following statement contains a magic number: e.WasClean =          _client          ? closeHandshake (              send ? WebSocketFrame.CreateCloseFrame (Mask.Mask' payload).ToByteArray () : null'              wait ? 5000 : 0'              closeClientResources)          : closeHandshake (              send ? WebSocketFrame.CreateCloseFrame (Mask.Unmask' payload).ToByteArray () : null'              wait ? 1000 : 0'              closeServerResources);
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,close,The following statement contains a magic number: e.WasClean =          _client          ? closeHandshake (              send ? WebSocketFrame.CreateCloseFrame (Mask.Mask' payload).ToByteArray () : null'              wait ? 5000 : 0'              closeClientResources)          : closeHandshake (              send ? WebSocketFrame.CreateCloseFrame (Mask.Unmask' payload).ToByteArray () : null'              wait ? 1000 : 0'              closeServerResources);
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,createExtensionsRequest,The following statement contains a magic number: var extensions = new StringBuilder (32);
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,createHandshakeRequest,The following statement contains a magic number: var host = _uri.Port == 80 ? _uri.DnsSafeHost : _uri.Authority;
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,sendFragmented,The following statement contains a magic number: var times = rem == 0 ? quo - 2 : quo - 1;
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,CreateBase64Key,The following statement contains a magic number: var src = new byte [16];
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,CreateResponseKey,The following statement contains a magic number: var buffer = new StringBuilder (base64Key' 64);
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,Ping,The following statement contains a magic number: return _client               ? Ping (WebSocketFrame.CreatePingFrame (Mask.Mask).ToByteArray ()' 5000)               : Ping (WebSocketFrame.EmptyUnmaskPingData' 1000);
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,Ping,The following statement contains a magic number: return _client               ? Ping (WebSocketFrame.CreatePingFrame (Mask.Mask).ToByteArray ()' 5000)               : Ping (WebSocketFrame.EmptyUnmaskPingData' 1000);
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,Ping,The following statement contains a magic number: return _client               ? Ping (WebSocketFrame.CreatePingFrame (Mask.Mask' data).ToByteArray ()' 5000)               : Ping (WebSocketFrame.CreatePingFrame (Mask.Unmask' data).ToByteArray ()' 1000);
Magic Number,WebSocketSharp,WebSocket,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocket.cs,Ping,The following statement contains a magic number: return _client               ? Ping (WebSocketFrame.CreatePingFrame (Mask.Mask' data).ToByteArray ()' 5000)               : Ping (WebSocketFrame.CreatePingFrame (Mask.Unmask' data).ToByteArray ()' 1000);
Magic Number,WebSocketSharp,PayloadData,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\PayloadData.cs,mask,The following statement contains a magic number: for (long i = 0; i < src.LongLength; i++)          src [i] = (byte) (src [i] ^ key [i % 4]);
Magic Number,WebSocketSharp,LogData,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\LogData.cs,ToString,The following statement contains a magic number: var log = new StringBuilder (          String.Format ("{0}{1}\n"' headerAndCaller' messages [0])' 64);
Magic Number,WebSocketSharp,Logger,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Logger.cs,output,The following statement contains a magic number: lock (_sync) {          if (_level > level)            return;            LogData data = null;          try {            data = new LogData (level' new StackFrame (2' true)' message);            _output (data' _file);          }          catch (Exception ex) {            data = new LogData (LogLevel.Fatal' new StackFrame (0' true)' ex.Message);            Console.WriteLine (data.ToString ());          }        }
Magic Number,WebSocketSharp,HandshakeBase,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeBase.cs,getEncoding,The following statement contains a magic number: var charset = contentType.Substring (i + 8);
Magic Number,WebSocketSharp,HandshakeRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeRequest.cs,Parse,The following statement contains a magic number: var requestLine = headerParts[0].Split (new[] { ' ' }' 3);
Magic Number,WebSocketSharp,HandshakeRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeRequest.cs,Parse,The following statement contains a magic number: if (requestLine.Length != 3)          throw new ArgumentException ("Invalid request line: " + headerParts[0]);
Magic Number,WebSocketSharp,HandshakeRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeRequest.cs,Parse,The following statement contains a magic number: var req = new HandshakeRequest (new Version (requestLine[2].Substring (5))' headers);
Magic Number,WebSocketSharp,HandshakeRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeRequest.cs,Parse,The following statement contains a magic number: var req = new HandshakeRequest (new Version (requestLine[2].Substring (5))' headers);
Magic Number,WebSocketSharp,HandshakeRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeRequest.cs,SetCookies,The following statement contains a magic number: var buff = new StringBuilder (64);
Magic Number,WebSocketSharp,HandshakeRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeRequest.cs,SetCookies,The following statement contains a magic number: if (len > 2) {          buff.Length = len - 2;          Headers["Cookie"] = buff.ToString ();        }
Magic Number,WebSocketSharp,HandshakeRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeRequest.cs,SetCookies,The following statement contains a magic number: if (len > 2) {          buff.Length = len - 2;          Headers["Cookie"] = buff.ToString ();        }
Magic Number,WebSocketSharp,HandshakeRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeRequest.cs,ToString,The following statement contains a magic number: var output = new StringBuilder (64);
Magic Number,WebSocketSharp,HandshakeResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeResponse.cs,Parse,The following statement contains a magic number: var statusLine = headerParts[0].Split (new[] { ' ' }' 3);
Magic Number,WebSocketSharp,HandshakeResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeResponse.cs,Parse,The following statement contains a magic number: if (statusLine.Length != 3)          throw new ArgumentException ("Invalid status line: " + headerParts[0]);
Magic Number,WebSocketSharp,HandshakeResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeResponse.cs,Parse,The following statement contains a magic number: var res = new HandshakeResponse (new Version (statusLine[0].Substring (5))' headers);
Magic Number,WebSocketSharp,HandshakeResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeResponse.cs,Parse,The following statement contains a magic number: res._reason = statusLine[2];
Magic Number,WebSocketSharp,HandshakeResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\HandshakeResponse.cs,ToString,The following statement contains a magic number: var output = new StringBuilder (64);
Magic Number,WebSocketSharp,WebSocketStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketStream.cs,readHandshakeEntityBody,The following statement contains a magic number: return len > 1024               ? stream.ReadBytes (len' 1024)               : len > 0                 ? stream.ReadBytes ((int) len)                 : null;
Magic Number,WebSocketSharp,WebSocketStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketStream.cs,readHandshakeEntityBody,The following statement contains a magic number: return len > 1024               ? stream.ReadBytes (len' 1024)               : len > 0                 ? stream.ReadBytes ((int) len)                 : null;
Magic Number,WebSocketSharp,WebSocketStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketStream.cs,ReadHandshakeRequest,The following statement contains a magic number: return ReadHandshake<HandshakeRequest> (HandshakeRequest.Parse' 90000);
Magic Number,WebSocketSharp,WebSocketStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketStream.cs,ReadHandshakeResponse,The following statement contains a magic number: return ReadHandshake<HandshakeResponse> (HandshakeResponse.Parse' 90000);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,WebSocketFrame,The following statement contains a magic number: if (len < 126) {          _payloadLength = (byte) len;          _extPayloadLength = new byte [0];        }        else if (len < 0x010000) {          _payloadLength = (byte) 126;          _extPayloadLength = ((ushort) len).ToByteArrayInternally (ByteOrder.Big);        }        else {          _payloadLength = (byte) 127;          _extPayloadLength = len.ToByteArrayInternally (ByteOrder.Big);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,WebSocketFrame,The following statement contains a magic number: if (len < 126) {          _payloadLength = (byte) len;          _extPayloadLength = new byte [0];        }        else if (len < 0x010000) {          _payloadLength = (byte) 126;          _extPayloadLength = ((ushort) len).ToByteArrayInternally (ByteOrder.Big);        }        else {          _payloadLength = (byte) 127;          _extPayloadLength = len.ToByteArrayInternally (ByteOrder.Big);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,WebSocketFrame,The following statement contains a magic number: if (len < 126) {          _payloadLength = (byte) len;          _extPayloadLength = new byte [0];        }        else if (len < 0x010000) {          _payloadLength = (byte) 126;          _extPayloadLength = ((ushort) len).ToByteArrayInternally (ByteOrder.Big);        }        else {          _payloadLength = (byte) 127;          _extPayloadLength = len.ToByteArrayInternally (ByteOrder.Big);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,createMaskingKey,The following statement contains a magic number: var key = new byte [4];
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: var cnt = (long) (len / 4);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: var rem = (int) (len % 4);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: if (cnt < 10000) {          cntDigit = 4;          cntFmt = "{0'4}";        }        else if (cnt < 0x010000) {          cntDigit = 4;          cntFmt = "{0'4:X}";        }        else if (cnt < 0x0100000000) {          cntDigit = 8;          cntFmt = "{0'8:X}";        }        else {          cntDigit = 16;          cntFmt = "{0'16:X}";        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: if (cnt < 10000) {          cntDigit = 4;          cntFmt = "{0'4}";        }        else if (cnt < 0x010000) {          cntDigit = 4;          cntFmt = "{0'4:X}";        }        else if (cnt < 0x0100000000) {          cntDigit = 8;          cntFmt = "{0'8:X}";        }        else {          cntDigit = 16;          cntFmt = "{0'16:X}";        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: if (cnt < 10000) {          cntDigit = 4;          cntFmt = "{0'4}";        }        else if (cnt < 0x010000) {          cntDigit = 4;          cntFmt = "{0'4:X}";        }        else if (cnt < 0x0100000000) {          cntDigit = 8;          cntFmt = "{0'8:X}";        }        else {          cntDigit = 16;          cntFmt = "{0'16:X}";        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: if (cnt < 10000) {          cntDigit = 4;          cntFmt = "{0'4}";        }        else if (cnt < 0x010000) {          cntDigit = 4;          cntFmt = "{0'4:X}";        }        else if (cnt < 0x0100000000) {          cntDigit = 8;          cntFmt = "{0'8:X}";        }        else {          cntDigit = 16;          cntFmt = "{0'16:X}";        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: if (cnt < 10000) {          cntDigit = 4;          cntFmt = "{0'4}";        }        else if (cnt < 0x010000) {          cntDigit = 4;          cntFmt = "{0'4:X}";        }        else if (cnt < 0x0100000000) {          cntDigit = 8;          cntFmt = "{0'8:X}";        }        else {          cntDigit = 16;          cntFmt = "{0'16:X}";        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: var output = new StringBuilder (64);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,dump,The following statement contains a magic number: for (long i = 0; i <= cnt; i++) {          var j = i * 4;          if (i < cnt)            printLine (              Convert.ToString (frameAsBytes [j]'     2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0')'              Convert.ToString (frameAsBytes [j + 3]' 2).PadLeft (8' '0'));          else if (rem > 0)            printLine (              Convert.ToString (frameAsBytes [j]' 2).PadLeft (8' '0')'              rem >= 2 ? Convert.ToString (frameAsBytes [j + 1]' 2).PadLeft (8' '0') : String.Empty'              rem == 3 ? Convert.ToString (frameAsBytes [j + 2]' 2).PadLeft (8' '0') : String.Empty'              String.Empty);        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: if (isControl (opcode) && payloadLen > 125)          throw new WebSocketException (            CloseStatusCode.InconsistentData'            "The length of payload data of a control frame is greater than 125 bytes.");
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: var size = payloadLen < 126                   ? 0                   : payloadLen == 126                     ? 2                     : 8;
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: var size = payloadLen < 126                   ? 0                   : payloadLen == 126                     ? 2                     : 8;
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: var size = payloadLen < 126                   ? 0                   : payloadLen == 126                     ? 2                     : 8;
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: var size = payloadLen < 126                   ? 0                   : payloadLen == 126                     ? 2                     : 8;
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: var maskingKey = masked ? stream.ReadBytes (4) : new byte [0];
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: if (masked && maskingKey.Length != 4)          throw new WebSocketException (            "The 'Masking Key' of a frame cannot be read from the data source.");
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: ulong len = payloadLen < 126                    ? payloadLen                    : payloadLen == 126                      ? extPayloadLen.ToUInt16 (ByteOrder.Big)                      : extPayloadLen.ToUInt64 (ByteOrder.Big);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: ulong len = payloadLen < 126                    ? payloadLen                    : payloadLen == 126                      ? extPayloadLen.ToUInt16 (ByteOrder.Big)                      : extPayloadLen.ToUInt64 (ByteOrder.Big);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: if (len > 0) {          // Check if allowable payload data length.          if (payloadLen > 126 && len > PayloadData.MaxLength)            throw new WebSocketException (              CloseStatusCode.TooBig'              "The length of 'Payload Data' of a frame is greater than the allowable length.");            data = payloadLen > 126                 ? stream.ReadBytes ((long) len' 1024)                 : stream.ReadBytes ((int) len);            if (data.LongLength != (long) len)            throw new WebSocketException (              "The 'Payload Data' of a frame cannot be read from the data source.");        }        else {          data = new byte [0];        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: if (len > 0) {          // Check if allowable payload data length.          if (payloadLen > 126 && len > PayloadData.MaxLength)            throw new WebSocketException (              CloseStatusCode.TooBig'              "The length of 'Payload Data' of a frame is greater than the allowable length.");            data = payloadLen > 126                 ? stream.ReadBytes ((long) len' 1024)                 : stream.ReadBytes ((int) len);            if (data.LongLength != (long) len)            throw new WebSocketException (              "The 'Payload Data' of a frame cannot be read from the data source.");        }        else {          data = new byte [0];        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,parse,The following statement contains a magic number: if (len > 0) {          // Check if allowable payload data length.          if (payloadLen > 126 && len > PayloadData.MaxLength)            throw new WebSocketException (              CloseStatusCode.TooBig'              "The length of 'Payload Data' of a frame is greater than the allowable length.");            data = payloadLen > 126                 ? stream.ReadBytes ((long) len' 1024)                 : stream.ReadBytes ((int) len);            if (data.LongLength != (long) len)            throw new WebSocketException (              "The 'Payload Data' of a frame cannot be read from the data source.");        }        else {          data = new byte [0];        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,print,The following statement contains a magic number: var extPayloadLen = size == 2                            ? ext.ToUInt16 (ByteOrder.Big).ToString ()                            : size == 8                              ? ext.ToUInt64 (ByteOrder.Big).ToString ()                              : String.Empty;
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,print,The following statement contains a magic number: var extPayloadLen = size == 2                            ? ext.ToUInt16 (ByteOrder.Big).ToString ()                            : size == 8                              ? ext.ToUInt64 (ByteOrder.Big).ToString ()                              : String.Empty;
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,Parse,The following statement contains a magic number: var header = stream.ReadBytes (2);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,Parse,The following statement contains a magic number: if (header.Length != 2)          throw new WebSocketException (            "The header part of a frame cannot be read from the data source.");
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,ParseAsync,The following statement contains a magic number: stream.ReadBytesAsync (          2'          header => {            if (header.Length != 2)              throw new WebSocketException (                "The header part of a frame cannot be read from the data source.");              var frame = parse (header' stream' unmask);            if (completed != null)              completed (frame);          }'          error);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,ParseAsync,The following statement contains a magic number: stream.ReadBytesAsync (          2'          header => {            if (header.Length != 2)              throw new WebSocketException (                "The header part of a frame cannot be read from the data source.");              var frame = parse (header' stream' unmask);            if (completed != null)              completed (frame);          }'          error);
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,ToByteArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).ToByteArrayInternally (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _extPayloadLength.Length);            if (_mask == Mask.Mask)            buff.Write (_maskingKey' 0' _maskingKey.Length);            if (_payloadLength > 0) {            var payload = _payloadData.ToByteArray ();            if (_payloadLength < 127)              buff.Write (payload' 0' payload.Length);            else              buff.WriteBytes (payload);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,ToByteArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).ToByteArrayInternally (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _extPayloadLength.Length);            if (_mask == Mask.Mask)            buff.Write (_maskingKey' 0' _maskingKey.Length);            if (_payloadLength > 0) {            var payload = _payloadData.ToByteArray ();            if (_payloadLength < 127)              buff.Write (payload' 0' payload.Length);            else              buff.WriteBytes (payload);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,ToByteArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).ToByteArrayInternally (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _extPayloadLength.Length);            if (_mask == Mask.Mask)            buff.Write (_maskingKey' 0' _maskingKey.Length);            if (_payloadLength > 0) {            var payload = _payloadData.ToByteArray ();            if (_payloadLength < 127)              buff.Write (payload' 0' payload.Length);            else              buff.WriteBytes (payload);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,ToByteArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).ToByteArrayInternally (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _extPayloadLength.Length);            if (_mask == Mask.Mask)            buff.Write (_maskingKey' 0' _maskingKey.Length);            if (_payloadLength > 0) {            var payload = _payloadData.ToByteArray ();            if (_payloadLength < 127)              buff.Write (payload' 0' payload.Length);            else              buff.WriteBytes (payload);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp,WebSocketFrame,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\WebSocketFrame.cs,ToByteArray,The following statement contains a magic number: using (var buff = new MemoryStream ()) {          var header = (int) _fin;          header = (header << 1) + (int) _rsv1;          header = (header << 1) + (int) _rsv2;          header = (header << 1) + (int) _rsv3;          header = (header << 4) + (int) _opcode;          header = (header << 1) + (int) _mask;          header = (header << 7) + (int) _payloadLength;          buff.Write (((ushort) header).ToByteArrayInternally (ByteOrder.Big)' 0' 2);            if (_payloadLength > 125)            buff.Write (_extPayloadLength' 0' _extPayloadLength.Length);            if (_mask == Mask.Mask)            buff.Write (_maskingKey' 0' _maskingKey.Length);            if (_payloadLength > 0) {            var payload = _payloadData.ToByteArray ();            if (_payloadLength < 127)              buff.Write (payload' 0' payload.Length);            else              buff.WriteBytes (payload);          }            buff.Close ();          return buff.ToArray ();        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,readTrailer,The following statement contains a magic number: if (_trailerState == 2 && (char) buffer [offset] == '\r' && _saved.Length == 0) {          offset++;          if (offset < size && (char) buffer [offset] == '\n') {            offset++;            return InputChunkState.None;          }            offset--;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,readTrailer,The following statement contains a magic number: while (offset < size && st < 4) {          c = (char) buffer [offset++];          if ((st == 0 || st == 2) && c == '\r') {            st++;            continue;          }            if ((st == 1 || st == 3) && c == '\n') {            st++;            continue;          }            if (st > 0) {            _saved.Append (stString.Substring (0' _saved.Length == 0 ? st - 2 : st));            st = 0;            if (_saved.Length > 4196)              throwProtocolViolation ("Error reading trailer (too long).");          }        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,readTrailer,The following statement contains a magic number: while (offset < size && st < 4) {          c = (char) buffer [offset++];          if ((st == 0 || st == 2) && c == '\r') {            st++;            continue;          }            if ((st == 1 || st == 3) && c == '\n') {            st++;            continue;          }            if (st > 0) {            _saved.Append (stString.Substring (0' _saved.Length == 0 ? st - 2 : st));            st = 0;            if (_saved.Length > 4196)              throwProtocolViolation ("Error reading trailer (too long).");          }        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,readTrailer,The following statement contains a magic number: while (offset < size && st < 4) {          c = (char) buffer [offset++];          if ((st == 0 || st == 2) && c == '\r') {            st++;            continue;          }            if ((st == 1 || st == 3) && c == '\n') {            st++;            continue;          }            if (st > 0) {            _saved.Append (stString.Substring (0' _saved.Length == 0 ? st - 2 : st));            st = 0;            if (_saved.Length > 4196)              throwProtocolViolation ("Error reading trailer (too long).");          }        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,readTrailer,The following statement contains a magic number: while (offset < size && st < 4) {          c = (char) buffer [offset++];          if ((st == 0 || st == 2) && c == '\r') {            st++;            continue;          }            if ((st == 1 || st == 3) && c == '\n') {            st++;            continue;          }            if (st > 0) {            _saved.Append (stString.Substring (0' _saved.Length == 0 ? st - 2 : st));            st = 0;            if (_saved.Length > 4196)              throwProtocolViolation ("Error reading trailer (too long).");          }        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,readTrailer,The following statement contains a magic number: while (offset < size && st < 4) {          c = (char) buffer [offset++];          if ((st == 0 || st == 2) && c == '\r') {            st++;            continue;          }            if ((st == 1 || st == 3) && c == '\n') {            st++;            continue;          }            if (st > 0) {            _saved.Append (stString.Substring (0' _saved.Length == 0 ? st - 2 : st));            st = 0;            if (_saved.Length > 4196)              throwProtocolViolation ("Error reading trailer (too long).");          }        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,readTrailer,The following statement contains a magic number: if (st < 4) {          _trailerState = st;          if (offset < size)            throwProtocolViolation ("Error reading trailer.");            return InputChunkState.Trailer;        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,setChunkSize,The following statement contains a magic number: while (offset < size) {          c = (char) buffer [offset++];          if (c == '\r') {            if (_sawCR)              throwProtocolViolation ("2 CR found.");              _sawCR = true;            continue;          }                    if (_sawCR && c == '\n')            break;            if (c == ' ')            _gotit = true;            if (!_gotit)            _saved.Append (c);            if (_saved.Length > 20)            throwProtocolViolation ("Chunk size too long.");        }
Magic Number,WebSocketSharp.Net,ChunkStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkStream.cs,setChunkSize,The following statement contains a magic number: if (_chunkSize == 0) {          _trailerState = 2;          return InputChunkState.Trailer;        }
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,hash,The following statement contains a magic number: return i ^               (j << 13 | j >> 19) ^               (k << 26 | k >>  6) ^               (l <<  7 | l >> 25) ^               (m << 20 | m >> 12);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,toResponseStringVersion0,The following statement contains a magic number: var result = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,toResponseStringVersion1,The following statement contains a magic number: var result = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,Cookie,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\Cookie.cs,ToRequestString,The following statement contains a magic number: var result = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,CookieCollection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\CookieCollection.cs,parseResponse,The following statement contains a magic number: for (int i = 0; i < pairs.Length; i++) {          var pair = pairs [i].Trim ();          if (pair.Length == 0)            continue;            if (pair.StartsWith ("version"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Version = Int32.Parse (pair.GetValueInternal ("=").Trim ('"'));          }          else if (pair.StartsWith ("expires"' StringComparison.InvariantCultureIgnoreCase)) {            var buffer = new StringBuilder (pair.GetValueInternal ("=")' 32);            if (i < pairs.Length - 1)              buffer.AppendFormat ("' {0}"' pairs [++i].Trim ());              DateTime expires;            if (!DateTime.TryParseExact (              buffer.ToString ()'              new [] { "ddd' dd'-'MMM'-'yyyy HH':'mm':'ss 'GMT'"' "r" }'              CultureInfo.CreateSpecificCulture ("en-US")'              DateTimeStyles.AdjustToUniversal | DateTimeStyles.AssumeUniversal'              out expires))              expires = DateTime.Now;              if (cookie != null && cookie.Expires == DateTime.MinValue)              cookie.Expires = expires.ToLocalTime ();          }          else if (pair.StartsWith ("max-age"' StringComparison.InvariantCultureIgnoreCase)) {            var max = Int32.Parse (pair.GetValueInternal ("=").Trim ('"'));            var expires = DateTime.Now.AddSeconds ((double) max);            if (cookie != null)              cookie.Expires = expires;          }          else if (pair.StartsWith ("path"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Path = pair.GetValueInternal ("=");          }          else if (pair.StartsWith ("domain"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Domain = pair.GetValueInternal ("=");          }          else if (pair.StartsWith ("port"' StringComparison.InvariantCultureIgnoreCase)) {            var port = pair.Equals ("port"' StringComparison.InvariantCultureIgnoreCase)                       ? "\"\""                       : pair.GetValueInternal ("=");              if (cookie != null)              cookie.Port = port;          }          else if (pair.StartsWith ("comment"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Comment = pair.GetValueInternal ("=").UrlDecode ();          }          else if (pair.StartsWith ("commenturl"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.CommentUri = pair.GetValueInternal ("=").Trim ('"').ToUri ();          }          else if (pair.StartsWith ("discard"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Discard = true;          }          else if (pair.StartsWith ("secure"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.Secure = true;          }          else if (pair.StartsWith ("httponly"' StringComparison.InvariantCultureIgnoreCase)) {            if (cookie != null)              cookie.HttpOnly = true;          }          else {            if (cookie != null)              cookies.Add (cookie);              string name;            string val = String.Empty;              var pos = pair.IndexOf ('=');            if (pos == -1) {              name = pair;            }            else if (pos == pair.Length - 1) {              name = pair.Substring (0' pos).TrimEnd (' ');            }            else {              name = pair.Substring (0' pos).TrimEnd (' ');              val = pair.Substring (pos + 1).TrimStart (' ');            }              cookie = new Cookie (name' val);          }        }
Magic Number,WebSocketSharp.Net,EndPointListener,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\EndPointListener.cs,EndPointListener,The following statement contains a magic number: _socket.Listen (500);
Magic Number,WebSocketSharp.Net,EndPointListener,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\EndPointListener.cs,addSpecial,The following statement contains a magic number: foreach (var pref in prefixes)          if (pref.Path == path) // TODO: Code?            throw new HttpListenerException (400' "Prefix already in use.");
Magic Number,WebSocketSharp.Net,EndPointListener,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\EndPointListener.cs,AddPrefix,The following statement contains a magic number: do {          prefs = _prefixes;          if (prefs.ContainsKey (prefix)) {            var other = prefs [prefix];            if (other != listener) // TODO: Code?              throw new HttpListenerException (400' "There's another listener for " + prefix);              return;          }            prefs2 = new Dictionary<ListenerPrefix' HttpListener> (prefs);          prefs2 [prefix] = listener;        }        while (Interlocked.CompareExchange (ref _prefixes' prefs2' prefs) != prefs);
Magic Number,WebSocketSharp.Net,EndPointManager,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\EndPointManager.cs,addPrefix,The following statement contains a magic number: if (prefix.Path.IndexOf ('%') != -1)          throw new HttpListenerException (400' "Invalid path.");
Magic Number,WebSocketSharp.Net,EndPointManager,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\EndPointManager.cs,addPrefix,The following statement contains a magic number: if (prefix.Path.IndexOf ("//"' StringComparison.Ordinal) != -1)          throw new HttpListenerException (400' "Invalid path.");
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,HttpConnection,The following statement contains a magic number: _timeout = 90000;
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,onRead,The following statement contains a magic number: lock (conn._sync) {          if (conn._socket == null)            return;            var nread = -1;          try {            conn._timer.Change (Timeout.Infinite' Timeout.Infinite);            nread = conn._stream.EndRead (asyncResult);            conn._requestBuffer.Write (conn._buffer' 0' nread);            if (conn._requestBuffer.Length > 32768) {              conn.SendError ("Bad request"' 400);              conn.Close (true);                return;            }          }          catch {            if (conn._requestBuffer != null && conn._requestBuffer.Length > 0)              conn.SendError ();              conn.close ();            return;          }            if (nread <= 0) {            conn.close ();            return;          }            if (conn.processInput (conn._requestBuffer.GetBuffer ())) {            if (!conn._context.HasError)              conn._context.Request.FinishInitialization ();              if (conn._context.HasError) {              conn.SendError ();              conn.Close (true);                return;            }              if (!conn._listener.BindContext (conn._context)) {              conn.SendError ("Invalid host"' 400);              conn.Close (true);                return;            }              var listener = conn._context.Listener;            if (conn._lastListener != listener) {              conn.removeConnection ();              listener.AddConnection (conn);              conn._lastListener = listener;            }              conn._contextWasBound = true;            listener.RegisterContext (conn._context);              return;          }            conn._stream.BeginRead (conn._buffer' 0' _bufferSize' onRead' conn);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,onRead,The following statement contains a magic number: lock (conn._sync) {          if (conn._socket == null)            return;            var nread = -1;          try {            conn._timer.Change (Timeout.Infinite' Timeout.Infinite);            nread = conn._stream.EndRead (asyncResult);            conn._requestBuffer.Write (conn._buffer' 0' nread);            if (conn._requestBuffer.Length > 32768) {              conn.SendError ("Bad request"' 400);              conn.Close (true);                return;            }          }          catch {            if (conn._requestBuffer != null && conn._requestBuffer.Length > 0)              conn.SendError ();              conn.close ();            return;          }            if (nread <= 0) {            conn.close ();            return;          }            if (conn.processInput (conn._requestBuffer.GetBuffer ())) {            if (!conn._context.HasError)              conn._context.Request.FinishInitialization ();              if (conn._context.HasError) {              conn.SendError ();              conn.Close (true);                return;            }              if (!conn._listener.BindContext (conn._context)) {              conn.SendError ("Invalid host"' 400);              conn.Close (true);                return;            }              var listener = conn._context.Listener;            if (conn._lastListener != listener) {              conn.removeConnection ();              listener.AddConnection (conn);              conn._lastListener = listener;            }              conn._contextWasBound = true;            listener.RegisterContext (conn._context);              return;          }            conn._stream.BeginRead (conn._buffer' 0' _bufferSize' onRead' conn);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,onRead,The following statement contains a magic number: lock (conn._sync) {          if (conn._socket == null)            return;            var nread = -1;          try {            conn._timer.Change (Timeout.Infinite' Timeout.Infinite);            nread = conn._stream.EndRead (asyncResult);            conn._requestBuffer.Write (conn._buffer' 0' nread);            if (conn._requestBuffer.Length > 32768) {              conn.SendError ("Bad request"' 400);              conn.Close (true);                return;            }          }          catch {            if (conn._requestBuffer != null && conn._requestBuffer.Length > 0)              conn.SendError ();              conn.close ();            return;          }            if (nread <= 0) {            conn.close ();            return;          }            if (conn.processInput (conn._requestBuffer.GetBuffer ())) {            if (!conn._context.HasError)              conn._context.Request.FinishInitialization ();              if (conn._context.HasError) {              conn.SendError ();              conn.Close (true);                return;            }              if (!conn._listener.BindContext (conn._context)) {              conn.SendError ("Invalid host"' 400);              conn.Close (true);                return;            }              var listener = conn._context.Listener;            if (conn._lastListener != listener) {              conn.removeConnection ();              listener.AddConnection (conn);              conn._lastListener = listener;            }              conn._contextWasBound = true;            listener.RegisterContext (conn._context);              return;          }            conn._stream.BeginRead (conn._buffer' 0' _bufferSize' onRead' conn);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,readLine,The following statement contains a magic number: for (int i = offset; i < last && _lineState != LineState.LF; i++) {          used++;          var b = buffer [i];          if (b == 13)            _lineState = LineState.CR;          else if (b == 10)            _lineState = LineState.LF;          else            _currentLine.Append ((char) b);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,readLine,The following statement contains a magic number: for (int i = offset; i < last && _lineState != LineState.LF; i++) {          used++;          var b = buffer [i];          if (b == 13)            _lineState = LineState.CR;          else if (b == 10)            _lineState = LineState.LF;          else            _currentLine.Append ((char) b);        }
Magic Number,WebSocketSharp.Net,HttpConnection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpConnection.cs,BeginReadRequest,The following statement contains a magic number: if (_reuses == 1)          _timeout = 15000;
Magic Number,WebSocketSharp.Net,HttpListenerContext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerContext.cs,HttpListenerContext,The following statement contains a magic number: _errorStatus = 400;
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,FinishInitialization,The following statement contains a magic number: if (_version > HttpVersion.Version10 && encoding != null && encoding.Length > 0) {          _chunked = encoding.ToLower () == "chunked";          if (!_chunked) {            _context.ErrorMessage = String.Empty;            _context.ErrorStatus = 501;              return;          }        }
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,FinishInitialization,The following statement contains a magic number: if (!_chunked && !_contentLengthWasSet) {          var method = _method.ToLower ();          if (method == "post" || method == "put") {            _context.ErrorMessage = String.Empty;            _context.ErrorStatus = 411;              return;          }        }
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,FlushInput,The following statement contains a magic number: var length = 2048;
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,FlushInput,The following statement contains a magic number: while (true) {          // TODO: Test if MS has a timeout when doing this.          try {            var ares = InputStream.BeginRead (buff' 0' length' null' null);            if (!ares.IsCompleted && !ares.AsyncWaitHandle.WaitOne (100))              return false;              if (InputStream.EndRead (ares) <= 0)              return true;          }          catch {            return false;          }        }
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: var parts = requestLine.Split (new [] { ' ' }' 3);
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts.Length != 3) {          _context.ErrorMessage = "Invalid request line (parts)";          return;        }
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts [2].Length != 8 ||            !parts [2].StartsWith ("HTTP/") ||            !tryCreateVersion (parts [2].Substring (5)' out _version) ||            _version.Major < 1)          _context.ErrorMessage = "Invalid request line (version)";
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts [2].Length != 8 ||            !parts [2].StartsWith ("HTTP/") ||            !tryCreateVersion (parts [2].Substring (5)' out _version) ||            _version.Major < 1)          _context.ErrorMessage = "Invalid request line (version)";
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts [2].Length != 8 ||            !parts [2].StartsWith ("HTTP/") ||            !tryCreateVersion (parts [2].Substring (5)' out _version) ||            _version.Major < 1)          _context.ErrorMessage = "Invalid request line (version)";
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts [2].Length != 8 ||            !parts [2].StartsWith ("HTTP/") ||            !tryCreateVersion (parts [2].Substring (5)' out _version) ||            _version.Major < 1)          _context.ErrorMessage = "Invalid request line (version)";
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts [2].Length != 8 ||            !parts [2].StartsWith ("HTTP/") ||            !tryCreateVersion (parts [2].Substring (5)' out _version) ||            _version.Major < 1)          _context.ErrorMessage = "Invalid request line (version)";
Magic Number,WebSocketSharp.Net,HttpListenerRequest,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerRequest.cs,ToString,The following statement contains a magic number: var buff = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,HttpListenerResponse,The following statement contains a magic number: _statusCode = 200;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: var connClose = _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: var connClose = _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: var connClose = _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: var connClose = _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: var connClose = _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: var connClose = _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: var connClose = _statusCode == 400 ||                        _statusCode == 408 ||                        _statusCode == 411 ||                        _statusCode == 413 ||                        _statusCode == 414 ||                        _statusCode == 500 ||                        _statusCode == 503;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: if (reuses >= 100) {          _forceCloseChunked = true;          if (!connClose) {            _headers.SetInternally ("Connection"' "close"' true);            connClose = true;          }        }
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: if (!connClose) {          _headers.SetInternally (            "Keep-Alive"' String.Format ("timeout=15'max={0}"' 100 - reuses)' true);            if (_context.Request.ProtocolVersion <= HttpVersion.Version10)            _headers.SetInternally ("Connection"' "keep-alive"' true);        }
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: var writer = new StreamWriter (stream' encoding' 256);
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: var preamble = encoding.CodePage == 65001 ? 3 : encoding.GetPreamble ().Length;
Magic Number,WebSocketSharp.Net,HttpListenerResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: var preamble = encoding.CodePage == 65001 ? 3 : encoding.GetPreamble ().Length;
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,getChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {          var current = getInt (bytes [i]);          if (current == -1)            return -1;            value = (value << 4) + current;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,getChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {          var c = s [i];          if (c > 127)            return -1;            var current = getInt ((byte) c);          if (current == -1)            return -1;            value = (value << 4) + current;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,getChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {          var c = s [i];          if (c > 127)            return -1;            var current = getInt ((byte) c);          if (current == -1)            return -1;            value = (value << 4) + current;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,getInt,The following statement contains a magic number: return c >= '0' && c <= '9'               ? c - '0'               : c >= 'a' && c <= 'f'                 ? c - 'a' + 10                 : c >= 'A' && c <= 'F'                   ? c - 'A' + 10                   : -1;
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,getInt,The following statement contains a magic number: return c >= '0' && c <= '9'               ? c - '0'               : c >= 'a' && c <= 'f'                 ? c - 'a' + 10                 : c >= 'A' && c <= 'F'                   ? c - 'A' + 10                   : -1;
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,urlEncodeChar,The following statement contains a magic number: if (c > 255) {          // FIXME: What happens when there is an internal error?          //if (!isUnicode)          //  throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256.");            result.WriteByte ((byte) '%');          result.WriteByte ((byte) 'u');            var i = (int) c;          var idx = i >> 12;          result.WriteByte ((byte) _hexChars [idx]);            idx = (i >> 8) & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            idx = (i >> 4) & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            idx = i & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,urlEncodeChar,The following statement contains a magic number: if (c > 255) {          // FIXME: What happens when there is an internal error?          //if (!isUnicode)          //  throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256.");            result.WriteByte ((byte) '%');          result.WriteByte ((byte) 'u');            var i = (int) c;          var idx = i >> 12;          result.WriteByte ((byte) _hexChars [idx]);            idx = (i >> 8) & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            idx = (i >> 4) & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            idx = i & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,urlEncodeChar,The following statement contains a magic number: if (c > 255) {          // FIXME: What happens when there is an internal error?          //if (!isUnicode)          //  throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256.");            result.WriteByte ((byte) '%');          result.WriteByte ((byte) 'u');            var i = (int) c;          var idx = i >> 12;          result.WriteByte ((byte) _hexChars [idx]);            idx = (i >> 8) & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            idx = (i >> 4) & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            idx = i & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,urlEncodeChar,The following statement contains a magic number: if (c > 255) {          // FIXME: What happens when there is an internal error?          //if (!isUnicode)          //  throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256.");            result.WriteByte ((byte) '%');          result.WriteByte ((byte) 'u');            var i = (int) c;          var idx = i >> 12;          result.WriteByte ((byte) _hexChars [idx]);            idx = (i >> 8) & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            idx = (i >> 4) & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            idx = i & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);            return;        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,urlEncodeChar,The following statement contains a magic number: if ((c < '0') ||            (c < 'A' && c > '9') ||            (c > 'Z' && c < 'a') ||            (c > 'z')) {          if (isUnicode && c > 127) {            result.WriteByte ((byte) '%');            result.WriteByte ((byte) 'u');            result.WriteByte ((byte) '0');            result.WriteByte ((byte) '0');          }          else {            result.WriteByte ((byte) '%');          }            var idx = ((int) c) >> 4;          result.WriteByte ((byte) _hexChars [idx]);            idx = ((int) c) & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);        }        else {          result.WriteByte ((byte) c);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,urlEncodeChar,The following statement contains a magic number: if ((c < '0') ||            (c < 'A' && c > '9') ||            (c > 'Z' && c < 'a') ||            (c > 'z')) {          if (isUnicode && c > 127) {            result.WriteByte ((byte) '%');            result.WriteByte ((byte) 'u');            result.WriteByte ((byte) '0');            result.WriteByte ((byte) '0');          }          else {            result.WriteByte ((byte) '%');          }            var idx = ((int) c) >> 4;          result.WriteByte ((byte) _hexChars [idx]);            idx = ((int) c) & 0x0F;          result.WriteByte ((byte) _hexChars [idx]);        }        else {          result.WriteByte ((byte) c);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,urlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {          var bytes = Encoding.UTF8.GetBytes (c.ToString ());          foreach (var b in bytes) {            result.WriteByte ((byte) '%');              var i = ((int) b) >> 4;            result.WriteByte ((byte) _hexChars [i]);              i = ((int) b) & 0x0F;            result.WriteByte ((byte) _hexChars [i]);          }        }        else if (c == ' ') {          result.WriteByte ((byte) '%');          result.WriteByte ((byte) '2');          result.WriteByte ((byte) '0');        }        else {          result.WriteByte ((byte) c);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,urlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {          var bytes = Encoding.UTF8.GetBytes (c.ToString ());          foreach (var b in bytes) {            result.WriteByte ((byte) '%');              var i = ((int) b) >> 4;            result.WriteByte ((byte) _hexChars [i]);              i = ((int) b) & 0x0F;            result.WriteByte ((byte) _hexChars [i]);          }        }        else if (c == ' ') {          result.WriteByte ((byte) '%');          result.WriteByte ((byte) '2');          result.WriteByte ((byte) '0');        }        else {          result.WriteByte ((byte) c);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,urlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {          var bytes = Encoding.UTF8.GetBytes (c.ToString ());          foreach (var b in bytes) {            result.WriteByte ((byte) '%');              var i = ((int) b) >> 4;            result.WriteByte ((byte) _hexChars [i]);              i = ((int) b) & 0x0F;            result.WriteByte ((byte) _hexChars [i]);          }        }        else if (c == ' ') {          result.WriteByte ((byte) '%');          result.WriteByte ((byte) '2');          result.WriteByte ((byte) '0');        }        else {          result.WriteByte ((byte) c);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,writeCharBytes,The following statement contains a magic number: if (c > 255)          foreach (var b in encoding.GetBytes (new [] { c }))            buffer.Add (b);        else          buffer.Add ((byte) c);
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,CreateRequestUrl,The following statement contains a magic number: if (colon == -1)          host = String.Format ("{0}:{1}"' host' scheme == "http" || scheme == "ws" ? 80 : 443);
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,CreateRequestUrl,The following statement contains a magic number: if (colon == -1)          host = String.Format ("{0}:{1}"' host' scheme == "http" || scheme == "ws" ? 80 : 443);
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecodeInternally,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;            int xchar;          for (int i = offset; i < end; i++) {            if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {              if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes [i] == '+')              output.Append (' ');            else              output.Append ((char) bytes [i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecodeInternally,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;            int xchar;          for (int i = offset; i < end; i++) {            if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {              if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes [i] == '+')              output.Append (' ');            else              output.Append ((char) bytes [i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecodeInternally,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;            int xchar;          for (int i = offset; i < end; i++) {            if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {              if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes [i] == '+')              output.Append (' ');            else              output.Append ((char) bytes [i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecodeInternally,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;            int xchar;          for (int i = offset; i < end; i++) {            if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {              if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes [i] == '+')              output.Append (' ');            else              output.Append ((char) bytes [i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecodeInternally,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;            int xchar;          for (int i = offset; i < end; i++) {            if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {              if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes [i] == '+')              output.Append (' ');            else              output.Append ((char) bytes [i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecodeInternally,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;            int xchar;          for (int i = offset; i < end; i++) {            if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {              if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes [i] == '+')              output.Append (' ');            else              output.Append ((char) bytes [i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecodeInternally,The following statement contains a magic number: using (var acc = new MemoryStream ()) {          var end = count + offset;            int xchar;          for (int i = offset; i < end; i++) {            if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {              if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {                if (acc.Length > 0) {                  output.Append (getChars (acc' encoding));                  acc.SetLength (0);                }                  xchar = getChar (bytes' i + 2' 4);                if (xchar != -1) {                  output.Append ((char) xchar);                  i += 5;                    continue;                }              }              else if ((xchar = getChar (bytes' i + 1' 2)) != -1) {                acc.WriteByte ((byte) xchar);                i += 2;                  continue;              }            }              if (acc.Length > 0) {              output.Append (getChars (acc' encoding));              acc.SetLength (0);            }              if (bytes [i] == '+')              output.Append (' ');            else              output.Append ((char) bytes [i]);          }            if (acc.Length > 0)            output.Append (getChars (acc' encoding));        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecodeToBytesInternally,The following statement contains a magic number: using (var res = new MemoryStream ()) {          var end = offset + count;          for (int i = offset; i < end; i++) {            var c = (char) bytes [i];            if (c == '+') {              c = ' ';            }            else if (c == '%' && i < end - 2) {              var xchar = getChar (bytes' i + 1' 2);              if (xchar != -1) {                c = (char) xchar;                i += 2;              }            }              res.WriteByte ((byte) c);          }            res.Close ();          return res.ToArray ();        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecodeToBytesInternally,The following statement contains a magic number: using (var res = new MemoryStream ()) {          var end = offset + count;          for (int i = offset; i < end; i++) {            var c = (char) bytes [i];            if (c == '+') {              c = ' ';            }            else if (c == '%' && i < end - 2) {              var xchar = getChar (bytes' i + 1' 2);              if (xchar != -1) {                c = (char) xchar;                i += 2;              }            }              res.WriteByte ((byte) c);          }            res.Close ();          return res.ToArray ();        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecodeToBytesInternally,The following statement contains a magic number: using (var res = new MemoryStream ()) {          var end = offset + count;          for (int i = offset; i < end; i++) {            var c = (char) bytes [i];            if (c == '+') {              c = ' ';            }            else if (c == '%' && i < end - 2) {              var xchar = getChar (bytes' i + 1' 2);              if (xchar != -1) {                c = (char) xchar;                i += 2;              }            }              res.WriteByte ((byte) c);          }            res.Close ();          return res.ToArray ();        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = Entities [key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = Entities [key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = Entities [key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = Entities [key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = Entities [key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = Entities [key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = Entities [key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = Entities [key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: foreach (var c in s) {          if (state == 0) {            if (c == '&') {              entity.Append (c);              state = 1;            }            else {              output.Append (c);            }              continue;          }            if (c == '&') {            state = 1;            if (haveTrailingDigits) {              entity.Append (number.ToString (CultureInfo.InvariantCulture));              haveTrailingDigits = false;            }              output.Append (entity.ToString ());            entity.Length = 0;            entity.Append ('&');              continue;          }            if (state == 1) {            if (c == ';') {              state = 0;              output.Append (entity.ToString ());              output.Append (c);              entity.Length = 0;            }            else {              number = 0;              if (c != '#')                state = 2;              else                state = 3;                entity.Append (c);            }          }          else if (state == 2) {            entity.Append (c);            if (c == ';') {              var key = entity.ToString ();              if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))                key = Entities [key.Substring (1' key.Length - 2)].ToString ();                output.Append (key);              state = 0;              entity.Length = 0;            }          }          else if (state == 3) {            if (c == ';') {              if (number > 65535) {                output.Append ("&#");                output.Append (number.ToString (CultureInfo.InvariantCulture));                output.Append (";");              }              else {                output.Append ((char) number);              }                state = 0;              entity.Length = 0;              haveTrailingDigits = false;            }            else if (Char.IsDigit (c)) {              number = number * 10 + ((int) c - '0');              haveTrailingDigits = true;            }            else {              state = 2;              if (haveTrailingDigits) {                entity.Append (number.ToString (CultureInfo.InvariantCulture));                haveTrailingDigits = false;              }                entity.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: foreach (var c in s) {          if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159) {            needEncode = true;            break;          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: foreach (var c in s) {          if (c == '&') {            output.Append ("&amp;");          }          else if (c == '"') {            output.Append ("&quot;");          }          else if (c == '<') {            output.Append ("&lt;");          }          else if (c == '>') {            output.Append ("&gt;");          }          else {            // MS starts encoding with &# from 160 and stops at 255.            // We don't do that. One reason is the 65308/65310 unicode            // characters that look like '<' and '>'.            if (c > 159) {              output.Append ("&#");              output.Append (((int) c).ToString (CultureInfo.InvariantCulture));              output.Append (";");            }            else {              output.Append (c);            }          }        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {          var c = s [i];          if (c == '%' && i + 2 < len && s [i + 1] != '%') {            if (s [i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes (buff' (char) xchar' encoding);                i += 5;              }              else {                writeCharBytes (buff' '%'' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes (buff' (char) xchar' encoding);              i += 2;            }            else {              writeCharBytes (buff' '%'' encoding);            }              continue;          }            if (c == '+')            writeCharBytes (buff' ' '' encoding);          else            writeCharBytes (buff' c' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {          var c = s [i];          if (c == '%' && i + 2 < len && s [i + 1] != '%') {            if (s [i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes (buff' (char) xchar' encoding);                i += 5;              }              else {                writeCharBytes (buff' '%'' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes (buff' (char) xchar' encoding);              i += 2;            }            else {              writeCharBytes (buff' '%'' encoding);            }              continue;          }            if (c == '+')            writeCharBytes (buff' ' '' encoding);          else            writeCharBytes (buff' c' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {          var c = s [i];          if (c == '%' && i + 2 < len && s [i + 1] != '%') {            if (s [i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes (buff' (char) xchar' encoding);                i += 5;              }              else {                writeCharBytes (buff' '%'' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes (buff' (char) xchar' encoding);              i += 2;            }            else {              writeCharBytes (buff' '%'' encoding);            }              continue;          }            if (c == '+')            writeCharBytes (buff' ' '' encoding);          else            writeCharBytes (buff' c' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {          var c = s [i];          if (c == '%' && i + 2 < len && s [i + 1] != '%') {            if (s [i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes (buff' (char) xchar' encoding);                i += 5;              }              else {                writeCharBytes (buff' '%'' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes (buff' (char) xchar' encoding);              i += 2;            }            else {              writeCharBytes (buff' '%'' encoding);            }              continue;          }            if (c == '+')            writeCharBytes (buff' ' '' encoding);          else            writeCharBytes (buff' c' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {          var c = s [i];          if (c == '%' && i + 2 < len && s [i + 1] != '%') {            if (s [i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes (buff' (char) xchar' encoding);                i += 5;              }              else {                writeCharBytes (buff' '%'' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes (buff' (char) xchar' encoding);              i += 2;            }            else {              writeCharBytes (buff' '%'' encoding);            }              continue;          }            if (c == '+')            writeCharBytes (buff' ' '' encoding);          else            writeCharBytes (buff' c' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {          var c = s [i];          if (c == '%' && i + 2 < len && s [i + 1] != '%') {            if (s [i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes (buff' (char) xchar' encoding);                i += 5;              }              else {                writeCharBytes (buff' '%'' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes (buff' (char) xchar' encoding);              i += 2;            }            else {              writeCharBytes (buff' '%'' encoding);            }              continue;          }            if (c == '+')            writeCharBytes (buff' ' '' encoding);          else            writeCharBytes (buff' c' encoding);        }
Magic Number,WebSocketSharp.Net,HttpUtility,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {          var c = s [i];          if (c == '%' && i + 2 < len && s [i + 1] != '%') {            if (s [i + 1] == 'u' && i + 5 < len) {              // Unicode hex sequence.              xchar = getChar (s' i + 2' 4);              if (xchar != -1) {                writeCharBytes (buff' (char) xchar' encoding);                i += 5;              }              else {                writeCharBytes (buff' '%'' encoding);              }            }            else if ((xchar = getChar (s' i + 1' 2)) != -1) {              writeCharBytes (buff' (char) xchar' encoding);              i += 2;            }            else {              writeCharBytes (buff' '%'' encoding);            }              continue;          }            if (c == '+')            writeCharBytes (buff' ' '' encoding);          else            writeCharBytes (buff' c' encoding);        }
Magic Number,WebSocketSharp.Net,ListenerAsyncResult,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ListenerAsyncResult.cs,Complete,The following statement contains a magic number: _exception = InGet && (exception is ObjectDisposedException)                     ? new HttpListenerException (500' "Listener closed.")                     : exception;
Magic Number,WebSocketSharp.Net,ListenerPrefix,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ListenerPrefix.cs,parse,The following statement contains a magic number: var defaultPort = uriPrefix.StartsWith ("https://") ? 443 : 80;
Magic Number,WebSocketSharp.Net,ListenerPrefix,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ListenerPrefix.cs,parse,The following statement contains a magic number: var defaultPort = uriPrefix.StartsWith ("https://") ? 443 : 80;
Magic Number,WebSocketSharp.Net,ListenerPrefix,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ListenerPrefix.cs,parse,The following statement contains a magic number: if (defaultPort == 443)          _secure = true;
Magic Number,WebSocketSharp.Net,ListenerPrefix,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ListenerPrefix.cs,parse,The following statement contains a magic number: var startHost = uriPrefix.IndexOf (':') + 3;
Magic Number,WebSocketSharp.Net,ListenerPrefix,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ListenerPrefix.cs,CheckUriPrefix,The following statement contains a magic number: var startHost = uriPrefix.IndexOf (':') + 3;
Magic Number,WebSocketSharp.Net,ListenerPrefix,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ListenerPrefix.cs,CheckUriPrefix,The following statement contains a magic number: if (colon > 0) {          root = uriPrefix.IndexOf ('/'' colon' length - colon);          if (root == -1)            throw new ArgumentException ("No path specified.");            int port;          if (!Int32.TryParse (uriPrefix.Substring (colon + 1' root - colon - 1)' out port) ||              (port <= 0 || port >= 65536))            throw new ArgumentException ("Invalid port.");        }        else {          root = uriPrefix.IndexOf ('/'' startHost' length - startHost);          if (root == -1)            throw new ArgumentException ("No path specified.");        }
Magic Number,WebSocketSharp.Net,ResponseStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ResponseStream.cs,EndWrite,The following statement contains a magic number: Action<IAsyncResult> endWrite = ares => {          _stream.EndWrite (ares);          if (_response.SendChunked)            _stream.Write (_crlf' 0' 2);        };
Magic Number,WebSocketSharp.Net,ResponseStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ResponseStream.cs,Write,The following statement contains a magic number: if (headers != null) {          // After the possible preamble for the encoding.          using (headers) {            var start = headers.Position;            headers.Position = headers.Length;            if (chunked) {              bytes = getChunkSizeBytes (count' false);              headers.Write (bytes' 0' bytes.Length);            }              var newCount = Math.Min (count' 16384 - (int) headers.Position + (int) start);            headers.Write (buffer' offset' newCount);            count -= newCount;            offset += newCount;            WriteInternally (headers.GetBuffer ()' (int) start' (int) (headers.Length - start));          }        }        else if (chunked) {          bytes = getChunkSizeBytes (count' false);          WriteInternally (bytes' 0' bytes.Length);        }
Magic Number,WebSocketSharp.Net,ResponseStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ResponseStream.cs,Write,The following statement contains a magic number: if (chunked)          WriteInternally (_crlf' 0' 2);
Magic Number,WebSocketSharp.Net,WebHeaderCollection,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\WebHeaderCollection.cs,checkValue,The following statement contains a magic number: if (value.Length > 65535)          throw new ArgumentOutOfRangeException ("value"' "Greater than 65'535 characters.");
Magic Number,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkedRequestStream.cs,onRead,The following statement contains a magic number: try {          var nread = base.EndRead (asyncResult);          _decoder.Write (ares.Buffer' ares.Offset' nread);          nread = _decoder.Read (readState.Buffer' readState.Offset' readState.Count);          readState.Offset += nread;          readState.Count -= nread;          if (readState.Count == 0 || !_decoder.WantMore || nread == 0) {            _noMoreData = !_decoder.WantMore && nread == 0;            ares.Count = readState.InitialCount - readState.Count;            ares.Complete ();              return;          }            ares.Offset = 0;          ares.Count = Math.Min (_bufferSize' _decoder.ChunkLeft + 6);          base.BeginRead (ares.Buffer' ares.Offset' ares.Count' onRead' readState);        }        catch (Exception ex) {          _context.Connection.SendError (ex.Message' 400);          ares.Complete (ex);        }
Magic Number,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkedRequestStream.cs,onRead,The following statement contains a magic number: try {          var nread = base.EndRead (asyncResult);          _decoder.Write (ares.Buffer' ares.Offset' nread);          nread = _decoder.Read (readState.Buffer' readState.Offset' readState.Count);          readState.Offset += nread;          readState.Count -= nread;          if (readState.Count == 0 || !_decoder.WantMore || nread == 0) {            _noMoreData = !_decoder.WantMore && nread == 0;            ares.Count = readState.InitialCount - readState.Count;            ares.Complete ();              return;          }            ares.Offset = 0;          ares.Count = Math.Min (_bufferSize' _decoder.ChunkLeft + 6);          base.BeginRead (ares.Buffer' ares.Offset' ares.Count' onRead' readState);        }        catch (Exception ex) {          _context.Connection.SendError (ex.Message' 400);          ares.Complete (ex);        }
Magic Number,WebSocketSharp.Net,ChunkedRequestStream,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\ChunkedRequestStream.cs,EndRead,The following statement contains a magic number: if (ares.Error != null)          throw new HttpListenerException (400' "I/O operation aborted.");
Magic Number,WebSocketSharp.Net,AuthenticationChallenge,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationChallenge.cs,Parse,The following statement contains a magic number: var chal = value.Split (new[] { ' ' }' 2);
Magic Number,WebSocketSharp.Net,AuthenticationChallenge,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationChallenge.cs,Parse,The following statement contains a magic number: if (chal.Length != 2)          return null;
Magic Number,WebSocketSharp.Net,AuthenticationChallenge,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationChallenge.cs,ToDigestString,The following statement contains a magic number: var output = new StringBuilder (128);
Magic Number,WebSocketSharp.Net,AuthenticationResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationResponse.cs,hash,The following statement contains a magic number: var res = new StringBuilder (64);
Magic Number,WebSocketSharp.Net,AuthenticationResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationResponse.cs,Parse,The following statement contains a magic number: try {          var cred = value.Split (new[] { ' ' }' 2);          if (cred.Length != 2)            return null;            var schm = cred[0].ToLower ();          return schm == "basic"                 ? new AuthenticationResponse (                     AuthenticationSchemes.Basic' ParseBasicCredentials (cred[1]))                 : schm == "digest"                   ? new AuthenticationResponse (                       AuthenticationSchemes.Digest' ParseParameters (cred[1]))                   : null;        }        catch {        }
Magic Number,WebSocketSharp.Net,AuthenticationResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationResponse.cs,Parse,The following statement contains a magic number: try {          var cred = value.Split (new[] { ' ' }' 2);          if (cred.Length != 2)            return null;            var schm = cred[0].ToLower ();          return schm == "basic"                 ? new AuthenticationResponse (                     AuthenticationSchemes.Basic' ParseBasicCredentials (cred[1]))                 : schm == "digest"                   ? new AuthenticationResponse (                       AuthenticationSchemes.Digest' ParseParameters (cred[1]))                   : null;        }        catch {        }
Magic Number,WebSocketSharp.Net,AuthenticationResponse,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationResponse.cs,ToDigestString,The following statement contains a magic number: var output = new StringBuilder (256);
Magic Number,WebSocketSharp.Net,AuthenticationBase,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationBase.cs,CreateNonceValue,The following statement contains a magic number: var src = new byte[16];
Magic Number,WebSocketSharp.Net,AuthenticationBase,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\AuthenticationBase.cs,CreateNonceValue,The following statement contains a magic number: var res = new StringBuilder (32);
Magic Number,WebSocketSharp.Net.WebSockets,TcpListenerWebSocketContext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\WebSockets\TcpListenerWebSocketContext.cs,TcpListenerWebSocketContext,The following statement contains a magic number: _request = _stream.ReadHandshake<HandshakeRequest> (HandshakeRequest.Parse' 90000);
Magic Number,WebSocketSharp.Net.WebSockets,TcpListenerWebSocketContext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Net\WebSockets\TcpListenerWebSocketContext.cs,SendAuthChallenge,The following statement contains a magic number: _request = _stream.ReadHandshake<HandshakeRequest> (HandshakeRequest.Parse' 15000);
Missing Default,WebSocketSharp,Ext,C:\repos\fpanettieri_unity-socket.io\SocketIO\WebsocketSharp\Ext.cs,GetStatusDescription,The following switch statement is missing a default case: switch (code) {          case 100: return "Continue";          case 101: return "Switching Protocols";          case 102: return "Processing";          case 200: return "OK";          case 201: return "Created";          case 202: return "Accepted";          case 203: return "Non-Authoritative Information";          case 204: return "No Content";          case 205: return "Reset Content";          case 206: return "Partial Content";          case 207: return "Multi-Status";          case 300: return "Multiple Choices";          case 301: return "Moved Permanently";          case 302: return "Found";          case 303: return "See Other";          case 304: return "Not Modified";          case 305: return "Use Proxy";          case 307: return "Temporary Redirect";          case 400: return "Bad Request";          case 401: return "Unauthorized";          case 402: return "Payment Required";          case 403: return "Forbidden";          case 404: return "Not Found";          case 405: return "Method Not Allowed";          case 406: return "Not Acceptable";          case 407: return "Proxy Authentication Required";          case 408: return "Request Timeout";          case 409: return "Conflict";          case 410: return "Gone";          case 411: return "Length Required";          case 412: return "Precondition Failed";          case 413: return "Request Entity Too Large";          case 414: return "Request-Uri Too Long";          case 415: return "Unsupported Media Type";          case 416: return "Requested Range Not Satisfiable";          case 417: return "Expectation Failed";          case 422: return "Unprocessable Entity";          case 423: return "Locked";          case 424: return "Failed Dependency";          case 500: return "Internal Server Error";          case 501: return "Not Implemented";          case 502: return "Bad Gateway";          case 503: return "Service Unavailable";          case 504: return "Gateway Timeout";          case 505: return "Http Version Not Supported";          case 507: return "Insufficient Storage";        }
